/* Generated by Cython 0.27.3 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_27_3"
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__iscecore
#define __PYX_HAVE_API__iscecore
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string.h>
#include <string>
#include "isce/core/Ellipsoid.h"
#include "isce/core/Attitude.h"
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "isce/core/Constants.h"
#include "isce/core/Orbit.h"
#include "isce/core/Doppler.h"
#include "isce/core/Interpolator.h"
#include "isce/core/Peg.h"
#include "isce/core/Pegtrans.h"
#include "isce/core/Position.h"
#include "isce/core/LinAlg.h"
#include "isce/core/Poly1d.h"
#include "isce/core/Poly2d.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "pyEllipsoid.pyx",
  "pyAttitude.pyx",
  "stringsource",
  "pyDoppler.pyx",
  "pyInterpolator.pyx",
  "pyPeg.pyx",
  "pyPegtrans.pyx",
  "pyPosition.pyx",
  "pyLinAlg.pyx",
  "pyOrbit.pyx",
  "pyPoly1d.pyx",
  "pyPoly2d.pyx",
  "__init__.pxd",
  "iscecore.pyx",
  "type.pxd",
};
/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":743
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */

#line 743 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":744
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */

#line 744 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":745
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */

#line 745 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":746
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */

#line 746 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":750
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */

#line 750 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */

#line 751 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":752
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */

#line 752 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */

#line 753 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":757
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */

#line 757 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */

#line 758 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":767
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */

#line 767 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */

#line 768 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":769
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */

#line 769 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */

#line 771 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":772
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */

#line 772 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":773
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */

#line 773 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */

#line 775 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":776
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */

#line 776 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */

#line 778 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":779
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */

#line 779 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":780
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */

#line 780 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_8iscecore_pyEulerAngles;
struct __pyx_obj_8iscecore_pyQuaternion;
struct __pyx_obj_8iscecore_pyDoppler;
struct __pyx_obj_8iscecore_pyDopplerEuler;
struct __pyx_obj_8iscecore_pyDopplerQuaternion;
struct __pyx_obj_8iscecore_pyEllipsoid;
struct __pyx_obj_8iscecore_pyInterpolator;
struct __pyx_obj_8iscecore_pyPeg;
struct __pyx_obj_8iscecore_pyPegtrans;
struct __pyx_obj_8iscecore_pyPosition;
struct __pyx_obj_8iscecore_pyLinAlg;
struct __pyx_obj_8iscecore_pyOrbit;
struct __pyx_obj_8iscecore_pyPoly1d;
struct __pyx_obj_8iscecore_pyPoly2d;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":782
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */

#line 782 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */

#line 783 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":784
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */

#line 784 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":786
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */

#line 786 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "pyAttitude.pyx":13
 * from Attitude cimport EulerAngles, Quaternion
 * 
 * cdef class pyEulerAngles:             # <<<<<<<<<<<<<<
 *     cdef EulerAngles * c_eulerangles
 *     cdef bool __owner
 */

#line 13 "pyAttitude.pyx"
struct __pyx_obj_8iscecore_pyEulerAngles {

#line 13 "pyAttitude.pyx"
  PyObject_HEAD

#line 13 "pyAttitude.pyx"
  isce::core::EulerAngles *c_eulerangles;

#line 13 "pyAttitude.pyx"
  bool __pyx___owner;

#line 13 "pyAttitude.pyx"
};

#line 13 "pyAttitude.pyx"


/* "pyAttitude.pyx":69
 * 
 * 
 * cdef class pyQuaternion:             # <<<<<<<<<<<<<<
 *     cdef Quaternion * c_quaternion
 *     cdef bool __owner
 */

#line 69 "pyAttitude.pyx"
struct __pyx_obj_8iscecore_pyQuaternion {

#line 69 "pyAttitude.pyx"
  PyObject_HEAD

#line 69 "pyAttitude.pyx"
  isce::core::Quaternion *c_quaternion;

#line 69 "pyAttitude.pyx"
  bool __pyx___owner;

#line 69 "pyAttitude.pyx"
};

#line 69 "pyAttitude.pyx"


/* "pyDoppler.pyx":17
 * from Doppler cimport Doppler
 * 
 * cdef class pyDoppler:             # <<<<<<<<<<<<<<
 * 
 *     cdef Doppler * c_doppler
 */

#line 17 "pyDoppler.pyx"
struct __pyx_obj_8iscecore_pyDoppler {

#line 17 "pyDoppler.pyx"
  PyObject_HEAD

#line 17 "pyDoppler.pyx"
  isce::core::Doppler *c_doppler;

#line 17 "pyDoppler.pyx"
  int side;

#line 17 "pyDoppler.pyx"
  bool precession;

#line 17 "pyDoppler.pyx"
  std::string frame;

#line 17 "pyDoppler.pyx"
  bool __pyx___owner;

#line 17 "pyDoppler.pyx"
};

#line 17 "pyDoppler.pyx"


/* "pyDoppler.pyx":75
 * 
 * 
 * cdef class pyDopplerEuler(pyDoppler):             # <<<<<<<<<<<<<<
 *     cdef pyEulerAngles eulerangles
 * 
 */

#line 75 "pyDoppler.pyx"
struct __pyx_obj_8iscecore_pyDopplerEuler {

#line 75 "pyDoppler.pyx"
  struct __pyx_obj_8iscecore_pyDoppler __pyx_base;

#line 75 "pyDoppler.pyx"
  struct __pyx_obj_8iscecore_pyEulerAngles *eulerangles;

#line 75 "pyDoppler.pyx"
};

#line 75 "pyDoppler.pyx"


/* "pyDoppler.pyx":141
 * 
 * 
 * cdef class pyDopplerQuaternion(pyDoppler):             # <<<<<<<<<<<<<<
 *     cdef pyQuaternion quaternion
 * 
 */

#line 141 "pyDoppler.pyx"
struct __pyx_obj_8iscecore_pyDopplerQuaternion {

#line 141 "pyDoppler.pyx"
  struct __pyx_obj_8iscecore_pyDoppler __pyx_base;

#line 141 "pyDoppler.pyx"
  struct __pyx_obj_8iscecore_pyQuaternion *quaternion;

#line 141 "pyDoppler.pyx"
};

#line 141 "pyDoppler.pyx"


/* "pyEllipsoid.pyx":11
 * from Ellipsoid cimport Ellipsoid
 * 
 * cdef class pyEllipsoid:             # <<<<<<<<<<<<<<
 *     cdef Ellipsoid *c_ellipsoid
 *     cdef bool __owner
 */

#line 11 "pyEllipsoid.pyx"
struct __pyx_obj_8iscecore_pyEllipsoid {

#line 11 "pyEllipsoid.pyx"
  PyObject_HEAD

#line 11 "pyEllipsoid.pyx"
  isce::core::Ellipsoid *c_ellipsoid;

#line 11 "pyEllipsoid.pyx"
  bool __pyx___owner;

#line 11 "pyEllipsoid.pyx"
};

#line 11 "pyEllipsoid.pyx"


/* "pyInterpolator.pyx":12
 * from Interpolator cimport Interpolator
 * 
 * cdef class pyInterpolator:             # <<<<<<<<<<<<<<
 *     cdef Interpolator *c_interp
 *     cdef bool __owner
 */

#line 12 "pyInterpolator.pyx"
struct __pyx_obj_8iscecore_pyInterpolator {

#line 12 "pyInterpolator.pyx"
  PyObject_HEAD

#line 12 "pyInterpolator.pyx"
  isce::core::Interpolator *c_interp;

#line 12 "pyInterpolator.pyx"
  bool __pyx___owner;

#line 12 "pyInterpolator.pyx"
};

#line 12 "pyInterpolator.pyx"


/* "pyPeg.pyx":10
 * from Peg cimport Peg
 * 
 * cdef class pyPeg:             # <<<<<<<<<<<<<<
 *     cdef Peg *c_peg
 *     cdef bool __owner
 */

#line 10 "pyPeg.pyx"
struct __pyx_obj_8iscecore_pyPeg {

#line 10 "pyPeg.pyx"
  PyObject_HEAD

#line 10 "pyPeg.pyx"
  isce::core::Peg *c_peg;

#line 10 "pyPeg.pyx"
  bool __pyx___owner;

#line 10 "pyPeg.pyx"
};

#line 10 "pyPeg.pyx"


/* "pyPegtrans.pyx":11
 * from Pegtrans cimport Pegtrans, orbitConvMethod
 * 
 * cdef class pyPegtrans:             # <<<<<<<<<<<<<<
 *     cdef Pegtrans *c_pegtrans
 *     cdef bool __owner
 */

#line 11 "pyPegtrans.pyx"
struct __pyx_obj_8iscecore_pyPegtrans {

#line 11 "pyPegtrans.pyx"
  PyObject_HEAD

#line 11 "pyPegtrans.pyx"
  isce::core::Pegtrans *c_pegtrans;

#line 11 "pyPegtrans.pyx"
  bool __pyx___owner;

#line 11 "pyPegtrans.pyx"
};

#line 11 "pyPegtrans.pyx"


/* "pyPosition.pyx":11
 * from Position cimport Position
 * 
 * cdef class pyPosition:             # <<<<<<<<<<<<<<
 *     cdef Position *c_position
 *     cdef bool __owner
 */

#line 11 "pyPosition.pyx"
struct __pyx_obj_8iscecore_pyPosition {

#line 11 "pyPosition.pyx"
  PyObject_HEAD

#line 11 "pyPosition.pyx"
  isce::core::Position *c_position;

#line 11 "pyPosition.pyx"
  bool __pyx___owner;

#line 11 "pyPosition.pyx"
};

#line 11 "pyPosition.pyx"


/* "pyLinAlg.pyx":11
 * from LinAlg cimport LinAlg
 * 
 * cdef class pyLinAlg:             # <<<<<<<<<<<<<<
 *     cdef LinAlg *c_linAlg
 *     cdef bool __owner
 */

#line 11 "pyLinAlg.pyx"
struct __pyx_obj_8iscecore_pyLinAlg {

#line 11 "pyLinAlg.pyx"
  PyObject_HEAD

#line 11 "pyLinAlg.pyx"
  isce::core::LinAlg *c_linAlg;

#line 11 "pyLinAlg.pyx"
  bool __pyx___owner;

#line 11 "pyLinAlg.pyx"
};

#line 11 "pyLinAlg.pyx"


/* "pyOrbit.pyx":11
 * from Orbit cimport Orbit, orbitInterpMethod
 * 
 * cdef class pyOrbit:             # <<<<<<<<<<<<<<
 *     cdef Orbit *c_orbit
 *     cdef bool __owner
 */

#line 11 "pyOrbit.pyx"
struct __pyx_obj_8iscecore_pyOrbit {

#line 11 "pyOrbit.pyx"
  PyObject_HEAD

#line 11 "pyOrbit.pyx"
  isce::core::Orbit *c_orbit;

#line 11 "pyOrbit.pyx"
  bool __pyx___owner;

#line 11 "pyOrbit.pyx"
};

#line 11 "pyOrbit.pyx"


/* "pyPoly1d.pyx":10
 * from Poly1d cimport Poly1d
 * 
 * cdef class pyPoly1d:             # <<<<<<<<<<<<<<
 *     cdef Poly1d *c_poly1d
 *     cdef bool __owner
 */

#line 10 "pyPoly1d.pyx"
struct __pyx_obj_8iscecore_pyPoly1d {

#line 10 "pyPoly1d.pyx"
  PyObject_HEAD

#line 10 "pyPoly1d.pyx"
  isce::core::Poly1d *c_poly1d;

#line 10 "pyPoly1d.pyx"
  bool __pyx___owner;

#line 10 "pyPoly1d.pyx"
};

#line 10 "pyPoly1d.pyx"


/* "pyPoly2d.pyx":10
 * from Poly2d cimport Poly2d
 * 
 * cdef class pyPoly2d:             # <<<<<<<<<<<<<<
 *     cdef Poly2d *c_poly2d
 *     cdef bool __owner
 */

#line 10 "pyPoly2d.pyx"
struct __pyx_obj_8iscecore_pyPoly2d {

#line 10 "pyPoly2d.pyx"
  PyObject_HEAD

#line 10 "pyPoly2d.pyx"
  isce::core::Poly2d *c_poly2d;

#line 10 "pyPoly2d.pyx"
  bool __pyx___owner;

#line 10 "pyPoly2d.pyx"
};

#line 10 "pyPoly2d.pyx"


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)
/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* GetNameInClass.proto */
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'Ellipsoid' */

/* Module declarations from 'Attitude' */

/* Module declarations from 'cython' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'Orbit' */

/* Module declarations from 'Doppler' */

/* Module declarations from 'Interpolator' */

/* Module declarations from 'Peg' */

/* Module declarations from 'Pegtrans' */

/* Module declarations from 'Position' */

/* Module declarations from 'LinAlg' */

/* Module declarations from 'Poly1d' */

/* Module declarations from 'Poly2d' */

/* Module declarations from 'iscecore' */
static PyTypeObject *__pyx_ptype_8iscecore_pyEulerAngles = 0;
static PyTypeObject *__pyx_ptype_8iscecore_pyQuaternion = 0;
static PyTypeObject *__pyx_ptype_8iscecore_pyDoppler = 0;
static PyTypeObject *__pyx_ptype_8iscecore_pyDopplerEuler = 0;
static PyTypeObject *__pyx_ptype_8iscecore_pyDopplerQuaternion = 0;
static PyTypeObject *__pyx_ptype_8iscecore_pyEllipsoid = 0;
static PyTypeObject *__pyx_ptype_8iscecore_pyInterpolator = 0;
static PyTypeObject *__pyx_ptype_8iscecore_pyPeg = 0;
static PyTypeObject *__pyx_ptype_8iscecore_pyPegtrans = 0;
static PyTypeObject *__pyx_ptype_8iscecore_pyPosition = 0;
static PyTypeObject *__pyx_ptype_8iscecore_pyLinAlg = 0;
static PyTypeObject *__pyx_ptype_8iscecore_pyOrbit = 0;
static PyTypeObject *__pyx_ptype_8iscecore_pyPoly1d = 0;
static PyTypeObject *__pyx_ptype_8iscecore_pyPoly2d = 0;
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
static std::vector<std::vector<double> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(PyObject *); /*proto*/
static std::vector<float>  __pyx_convert_vector_from_py_float(PyObject *); /*proto*/
static std::vector<std::vector<float> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_float_3e___(PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t = { "float64_t", NULL, sizeof(__pyx_t_5numpy_float64_t), { 0 }, 0, 'R', 0, 0 };
#define __Pyx_MODULE_NAME "iscecore"
extern int __pyx_module_is_main_iscecore;
int __pyx_module_is_main_iscecore = 0;

/* Implementation of 'iscecore' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_J[] = "J = ";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_h[] = "h";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_q[] = "q";
static const char __pyx_k__4[] = "";
static const char __pyx_k_e2[] = "e2";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_ov[] = ", ov = ";
static const char __pyx_k_Mat[] = "Mat = ";
static const char __pyx_k__47[] = ")";
static const char __pyx_k__59[] = "*";
static const char __pyx_k_elp[] = "elp";
static const char __pyx_k_hdg[] = "hdg";
static const char __pyx_k_lat[] = "lat";
static const char __pyx_k_lon[] = "lon";
static const char __pyx_k_mat[] = "mat";
static const char __pyx_k_orb[] = "orb";
static const char __pyx_k_peg[] = "peg";
static const char __pyx_k_pgt[] = "pgt";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_wvl[] = "wvl";
static const char __pyx_k_yaw[] = "yaw";
static const char __pyx_k_bind[] = "bind";
static const char __pyx_k_jddt[] = ", jddt = ";
static const char __pyx_k_jdot[] = ", jdot = ";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mean[] = "mean";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_norm[] = "norm";
static const char __pyx_k_ov_2[] = "ov";
static const char __pyx_k_poly[] = "poly";
static const char __pyx_k_roll[] = "roll";
static const char __pyx_k_side[] = "side";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_basis[] = "basis";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_epoch[] = "epoch";
static const char __pyx_k_frame[] = "frame";
static const char __pyx_k_hdg_2[] = ", hdg = ";
static const char __pyx_k_lat_2[] = "lat = ";
static const char __pyx_k_lon_2[] = ", lon = ";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_orbit[] = "orbit";
static const char __pyx_k_order[] = "order";
static const char __pyx_k_pitch[] = "pitch";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_coeffs[] = "coeffs";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_jddt_2[] = "jddt";
static const char __pyx_k_jdot_2[] = "jdot";
static const char __pyx_k_matinv[] = ", matinv = ";
static const char __pyx_k_normal[] = "normal";
static const char __pyx_k_radcur[] = ", radcur = ";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_UTCtime[] = "UTCtime";
static const char __pyx_k_new_elp[] = "new_elp";
static const char __pyx_k_new_orb[] = "new_orb";
static const char __pyx_k_new_peg[] = "new_peg";
static const char __pyx_k_new_pgt[] = "new_pgt";
static const char __pyx_k_new_pos[] = "new_pos";
static const char __pyx_k_pyEllps[] = "pyEllps";
static const char __pyx_k_centroid[] = "centroid";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_inertial[] = "inertial";
static const char __pyx_k_iscecore[] = "iscecore";
static const char __pyx_k_matinv_2[] = "matinv";
static const char __pyx_k_max_iter[] = "max_iter";
static const char __pyx_k_nVectors[] = "nVectors";
static const char __pyx_k_new_poly[] = "new_poly";
static const char __pyx_k_position[] = "position";
static const char __pyx_k_radcur_2[] = "radcur";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_velocity[] = "velocity";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_ellipsoid[] = "ellipsoid";
static const char __pyx_k_outDerivs[] = "outDerivs";
static const char __pyx_k_printPoly[] = "printPoly";
static const char __pyx_k_pyPeg_pyx[] = "pyPeg.pyx";
static const char __pyx_k_rangeMean[] = "rangeMean";
static const char __pyx_k_rangeNorm[] = "rangeNorm";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_precession[] = "precession";
static const char __pyx_k_printOrbit[] = "printOrbit";
static const char __pyx_k_quaternion[] = "quaternion";
static const char __pyx_k_rangeOrder[] = "rangeOrder";
static const char __pyx_k_slantRange[] = "slantRange";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_azimuthMean[] = "azimuthMean";
static const char __pyx_k_azimuthNorm[] = "azimuthNorm";
static const char __pyx_k_eulerangles[] = "eulerangles";
static const char __pyx_k_pyOrbit_pyx[] = "pyOrbit.pyx";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_azimuthOrder[] = "azimuthOrder";
static const char __pyx_k_pyPoly1d_pyx[] = "pyPoly1d.pyx";
static const char __pyx_k_pyPoly2d_pyx[] = "pyPoly2d.pyx";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_pyPegtrans_pyx[] = "pyPegtrans.pyx";
static const char __pyx_k_pyPosition_pyx[] = "pyPosition.pyx";
static const char __pyx_k_pyEllipsoid_pyx[] = "pyEllipsoid.pyx";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_yaw_orientation[] = "yaw_orientation";
static const char __pyx_k_Cannot_set_satllh[] = "Cannot set satllh";
static const char __pyx_k_Cannot_set_satvel[] = "Cannot set satvel";
static const char __pyx_k_Cannot_set_satxyz[] = "Cannot set satxyz";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_Error_Invalid_input_size[] = "Error: Invalid input size.";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_and_the_0th_and_1st_element_of[] = "       and the 0th and 1st element of the tuple will contain the modified return value.";
static const char __pyx_k_Error_Python_does_not_allow_for[] = "Error: Python does not allow for pass-by-reference, therefore the function call is modified.";
static const char __pyx_k_Please_pass_the_pair_of_referen[] = "       Please pass the pair of reference arguments (sixth and seventh position) as a tuple,";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_Error_Invalid_input_size_expecte[] = "Error: Invalid input size (expected list of length ";
static const char __pyx_k_Error_Object_passed_in_is_incomp[] = "Error: Object passed in is incompatible with object of type pyPegtrans.";
static const char __pyx_k_Error_Object_passed_in_to_copy_i[] = "Error: Object passed in to copy is incompatible with object of type pyEllipsoid.";
static const char __pyx_k_Error_Python_cannot_pass_primiti[] = "Error: Python cannot pass primitives by reference.";
static const char __pyx_k_Error_Unknown_orbit_conversion_m[] = "Error: Unknown orbit conversion method.";
static const char __pyx_k_Error_Unknown_orbit_interpolatio[] = "Error: Unknown orbit interpolation method";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_To_call_this_function_please_pas[] = "To call this function, please pass the function an empty tuple as the fourth";
static const char __pyx_k_angle_the_second_element_will_be[] = "angle, the second element will be the look angle.";
static const char __pyx_k_argument_no_fifth_argument_The_f[] = "argument (no fifth argument). The first element of the list will be the azimuth";
static const char __pyx_k_as_the_first_and_only_element_in[] = "as the first (and only) element in the 1-tuple.";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_second_argument_slot_The_functio[] = "second argument slot. The function will store the resulting time value";
static const char __pyx_k_Error_Invalid_input_size_expecte_2[] = "Error: Invalid input size (expected 1D list of length ";
static const char __pyx_k_Error_Object_passed_in_to_copy_i_2[] = "Error: Object passed in to copy is incompatible with object of type pyPeg.";
static const char __pyx_k_Error_Object_passed_in_to_copy_i_3[] = "Error: Object passed in to copy is incompatible with object of type pyOrbit.";
static const char __pyx_k_Error_Object_passed_in_to_copy_i_4[] = "Error: Object passed in to copy is incompatible with object of type pyPoly1d.";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static const char __pyx_k_To_call_this_function_please_pas_2[] = "To call this function, please pass the function an empty 1-tuple in the";
static PyObject *__pyx_kp_u_Cannot_set_satllh;
static PyObject *__pyx_kp_u_Cannot_set_satvel;
static PyObject *__pyx_kp_u_Cannot_set_satxyz;
static PyObject *__pyx_kp_u_Error_Invalid_input_size;
static PyObject *__pyx_kp_u_Error_Invalid_input_size_expecte;
static PyObject *__pyx_kp_u_Error_Invalid_input_size_expecte_2;
static PyObject *__pyx_kp_u_Error_Object_passed_in_is_incomp;
static PyObject *__pyx_kp_u_Error_Object_passed_in_to_copy_i;
static PyObject *__pyx_kp_u_Error_Object_passed_in_to_copy_i_2;
static PyObject *__pyx_kp_u_Error_Object_passed_in_to_copy_i_3;
static PyObject *__pyx_kp_u_Error_Object_passed_in_to_copy_i_4;
static PyObject *__pyx_kp_u_Error_Python_cannot_pass_primiti;
static PyObject *__pyx_kp_u_Error_Python_does_not_allow_for;
static PyObject *__pyx_kp_u_Error_Unknown_orbit_conversion_m;
static PyObject *__pyx_kp_u_Error_Unknown_orbit_interpolatio;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_u_J;
static PyObject *__pyx_kp_u_Mat;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_kp_u_Please_pass_the_pair_of_referen;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_u_To_call_this_function_please_pas;
static PyObject *__pyx_kp_u_To_call_this_function_please_pas_2;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_UTCtime;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_b__4;
static PyObject *__pyx_kp_u__47;
static PyObject *__pyx_kp_u__59;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_kp_u_and_the_0th_and_1st_element_of;
static PyObject *__pyx_kp_u_angle_the_second_element_will_be;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_kp_u_argument_no_fifth_argument_The_f;
static PyObject *__pyx_kp_u_as_the_first_and_only_element_in;
static PyObject *__pyx_n_s_azimuthMean;
static PyObject *__pyx_n_s_azimuthNorm;
static PyObject *__pyx_n_s_azimuthOrder;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_basis;
static PyObject *__pyx_n_s_bind;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_centroid;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_coeffs;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_e;
static PyObject *__pyx_n_s_e2;
static PyObject *__pyx_n_s_ellipsoid;
static PyObject *__pyx_n_s_elp;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_epoch;
static PyObject *__pyx_n_s_eulerangles;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_frame;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_h;
static PyObject *__pyx_n_s_hdg;
static PyObject *__pyx_kp_u_hdg_2;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_u_inertial;
static PyObject *__pyx_n_s_iscecore;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_kp_u_jddt;
static PyObject *__pyx_n_s_jddt_2;
static PyObject *__pyx_kp_u_jdot;
static PyObject *__pyx_n_s_jdot_2;
static PyObject *__pyx_n_s_lat;
static PyObject *__pyx_kp_u_lat_2;
static PyObject *__pyx_n_s_lon;
static PyObject *__pyx_kp_u_lon_2;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mat;
static PyObject *__pyx_kp_u_matinv;
static PyObject *__pyx_n_s_matinv_2;
static PyObject *__pyx_n_s_max_iter;
static PyObject *__pyx_n_s_mean;
static PyObject *__pyx_n_s_nVectors;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_new_elp;
static PyObject *__pyx_n_s_new_orb;
static PyObject *__pyx_n_s_new_peg;
static PyObject *__pyx_n_s_new_pgt;
static PyObject *__pyx_n_s_new_poly;
static PyObject *__pyx_n_s_new_pos;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_norm;
static PyObject *__pyx_n_u_normal;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_orb;
static PyObject *__pyx_n_s_orbit;
static PyObject *__pyx_n_s_order;
static PyObject *__pyx_n_s_outDerivs;
static PyObject *__pyx_kp_u_ov;
static PyObject *__pyx_n_s_ov_2;
static PyObject *__pyx_n_s_peg;
static PyObject *__pyx_n_s_pgt;
static PyObject *__pyx_n_s_pitch;
static PyObject *__pyx_n_s_poly;
static PyObject *__pyx_n_s_pos;
static PyObject *__pyx_n_s_position;
static PyObject *__pyx_n_s_precession;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_printOrbit;
static PyObject *__pyx_n_s_printPoly;
static PyObject *__pyx_kp_s_pyEllipsoid_pyx;
static PyObject *__pyx_n_s_pyEllps;
static PyObject *__pyx_kp_s_pyOrbit_pyx;
static PyObject *__pyx_kp_s_pyPeg_pyx;
static PyObject *__pyx_kp_s_pyPegtrans_pyx;
static PyObject *__pyx_kp_s_pyPoly1d_pyx;
static PyObject *__pyx_kp_s_pyPoly2d_pyx;
static PyObject *__pyx_kp_s_pyPosition_pyx;
static PyObject *__pyx_n_s_q;
static PyObject *__pyx_n_s_quaternion;
static PyObject *__pyx_kp_u_radcur;
static PyObject *__pyx_n_s_radcur_2;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rangeMean;
static PyObject *__pyx_n_s_rangeNorm;
static PyObject *__pyx_n_s_rangeOrder;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_roll;
static PyObject *__pyx_kp_u_second_argument_slot_The_functio;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_side;
static PyObject *__pyx_n_s_slantRange;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_kp_u_utf_8;
static PyObject *__pyx_n_s_velocity;
static PyObject *__pyx_n_s_wvl;
static PyObject *__pyx_n_s_yaw;
static PyObject *__pyx_n_s_yaw_orientation;
static PyObject *__pyx_n_s_zeros;
static int __pyx_pf_8iscecore_13pyEulerAngles___cinit__(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self, double __pyx_v_yaw, double __pyx_v_pitch, double __pyx_v_roll, PyObject *__pyx_v_yaw_orientation); /* proto */
static void __pyx_pf_8iscecore_13pyEulerAngles_2__dealloc__(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_13pyEulerAngles_4ypr(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_13pyEulerAngles_6rotmat(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self, PyObject *__pyx_v_sequence); /* proto */
static PyObject *__pyx_pf_8iscecore_13pyEulerAngles_8quaternion(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_13pyEulerAngles_3yaw___get__(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_13pyEulerAngles_3yaw_2__set__(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8iscecore_13pyEulerAngles_5pitch___get__(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_13pyEulerAngles_5pitch_2__set__(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8iscecore_13pyEulerAngles_4roll___get__(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_13pyEulerAngles_4roll_2__set__(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8iscecore_13pyEulerAngles_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_13pyEulerAngles_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8iscecore_12pyQuaternion___cinit__(struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_self, PyObject *__pyx_v_q); /* proto */
static void __pyx_pf_8iscecore_12pyQuaternion_2__dealloc__(struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_12pyQuaternion_4ypr(struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_12pyQuaternion_6factoredYPR(struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_self, PyObject *__pyx_v_position, PyObject *__pyx_v_velocity, struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_pyEllps); /* proto */
static PyObject *__pyx_pf_8iscecore_12pyQuaternion_8rotmat(struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_12pyQuaternion_4qvec___get__(struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_12pyQuaternion_4qvec_2__set__(struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_self, PyObject *__pyx_v_vec); /* proto */
static PyObject *__pyx_pf_8iscecore_12pyQuaternion_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_12pyQuaternion_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8iscecore_9pyDoppler___cinit__(struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self); /* proto */
static void __pyx_pf_8iscecore_9pyDoppler_2__dealloc__(struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_9pyDoppler_4centroid(struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self, double __pyx_v_slantRange, double __pyx_v_wvl, int __pyx_v_max_iter); /* proto */
static PyObject *__pyx_pf_8iscecore_9pyDoppler_6centroidProfile(struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self, PyArrayObject *__pyx_v_slantRange, double __pyx_v_wvl, int __pyx_v_max_iter); /* proto */
static PyObject *__pyx_pf_8iscecore_9pyDoppler_6satxyz___get__(struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_9pyDoppler_6satxyz_2__set__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8iscecore_9pyDoppler_6satvel___get__(struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_9pyDoppler_6satvel_2__set__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8iscecore_9pyDoppler_6satllh___get__(struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_9pyDoppler_6satllh_2__set__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8iscecore_9pyDoppler_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_9pyDoppler_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8iscecore_14pyDopplerEuler___cinit__(struct __pyx_obj_8iscecore_pyDopplerEuler *__pyx_v_self, struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_orbit, struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_eulerangles, struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_ellipsoid, double __pyx_v_epoch, int __pyx_v_side, bool __pyx_v_precession, PyObject *__pyx_v_frame); /* proto */
static PyObject *__pyx_pf_8iscecore_14pyDopplerEuler_2derivs(struct __pyx_obj_8iscecore_pyDopplerEuler *__pyx_v_self, PyArrayObject *__pyx_v_slantRange, double __pyx_v_wvl, int __pyx_v_max_iter); /* proto */
static PyObject *__pyx_pf_8iscecore_14pyDopplerEuler_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyDopplerEuler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_14pyDopplerEuler_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyDopplerEuler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8iscecore_19pyDopplerQuaternion___cinit__(struct __pyx_obj_8iscecore_pyDopplerQuaternion *__pyx_v_self, struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_orbit, struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_quaternion, struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_ellipsoid, double __pyx_v_epoch); /* proto */
static PyObject *__pyx_pf_8iscecore_19pyDopplerQuaternion_2derivs(struct __pyx_obj_8iscecore_pyDopplerQuaternion *__pyx_v_self, PyArrayObject *__pyx_v_slantRange, double __pyx_v_wvl, std::string __pyx_v_frame, int __pyx_v_max_iter, int __pyx_v_side, bool __pyx_v_precession, PyArrayObject *__pyx_v_outDerivs); /* proto */
static PyObject *__pyx_pf_8iscecore_19pyDopplerQuaternion_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyDopplerQuaternion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_19pyDopplerQuaternion_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyDopplerQuaternion *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8iscecore_11pyEllipsoid___cinit__(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_e2); /* proto */
static void __pyx_pf_8iscecore_11pyEllipsoid_2__dealloc__(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_4bind(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_elp); /* proto */
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_1a___get__(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_11pyEllipsoid_1a_2__set__(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, double __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_2e2___get__(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_11pyEllipsoid_2e2_2__set__(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, double __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_6copyFrom(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, PyObject *__pyx_v_elp); /* proto */
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_8rEast(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, double __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_10rNorth(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, double __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_12rDir(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, double __pyx_v_a, double __pyx_v_b); /* proto */
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_14latLonToXyz(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_16xyzToLatLon(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_18getAngs(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e); /* proto */
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_20getTCN_TCvec(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_22TCNbasis(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e); /* proto */
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8iscecore_14pyInterpolator___cinit__(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self); /* proto */
static void __pyx_pf_8iscecore_14pyInterpolator_2__dealloc__(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_4bilinear(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self, double __pyx_v_a, double __pyx_v_b, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_6bicubic(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self, double __pyx_v_a, double __pyx_v_b, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_8sinc_coef(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self, double __pyx_v_a, double __pyx_v_b, int __pyx_v_c, double __pyx_v_d, int __pyx_v_e, PyObject *__pyx_v_f, PyObject *__pyx_v_g, PyObject *__pyx_v_h); /* proto */
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_10sinc_eval(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, int __pyx_v_c, int __pyx_v_d, int __pyx_v_e, double __pyx_v_f, int __pyx_v_g); /* proto */
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_12sinc_eval_2d(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, int __pyx_v_c, int __pyx_v_d, int __pyx_v_e, int __pyx_v_f, double __pyx_v_g, double __pyx_v_h, int __pyx_v_i, int __pyx_v_j); /* proto */
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_14interp_2d_spline(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self, int __pyx_v_a, int __pyx_v_b, int __pyx_v_c, PyObject *__pyx_v_d, double __pyx_v_e, double __pyx_v_f); /* proto */
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_16quadInterpolate(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, double __pyx_v_c); /* proto */
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_18akima(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self, int __pyx_v_a, int __pyx_v_b, PyObject *__pyx_v_c, double __pyx_v_d, double __pyx_v_e); /* proto */
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8iscecore_5pyPeg___cinit__(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self, PyObject *__pyx_v_lat, PyObject *__pyx_v_lon, PyObject *__pyx_v_hdg); /* proto */
static void __pyx_pf_8iscecore_5pyPeg_2__dealloc__(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_5pyPeg_4bind(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_peg); /* proto */
static PyObject *__pyx_pf_8iscecore_5pyPeg_3lat___get__(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_5pyPeg_3lat_2__set__(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self, double __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_5pyPeg_3lon___get__(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_5pyPeg_3lon_2__set__(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self, double __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_5pyPeg_3hdg___get__(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_5pyPeg_3hdg_2__set__(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self, double __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_5pyPeg_6dPrint(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_5pyPeg_8copy(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self, PyObject *__pyx_v_pg); /* proto */
static PyObject *__pyx_pf_8iscecore_5pyPeg_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_5pyPeg_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8iscecore_10pyPegtrans___cinit__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self); /* proto */
static void __pyx_pf_8iscecore_10pyPegtrans_2__dealloc__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_4bind(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_pgt); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_3mat___get__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_10pyPegtrans_3mat_2__set__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, PyObject *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_6matinv___get__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_10pyPegtrans_6matinv_2__set__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, PyObject *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_2ov___get__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_10pyPegtrans_2ov_2__set__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, PyObject *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_6radcur___get__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_10pyPegtrans_6radcur_2__set__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, double __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_6dPrint(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_8copy(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, PyObject *__pyx_v_pt); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_10radarToXYZ(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_a, struct __pyx_obj_8iscecore_pyPeg *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_12convertSCHtoXYZ(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, int __pyx_v_c); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_14convertSCHdotToXYZdot(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, int __pyx_v_e); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_16SCHbasis(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8iscecore_10pyPosition___cinit__(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self); /* proto */
static void __pyx_pf_8iscecore_10pyPosition_2__dealloc__(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPosition_4bind(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_pos); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPosition_1j___get__(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_10pyPosition_1j_2__set__(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self, PyObject *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPosition_4jdot___get__(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_10pyPosition_4jdot_2__set__(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self, PyObject *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPosition_4jddt___get__(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_10pyPosition_4jddt_2__set__(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self, PyObject *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPosition_6dPrint(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPosition_8copy(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self, PyObject *__pyx_v_ps); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPosition_10lookVec(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self, double __pyx_v_a, double __pyx_v_b, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPosition_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_10pyPosition_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8iscecore_8pyLinAlg___cinit__(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self); /* proto */
static void __pyx_pf_8iscecore_8pyLinAlg_2__dealloc__(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_4cross(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_6dot(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_8linComb(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, double __pyx_v_a, PyObject *__pyx_v_b, double __pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_10matMat(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_12matVec(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_14norm(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, PyObject *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_16tranMat(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_18unitVec(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_20enuBasis(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, double __pyx_v_a, double __pyx_v_b, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8iscecore_7pyOrbit___cinit__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, PyObject *__pyx_v_basis, PyObject *__pyx_v_nVectors); /* proto */
static void __pyx_pf_8iscecore_7pyOrbit_2__dealloc__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_4bind(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_orb); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_5basis___get__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_7pyOrbit_5basis_2__set__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, int __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_8nVectors___get__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_7pyOrbit_8nVectors_2__set__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, int __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_7UTCtime___get__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_7pyOrbit_7UTCtime_2__set__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, PyObject *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_8position___get__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_7pyOrbit_8position_2__set__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, PyObject *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_8velocity___get__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_7pyOrbit_8velocity_2__set__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, PyObject *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_6copy(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, PyObject *__pyx_v_orb); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_8dPrint(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_10getPositionVelocity(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, double __pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_12getStateVector(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, int __pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_14setStateVector(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, int __pyx_v_a, double __pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_16addStateVector(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, double __pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_18interpolate(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, double __pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, int __pyx_v_d); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_20interpolateWGS84Orbit(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, double __pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_22interpolateLegendreOrbit(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, double __pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_24interpolateSCHOrbit(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, double __pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_26computeAcceleration(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, double __pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_28printOrbit(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_30loadFromHDR(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, PyObject *__pyx_v_a, int __pyx_v_b); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_32dumpToHDR(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, PyObject *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_34__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_7pyOrbit_36__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8iscecore_8pyPoly1d___cinit__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, PyObject *__pyx_v_order, PyObject *__pyx_v_mean, PyObject *__pyx_v_norm); /* proto */
static void __pyx_pf_8iscecore_8pyPoly1d_2__dealloc__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_4bind(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_poly); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_5order___get__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_8pyPoly1d_5order_2__set__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, int __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_4mean___get__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_8pyPoly1d_4mean_2__set__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, double __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_4norm___get__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_8pyPoly1d_4norm_2__set__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, double __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_6coeffs___get__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_8pyPoly1d_6coeffs_2__set__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, PyObject *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_6copy(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, PyObject *__pyx_v_poly); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_8dPrint(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_10setCoeff(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, int __pyx_v_a, double __pyx_v_b); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_12getCoeff(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, int __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_14eval(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, double __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_16printPoly(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8iscecore_8pyPoly2d___cinit__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, int __pyx_v_azimuthOrder, int __pyx_v_rangeOrder, double __pyx_v_azimuthMean, double __pyx_v_rangeMean, double __pyx_v_azimuthNorm, double __pyx_v_rangeNorm); /* proto */
static void __pyx_pf_8iscecore_8pyPoly2d_2__dealloc__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_4bind(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_poly); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_12azimuthOrder___get__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_8pyPoly2d_12azimuthOrder_2__set__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, int __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_10rangeOrder___get__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_8pyPoly2d_10rangeOrder_2__set__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, int __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_11azimuthMean___get__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_8pyPoly2d_11azimuthMean_2__set__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, double __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_9rangeMean___get__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_8pyPoly2d_9rangeMean_2__set__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, double __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_11azimuthNorm___get__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_8pyPoly2d_11azimuthNorm_2__set__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, double __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_9rangeNorm___get__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_8pyPoly2d_9rangeNorm_2__set__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, double __pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_6coeffs___get__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self); /* proto */
static int __pyx_pf_8iscecore_8pyPoly2d_6coeffs_2__set__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, PyObject *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_6dPrint(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_8setCoeff(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, int __pyx_v_a, int __pyx_v_b, double __pyx_v_c); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_10getCoeff(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, int __pyx_v_a, int __pyx_v_b); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_12eval(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, double __pyx_v_a, double __pyx_v_b); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_14printPoly(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_8iscecore_pyEulerAngles(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8iscecore_pyQuaternion(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8iscecore_pyDoppler(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8iscecore_pyDopplerEuler(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8iscecore_pyDopplerQuaternion(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8iscecore_pyEllipsoid(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8iscecore_pyInterpolator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8iscecore_pyPeg(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8iscecore_pyPegtrans(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8iscecore_pyPosition(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8iscecore_pyLinAlg(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8iscecore_pyOrbit(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8iscecore_pyPoly1d(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8iscecore_pyPoly2d(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_;
static PyObject *__pyx_float_1_;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_codeobj__72;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__76;
static PyObject *__pyx_codeobj__78;
static PyObject *__pyx_codeobj__80;
static PyObject *__pyx_codeobj__82;
static PyObject *__pyx_codeobj__84;

/* "pyAttitude.pyx":17
 *     cdef bool __owner
 * 
 *     def __cinit__(self, double yaw, double pitch, double roll, yaw_orientation='normal'):             # <<<<<<<<<<<<<<
 *         self.c_eulerangles = new EulerAngles(yaw, pitch, roll,
 *             yaw_orientation.encode('utf-8'))
 */

#line 17 "pyAttitude.pyx"


#line 17 "pyAttitude.pyx"
/* Python wrapper */

#line 17 "pyAttitude.pyx"
static int __pyx_pw_8iscecore_13pyEulerAngles_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 17 "pyAttitude.pyx"
static int __pyx_pw_8iscecore_13pyEulerAngles_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_yaw
#line 17 "pyAttitude.pyx"
;
  double __pyx_v_pitch
#line 17 "pyAttitude.pyx"
;
  double __pyx_v_roll
#line 17 "pyAttitude.pyx"
;
  PyObject *__pyx_v_yaw_orientation = 0
#line 17 "pyAttitude.pyx"
;

#line 17 "pyAttitude.pyx"
  int __pyx_r;

#line 17 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 17 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 17 "pyAttitude.pyx"
  {

#line 17 "pyAttitude.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_yaw,&__pyx_n_s_pitch,&__pyx_n_s_roll,&__pyx_n_s_yaw_orientation,0};

#line 17 "pyAttitude.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 17 "pyAttitude.pyx"
    values[3] = ((PyObject *)__pyx_n_u_normal);

#line 17 "pyAttitude.pyx"
    if (unlikely(__pyx_kwds)) {

#line 17 "pyAttitude.pyx"
      Py_ssize_t kw_args;

#line 17 "pyAttitude.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 17 "pyAttitude.pyx"
      switch (pos_args) {
        case  4: 
#line 17 "pyAttitude.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 17 "pyAttitude.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 17 "pyAttitude.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 17 "pyAttitude.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 17 "pyAttitude.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 17 "pyAttitude.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 17 "pyAttitude.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 17 "pyAttitude.pyx"
        CYTHON_FALLTHROUGH;

#line 17 "pyAttitude.pyx"
        case  0: break;
        default: 
#line 17 "pyAttitude.pyx"
goto __pyx_L5_argtuple_error;

#line 17 "pyAttitude.pyx"
      }

#line 17 "pyAttitude.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 17 "pyAttitude.pyx"
      switch (pos_args) {

#line 17 "pyAttitude.pyx"
        case  0:

#line 17 "pyAttitude.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_yaw)) != 0)) kw_args--;
        else 
#line 17 "pyAttitude.pyx"
goto __pyx_L5_argtuple_error;

#line 17 "pyAttitude.pyx"
        CYTHON_FALLTHROUGH;

#line 17 "pyAttitude.pyx"
        case  1:

#line 17 "pyAttitude.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pitch)) != 0)) kw_args--;

#line 17 "pyAttitude.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 1); 
#line 17 "pyAttitude.pyx"
__PYX_ERR(1, 17, __pyx_L3_error)

#line 17 "pyAttitude.pyx"
        }

#line 17 "pyAttitude.pyx"
        CYTHON_FALLTHROUGH;

#line 17 "pyAttitude.pyx"
        case  2:

#line 17 "pyAttitude.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_roll)) != 0)) kw_args--;

#line 17 "pyAttitude.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 2); 
#line 17 "pyAttitude.pyx"
__PYX_ERR(1, 17, __pyx_L3_error)

#line 17 "pyAttitude.pyx"
        }

#line 17 "pyAttitude.pyx"
        CYTHON_FALLTHROUGH;

#line 17 "pyAttitude.pyx"
        case  3:

#line 17 "pyAttitude.pyx"
        if (kw_args > 0) {

#line 17 "pyAttitude.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_yaw_orientation);

#line 17 "pyAttitude.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 17 "pyAttitude.pyx"
        }

#line 17 "pyAttitude.pyx"
      }

#line 17 "pyAttitude.pyx"
      if (unlikely(kw_args > 0)) {

#line 17 "pyAttitude.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 17, __pyx_L3_error)

#line 17 "pyAttitude.pyx"
      }

#line 17 "pyAttitude.pyx"
    } else {

#line 17 "pyAttitude.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: 
#line 17 "pyAttitude.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 17 "pyAttitude.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 17 "pyAttitude.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 17 "pyAttitude.pyx"
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 17 "pyAttitude.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 17 "pyAttitude.pyx"
        break;
        default: 
#line 17 "pyAttitude.pyx"
goto __pyx_L5_argtuple_error;

#line 17 "pyAttitude.pyx"
      }

#line 17 "pyAttitude.pyx"
    }

#line 17 "pyAttitude.pyx"
    __pyx_v_yaw = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_yaw == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 17, __pyx_L3_error)

#line 17 "pyAttitude.pyx"
    __pyx_v_pitch = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_pitch == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 17, __pyx_L3_error)

#line 17 "pyAttitude.pyx"
    __pyx_v_roll = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_roll == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 17, __pyx_L3_error)

#line 17 "pyAttitude.pyx"
    __pyx_v_yaw_orientation = values[3];

#line 17 "pyAttitude.pyx"
  }

#line 17 "pyAttitude.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 17 "pyAttitude.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 17 "pyAttitude.pyx"
__PYX_ERR(1, 17, __pyx_L3_error)

#line 17 "pyAttitude.pyx"
  __pyx_L3_error:;

#line 17 "pyAttitude.pyx"
  __Pyx_AddTraceback("iscecore.pyEulerAngles.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 17 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 17 "pyAttitude.pyx"
  return -1;

#line 17 "pyAttitude.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 17 "pyAttitude.pyx"
__pyx_pf_8iscecore_13pyEulerAngles___cinit__(((struct __pyx_obj_8iscecore_pyEulerAngles *)__pyx_v_self), __pyx_v_yaw, __pyx_v_pitch, __pyx_v_roll, __pyx_v_yaw_orientation);

#line 17 "pyAttitude.pyx"


#line 17 "pyAttitude.pyx"
  /* function exit code */

#line 17 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 17 "pyAttitude.pyx"
  return __pyx_r;

#line 17 "pyAttitude.pyx"
}

#line 17 "pyAttitude.pyx"


#line 17 "pyAttitude.pyx"
static int __pyx_pf_8iscecore_13pyEulerAngles___cinit__(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self, double __pyx_v_yaw, double __pyx_v_pitch, double __pyx_v_roll, PyObject *__pyx_v_yaw_orientation) {

#line 17 "pyAttitude.pyx"
  int __pyx_r;

#line 17 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 17 "pyAttitude.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 17 "pyAttitude.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 17 "pyAttitude.pyx"
  std::string __pyx_t_3;

#line 17 "pyAttitude.pyx"
  isce::core::EulerAngles *__pyx_t_4;

#line 17 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyAttitude.pyx":19
 *     def __cinit__(self, double yaw, double pitch, double roll, yaw_orientation='normal'):
 *         self.c_eulerangles = new EulerAngles(yaw, pitch, roll,
 *             yaw_orientation.encode('utf-8'))             # <<<<<<<<<<<<<<
 *         self.__owner = True
 * 
 */

#line 19 "pyAttitude.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_yaw_orientation, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 19, __pyx_L1_error)

#line 19 "pyAttitude.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 19 "pyAttitude.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 19, __pyx_L1_error)

#line 19 "pyAttitude.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 19 "pyAttitude.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 19 "pyAttitude.pyx"
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 19, __pyx_L1_error)

#line 19 "pyAttitude.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyAttitude.pyx":18
 * 
 *     def __cinit__(self, double yaw, double pitch, double roll, yaw_orientation='normal'):
 *         self.c_eulerangles = new EulerAngles(yaw, pitch, roll,             # <<<<<<<<<<<<<<
 *             yaw_orientation.encode('utf-8'))
 *         self.__owner = True
 */

#line 18 "pyAttitude.pyx"
  try {

#line 18 "pyAttitude.pyx"
    __pyx_t_4 = new isce::core::EulerAngles(__pyx_v_yaw, __pyx_v_pitch, __pyx_v_roll, __pyx_t_3);

#line 18 "pyAttitude.pyx"
  } catch(...) {

#line 18 "pyAttitude.pyx"
    __Pyx_CppExn2PyErr();

#line 18 "pyAttitude.pyx"
    __PYX_ERR(1, 18, __pyx_L1_error)

#line 18 "pyAttitude.pyx"
  }

#line 18 "pyAttitude.pyx"
  __pyx_v_self->c_eulerangles = __pyx_t_4;

  /* "pyAttitude.pyx":20
 *         self.c_eulerangles = new EulerAngles(yaw, pitch, roll,
 *             yaw_orientation.encode('utf-8'))
 *         self.__owner = True             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */

#line 20 "pyAttitude.pyx"
  __pyx_v_self->__pyx___owner = 1;

  /* "pyAttitude.pyx":17
 *     cdef bool __owner
 * 
 *     def __cinit__(self, double yaw, double pitch, double roll, yaw_orientation='normal'):             # <<<<<<<<<<<<<<
 *         self.c_eulerangles = new EulerAngles(yaw, pitch, roll,
 *             yaw_orientation.encode('utf-8'))
 */

#line 17 "pyAttitude.pyx"


#line 17 "pyAttitude.pyx"
  /* function exit code */

#line 17 "pyAttitude.pyx"
  __pyx_r = 0;

#line 17 "pyAttitude.pyx"
  goto __pyx_L0;

#line 17 "pyAttitude.pyx"
  __pyx_L1_error:;

#line 17 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 17 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 17 "pyAttitude.pyx"
  __Pyx_AddTraceback("iscecore.pyEulerAngles.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 17 "pyAttitude.pyx"
  __pyx_r = -1;

#line 17 "pyAttitude.pyx"
  __pyx_L0:;

#line 17 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 17 "pyAttitude.pyx"
  return __pyx_r;

#line 17 "pyAttitude.pyx"
}

/* "pyAttitude.pyx":22
 *         self.__owner = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_eulerangles
 */

#line 22 "pyAttitude.pyx"


#line 22 "pyAttitude.pyx"
/* Python wrapper */

#line 22 "pyAttitude.pyx"
static void __pyx_pw_8iscecore_13pyEulerAngles_3__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 22 "pyAttitude.pyx"
static void __pyx_pw_8iscecore_13pyEulerAngles_3__dealloc__(PyObject *__pyx_v_self) {

#line 22 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 22 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 22 "pyAttitude.pyx"
  __pyx_pf_8iscecore_13pyEulerAngles_2__dealloc__(((struct __pyx_obj_8iscecore_pyEulerAngles *)__pyx_v_self));

#line 22 "pyAttitude.pyx"


#line 22 "pyAttitude.pyx"
  /* function exit code */

#line 22 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 22 "pyAttitude.pyx"
}

#line 22 "pyAttitude.pyx"


#line 22 "pyAttitude.pyx"
static void __pyx_pf_8iscecore_13pyEulerAngles_2__dealloc__(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self) {

#line 22 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 22 "pyAttitude.pyx"
  int __pyx_t_1;

#line 22 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyAttitude.pyx":23
 * 
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_eulerangles
 * 
 */

#line 23 "pyAttitude.pyx"
  __pyx_t_1 = (__pyx_v_self->__pyx___owner != 0);

#line 23 "pyAttitude.pyx"
  if (__pyx_t_1) {

    /* "pyAttitude.pyx":24
 *     def __dealloc__(self):
 *         if self.__owner:
 *             del self.c_eulerangles             # <<<<<<<<<<<<<<
 * 
 *     def ypr(self):
 */

#line 24 "pyAttitude.pyx"
    delete __pyx_v_self->c_eulerangles;

    /* "pyAttitude.pyx":23
 * 
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_eulerangles
 * 
 */

#line 23 "pyAttitude.pyx"
  }

  /* "pyAttitude.pyx":22
 *         self.__owner = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_eulerangles
 */

#line 22 "pyAttitude.pyx"


#line 22 "pyAttitude.pyx"
  /* function exit code */

#line 22 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 22 "pyAttitude.pyx"
}

/* "pyAttitude.pyx":26
 *             del self.c_eulerangles
 * 
 *     def ypr(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _ypr
 *         _ypr = self.c_eulerangles.ypr()
 */

#line 26 "pyAttitude.pyx"


#line 26 "pyAttitude.pyx"
/* Python wrapper */

#line 26 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_13pyEulerAngles_5ypr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 26 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_13pyEulerAngles_5ypr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 26 "pyAttitude.pyx"
  PyObject *__pyx_r = 0;

#line 26 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 26 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("ypr (wrapper)", 0);
  __pyx_r = 
#line 26 "pyAttitude.pyx"
__pyx_pf_8iscecore_13pyEulerAngles_4ypr(((struct __pyx_obj_8iscecore_pyEulerAngles *)__pyx_v_self));

#line 26 "pyAttitude.pyx"


#line 26 "pyAttitude.pyx"
  /* function exit code */

#line 26 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 26 "pyAttitude.pyx"
  return __pyx_r;

#line 26 "pyAttitude.pyx"
}

#line 26 "pyAttitude.pyx"


#line 26 "pyAttitude.pyx"
static PyObject *__pyx_pf_8iscecore_13pyEulerAngles_4ypr(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self) {
  std::vector<double>  __pyx_v__ypr
#line 26 "pyAttitude.pyx"
;
  PyObject *__pyx_v_angles = NULL
#line 26 "pyAttitude.pyx"
;
  long __pyx_7genexpr__pyx_v_i
#line 26 "pyAttitude.pyx"
;

#line 26 "pyAttitude.pyx"
  PyObject *__pyx_r = NULL;

#line 26 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 26 "pyAttitude.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 26 "pyAttitude.pyx"
  long __pyx_t_2;

#line 26 "pyAttitude.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 26 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("ypr", 0);

  /* "pyAttitude.pyx":28
 *     def ypr(self):
 *         cdef vector[double] _ypr
 *         _ypr = self.c_eulerangles.ypr()             # <<<<<<<<<<<<<<
 *         angles = [_ypr[i] for i in range(3)]
 *         return angles
 */

#line 28 "pyAttitude.pyx"
  __pyx_v__ypr = __pyx_v_self->c_eulerangles->ypr();

  /* "pyAttitude.pyx":29
 *         cdef vector[double] _ypr
 *         _ypr = self.c_eulerangles.ypr()
 *         angles = [_ypr[i] for i in range(3)]             # <<<<<<<<<<<<<<
 *         return angles
 * 
 */

#line 29 "pyAttitude.pyx"
  { /* enter inner scope */

#line 29 "pyAttitude.pyx"
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 29, __pyx_L1_error)

#line 29 "pyAttitude.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 29 "pyAttitude.pyx"
    for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {

#line 29 "pyAttitude.pyx"
      __pyx_7genexpr__pyx_v_i = __pyx_t_2;

#line 29 "pyAttitude.pyx"
      __pyx_t_3 = PyFloat_FromDouble((__pyx_v__ypr[__pyx_7genexpr__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 29, __pyx_L1_error)

#line 29 "pyAttitude.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 29 "pyAttitude.pyx"
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(1, 29, __pyx_L1_error)

#line 29 "pyAttitude.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 29 "pyAttitude.pyx"
    }

#line 29 "pyAttitude.pyx"
  } /* exit inner scope */

#line 29 "pyAttitude.pyx"
  __pyx_v_angles = ((PyObject*)__pyx_t_1);

#line 29 "pyAttitude.pyx"
  __pyx_t_1 = 0;

  /* "pyAttitude.pyx":30
 *         _ypr = self.c_eulerangles.ypr()
 *         angles = [_ypr[i] for i in range(3)]
 *         return angles             # <<<<<<<<<<<<<<
 * 
 *     def rotmat(self, sequence):
 */

#line 30 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 30 "pyAttitude.pyx"
  __Pyx_INCREF(__pyx_v_angles);

#line 30 "pyAttitude.pyx"
  __pyx_r = __pyx_v_angles;

#line 30 "pyAttitude.pyx"
  goto __pyx_L0;

  /* "pyAttitude.pyx":26
 *             del self.c_eulerangles
 * 
 *     def ypr(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _ypr
 *         _ypr = self.c_eulerangles.ypr()
 */

#line 26 "pyAttitude.pyx"


#line 26 "pyAttitude.pyx"
  /* function exit code */

#line 26 "pyAttitude.pyx"
  __pyx_L1_error:;

#line 26 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 26 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 26 "pyAttitude.pyx"
  __Pyx_AddTraceback("iscecore.pyEulerAngles.ypr", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 26 "pyAttitude.pyx"
  __pyx_r = NULL;

#line 26 "pyAttitude.pyx"
  __pyx_L0:;

#line 26 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_v_angles);

#line 26 "pyAttitude.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 26 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 26 "pyAttitude.pyx"
  return __pyx_r;

#line 26 "pyAttitude.pyx"
}

/* "pyAttitude.pyx":32
 *         return angles
 * 
 *     def rotmat(self, sequence):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] Rvec
 *         cdef string sequence_str = sequence
 */

#line 32 "pyAttitude.pyx"


#line 32 "pyAttitude.pyx"
/* Python wrapper */

#line 32 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_13pyEulerAngles_7rotmat(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence); /*proto*/

#line 32 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_13pyEulerAngles_7rotmat(PyObject *__pyx_v_self, PyObject *__pyx_v_sequence) {

#line 32 "pyAttitude.pyx"
  PyObject *__pyx_r = 0;

#line 32 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 32 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("rotmat (wrapper)", 0);
  __pyx_r = 
#line 32 "pyAttitude.pyx"
__pyx_pf_8iscecore_13pyEulerAngles_6rotmat(((struct __pyx_obj_8iscecore_pyEulerAngles *)__pyx_v_self), ((PyObject *)__pyx_v_sequence));

#line 32 "pyAttitude.pyx"


#line 32 "pyAttitude.pyx"
  /* function exit code */

#line 32 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 32 "pyAttitude.pyx"
  return __pyx_r;

#line 32 "pyAttitude.pyx"
}

#line 32 "pyAttitude.pyx"


#line 32 "pyAttitude.pyx"
static PyObject *__pyx_pf_8iscecore_13pyEulerAngles_6rotmat(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self, PyObject *__pyx_v_sequence) {
  std::vector<std::vector<double> >  __pyx_v_Rvec
#line 32 "pyAttitude.pyx"
;
  std::string __pyx_v_sequence_str
#line 32 "pyAttitude.pyx"
;
  PyObject *__pyx_v_R = NULL
#line 32 "pyAttitude.pyx"
;
  long __pyx_v_i
#line 32 "pyAttitude.pyx"
;
  PyObject *__pyx_v_row = NULL
#line 32 "pyAttitude.pyx"
;
  long __pyx_8genexpr1__pyx_v_j
#line 32 "pyAttitude.pyx"
;

#line 32 "pyAttitude.pyx"
  PyObject *__pyx_r = NULL;

#line 32 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 32 "pyAttitude.pyx"
  std::string __pyx_t_1;

#line 32 "pyAttitude.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 32 "pyAttitude.pyx"
  long __pyx_t_3;

#line 32 "pyAttitude.pyx"
  long __pyx_t_4;

#line 32 "pyAttitude.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 32 "pyAttitude.pyx"
  int __pyx_t_6;

#line 32 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("rotmat", 0);

  /* "pyAttitude.pyx":34
 *     def rotmat(self, sequence):
 *         cdef vector[vector[double]] Rvec
 *         cdef string sequence_str = sequence             # <<<<<<<<<<<<<<
 *         Rvec = self.c_eulerangles.rotmat(sequence_str)
 *         R = []
 */

#line 34 "pyAttitude.pyx"
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_sequence); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 34, __pyx_L1_error)

#line 34 "pyAttitude.pyx"
  __pyx_v_sequence_str = __pyx_t_1;

  /* "pyAttitude.pyx":35
 *         cdef vector[vector[double]] Rvec
 *         cdef string sequence_str = sequence
 *         Rvec = self.c_eulerangles.rotmat(sequence_str)             # <<<<<<<<<<<<<<
 *         R = []
 *         for i in range(3):
 */

#line 35 "pyAttitude.pyx"
  __pyx_v_Rvec = __pyx_v_self->c_eulerangles->rotmat(__pyx_v_sequence_str);

  /* "pyAttitude.pyx":36
 *         cdef string sequence_str = sequence
 *         Rvec = self.c_eulerangles.rotmat(sequence_str)
 *         R = []             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             row = [Rvec[i][j] for j in range(3)]
 */

#line 36 "pyAttitude.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 36, __pyx_L1_error)

#line 36 "pyAttitude.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 36 "pyAttitude.pyx"
  __pyx_v_R = ((PyObject*)__pyx_t_2);

#line 36 "pyAttitude.pyx"
  __pyx_t_2 = 0;

  /* "pyAttitude.pyx":37
 *         Rvec = self.c_eulerangles.rotmat(sequence_str)
 *         R = []
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             row = [Rvec[i][j] for j in range(3)]
 *             R.append(row)
 */

#line 37 "pyAttitude.pyx"
  for (__pyx_t_3 = 0; __pyx_t_3 < 3; __pyx_t_3+=1) {

#line 37 "pyAttitude.pyx"
    __pyx_v_i = __pyx_t_3;

    /* "pyAttitude.pyx":38
 *         R = []
 *         for i in range(3):
 *             row = [Rvec[i][j] for j in range(3)]             # <<<<<<<<<<<<<<
 *             R.append(row)
 *         return R
 */

#line 38 "pyAttitude.pyx"
    { /* enter inner scope */

#line 38 "pyAttitude.pyx"
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 38, __pyx_L1_error)

#line 38 "pyAttitude.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 38 "pyAttitude.pyx"
      for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {

#line 38 "pyAttitude.pyx"
        __pyx_8genexpr1__pyx_v_j = __pyx_t_4;

#line 38 "pyAttitude.pyx"
        __pyx_t_5 = PyFloat_FromDouble(((__pyx_v_Rvec[__pyx_v_i])[__pyx_8genexpr1__pyx_v_j])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 38, __pyx_L1_error)

#line 38 "pyAttitude.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 38 "pyAttitude.pyx"
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 38, __pyx_L1_error)

#line 38 "pyAttitude.pyx"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 38 "pyAttitude.pyx"
      }

#line 38 "pyAttitude.pyx"
    } /* exit inner scope */

#line 38 "pyAttitude.pyx"
    __Pyx_XDECREF_SET(__pyx_v_row, ((PyObject*)__pyx_t_2));

#line 38 "pyAttitude.pyx"
    __pyx_t_2 = 0;

    /* "pyAttitude.pyx":39
 *         for i in range(3):
 *             row = [Rvec[i][j] for j in range(3)]
 *             R.append(row)             # <<<<<<<<<<<<<<
 *         return R
 * 
 */

#line 39 "pyAttitude.pyx"
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_R, __pyx_v_row); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 39, __pyx_L1_error)

#line 39 "pyAttitude.pyx"
  }

  /* "pyAttitude.pyx":40
 *             row = [Rvec[i][j] for j in range(3)]
 *             R.append(row)
 *         return R             # <<<<<<<<<<<<<<
 * 
 *     def quaternion(self):
 */

#line 40 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 40 "pyAttitude.pyx"
  __Pyx_INCREF(__pyx_v_R);

#line 40 "pyAttitude.pyx"
  __pyx_r = __pyx_v_R;

#line 40 "pyAttitude.pyx"
  goto __pyx_L0;

  /* "pyAttitude.pyx":32
 *         return angles
 * 
 *     def rotmat(self, sequence):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] Rvec
 *         cdef string sequence_str = sequence
 */

#line 32 "pyAttitude.pyx"


#line 32 "pyAttitude.pyx"
  /* function exit code */

#line 32 "pyAttitude.pyx"
  __pyx_L1_error:;

#line 32 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 32 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 32 "pyAttitude.pyx"
  __Pyx_AddTraceback("iscecore.pyEulerAngles.rotmat", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 32 "pyAttitude.pyx"
  __pyx_r = NULL;

#line 32 "pyAttitude.pyx"
  __pyx_L0:;

#line 32 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_v_R);

#line 32 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_v_row);

#line 32 "pyAttitude.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 32 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 32 "pyAttitude.pyx"
  return __pyx_r;

#line 32 "pyAttitude.pyx"
}

/* "pyAttitude.pyx":42
 *         return R
 * 
 *     def quaternion(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] qvec = self.c_eulerangles.toQuaternionElements()
 *         q = [qvec[i] for i in range(4)]
 */

#line 42 "pyAttitude.pyx"


#line 42 "pyAttitude.pyx"
/* Python wrapper */

#line 42 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_13pyEulerAngles_9quaternion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 42 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_13pyEulerAngles_9quaternion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 42 "pyAttitude.pyx"
  PyObject *__pyx_r = 0;

#line 42 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 42 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("quaternion (wrapper)", 0);
  __pyx_r = 
#line 42 "pyAttitude.pyx"
__pyx_pf_8iscecore_13pyEulerAngles_8quaternion(((struct __pyx_obj_8iscecore_pyEulerAngles *)__pyx_v_self));

#line 42 "pyAttitude.pyx"


#line 42 "pyAttitude.pyx"
  /* function exit code */

#line 42 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 42 "pyAttitude.pyx"
  return __pyx_r;

#line 42 "pyAttitude.pyx"
}

#line 42 "pyAttitude.pyx"


#line 42 "pyAttitude.pyx"
static PyObject *__pyx_pf_8iscecore_13pyEulerAngles_8quaternion(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self) {
  std::vector<double>  __pyx_v_qvec
#line 42 "pyAttitude.pyx"
;
  PyObject *__pyx_v_q = NULL
#line 42 "pyAttitude.pyx"
;
  long __pyx_8genexpr2__pyx_v_i
#line 42 "pyAttitude.pyx"
;

#line 42 "pyAttitude.pyx"
  PyObject *__pyx_r = NULL;

#line 42 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 42 "pyAttitude.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 42 "pyAttitude.pyx"
  long __pyx_t_2;

#line 42 "pyAttitude.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 42 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("quaternion", 0);

  /* "pyAttitude.pyx":43
 * 
 *     def quaternion(self):
 *         cdef vector[double] qvec = self.c_eulerangles.toQuaternionElements()             # <<<<<<<<<<<<<<
 *         q = [qvec[i] for i in range(4)]
 *         return q
 */

#line 43 "pyAttitude.pyx"
  __pyx_v_qvec = __pyx_v_self->c_eulerangles->toQuaternionElements();

  /* "pyAttitude.pyx":44
 *     def quaternion(self):
 *         cdef vector[double] qvec = self.c_eulerangles.toQuaternionElements()
 *         q = [qvec[i] for i in range(4)]             # <<<<<<<<<<<<<<
 *         return q
 * 
 */

#line 44 "pyAttitude.pyx"
  { /* enter inner scope */

#line 44 "pyAttitude.pyx"
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)

#line 44 "pyAttitude.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 44 "pyAttitude.pyx"
    for (__pyx_t_2 = 0; __pyx_t_2 < 4; __pyx_t_2+=1) {

#line 44 "pyAttitude.pyx"
      __pyx_8genexpr2__pyx_v_i = __pyx_t_2;

#line 44 "pyAttitude.pyx"
      __pyx_t_3 = PyFloat_FromDouble((__pyx_v_qvec[__pyx_8genexpr2__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 44, __pyx_L1_error)

#line 44 "pyAttitude.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 44 "pyAttitude.pyx"
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(1, 44, __pyx_L1_error)

#line 44 "pyAttitude.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 44 "pyAttitude.pyx"
    }

#line 44 "pyAttitude.pyx"
  } /* exit inner scope */

#line 44 "pyAttitude.pyx"
  __pyx_v_q = ((PyObject*)__pyx_t_1);

#line 44 "pyAttitude.pyx"
  __pyx_t_1 = 0;

  /* "pyAttitude.pyx":45
 *         cdef vector[double] qvec = self.c_eulerangles.toQuaternionElements()
 *         q = [qvec[i] for i in range(4)]
 *         return q             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 45 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 45 "pyAttitude.pyx"
  __Pyx_INCREF(__pyx_v_q);

#line 45 "pyAttitude.pyx"
  __pyx_r = __pyx_v_q;

#line 45 "pyAttitude.pyx"
  goto __pyx_L0;

  /* "pyAttitude.pyx":42
 *         return R
 * 
 *     def quaternion(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] qvec = self.c_eulerangles.toQuaternionElements()
 *         q = [qvec[i] for i in range(4)]
 */

#line 42 "pyAttitude.pyx"


#line 42 "pyAttitude.pyx"
  /* function exit code */

#line 42 "pyAttitude.pyx"
  __pyx_L1_error:;

#line 42 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 42 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 42 "pyAttitude.pyx"
  __Pyx_AddTraceback("iscecore.pyEulerAngles.quaternion", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 42 "pyAttitude.pyx"
  __pyx_r = NULL;

#line 42 "pyAttitude.pyx"
  __pyx_L0:;

#line 42 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_v_q);

#line 42 "pyAttitude.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 42 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 42 "pyAttitude.pyx"
  return __pyx_r;

#line 42 "pyAttitude.pyx"
}

/* "pyAttitude.pyx":48
 * 
 *     @property
 *     def yaw(self):             # <<<<<<<<<<<<<<
 *         return self.c_eulerangles.yaw
 *     @yaw.setter
 */

#line 48 "pyAttitude.pyx"


#line 48 "pyAttitude.pyx"
/* Python wrapper */

#line 48 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_13pyEulerAngles_3yaw_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 48 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_13pyEulerAngles_3yaw_1__get__(PyObject *__pyx_v_self) {

#line 48 "pyAttitude.pyx"
  PyObject *__pyx_r = 0;

#line 48 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 48 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 48 "pyAttitude.pyx"
__pyx_pf_8iscecore_13pyEulerAngles_3yaw___get__(((struct __pyx_obj_8iscecore_pyEulerAngles *)__pyx_v_self));

#line 48 "pyAttitude.pyx"


#line 48 "pyAttitude.pyx"
  /* function exit code */

#line 48 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 48 "pyAttitude.pyx"
  return __pyx_r;

#line 48 "pyAttitude.pyx"
}

#line 48 "pyAttitude.pyx"


#line 48 "pyAttitude.pyx"
static PyObject *__pyx_pf_8iscecore_13pyEulerAngles_3yaw___get__(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self) {

#line 48 "pyAttitude.pyx"
  PyObject *__pyx_r = NULL;

#line 48 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 48 "pyAttitude.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 48 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyAttitude.pyx":49
 *     @property
 *     def yaw(self):
 *         return self.c_eulerangles.yaw             # <<<<<<<<<<<<<<
 *     @yaw.setter
 *     def yaw(self, value):
 */

#line 49 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 49 "pyAttitude.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_eulerangles->yaw); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 49, __pyx_L1_error)

#line 49 "pyAttitude.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 49 "pyAttitude.pyx"
  __pyx_r = __pyx_t_1;

#line 49 "pyAttitude.pyx"
  __pyx_t_1 = 0;

#line 49 "pyAttitude.pyx"
  goto __pyx_L0;

  /* "pyAttitude.pyx":48
 * 
 *     @property
 *     def yaw(self):             # <<<<<<<<<<<<<<
 *         return self.c_eulerangles.yaw
 *     @yaw.setter
 */

#line 48 "pyAttitude.pyx"


#line 48 "pyAttitude.pyx"
  /* function exit code */

#line 48 "pyAttitude.pyx"
  __pyx_L1_error:;

#line 48 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 48 "pyAttitude.pyx"
  __Pyx_AddTraceback("iscecore.pyEulerAngles.yaw.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 48 "pyAttitude.pyx"
  __pyx_r = NULL;

#line 48 "pyAttitude.pyx"
  __pyx_L0:;

#line 48 "pyAttitude.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 48 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 48 "pyAttitude.pyx"
  return __pyx_r;

#line 48 "pyAttitude.pyx"
}

/* "pyAttitude.pyx":51
 *         return self.c_eulerangles.yaw
 *     @yaw.setter
 *     def yaw(self, value):             # <<<<<<<<<<<<<<
 *         self.c_eulerangles.yaw = value
 * 
 */

#line 51 "pyAttitude.pyx"


#line 51 "pyAttitude.pyx"
/* Python wrapper */

#line 51 "pyAttitude.pyx"
static int __pyx_pw_8iscecore_13pyEulerAngles_3yaw_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/

#line 51 "pyAttitude.pyx"
static int __pyx_pw_8iscecore_13pyEulerAngles_3yaw_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {

#line 51 "pyAttitude.pyx"
  int __pyx_r;

#line 51 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 51 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = 
#line 51 "pyAttitude.pyx"
__pyx_pf_8iscecore_13pyEulerAngles_3yaw_2__set__(((struct __pyx_obj_8iscecore_pyEulerAngles *)__pyx_v_self), ((PyObject *)__pyx_v_value));

#line 51 "pyAttitude.pyx"


#line 51 "pyAttitude.pyx"
  /* function exit code */

#line 51 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 51 "pyAttitude.pyx"
  return __pyx_r;

#line 51 "pyAttitude.pyx"
}

#line 51 "pyAttitude.pyx"


#line 51 "pyAttitude.pyx"
static int __pyx_pf_8iscecore_13pyEulerAngles_3yaw_2__set__(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self, PyObject *__pyx_v_value) {

#line 51 "pyAttitude.pyx"
  int __pyx_r;

#line 51 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 51 "pyAttitude.pyx"
  double __pyx_t_1;

#line 51 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyAttitude.pyx":52
 *     @yaw.setter
 *     def yaw(self, value):
 *         self.c_eulerangles.yaw = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 52 "pyAttitude.pyx"
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 52, __pyx_L1_error)

#line 52 "pyAttitude.pyx"
  __pyx_v_self->c_eulerangles->yaw = __pyx_t_1;

  /* "pyAttitude.pyx":51
 *         return self.c_eulerangles.yaw
 *     @yaw.setter
 *     def yaw(self, value):             # <<<<<<<<<<<<<<
 *         self.c_eulerangles.yaw = value
 * 
 */

#line 51 "pyAttitude.pyx"


#line 51 "pyAttitude.pyx"
  /* function exit code */

#line 51 "pyAttitude.pyx"
  __pyx_r = 0;

#line 51 "pyAttitude.pyx"
  goto __pyx_L0;

#line 51 "pyAttitude.pyx"
  __pyx_L1_error:;

#line 51 "pyAttitude.pyx"
  __Pyx_AddTraceback("iscecore.pyEulerAngles.yaw.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 51 "pyAttitude.pyx"
  __pyx_r = -1;

#line 51 "pyAttitude.pyx"
  __pyx_L0:;

#line 51 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 51 "pyAttitude.pyx"
  return __pyx_r;

#line 51 "pyAttitude.pyx"
}

/* "pyAttitude.pyx":55
 * 
 *     @property
 *     def pitch(self):             # <<<<<<<<<<<<<<
 *         return self.c_eulerangles.pitch
 *     @pitch.setter
 */

#line 55 "pyAttitude.pyx"


#line 55 "pyAttitude.pyx"
/* Python wrapper */

#line 55 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_13pyEulerAngles_5pitch_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 55 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_13pyEulerAngles_5pitch_1__get__(PyObject *__pyx_v_self) {

#line 55 "pyAttitude.pyx"
  PyObject *__pyx_r = 0;

#line 55 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 55 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 55 "pyAttitude.pyx"
__pyx_pf_8iscecore_13pyEulerAngles_5pitch___get__(((struct __pyx_obj_8iscecore_pyEulerAngles *)__pyx_v_self));

#line 55 "pyAttitude.pyx"


#line 55 "pyAttitude.pyx"
  /* function exit code */

#line 55 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 55 "pyAttitude.pyx"
  return __pyx_r;

#line 55 "pyAttitude.pyx"
}

#line 55 "pyAttitude.pyx"


#line 55 "pyAttitude.pyx"
static PyObject *__pyx_pf_8iscecore_13pyEulerAngles_5pitch___get__(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self) {

#line 55 "pyAttitude.pyx"
  PyObject *__pyx_r = NULL;

#line 55 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 55 "pyAttitude.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 55 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyAttitude.pyx":56
 *     @property
 *     def pitch(self):
 *         return self.c_eulerangles.pitch             # <<<<<<<<<<<<<<
 *     @pitch.setter
 *     def pitch(self, value):
 */

#line 56 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 56 "pyAttitude.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_eulerangles->pitch); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)

#line 56 "pyAttitude.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 56 "pyAttitude.pyx"
  __pyx_r = __pyx_t_1;

#line 56 "pyAttitude.pyx"
  __pyx_t_1 = 0;

#line 56 "pyAttitude.pyx"
  goto __pyx_L0;

  /* "pyAttitude.pyx":55
 * 
 *     @property
 *     def pitch(self):             # <<<<<<<<<<<<<<
 *         return self.c_eulerangles.pitch
 *     @pitch.setter
 */

#line 55 "pyAttitude.pyx"


#line 55 "pyAttitude.pyx"
  /* function exit code */

#line 55 "pyAttitude.pyx"
  __pyx_L1_error:;

#line 55 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 55 "pyAttitude.pyx"
  __Pyx_AddTraceback("iscecore.pyEulerAngles.pitch.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 55 "pyAttitude.pyx"
  __pyx_r = NULL;

#line 55 "pyAttitude.pyx"
  __pyx_L0:;

#line 55 "pyAttitude.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 55 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 55 "pyAttitude.pyx"
  return __pyx_r;

#line 55 "pyAttitude.pyx"
}

/* "pyAttitude.pyx":58
 *         return self.c_eulerangles.pitch
 *     @pitch.setter
 *     def pitch(self, value):             # <<<<<<<<<<<<<<
 *         self.c_eulerangles.pitch = value
 * 
 */

#line 58 "pyAttitude.pyx"


#line 58 "pyAttitude.pyx"
/* Python wrapper */

#line 58 "pyAttitude.pyx"
static int __pyx_pw_8iscecore_13pyEulerAngles_5pitch_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/

#line 58 "pyAttitude.pyx"
static int __pyx_pw_8iscecore_13pyEulerAngles_5pitch_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {

#line 58 "pyAttitude.pyx"
  int __pyx_r;

#line 58 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 58 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = 
#line 58 "pyAttitude.pyx"
__pyx_pf_8iscecore_13pyEulerAngles_5pitch_2__set__(((struct __pyx_obj_8iscecore_pyEulerAngles *)__pyx_v_self), ((PyObject *)__pyx_v_value));

#line 58 "pyAttitude.pyx"


#line 58 "pyAttitude.pyx"
  /* function exit code */

#line 58 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 58 "pyAttitude.pyx"
  return __pyx_r;

#line 58 "pyAttitude.pyx"
}

#line 58 "pyAttitude.pyx"


#line 58 "pyAttitude.pyx"
static int __pyx_pf_8iscecore_13pyEulerAngles_5pitch_2__set__(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self, PyObject *__pyx_v_value) {

#line 58 "pyAttitude.pyx"
  int __pyx_r;

#line 58 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 58 "pyAttitude.pyx"
  double __pyx_t_1;

#line 58 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyAttitude.pyx":59
 *     @pitch.setter
 *     def pitch(self, value):
 *         self.c_eulerangles.pitch = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 59 "pyAttitude.pyx"
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 59, __pyx_L1_error)

#line 59 "pyAttitude.pyx"
  __pyx_v_self->c_eulerangles->pitch = __pyx_t_1;

  /* "pyAttitude.pyx":58
 *         return self.c_eulerangles.pitch
 *     @pitch.setter
 *     def pitch(self, value):             # <<<<<<<<<<<<<<
 *         self.c_eulerangles.pitch = value
 * 
 */

#line 58 "pyAttitude.pyx"


#line 58 "pyAttitude.pyx"
  /* function exit code */

#line 58 "pyAttitude.pyx"
  __pyx_r = 0;

#line 58 "pyAttitude.pyx"
  goto __pyx_L0;

#line 58 "pyAttitude.pyx"
  __pyx_L1_error:;

#line 58 "pyAttitude.pyx"
  __Pyx_AddTraceback("iscecore.pyEulerAngles.pitch.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 58 "pyAttitude.pyx"
  __pyx_r = -1;

#line 58 "pyAttitude.pyx"
  __pyx_L0:;

#line 58 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 58 "pyAttitude.pyx"
  return __pyx_r;

#line 58 "pyAttitude.pyx"
}

/* "pyAttitude.pyx":62
 * 
 *     @property
 *     def roll(self):             # <<<<<<<<<<<<<<
 *         return self.c_eulerangles.roll
 *     @roll.setter
 */

#line 62 "pyAttitude.pyx"


#line 62 "pyAttitude.pyx"
/* Python wrapper */

#line 62 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_13pyEulerAngles_4roll_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 62 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_13pyEulerAngles_4roll_1__get__(PyObject *__pyx_v_self) {

#line 62 "pyAttitude.pyx"
  PyObject *__pyx_r = 0;

#line 62 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 62 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 62 "pyAttitude.pyx"
__pyx_pf_8iscecore_13pyEulerAngles_4roll___get__(((struct __pyx_obj_8iscecore_pyEulerAngles *)__pyx_v_self));

#line 62 "pyAttitude.pyx"


#line 62 "pyAttitude.pyx"
  /* function exit code */

#line 62 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 62 "pyAttitude.pyx"
  return __pyx_r;

#line 62 "pyAttitude.pyx"
}

#line 62 "pyAttitude.pyx"


#line 62 "pyAttitude.pyx"
static PyObject *__pyx_pf_8iscecore_13pyEulerAngles_4roll___get__(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self) {

#line 62 "pyAttitude.pyx"
  PyObject *__pyx_r = NULL;

#line 62 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 62 "pyAttitude.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 62 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyAttitude.pyx":63
 *     @property
 *     def roll(self):
 *         return self.c_eulerangles.roll             # <<<<<<<<<<<<<<
 *     @roll.setter
 *     def roll(self, value):
 */

#line 63 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 63 "pyAttitude.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_eulerangles->roll); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 63, __pyx_L1_error)

#line 63 "pyAttitude.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 63 "pyAttitude.pyx"
  __pyx_r = __pyx_t_1;

#line 63 "pyAttitude.pyx"
  __pyx_t_1 = 0;

#line 63 "pyAttitude.pyx"
  goto __pyx_L0;

  /* "pyAttitude.pyx":62
 * 
 *     @property
 *     def roll(self):             # <<<<<<<<<<<<<<
 *         return self.c_eulerangles.roll
 *     @roll.setter
 */

#line 62 "pyAttitude.pyx"


#line 62 "pyAttitude.pyx"
  /* function exit code */

#line 62 "pyAttitude.pyx"
  __pyx_L1_error:;

#line 62 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 62 "pyAttitude.pyx"
  __Pyx_AddTraceback("iscecore.pyEulerAngles.roll.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 62 "pyAttitude.pyx"
  __pyx_r = NULL;

#line 62 "pyAttitude.pyx"
  __pyx_L0:;

#line 62 "pyAttitude.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 62 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 62 "pyAttitude.pyx"
  return __pyx_r;

#line 62 "pyAttitude.pyx"
}

/* "pyAttitude.pyx":65
 *         return self.c_eulerangles.roll
 *     @roll.setter
 *     def roll(self, value):             # <<<<<<<<<<<<<<
 *         self.c_eulerangles.roll = value
 * 
 */

#line 65 "pyAttitude.pyx"


#line 65 "pyAttitude.pyx"
/* Python wrapper */

#line 65 "pyAttitude.pyx"
static int __pyx_pw_8iscecore_13pyEulerAngles_4roll_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/

#line 65 "pyAttitude.pyx"
static int __pyx_pw_8iscecore_13pyEulerAngles_4roll_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {

#line 65 "pyAttitude.pyx"
  int __pyx_r;

#line 65 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 65 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = 
#line 65 "pyAttitude.pyx"
__pyx_pf_8iscecore_13pyEulerAngles_4roll_2__set__(((struct __pyx_obj_8iscecore_pyEulerAngles *)__pyx_v_self), ((PyObject *)__pyx_v_value));

#line 65 "pyAttitude.pyx"


#line 65 "pyAttitude.pyx"
  /* function exit code */

#line 65 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 65 "pyAttitude.pyx"
  return __pyx_r;

#line 65 "pyAttitude.pyx"
}

#line 65 "pyAttitude.pyx"


#line 65 "pyAttitude.pyx"
static int __pyx_pf_8iscecore_13pyEulerAngles_4roll_2__set__(struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self, PyObject *__pyx_v_value) {

#line 65 "pyAttitude.pyx"
  int __pyx_r;

#line 65 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 65 "pyAttitude.pyx"
  double __pyx_t_1;

#line 65 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyAttitude.pyx":66
 *     @roll.setter
 *     def roll(self, value):
 *         self.c_eulerangles.roll = value             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 66 "pyAttitude.pyx"
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 66, __pyx_L1_error)

#line 66 "pyAttitude.pyx"
  __pyx_v_self->c_eulerangles->roll = __pyx_t_1;

  /* "pyAttitude.pyx":65
 *         return self.c_eulerangles.roll
 *     @roll.setter
 *     def roll(self, value):             # <<<<<<<<<<<<<<
 *         self.c_eulerangles.roll = value
 * 
 */

#line 65 "pyAttitude.pyx"


#line 65 "pyAttitude.pyx"
  /* function exit code */

#line 65 "pyAttitude.pyx"
  __pyx_r = 0;

#line 65 "pyAttitude.pyx"
  goto __pyx_L0;

#line 65 "pyAttitude.pyx"
  __pyx_L1_error:;

#line 65 "pyAttitude.pyx"
  __Pyx_AddTraceback("iscecore.pyEulerAngles.roll.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 65 "pyAttitude.pyx"
  __pyx_r = -1;

#line 65 "pyAttitude.pyx"
  __pyx_L0:;

#line 65 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 65 "pyAttitude.pyx"
  return __pyx_r;

#line 65 "pyAttitude.pyx"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_13pyEulerAngles_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_13pyEulerAngles_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_8iscecore_13pyEulerAngles_10__reduce_cython__(((struct __pyx_obj_8iscecore_pyEulerAngles *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_13pyEulerAngles_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyEulerAngles.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_13pyEulerAngles_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_13pyEulerAngles_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf_8iscecore_13pyEulerAngles_12__setstate_cython__(((struct __pyx_obj_8iscecore_pyEulerAngles *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_13pyEulerAngles_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyEulerAngles.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "pyAttitude.pyx":73
 *     cdef bool __owner
 * 
 *     def __cinit__(self, list q):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _q;
 *         for i in range(4):
 */

#line 73 "pyAttitude.pyx"


#line 73 "pyAttitude.pyx"
/* Python wrapper */

#line 73 "pyAttitude.pyx"
static int __pyx_pw_8iscecore_12pyQuaternion_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 73 "pyAttitude.pyx"
static int __pyx_pw_8iscecore_12pyQuaternion_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_q = 0
#line 73 "pyAttitude.pyx"
;

#line 73 "pyAttitude.pyx"
  int __pyx_r;

#line 73 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 73 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 73 "pyAttitude.pyx"
  {

#line 73 "pyAttitude.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_q,0};

#line 73 "pyAttitude.pyx"
    PyObject* values[1] = {0};

#line 73 "pyAttitude.pyx"
    if (unlikely(__pyx_kwds)) {

#line 73 "pyAttitude.pyx"
      Py_ssize_t kw_args;

#line 73 "pyAttitude.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 73 "pyAttitude.pyx"
      switch (pos_args) {
        case  1: 
#line 73 "pyAttitude.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 73 "pyAttitude.pyx"
        CYTHON_FALLTHROUGH;

#line 73 "pyAttitude.pyx"
        case  0: break;
        default: 
#line 73 "pyAttitude.pyx"
goto __pyx_L5_argtuple_error;

#line 73 "pyAttitude.pyx"
      }

#line 73 "pyAttitude.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 73 "pyAttitude.pyx"
      switch (pos_args) {

#line 73 "pyAttitude.pyx"
        case  0:

#line 73 "pyAttitude.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q)) != 0)) kw_args--;
        else 
#line 73 "pyAttitude.pyx"
goto __pyx_L5_argtuple_error;

#line 73 "pyAttitude.pyx"
      }

#line 73 "pyAttitude.pyx"
      if (unlikely(kw_args > 0)) {

#line 73 "pyAttitude.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 73, __pyx_L3_error)

#line 73 "pyAttitude.pyx"
      }

#line 73 "pyAttitude.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {

#line 73 "pyAttitude.pyx"
      goto __pyx_L5_argtuple_error;

#line 73 "pyAttitude.pyx"
    } else {

#line 73 "pyAttitude.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 73 "pyAttitude.pyx"
    }

#line 73 "pyAttitude.pyx"
    __pyx_v_q = ((PyObject*)values[0]);

#line 73 "pyAttitude.pyx"
  }

#line 73 "pyAttitude.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 73 "pyAttitude.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 73 "pyAttitude.pyx"
__PYX_ERR(1, 73, __pyx_L3_error)

#line 73 "pyAttitude.pyx"
  __pyx_L3_error:;

#line 73 "pyAttitude.pyx"
  __Pyx_AddTraceback("iscecore.pyQuaternion.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 73 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 73 "pyAttitude.pyx"
  return -1;

#line 73 "pyAttitude.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 73 "pyAttitude.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_q), (&PyList_Type), 1, "q", 1))) __PYX_ERR(1, 73, __pyx_L1_error)
  __pyx_r = 
#line 73 "pyAttitude.pyx"
__pyx_pf_8iscecore_12pyQuaternion___cinit__(((struct __pyx_obj_8iscecore_pyQuaternion *)__pyx_v_self), __pyx_v_q);

#line 73 "pyAttitude.pyx"


#line 73 "pyAttitude.pyx"
  /* function exit code */

#line 73 "pyAttitude.pyx"
  goto __pyx_L0;

#line 73 "pyAttitude.pyx"
  __pyx_L1_error:;

#line 73 "pyAttitude.pyx"
  __pyx_r = -1;

#line 73 "pyAttitude.pyx"
  __pyx_L0:;

#line 73 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 73 "pyAttitude.pyx"
  return __pyx_r;

#line 73 "pyAttitude.pyx"
}

#line 73 "pyAttitude.pyx"


#line 73 "pyAttitude.pyx"
static int __pyx_pf_8iscecore_12pyQuaternion___cinit__(struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_self, PyObject *__pyx_v_q) {
  std::vector<double>  __pyx_v__q
#line 73 "pyAttitude.pyx"
;
  long __pyx_v_i
#line 73 "pyAttitude.pyx"
;

#line 73 "pyAttitude.pyx"
  int __pyx_r;

#line 73 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 73 "pyAttitude.pyx"
  long __pyx_t_1;

#line 73 "pyAttitude.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 73 "pyAttitude.pyx"
  double __pyx_t_3;

#line 73 "pyAttitude.pyx"
  isce::core::Quaternion *__pyx_t_4;

#line 73 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyAttitude.pyx":75
 *     def __cinit__(self, list q):
 *         cdef vector[double] _q;
 *         for i in range(4):             # <<<<<<<<<<<<<<
 *             _q.push_back(q[i])
 *         self.c_quaternion = new Quaternion(_q)
 */

#line 75 "pyAttitude.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {

#line 75 "pyAttitude.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyAttitude.pyx":76
 *         cdef vector[double] _q;
 *         for i in range(4):
 *             _q.push_back(q[i])             # <<<<<<<<<<<<<<
 *         self.c_quaternion = new Quaternion(_q)
 *         self.__owner = True
 */

#line 76 "pyAttitude.pyx"
    if (unlikely(__pyx_v_q == Py_None)) {

#line 76 "pyAttitude.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 76 "pyAttitude.pyx"
      __PYX_ERR(1, 76, __pyx_L1_error)

#line 76 "pyAttitude.pyx"
    }

#line 76 "pyAttitude.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_q, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 76, __pyx_L1_error)

#line 76 "pyAttitude.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 76 "pyAttitude.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 76, __pyx_L1_error)

#line 76 "pyAttitude.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 76 "pyAttitude.pyx"
    try {

#line 76 "pyAttitude.pyx"
      __pyx_v__q.push_back(__pyx_t_3);

#line 76 "pyAttitude.pyx"
    } catch(...) {

#line 76 "pyAttitude.pyx"
      __Pyx_CppExn2PyErr();

#line 76 "pyAttitude.pyx"
      __PYX_ERR(1, 76, __pyx_L1_error)

#line 76 "pyAttitude.pyx"
    }

#line 76 "pyAttitude.pyx"
  }

  /* "pyAttitude.pyx":77
 *         for i in range(4):
 *             _q.push_back(q[i])
 *         self.c_quaternion = new Quaternion(_q)             # <<<<<<<<<<<<<<
 *         self.__owner = True
 * 
 */

#line 77 "pyAttitude.pyx"
  try {

#line 77 "pyAttitude.pyx"
    __pyx_t_4 = new isce::core::Quaternion(__pyx_v__q);

#line 77 "pyAttitude.pyx"
  } catch(...) {

#line 77 "pyAttitude.pyx"
    __Pyx_CppExn2PyErr();

#line 77 "pyAttitude.pyx"
    __PYX_ERR(1, 77, __pyx_L1_error)

#line 77 "pyAttitude.pyx"
  }

#line 77 "pyAttitude.pyx"
  __pyx_v_self->c_quaternion = __pyx_t_4;

  /* "pyAttitude.pyx":78
 *             _q.push_back(q[i])
 *         self.c_quaternion = new Quaternion(_q)
 *         self.__owner = True             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */

#line 78 "pyAttitude.pyx"
  __pyx_v_self->__pyx___owner = 1;

  /* "pyAttitude.pyx":73
 *     cdef bool __owner
 * 
 *     def __cinit__(self, list q):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _q;
 *         for i in range(4):
 */

#line 73 "pyAttitude.pyx"


#line 73 "pyAttitude.pyx"
  /* function exit code */

#line 73 "pyAttitude.pyx"
  __pyx_r = 0;

#line 73 "pyAttitude.pyx"
  goto __pyx_L0;

#line 73 "pyAttitude.pyx"
  __pyx_L1_error:;

#line 73 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 73 "pyAttitude.pyx"
  __Pyx_AddTraceback("iscecore.pyQuaternion.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 73 "pyAttitude.pyx"
  __pyx_r = -1;

#line 73 "pyAttitude.pyx"
  __pyx_L0:;

#line 73 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 73 "pyAttitude.pyx"
  return __pyx_r;

#line 73 "pyAttitude.pyx"
}

/* "pyAttitude.pyx":80
 *         self.__owner = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_quaternion
 */

#line 80 "pyAttitude.pyx"


#line 80 "pyAttitude.pyx"
/* Python wrapper */

#line 80 "pyAttitude.pyx"
static void __pyx_pw_8iscecore_12pyQuaternion_3__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 80 "pyAttitude.pyx"
static void __pyx_pw_8iscecore_12pyQuaternion_3__dealloc__(PyObject *__pyx_v_self) {

#line 80 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 80 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 80 "pyAttitude.pyx"
  __pyx_pf_8iscecore_12pyQuaternion_2__dealloc__(((struct __pyx_obj_8iscecore_pyQuaternion *)__pyx_v_self));

#line 80 "pyAttitude.pyx"


#line 80 "pyAttitude.pyx"
  /* function exit code */

#line 80 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 80 "pyAttitude.pyx"
}

#line 80 "pyAttitude.pyx"


#line 80 "pyAttitude.pyx"
static void __pyx_pf_8iscecore_12pyQuaternion_2__dealloc__(struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_self) {

#line 80 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 80 "pyAttitude.pyx"
  int __pyx_t_1;

#line 80 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyAttitude.pyx":81
 * 
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_quaternion
 * 
 */

#line 81 "pyAttitude.pyx"
  __pyx_t_1 = (__pyx_v_self->__pyx___owner != 0);

#line 81 "pyAttitude.pyx"
  if (__pyx_t_1) {

    /* "pyAttitude.pyx":82
 *     def __dealloc__(self):
 *         if self.__owner:
 *             del self.c_quaternion             # <<<<<<<<<<<<<<
 * 
 *     def ypr(self):
 */

#line 82 "pyAttitude.pyx"
    delete __pyx_v_self->c_quaternion;

    /* "pyAttitude.pyx":81
 * 
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_quaternion
 * 
 */

#line 81 "pyAttitude.pyx"
  }

  /* "pyAttitude.pyx":80
 *         self.__owner = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_quaternion
 */

#line 80 "pyAttitude.pyx"


#line 80 "pyAttitude.pyx"
  /* function exit code */

#line 80 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 80 "pyAttitude.pyx"
}

/* "pyAttitude.pyx":84
 *             del self.c_quaternion
 * 
 *     def ypr(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _ypr
 *         _ypr = self.c_quaternion.ypr()
 */

#line 84 "pyAttitude.pyx"


#line 84 "pyAttitude.pyx"
/* Python wrapper */

#line 84 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_12pyQuaternion_5ypr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 84 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_12pyQuaternion_5ypr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 84 "pyAttitude.pyx"
  PyObject *__pyx_r = 0;

#line 84 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 84 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("ypr (wrapper)", 0);
  __pyx_r = 
#line 84 "pyAttitude.pyx"
__pyx_pf_8iscecore_12pyQuaternion_4ypr(((struct __pyx_obj_8iscecore_pyQuaternion *)__pyx_v_self));

#line 84 "pyAttitude.pyx"


#line 84 "pyAttitude.pyx"
  /* function exit code */

#line 84 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 84 "pyAttitude.pyx"
  return __pyx_r;

#line 84 "pyAttitude.pyx"
}

#line 84 "pyAttitude.pyx"


#line 84 "pyAttitude.pyx"
static PyObject *__pyx_pf_8iscecore_12pyQuaternion_4ypr(struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_self) {
  std::vector<double>  __pyx_v__ypr
#line 84 "pyAttitude.pyx"
;
  PyObject *__pyx_v_angles = NULL
#line 84 "pyAttitude.pyx"
;
  long __pyx_8genexpr3__pyx_v_i
#line 84 "pyAttitude.pyx"
;

#line 84 "pyAttitude.pyx"
  PyObject *__pyx_r = NULL;

#line 84 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 84 "pyAttitude.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 84 "pyAttitude.pyx"
  long __pyx_t_2;

#line 84 "pyAttitude.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 84 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("ypr", 0);

  /* "pyAttitude.pyx":86
 *     def ypr(self):
 *         cdef vector[double] _ypr
 *         _ypr = self.c_quaternion.ypr()             # <<<<<<<<<<<<<<
 *         angles = [_ypr[i] for i in range(3)]
 *         return angles
 */

#line 86 "pyAttitude.pyx"
  __pyx_v__ypr = __pyx_v_self->c_quaternion->ypr();

  /* "pyAttitude.pyx":87
 *         cdef vector[double] _ypr
 *         _ypr = self.c_quaternion.ypr()
 *         angles = [_ypr[i] for i in range(3)]             # <<<<<<<<<<<<<<
 *         return angles
 * 
 */

#line 87 "pyAttitude.pyx"
  { /* enter inner scope */

#line 87 "pyAttitude.pyx"
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 87, __pyx_L1_error)

#line 87 "pyAttitude.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 87 "pyAttitude.pyx"
    for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {

#line 87 "pyAttitude.pyx"
      __pyx_8genexpr3__pyx_v_i = __pyx_t_2;

#line 87 "pyAttitude.pyx"
      __pyx_t_3 = PyFloat_FromDouble((__pyx_v__ypr[__pyx_8genexpr3__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 87, __pyx_L1_error)

#line 87 "pyAttitude.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 87 "pyAttitude.pyx"
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(1, 87, __pyx_L1_error)

#line 87 "pyAttitude.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 87 "pyAttitude.pyx"
    }

#line 87 "pyAttitude.pyx"
  } /* exit inner scope */

#line 87 "pyAttitude.pyx"
  __pyx_v_angles = ((PyObject*)__pyx_t_1);

#line 87 "pyAttitude.pyx"
  __pyx_t_1 = 0;

  /* "pyAttitude.pyx":88
 *         _ypr = self.c_quaternion.ypr()
 *         angles = [_ypr[i] for i in range(3)]
 *         return angles             # <<<<<<<<<<<<<<
 * 
 *     def factoredYPR(self, list position, list velocity, pyEllipsoid pyEllps):
 */

#line 88 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 88 "pyAttitude.pyx"
  __Pyx_INCREF(__pyx_v_angles);

#line 88 "pyAttitude.pyx"
  __pyx_r = __pyx_v_angles;

#line 88 "pyAttitude.pyx"
  goto __pyx_L0;

  /* "pyAttitude.pyx":84
 *             del self.c_quaternion
 * 
 *     def ypr(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _ypr
 *         _ypr = self.c_quaternion.ypr()
 */

#line 84 "pyAttitude.pyx"


#line 84 "pyAttitude.pyx"
  /* function exit code */

#line 84 "pyAttitude.pyx"
  __pyx_L1_error:;

#line 84 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 84 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 84 "pyAttitude.pyx"
  __Pyx_AddTraceback("iscecore.pyQuaternion.ypr", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 84 "pyAttitude.pyx"
  __pyx_r = NULL;

#line 84 "pyAttitude.pyx"
  __pyx_L0:;

#line 84 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_v_angles);

#line 84 "pyAttitude.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 84 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 84 "pyAttitude.pyx"
  return __pyx_r;

#line 84 "pyAttitude.pyx"
}

/* "pyAttitude.pyx":90
 *         return angles
 * 
 *     def factoredYPR(self, list position, list velocity, pyEllipsoid pyEllps):             # <<<<<<<<<<<<<<
 *         cdef vector[double] xyz
 *         cdef vector[double] vel
 */

#line 90 "pyAttitude.pyx"


#line 90 "pyAttitude.pyx"
/* Python wrapper */

#line 90 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_12pyQuaternion_7factoredYPR(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 90 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_12pyQuaternion_7factoredYPR(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_position = 0
#line 90 "pyAttitude.pyx"
;
  PyObject *__pyx_v_velocity = 0
#line 90 "pyAttitude.pyx"
;
  struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_pyEllps = 0
#line 90 "pyAttitude.pyx"
;

#line 90 "pyAttitude.pyx"
  PyObject *__pyx_r = 0;

#line 90 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 90 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("factoredYPR (wrapper)", 0);

#line 90 "pyAttitude.pyx"
  {

#line 90 "pyAttitude.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_position,&__pyx_n_s_velocity,&__pyx_n_s_pyEllps,0};

#line 90 "pyAttitude.pyx"
    PyObject* values[3] = {0,0,0};

#line 90 "pyAttitude.pyx"
    if (unlikely(__pyx_kwds)) {

#line 90 "pyAttitude.pyx"
      Py_ssize_t kw_args;

#line 90 "pyAttitude.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 90 "pyAttitude.pyx"
      switch (pos_args) {
        case  3: 
#line 90 "pyAttitude.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 90 "pyAttitude.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 90 "pyAttitude.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 90 "pyAttitude.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 90 "pyAttitude.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 90 "pyAttitude.pyx"
        CYTHON_FALLTHROUGH;

#line 90 "pyAttitude.pyx"
        case  0: break;
        default: 
#line 90 "pyAttitude.pyx"
goto __pyx_L5_argtuple_error;

#line 90 "pyAttitude.pyx"
      }

#line 90 "pyAttitude.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 90 "pyAttitude.pyx"
      switch (pos_args) {

#line 90 "pyAttitude.pyx"
        case  0:

#line 90 "pyAttitude.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_position)) != 0)) kw_args--;
        else 
#line 90 "pyAttitude.pyx"
goto __pyx_L5_argtuple_error;

#line 90 "pyAttitude.pyx"
        CYTHON_FALLTHROUGH;

#line 90 "pyAttitude.pyx"
        case  1:

#line 90 "pyAttitude.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_velocity)) != 0)) kw_args--;

#line 90 "pyAttitude.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("factoredYPR", 1, 3, 3, 1); 
#line 90 "pyAttitude.pyx"
__PYX_ERR(1, 90, __pyx_L3_error)

#line 90 "pyAttitude.pyx"
        }

#line 90 "pyAttitude.pyx"
        CYTHON_FALLTHROUGH;

#line 90 "pyAttitude.pyx"
        case  2:

#line 90 "pyAttitude.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyEllps)) != 0)) kw_args--;

#line 90 "pyAttitude.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("factoredYPR", 1, 3, 3, 2); 
#line 90 "pyAttitude.pyx"
__PYX_ERR(1, 90, __pyx_L3_error)

#line 90 "pyAttitude.pyx"
        }

#line 90 "pyAttitude.pyx"
      }

#line 90 "pyAttitude.pyx"
      if (unlikely(kw_args > 0)) {

#line 90 "pyAttitude.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "factoredYPR") < 0)) __PYX_ERR(1, 90, __pyx_L3_error)

#line 90 "pyAttitude.pyx"
      }

#line 90 "pyAttitude.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 90 "pyAttitude.pyx"
      goto __pyx_L5_argtuple_error;

#line 90 "pyAttitude.pyx"
    } else {

#line 90 "pyAttitude.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 90 "pyAttitude.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 90 "pyAttitude.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 90 "pyAttitude.pyx"
    }

#line 90 "pyAttitude.pyx"
    __pyx_v_position = ((PyObject*)values[0]);

#line 90 "pyAttitude.pyx"
    __pyx_v_velocity = ((PyObject*)values[1]);

#line 90 "pyAttitude.pyx"
    __pyx_v_pyEllps = ((struct __pyx_obj_8iscecore_pyEllipsoid *)values[2]);

#line 90 "pyAttitude.pyx"
  }

#line 90 "pyAttitude.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 90 "pyAttitude.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("factoredYPR", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 90 "pyAttitude.pyx"
__PYX_ERR(1, 90, __pyx_L3_error)

#line 90 "pyAttitude.pyx"
  __pyx_L3_error:;

#line 90 "pyAttitude.pyx"
  __Pyx_AddTraceback("iscecore.pyQuaternion.factoredYPR", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 90 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 90 "pyAttitude.pyx"
  return NULL;

#line 90 "pyAttitude.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 90 "pyAttitude.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_position), (&PyList_Type), 1, "position", 1))) __PYX_ERR(1, 90, __pyx_L1_error)

#line 90 "pyAttitude.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_velocity), (&PyList_Type), 1, "velocity", 1))) __PYX_ERR(1, 90, __pyx_L1_error)

#line 90 "pyAttitude.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pyEllps), __pyx_ptype_8iscecore_pyEllipsoid, 1, "pyEllps", 0))) __PYX_ERR(1, 90, __pyx_L1_error)
  __pyx_r = 
#line 90 "pyAttitude.pyx"
__pyx_pf_8iscecore_12pyQuaternion_6factoredYPR(((struct __pyx_obj_8iscecore_pyQuaternion *)__pyx_v_self), __pyx_v_position, __pyx_v_velocity, __pyx_v_pyEllps);

#line 90 "pyAttitude.pyx"


#line 90 "pyAttitude.pyx"
  /* function exit code */

#line 90 "pyAttitude.pyx"
  goto __pyx_L0;

#line 90 "pyAttitude.pyx"
  __pyx_L1_error:;

#line 90 "pyAttitude.pyx"
  __pyx_r = NULL;

#line 90 "pyAttitude.pyx"
  __pyx_L0:;

#line 90 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 90 "pyAttitude.pyx"
  return __pyx_r;

#line 90 "pyAttitude.pyx"
}

#line 90 "pyAttitude.pyx"


#line 90 "pyAttitude.pyx"
static PyObject *__pyx_pf_8iscecore_12pyQuaternion_6factoredYPR(struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_self, PyObject *__pyx_v_position, PyObject *__pyx_v_velocity, struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_pyEllps) {
  std::vector<double>  __pyx_v_xyz
#line 90 "pyAttitude.pyx"
;
  std::vector<double>  __pyx_v_vel
#line 90 "pyAttitude.pyx"
;
  int __pyx_v_i
#line 90 "pyAttitude.pyx"
;
  std::vector<double>  __pyx_v_ypr_vec
#line 90 "pyAttitude.pyx"
;
  PyObject *__pyx_v_angles = NULL
#line 90 "pyAttitude.pyx"
;
  int __pyx_8genexpr4__pyx_v_i
#line 90 "pyAttitude.pyx"
;

#line 90 "pyAttitude.pyx"
  PyObject *__pyx_r = NULL;

#line 90 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 90 "pyAttitude.pyx"
  int __pyx_t_1;

#line 90 "pyAttitude.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 90 "pyAttitude.pyx"
  double __pyx_t_3;

#line 90 "pyAttitude.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 90 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("factoredYPR", 0);

  /* "pyAttitude.pyx":94
 *         cdef vector[double] vel
 *         cdef int i
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             xyz.push_back(position[i])
 *             vel.push_back(velocity[i])
 */

#line 94 "pyAttitude.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 94 "pyAttitude.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyAttitude.pyx":95
 *         cdef int i
 *         for i in range(3):
 *             xyz.push_back(position[i])             # <<<<<<<<<<<<<<
 *             vel.push_back(velocity[i])
 *         cdef vector[double] ypr_vec = self.c_quaternion.factoredYPR(xyz, vel, pyEllps.c_ellipsoid)
 */

#line 95 "pyAttitude.pyx"
    if (unlikely(__pyx_v_position == Py_None)) {

#line 95 "pyAttitude.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 95 "pyAttitude.pyx"
      __PYX_ERR(1, 95, __pyx_L1_error)

#line 95 "pyAttitude.pyx"
    }

#line 95 "pyAttitude.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_position, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 95, __pyx_L1_error)

#line 95 "pyAttitude.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 95 "pyAttitude.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 95, __pyx_L1_error)

#line 95 "pyAttitude.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 95 "pyAttitude.pyx"
    try {

#line 95 "pyAttitude.pyx"
      __pyx_v_xyz.push_back(__pyx_t_3);

#line 95 "pyAttitude.pyx"
    } catch(...) {

#line 95 "pyAttitude.pyx"
      __Pyx_CppExn2PyErr();

#line 95 "pyAttitude.pyx"
      __PYX_ERR(1, 95, __pyx_L1_error)

#line 95 "pyAttitude.pyx"
    }

    /* "pyAttitude.pyx":96
 *         for i in range(3):
 *             xyz.push_back(position[i])
 *             vel.push_back(velocity[i])             # <<<<<<<<<<<<<<
 *         cdef vector[double] ypr_vec = self.c_quaternion.factoredYPR(xyz, vel, pyEllps.c_ellipsoid)
 *         angles = [ypr_vec[i] for i in range(3)]
 */

#line 96 "pyAttitude.pyx"
    if (unlikely(__pyx_v_velocity == Py_None)) {

#line 96 "pyAttitude.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 96 "pyAttitude.pyx"
      __PYX_ERR(1, 96, __pyx_L1_error)

#line 96 "pyAttitude.pyx"
    }

#line 96 "pyAttitude.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_velocity, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 96, __pyx_L1_error)

#line 96 "pyAttitude.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 96 "pyAttitude.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 96, __pyx_L1_error)

#line 96 "pyAttitude.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 96 "pyAttitude.pyx"
    try {

#line 96 "pyAttitude.pyx"
      __pyx_v_vel.push_back(__pyx_t_3);

#line 96 "pyAttitude.pyx"
    } catch(...) {

#line 96 "pyAttitude.pyx"
      __Pyx_CppExn2PyErr();

#line 96 "pyAttitude.pyx"
      __PYX_ERR(1, 96, __pyx_L1_error)

#line 96 "pyAttitude.pyx"
    }

#line 96 "pyAttitude.pyx"
  }

  /* "pyAttitude.pyx":97
 *             xyz.push_back(position[i])
 *             vel.push_back(velocity[i])
 *         cdef vector[double] ypr_vec = self.c_quaternion.factoredYPR(xyz, vel, pyEllps.c_ellipsoid)             # <<<<<<<<<<<<<<
 *         angles = [ypr_vec[i] for i in range(3)]
 *         return angles
 */

#line 97 "pyAttitude.pyx"
  __pyx_v_ypr_vec = __pyx_v_self->c_quaternion->factoredYPR(__pyx_v_xyz, __pyx_v_vel, __pyx_v_pyEllps->c_ellipsoid);

  /* "pyAttitude.pyx":98
 *             vel.push_back(velocity[i])
 *         cdef vector[double] ypr_vec = self.c_quaternion.factoredYPR(xyz, vel, pyEllps.c_ellipsoid)
 *         angles = [ypr_vec[i] for i in range(3)]             # <<<<<<<<<<<<<<
 *         return angles
 * 
 */

#line 98 "pyAttitude.pyx"
  { /* enter inner scope */

#line 98 "pyAttitude.pyx"
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 98, __pyx_L1_error)

#line 98 "pyAttitude.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 98 "pyAttitude.pyx"
    for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 98 "pyAttitude.pyx"
      __pyx_8genexpr4__pyx_v_i = __pyx_t_1;

#line 98 "pyAttitude.pyx"
      __pyx_t_4 = PyFloat_FromDouble((__pyx_v_ypr_vec[__pyx_8genexpr4__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 98, __pyx_L1_error)

#line 98 "pyAttitude.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 98 "pyAttitude.pyx"
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 98, __pyx_L1_error)

#line 98 "pyAttitude.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 98 "pyAttitude.pyx"
    }

#line 98 "pyAttitude.pyx"
  } /* exit inner scope */

#line 98 "pyAttitude.pyx"
  __pyx_v_angles = ((PyObject*)__pyx_t_2);

#line 98 "pyAttitude.pyx"
  __pyx_t_2 = 0;

  /* "pyAttitude.pyx":99
 *         cdef vector[double] ypr_vec = self.c_quaternion.factoredYPR(xyz, vel, pyEllps.c_ellipsoid)
 *         angles = [ypr_vec[i] for i in range(3)]
 *         return angles             # <<<<<<<<<<<<<<
 * 
 *     def rotmat(self):
 */

#line 99 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 99 "pyAttitude.pyx"
  __Pyx_INCREF(__pyx_v_angles);

#line 99 "pyAttitude.pyx"
  __pyx_r = __pyx_v_angles;

#line 99 "pyAttitude.pyx"
  goto __pyx_L0;

  /* "pyAttitude.pyx":90
 *         return angles
 * 
 *     def factoredYPR(self, list position, list velocity, pyEllipsoid pyEllps):             # <<<<<<<<<<<<<<
 *         cdef vector[double] xyz
 *         cdef vector[double] vel
 */

#line 90 "pyAttitude.pyx"


#line 90 "pyAttitude.pyx"
  /* function exit code */

#line 90 "pyAttitude.pyx"
  __pyx_L1_error:;

#line 90 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 90 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 90 "pyAttitude.pyx"
  __Pyx_AddTraceback("iscecore.pyQuaternion.factoredYPR", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 90 "pyAttitude.pyx"
  __pyx_r = NULL;

#line 90 "pyAttitude.pyx"
  __pyx_L0:;

#line 90 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_v_angles);

#line 90 "pyAttitude.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 90 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 90 "pyAttitude.pyx"
  return __pyx_r;

#line 90 "pyAttitude.pyx"
}

/* "pyAttitude.pyx":101
 *         return angles
 * 
 *     def rotmat(self):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] Rvec
 *         cdef string sequence_str = "".encode('utf-8')
 */

#line 101 "pyAttitude.pyx"


#line 101 "pyAttitude.pyx"
/* Python wrapper */

#line 101 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_12pyQuaternion_9rotmat(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 101 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_12pyQuaternion_9rotmat(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 101 "pyAttitude.pyx"
  PyObject *__pyx_r = 0;

#line 101 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 101 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("rotmat (wrapper)", 0);
  __pyx_r = 
#line 101 "pyAttitude.pyx"
__pyx_pf_8iscecore_12pyQuaternion_8rotmat(((struct __pyx_obj_8iscecore_pyQuaternion *)__pyx_v_self));

#line 101 "pyAttitude.pyx"


#line 101 "pyAttitude.pyx"
  /* function exit code */

#line 101 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 101 "pyAttitude.pyx"
  return __pyx_r;

#line 101 "pyAttitude.pyx"
}

#line 101 "pyAttitude.pyx"


#line 101 "pyAttitude.pyx"
static PyObject *__pyx_pf_8iscecore_12pyQuaternion_8rotmat(struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_self) {
  std::vector<std::vector<double> >  __pyx_v_Rvec
#line 101 "pyAttitude.pyx"
;
  std::string __pyx_v_sequence_str
#line 101 "pyAttitude.pyx"
;
  PyObject *__pyx_v_R = NULL
#line 101 "pyAttitude.pyx"
;
  long __pyx_v_i
#line 101 "pyAttitude.pyx"
;
  PyObject *__pyx_v_row = NULL
#line 101 "pyAttitude.pyx"
;
  long __pyx_8genexpr5__pyx_v_j
#line 101 "pyAttitude.pyx"
;

#line 101 "pyAttitude.pyx"
  PyObject *__pyx_r = NULL;

#line 101 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 101 "pyAttitude.pyx"
  std::string __pyx_t_1;

#line 101 "pyAttitude.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 101 "pyAttitude.pyx"
  long __pyx_t_3;

#line 101 "pyAttitude.pyx"
  long __pyx_t_4;

#line 101 "pyAttitude.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 101 "pyAttitude.pyx"
  int __pyx_t_6;

#line 101 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("rotmat", 0);

  /* "pyAttitude.pyx":103
 *     def rotmat(self):
 *         cdef vector[vector[double]] Rvec
 *         cdef string sequence_str = "".encode('utf-8')             # <<<<<<<<<<<<<<
 *         Rvec = self.c_quaternion.rotmat(sequence_str)
 *         R = []
 */

#line 103 "pyAttitude.pyx"
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b__4); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 103, __pyx_L1_error)

#line 103 "pyAttitude.pyx"
  __pyx_v_sequence_str = __pyx_t_1;

  /* "pyAttitude.pyx":104
 *         cdef vector[vector[double]] Rvec
 *         cdef string sequence_str = "".encode('utf-8')
 *         Rvec = self.c_quaternion.rotmat(sequence_str)             # <<<<<<<<<<<<<<
 *         R = []
 *         for i in range(3):
 */

#line 104 "pyAttitude.pyx"
  __pyx_v_Rvec = __pyx_v_self->c_quaternion->rotmat(__pyx_v_sequence_str);

  /* "pyAttitude.pyx":105
 *         cdef string sequence_str = "".encode('utf-8')
 *         Rvec = self.c_quaternion.rotmat(sequence_str)
 *         R = []             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             row = [Rvec[i][j] for j in range(3)]
 */

#line 105 "pyAttitude.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 105, __pyx_L1_error)

#line 105 "pyAttitude.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 105 "pyAttitude.pyx"
  __pyx_v_R = ((PyObject*)__pyx_t_2);

#line 105 "pyAttitude.pyx"
  __pyx_t_2 = 0;

  /* "pyAttitude.pyx":106
 *         Rvec = self.c_quaternion.rotmat(sequence_str)
 *         R = []
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             row = [Rvec[i][j] for j in range(3)]
 *             R.append(row)
 */

#line 106 "pyAttitude.pyx"
  for (__pyx_t_3 = 0; __pyx_t_3 < 3; __pyx_t_3+=1) {

#line 106 "pyAttitude.pyx"
    __pyx_v_i = __pyx_t_3;

    /* "pyAttitude.pyx":107
 *         R = []
 *         for i in range(3):
 *             row = [Rvec[i][j] for j in range(3)]             # <<<<<<<<<<<<<<
 *             R.append(row)
 *         return R
 */

#line 107 "pyAttitude.pyx"
    { /* enter inner scope */

#line 107 "pyAttitude.pyx"
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 107, __pyx_L1_error)

#line 107 "pyAttitude.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 107 "pyAttitude.pyx"
      for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {

#line 107 "pyAttitude.pyx"
        __pyx_8genexpr5__pyx_v_j = __pyx_t_4;

#line 107 "pyAttitude.pyx"
        __pyx_t_5 = PyFloat_FromDouble(((__pyx_v_Rvec[__pyx_v_i])[__pyx_8genexpr5__pyx_v_j])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 107, __pyx_L1_error)

#line 107 "pyAttitude.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 107 "pyAttitude.pyx"
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 107, __pyx_L1_error)

#line 107 "pyAttitude.pyx"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 107 "pyAttitude.pyx"
      }

#line 107 "pyAttitude.pyx"
    } /* exit inner scope */

#line 107 "pyAttitude.pyx"
    __Pyx_XDECREF_SET(__pyx_v_row, ((PyObject*)__pyx_t_2));

#line 107 "pyAttitude.pyx"
    __pyx_t_2 = 0;

    /* "pyAttitude.pyx":108
 *         for i in range(3):
 *             row = [Rvec[i][j] for j in range(3)]
 *             R.append(row)             # <<<<<<<<<<<<<<
 *         return R
 * 
 */

#line 108 "pyAttitude.pyx"
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_R, __pyx_v_row); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 108, __pyx_L1_error)

#line 108 "pyAttitude.pyx"
  }

  /* "pyAttitude.pyx":109
 *             row = [Rvec[i][j] for j in range(3)]
 *             R.append(row)
 *         return R             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 109 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 109 "pyAttitude.pyx"
  __Pyx_INCREF(__pyx_v_R);

#line 109 "pyAttitude.pyx"
  __pyx_r = __pyx_v_R;

#line 109 "pyAttitude.pyx"
  goto __pyx_L0;

  /* "pyAttitude.pyx":101
 *         return angles
 * 
 *     def rotmat(self):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] Rvec
 *         cdef string sequence_str = "".encode('utf-8')
 */

#line 101 "pyAttitude.pyx"


#line 101 "pyAttitude.pyx"
  /* function exit code */

#line 101 "pyAttitude.pyx"
  __pyx_L1_error:;

#line 101 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 101 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 101 "pyAttitude.pyx"
  __Pyx_AddTraceback("iscecore.pyQuaternion.rotmat", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 101 "pyAttitude.pyx"
  __pyx_r = NULL;

#line 101 "pyAttitude.pyx"
  __pyx_L0:;

#line 101 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_v_R);

#line 101 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_v_row);

#line 101 "pyAttitude.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 101 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 101 "pyAttitude.pyx"
  return __pyx_r;

#line 101 "pyAttitude.pyx"
}

/* "pyAttitude.pyx":112
 * 
 *     @property
 *     def qvec(self):             # <<<<<<<<<<<<<<
 *         q = [self.c_quaternion.qvec[i] for i in range(4)]
 *         return q
 */

#line 112 "pyAttitude.pyx"


#line 112 "pyAttitude.pyx"
/* Python wrapper */

#line 112 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_12pyQuaternion_4qvec_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 112 "pyAttitude.pyx"
static PyObject *__pyx_pw_8iscecore_12pyQuaternion_4qvec_1__get__(PyObject *__pyx_v_self) {

#line 112 "pyAttitude.pyx"
  PyObject *__pyx_r = 0;

#line 112 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 112 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 112 "pyAttitude.pyx"
__pyx_pf_8iscecore_12pyQuaternion_4qvec___get__(((struct __pyx_obj_8iscecore_pyQuaternion *)__pyx_v_self));

#line 112 "pyAttitude.pyx"


#line 112 "pyAttitude.pyx"
  /* function exit code */

#line 112 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 112 "pyAttitude.pyx"
  return __pyx_r;

#line 112 "pyAttitude.pyx"
}

#line 112 "pyAttitude.pyx"


#line 112 "pyAttitude.pyx"
static PyObject *__pyx_pf_8iscecore_12pyQuaternion_4qvec___get__(struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_self) {
  PyObject *__pyx_v_q = NULL
#line 112 "pyAttitude.pyx"
;
  long __pyx_8genexpr6__pyx_v_i
#line 112 "pyAttitude.pyx"
;

#line 112 "pyAttitude.pyx"
  PyObject *__pyx_r = NULL;

#line 112 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 112 "pyAttitude.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 112 "pyAttitude.pyx"
  long __pyx_t_2;

#line 112 "pyAttitude.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 112 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyAttitude.pyx":113
 *     @property
 *     def qvec(self):
 *         q = [self.c_quaternion.qvec[i] for i in range(4)]             # <<<<<<<<<<<<<<
 *         return q
 *     @qvec.setter
 */

#line 113 "pyAttitude.pyx"
  { /* enter inner scope */

#line 113 "pyAttitude.pyx"
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 113, __pyx_L1_error)

#line 113 "pyAttitude.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 113 "pyAttitude.pyx"
    for (__pyx_t_2 = 0; __pyx_t_2 < 4; __pyx_t_2+=1) {

#line 113 "pyAttitude.pyx"
      __pyx_8genexpr6__pyx_v_i = __pyx_t_2;

#line 113 "pyAttitude.pyx"
      __pyx_t_3 = PyFloat_FromDouble((__pyx_v_self->c_quaternion->qvec[__pyx_8genexpr6__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 113, __pyx_L1_error)

#line 113 "pyAttitude.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 113 "pyAttitude.pyx"
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(1, 113, __pyx_L1_error)

#line 113 "pyAttitude.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 113 "pyAttitude.pyx"
    }

#line 113 "pyAttitude.pyx"
  } /* exit inner scope */

#line 113 "pyAttitude.pyx"
  __pyx_v_q = ((PyObject*)__pyx_t_1);

#line 113 "pyAttitude.pyx"
  __pyx_t_1 = 0;

  /* "pyAttitude.pyx":114
 *     def qvec(self):
 *         q = [self.c_quaternion.qvec[i] for i in range(4)]
 *         return q             # <<<<<<<<<<<<<<
 *     @qvec.setter
 *     def qvec(self, vec):
 */

#line 114 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 114 "pyAttitude.pyx"
  __Pyx_INCREF(__pyx_v_q);

#line 114 "pyAttitude.pyx"
  __pyx_r = __pyx_v_q;

#line 114 "pyAttitude.pyx"
  goto __pyx_L0;

  /* "pyAttitude.pyx":112
 * 
 *     @property
 *     def qvec(self):             # <<<<<<<<<<<<<<
 *         q = [self.c_quaternion.qvec[i] for i in range(4)]
 *         return q
 */

#line 112 "pyAttitude.pyx"


#line 112 "pyAttitude.pyx"
  /* function exit code */

#line 112 "pyAttitude.pyx"
  __pyx_L1_error:;

#line 112 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 112 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 112 "pyAttitude.pyx"
  __Pyx_AddTraceback("iscecore.pyQuaternion.qvec.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 112 "pyAttitude.pyx"
  __pyx_r = NULL;

#line 112 "pyAttitude.pyx"
  __pyx_L0:;

#line 112 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_v_q);

#line 112 "pyAttitude.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 112 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 112 "pyAttitude.pyx"
  return __pyx_r;

#line 112 "pyAttitude.pyx"
}

/* "pyAttitude.pyx":116
 *         return q
 *     @qvec.setter
 *     def qvec(self, vec):             # <<<<<<<<<<<<<<
 *         for i in range(4):
 *             self.c_quaternion.qvec[i] = vec[i]
 */

#line 116 "pyAttitude.pyx"


#line 116 "pyAttitude.pyx"
/* Python wrapper */

#line 116 "pyAttitude.pyx"
static int __pyx_pw_8iscecore_12pyQuaternion_4qvec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_vec); /*proto*/

#line 116 "pyAttitude.pyx"
static int __pyx_pw_8iscecore_12pyQuaternion_4qvec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_vec) {

#line 116 "pyAttitude.pyx"
  int __pyx_r;

#line 116 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 116 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = 
#line 116 "pyAttitude.pyx"
__pyx_pf_8iscecore_12pyQuaternion_4qvec_2__set__(((struct __pyx_obj_8iscecore_pyQuaternion *)__pyx_v_self), ((PyObject *)__pyx_v_vec));

#line 116 "pyAttitude.pyx"


#line 116 "pyAttitude.pyx"
  /* function exit code */

#line 116 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 116 "pyAttitude.pyx"
  return __pyx_r;

#line 116 "pyAttitude.pyx"
}

#line 116 "pyAttitude.pyx"


#line 116 "pyAttitude.pyx"
static int __pyx_pf_8iscecore_12pyQuaternion_4qvec_2__set__(struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_self, PyObject *__pyx_v_vec) {
  long __pyx_v_i
#line 116 "pyAttitude.pyx"
;

#line 116 "pyAttitude.pyx"
  int __pyx_r;

#line 116 "pyAttitude.pyx"
  __Pyx_RefNannyDeclarations

#line 116 "pyAttitude.pyx"
  long __pyx_t_1;

#line 116 "pyAttitude.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 116 "pyAttitude.pyx"
  double __pyx_t_3;

#line 116 "pyAttitude.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyAttitude.pyx":117
 *     @qvec.setter
 *     def qvec(self, vec):
 *         for i in range(4):             # <<<<<<<<<<<<<<
 *             self.c_quaternion.qvec[i] = vec[i]
 * 
 */

#line 117 "pyAttitude.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {

#line 117 "pyAttitude.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyAttitude.pyx":118
 *     def qvec(self, vec):
 *         for i in range(4):
 *             self.c_quaternion.qvec[i] = vec[i]             # <<<<<<<<<<<<<<
 * 
 * # end of file
 */

#line 118 "pyAttitude.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_vec, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 118, __pyx_L1_error)

#line 118 "pyAttitude.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 118 "pyAttitude.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 118, __pyx_L1_error)

#line 118 "pyAttitude.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 118 "pyAttitude.pyx"
    (__pyx_v_self->c_quaternion->qvec[__pyx_v_i]) = __pyx_t_3;

#line 118 "pyAttitude.pyx"
  }

  /* "pyAttitude.pyx":116
 *         return q
 *     @qvec.setter
 *     def qvec(self, vec):             # <<<<<<<<<<<<<<
 *         for i in range(4):
 *             self.c_quaternion.qvec[i] = vec[i]
 */

#line 116 "pyAttitude.pyx"


#line 116 "pyAttitude.pyx"
  /* function exit code */

#line 116 "pyAttitude.pyx"
  __pyx_r = 0;

#line 116 "pyAttitude.pyx"
  goto __pyx_L0;

#line 116 "pyAttitude.pyx"
  __pyx_L1_error:;

#line 116 "pyAttitude.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 116 "pyAttitude.pyx"
  __Pyx_AddTraceback("iscecore.pyQuaternion.qvec.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 116 "pyAttitude.pyx"
  __pyx_r = -1;

#line 116 "pyAttitude.pyx"
  __pyx_L0:;

#line 116 "pyAttitude.pyx"
  __Pyx_RefNannyFinishContext();

#line 116 "pyAttitude.pyx"
  return __pyx_r;

#line 116 "pyAttitude.pyx"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_12pyQuaternion_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_12pyQuaternion_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_8iscecore_12pyQuaternion_10__reduce_cython__(((struct __pyx_obj_8iscecore_pyQuaternion *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_12pyQuaternion_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyQuaternion.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_12pyQuaternion_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_12pyQuaternion_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf_8iscecore_12pyQuaternion_12__setstate_cython__(((struct __pyx_obj_8iscecore_pyQuaternion *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_12pyQuaternion_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyQuaternion.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "pyDoppler.pyx":25
 *     cdef bool __owner
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set __owner to False to prevent creation of base class
 */

#line 25 "pyDoppler.pyx"


#line 25 "pyDoppler.pyx"
/* Python wrapper */

#line 25 "pyDoppler.pyx"
static int __pyx_pw_8iscecore_9pyDoppler_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 25 "pyDoppler.pyx"
static int __pyx_pw_8iscecore_9pyDoppler_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 25 "pyDoppler.pyx"
  int __pyx_r;

#line 25 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 25 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 25 "pyDoppler.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 25 "pyDoppler.pyx"
}

#line 25 "pyDoppler.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = 
#line 25 "pyDoppler.pyx"
__pyx_pf_8iscecore_9pyDoppler___cinit__(((struct __pyx_obj_8iscecore_pyDoppler *)__pyx_v_self));

#line 25 "pyDoppler.pyx"


#line 25 "pyDoppler.pyx"
  /* function exit code */

#line 25 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 25 "pyDoppler.pyx"
  return __pyx_r;

#line 25 "pyDoppler.pyx"
}

#line 25 "pyDoppler.pyx"


#line 25 "pyDoppler.pyx"
static int __pyx_pf_8iscecore_9pyDoppler___cinit__(struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self) {

#line 25 "pyDoppler.pyx"
  int __pyx_r;

#line 25 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 25 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyDoppler.pyx":29
 *         Set __owner to False to prevent creation of base class
 *         """
 *         self.__owner = False             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */

#line 29 "pyDoppler.pyx"
  __pyx_v_self->__pyx___owner = 0;

  /* "pyDoppler.pyx":25
 *     cdef bool __owner
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set __owner to False to prevent creation of base class
 */

#line 25 "pyDoppler.pyx"


#line 25 "pyDoppler.pyx"
  /* function exit code */

#line 25 "pyDoppler.pyx"
  __pyx_r = 0;

#line 25 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 25 "pyDoppler.pyx"
  return __pyx_r;

#line 25 "pyDoppler.pyx"
}

/* "pyDoppler.pyx":31
 *         self.__owner = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_doppler
 */

#line 31 "pyDoppler.pyx"


#line 31 "pyDoppler.pyx"
/* Python wrapper */

#line 31 "pyDoppler.pyx"
static void __pyx_pw_8iscecore_9pyDoppler_3__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 31 "pyDoppler.pyx"
static void __pyx_pw_8iscecore_9pyDoppler_3__dealloc__(PyObject *__pyx_v_self) {

#line 31 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 31 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 31 "pyDoppler.pyx"
  __pyx_pf_8iscecore_9pyDoppler_2__dealloc__(((struct __pyx_obj_8iscecore_pyDoppler *)__pyx_v_self));

#line 31 "pyDoppler.pyx"


#line 31 "pyDoppler.pyx"
  /* function exit code */

#line 31 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 31 "pyDoppler.pyx"
}

#line 31 "pyDoppler.pyx"


#line 31 "pyDoppler.pyx"
static void __pyx_pf_8iscecore_9pyDoppler_2__dealloc__(struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self) {

#line 31 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 31 "pyDoppler.pyx"
  int __pyx_t_1;

#line 31 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyDoppler.pyx":32
 * 
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_doppler
 * 
 */

#line 32 "pyDoppler.pyx"
  __pyx_t_1 = (__pyx_v_self->__pyx___owner != 0);

#line 32 "pyDoppler.pyx"
  if (__pyx_t_1) {

    /* "pyDoppler.pyx":33
 *     def __dealloc__(self):
 *         if self.__owner:
 *             del self.c_doppler             # <<<<<<<<<<<<<<
 * 
 *     def centroid(self, double slantRange, double wvl, int max_iter=10):
 */

#line 33 "pyDoppler.pyx"
    delete __pyx_v_self->c_doppler;

    /* "pyDoppler.pyx":32
 * 
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_doppler
 * 
 */

#line 32 "pyDoppler.pyx"
  }

  /* "pyDoppler.pyx":31
 *         self.__owner = False
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_doppler
 */

#line 31 "pyDoppler.pyx"


#line 31 "pyDoppler.pyx"
  /* function exit code */

#line 31 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 31 "pyDoppler.pyx"
}

/* "pyDoppler.pyx":35
 *             del self.c_doppler
 * 
 *     def centroid(self, double slantRange, double wvl, int max_iter=10):             # <<<<<<<<<<<<<<
 *         cdef double fd = self.c_doppler.centroid(slantRange, wvl, self.frame, max_iter,
 *             self.side, self.precession)
 */

#line 35 "pyDoppler.pyx"


#line 35 "pyDoppler.pyx"
/* Python wrapper */

#line 35 "pyDoppler.pyx"
static PyObject *__pyx_pw_8iscecore_9pyDoppler_5centroid(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 35 "pyDoppler.pyx"
static PyObject *__pyx_pw_8iscecore_9pyDoppler_5centroid(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_slantRange
#line 35 "pyDoppler.pyx"
;
  double __pyx_v_wvl
#line 35 "pyDoppler.pyx"
;
  int __pyx_v_max_iter
#line 35 "pyDoppler.pyx"
;

#line 35 "pyDoppler.pyx"
  PyObject *__pyx_r = 0;

#line 35 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 35 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("centroid (wrapper)", 0);

#line 35 "pyDoppler.pyx"
  {

#line 35 "pyDoppler.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_slantRange,&__pyx_n_s_wvl,&__pyx_n_s_max_iter,0};

#line 35 "pyDoppler.pyx"
    PyObject* values[3] = {0,0,0};

#line 35 "pyDoppler.pyx"
    if (unlikely(__pyx_kwds)) {

#line 35 "pyDoppler.pyx"
      Py_ssize_t kw_args;

#line 35 "pyDoppler.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 35 "pyDoppler.pyx"
      switch (pos_args) {
        case  3: 
#line 35 "pyDoppler.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 35 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 35 "pyDoppler.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 35 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 35 "pyDoppler.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 35 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 35 "pyDoppler.pyx"
        case  0: break;
        default: 
#line 35 "pyDoppler.pyx"
goto __pyx_L5_argtuple_error;

#line 35 "pyDoppler.pyx"
      }

#line 35 "pyDoppler.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 35 "pyDoppler.pyx"
      switch (pos_args) {

#line 35 "pyDoppler.pyx"
        case  0:

#line 35 "pyDoppler.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_slantRange)) != 0)) kw_args--;
        else 
#line 35 "pyDoppler.pyx"
goto __pyx_L5_argtuple_error;

#line 35 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 35 "pyDoppler.pyx"
        case  1:

#line 35 "pyDoppler.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_wvl)) != 0)) kw_args--;

#line 35 "pyDoppler.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("centroid", 0, 2, 3, 1); 
#line 35 "pyDoppler.pyx"
__PYX_ERR(3, 35, __pyx_L3_error)

#line 35 "pyDoppler.pyx"
        }

#line 35 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 35 "pyDoppler.pyx"
        case  2:

#line 35 "pyDoppler.pyx"
        if (kw_args > 0) {

#line 35 "pyDoppler.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_iter);

#line 35 "pyDoppler.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 35 "pyDoppler.pyx"
        }

#line 35 "pyDoppler.pyx"
      }

#line 35 "pyDoppler.pyx"
      if (unlikely(kw_args > 0)) {

#line 35 "pyDoppler.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "centroid") < 0)) __PYX_ERR(3, 35, __pyx_L3_error)

#line 35 "pyDoppler.pyx"
      }

#line 35 "pyDoppler.pyx"
    } else {

#line 35 "pyDoppler.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 35 "pyDoppler.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 35 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 35 "pyDoppler.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 35 "pyDoppler.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 35 "pyDoppler.pyx"
        break;
        default: 
#line 35 "pyDoppler.pyx"
goto __pyx_L5_argtuple_error;

#line 35 "pyDoppler.pyx"
      }

#line 35 "pyDoppler.pyx"
    }

#line 35 "pyDoppler.pyx"
    __pyx_v_slantRange = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_slantRange == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 35, __pyx_L3_error)

#line 35 "pyDoppler.pyx"
    __pyx_v_wvl = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_wvl == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 35, __pyx_L3_error)

#line 35 "pyDoppler.pyx"
    if (values[2]) {

#line 35 "pyDoppler.pyx"
      __pyx_v_max_iter = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_max_iter == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 35, __pyx_L3_error)

#line 35 "pyDoppler.pyx"
    } else {

#line 35 "pyDoppler.pyx"
      __pyx_v_max_iter = ((int)10);

#line 35 "pyDoppler.pyx"
    }

#line 35 "pyDoppler.pyx"
  }

#line 35 "pyDoppler.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 35 "pyDoppler.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("centroid", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 35 "pyDoppler.pyx"
__PYX_ERR(3, 35, __pyx_L3_error)

#line 35 "pyDoppler.pyx"
  __pyx_L3_error:;

#line 35 "pyDoppler.pyx"
  __Pyx_AddTraceback("iscecore.pyDoppler.centroid", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 35 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 35 "pyDoppler.pyx"
  return NULL;

#line 35 "pyDoppler.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 35 "pyDoppler.pyx"
__pyx_pf_8iscecore_9pyDoppler_4centroid(((struct __pyx_obj_8iscecore_pyDoppler *)__pyx_v_self), __pyx_v_slantRange, __pyx_v_wvl, __pyx_v_max_iter);

#line 35 "pyDoppler.pyx"


#line 35 "pyDoppler.pyx"
  /* function exit code */

#line 35 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 35 "pyDoppler.pyx"
  return __pyx_r;

#line 35 "pyDoppler.pyx"
}

#line 35 "pyDoppler.pyx"


#line 35 "pyDoppler.pyx"
static PyObject *__pyx_pf_8iscecore_9pyDoppler_4centroid(struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self, double __pyx_v_slantRange, double __pyx_v_wvl, int __pyx_v_max_iter) {
  double __pyx_v_fd
#line 35 "pyDoppler.pyx"
;

#line 35 "pyDoppler.pyx"
  PyObject *__pyx_r = NULL;

#line 35 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 35 "pyDoppler.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 35 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("centroid", 0);

  /* "pyDoppler.pyx":36
 * 
 *     def centroid(self, double slantRange, double wvl, int max_iter=10):
 *         cdef double fd = self.c_doppler.centroid(slantRange, wvl, self.frame, max_iter,             # <<<<<<<<<<<<<<
 *             self.side, self.precession)
 *         return fd
 */

#line 36 "pyDoppler.pyx"
  __pyx_v_fd = __pyx_v_self->c_doppler->centroid(__pyx_v_slantRange, __pyx_v_wvl, __pyx_v_self->frame, __pyx_v_max_iter, __pyx_v_self->side, __pyx_v_self->precession);

  /* "pyDoppler.pyx":38
 *         cdef double fd = self.c_doppler.centroid(slantRange, wvl, self.frame, max_iter,
 *             self.side, self.precession)
 *         return fd             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */

#line 38 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 38 "pyDoppler.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_fd); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 38, __pyx_L1_error)

#line 38 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 38 "pyDoppler.pyx"
  __pyx_r = __pyx_t_1;

#line 38 "pyDoppler.pyx"
  __pyx_t_1 = 0;

#line 38 "pyDoppler.pyx"
  goto __pyx_L0;

  /* "pyDoppler.pyx":35
 *             del self.c_doppler
 * 
 *     def centroid(self, double slantRange, double wvl, int max_iter=10):             # <<<<<<<<<<<<<<
 *         cdef double fd = self.c_doppler.centroid(slantRange, wvl, self.frame, max_iter,
 *             self.side, self.precession)
 */

#line 35 "pyDoppler.pyx"


#line 35 "pyDoppler.pyx"
  /* function exit code */

#line 35 "pyDoppler.pyx"
  __pyx_L1_error:;

#line 35 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 35 "pyDoppler.pyx"
  __Pyx_AddTraceback("iscecore.pyDoppler.centroid", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 35 "pyDoppler.pyx"
  __pyx_r = NULL;

#line 35 "pyDoppler.pyx"
  __pyx_L0:;

#line 35 "pyDoppler.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 35 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 35 "pyDoppler.pyx"
  return __pyx_r;

#line 35 "pyDoppler.pyx"
}

/* "pyDoppler.pyx":42
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     def centroidProfile(self, np.ndarray[np.float64_t, ndim=1] slantRange,             # <<<<<<<<<<<<<<
 *         double wvl, int max_iter=10):
 * 
 */

#line 42 "pyDoppler.pyx"


#line 42 "pyDoppler.pyx"
/* Python wrapper */

#line 42 "pyDoppler.pyx"
static PyObject *__pyx_pw_8iscecore_9pyDoppler_7centroidProfile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 42 "pyDoppler.pyx"
static PyObject *__pyx_pw_8iscecore_9pyDoppler_7centroidProfile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_slantRange = 0
#line 42 "pyDoppler.pyx"
;
  double __pyx_v_wvl
#line 42 "pyDoppler.pyx"
;
  int __pyx_v_max_iter
#line 42 "pyDoppler.pyx"
;

#line 42 "pyDoppler.pyx"
  PyObject *__pyx_r = 0;

#line 42 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 42 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("centroidProfile (wrapper)", 0);

#line 42 "pyDoppler.pyx"
  {

#line 42 "pyDoppler.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_slantRange,&__pyx_n_s_wvl,&__pyx_n_s_max_iter,0};

#line 42 "pyDoppler.pyx"
    PyObject* values[3] = {0,0,0};

#line 42 "pyDoppler.pyx"
    if (unlikely(__pyx_kwds)) {

#line 42 "pyDoppler.pyx"
      Py_ssize_t kw_args;

#line 42 "pyDoppler.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 42 "pyDoppler.pyx"
      switch (pos_args) {
        case  3: 
#line 42 "pyDoppler.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 42 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 42 "pyDoppler.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 42 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 42 "pyDoppler.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 42 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 42 "pyDoppler.pyx"
        case  0: break;
        default: 
#line 42 "pyDoppler.pyx"
goto __pyx_L5_argtuple_error;

#line 42 "pyDoppler.pyx"
      }

#line 42 "pyDoppler.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 42 "pyDoppler.pyx"
      switch (pos_args) {

#line 42 "pyDoppler.pyx"
        case  0:

#line 42 "pyDoppler.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_slantRange)) != 0)) kw_args--;
        else 
#line 42 "pyDoppler.pyx"
goto __pyx_L5_argtuple_error;

#line 42 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 42 "pyDoppler.pyx"
        case  1:

#line 42 "pyDoppler.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_wvl)) != 0)) kw_args--;

#line 42 "pyDoppler.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("centroidProfile", 0, 2, 3, 1); 
#line 42 "pyDoppler.pyx"
__PYX_ERR(3, 42, __pyx_L3_error)

#line 42 "pyDoppler.pyx"
        }

#line 42 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 42 "pyDoppler.pyx"
        case  2:

#line 42 "pyDoppler.pyx"
        if (kw_args > 0) {

#line 42 "pyDoppler.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_iter);

#line 42 "pyDoppler.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 42 "pyDoppler.pyx"
        }

#line 42 "pyDoppler.pyx"
      }

#line 42 "pyDoppler.pyx"
      if (unlikely(kw_args > 0)) {

#line 42 "pyDoppler.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "centroidProfile") < 0)) __PYX_ERR(3, 42, __pyx_L3_error)

#line 42 "pyDoppler.pyx"
      }

#line 42 "pyDoppler.pyx"
    } else {

#line 42 "pyDoppler.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 42 "pyDoppler.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 42 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 42 "pyDoppler.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 42 "pyDoppler.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 42 "pyDoppler.pyx"
        break;
        default: 
#line 42 "pyDoppler.pyx"
goto __pyx_L5_argtuple_error;

#line 42 "pyDoppler.pyx"
      }

#line 42 "pyDoppler.pyx"
    }

#line 42 "pyDoppler.pyx"
    __pyx_v_slantRange = ((PyArrayObject *)values[0]);

#line 42 "pyDoppler.pyx"
    __pyx_v_wvl = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_wvl == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 43, __pyx_L3_error)

#line 42 "pyDoppler.pyx"
    if (values[2]) {

#line 42 "pyDoppler.pyx"
      __pyx_v_max_iter = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_max_iter == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 43, __pyx_L3_error)

#line 42 "pyDoppler.pyx"
    } else {

#line 42 "pyDoppler.pyx"
      __pyx_v_max_iter = ((int)10);

#line 42 "pyDoppler.pyx"
    }

#line 42 "pyDoppler.pyx"
  }

#line 42 "pyDoppler.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 42 "pyDoppler.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("centroidProfile", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 42 "pyDoppler.pyx"
__PYX_ERR(3, 42, __pyx_L3_error)

#line 42 "pyDoppler.pyx"
  __pyx_L3_error:;

#line 42 "pyDoppler.pyx"
  __Pyx_AddTraceback("iscecore.pyDoppler.centroidProfile", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 42 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 42 "pyDoppler.pyx"
  return NULL;

#line 42 "pyDoppler.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 42 "pyDoppler.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_slantRange), __pyx_ptype_5numpy_ndarray, 1, "slantRange", 0))) __PYX_ERR(3, 42, __pyx_L1_error)
  __pyx_r = 
#line 42 "pyDoppler.pyx"
__pyx_pf_8iscecore_9pyDoppler_6centroidProfile(((struct __pyx_obj_8iscecore_pyDoppler *)__pyx_v_self), __pyx_v_slantRange, __pyx_v_wvl, __pyx_v_max_iter);

#line 42 "pyDoppler.pyx"


#line 42 "pyDoppler.pyx"
  /* function exit code */

#line 42 "pyDoppler.pyx"
  goto __pyx_L0;

#line 42 "pyDoppler.pyx"
  __pyx_L1_error:;

#line 42 "pyDoppler.pyx"
  __pyx_r = NULL;

#line 42 "pyDoppler.pyx"
  __pyx_L0:;

#line 42 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 42 "pyDoppler.pyx"
  return __pyx_r;

#line 42 "pyDoppler.pyx"
}

#line 42 "pyDoppler.pyx"


#line 42 "pyDoppler.pyx"
static PyObject *__pyx_pf_8iscecore_9pyDoppler_6centroidProfile(struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self, PyArrayObject *__pyx_v_slantRange, double __pyx_v_wvl, int __pyx_v_max_iter) {
  int __pyx_v_i
#line 42 "pyDoppler.pyx"
;
  int __pyx_v_nr
#line 42 "pyDoppler.pyx"
;
  PyArrayObject *__pyx_v_fd = 0
#line 42 "pyDoppler.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_fd
#line 42 "pyDoppler.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_fd
#line 42 "pyDoppler.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_slantRange
#line 42 "pyDoppler.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_slantRange
#line 42 "pyDoppler.pyx"
;

#line 42 "pyDoppler.pyx"
  PyObject *__pyx_r = NULL;

#line 42 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 42 "pyDoppler.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 42 "pyDoppler.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 42 "pyDoppler.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 42 "pyDoppler.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 42 "pyDoppler.pyx"
  PyArrayObject *__pyx_t_5 = NULL;

#line 42 "pyDoppler.pyx"
  int __pyx_t_6;

#line 42 "pyDoppler.pyx"
  int __pyx_t_7;

#line 42 "pyDoppler.pyx"
  Py_ssize_t __pyx_t_8;

#line 42 "pyDoppler.pyx"
  Py_ssize_t __pyx_t_9;

#line 42 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("centroidProfile", 0);

#line 42 "pyDoppler.pyx"
  __pyx_pybuffer_fd.pybuffer.buf = NULL;

#line 42 "pyDoppler.pyx"
  __pyx_pybuffer_fd.refcount = 0;

#line 42 "pyDoppler.pyx"
  __pyx_pybuffernd_fd.data = NULL;

#line 42 "pyDoppler.pyx"
  __pyx_pybuffernd_fd.rcbuffer = &__pyx_pybuffer_fd;

#line 42 "pyDoppler.pyx"
  __pyx_pybuffer_slantRange.pybuffer.buf = NULL;

#line 42 "pyDoppler.pyx"
  __pyx_pybuffer_slantRange.refcount = 0;

#line 42 "pyDoppler.pyx"
  __pyx_pybuffernd_slantRange.data = NULL;

#line 42 "pyDoppler.pyx"
  __pyx_pybuffernd_slantRange.rcbuffer = &__pyx_pybuffer_slantRange;

#line 42 "pyDoppler.pyx"
  {

#line 42 "pyDoppler.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 42 "pyDoppler.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_slantRange.rcbuffer->pybuffer, (PyObject*)__pyx_v_slantRange, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 42, __pyx_L1_error)

#line 42 "pyDoppler.pyx"
  }

#line 42 "pyDoppler.pyx"
  __pyx_pybuffernd_slantRange.diminfo[0].strides = __pyx_pybuffernd_slantRange.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_slantRange.diminfo[0].shape = __pyx_pybuffernd_slantRange.rcbuffer->pybuffer.shape[0];

  /* "pyDoppler.pyx":46
 * 
 *         cdef int i
 *         cdef int nr = slantRange.shape[0]             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.float64_t, ndim=1] fd = np.zeros((nr,), dtype=slantRange.dtype)
 *         for i in range(nr):
 */

#line 46 "pyDoppler.pyx"
  __pyx_v_nr = (__pyx_v_slantRange->dimensions[0]);

  /* "pyDoppler.pyx":47
 *         cdef int i
 *         cdef int nr = slantRange.shape[0]
 *         cdef np.ndarray[np.float64_t, ndim=1] fd = np.zeros((nr,), dtype=slantRange.dtype)             # <<<<<<<<<<<<<<
 *         for i in range(nr):
 *             fd[i] = self.c_doppler.centroid(slantRange[i], wvl, self.frame, max_iter,
 */

#line 47 "pyDoppler.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 47, __pyx_L1_error)

#line 47 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 47 "pyDoppler.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 47, __pyx_L1_error)

#line 47 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 47 "pyDoppler.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 47 "pyDoppler.pyx"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_nr); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 47, __pyx_L1_error)

#line 47 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 47 "pyDoppler.pyx"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 47, __pyx_L1_error)

#line 47 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 47 "pyDoppler.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 47 "pyDoppler.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);

#line 47 "pyDoppler.pyx"
  __pyx_t_1 = 0;

#line 47 "pyDoppler.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 47, __pyx_L1_error)

#line 47 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 47 "pyDoppler.pyx"
  __Pyx_GIVEREF(__pyx_t_3);

#line 47 "pyDoppler.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);

#line 47 "pyDoppler.pyx"
  __pyx_t_3 = 0;

#line 47 "pyDoppler.pyx"
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 47, __pyx_L1_error)

#line 47 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 47 "pyDoppler.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_slantRange), __pyx_n_s_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)

#line 47 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 47 "pyDoppler.pyx"
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(3, 47, __pyx_L1_error)

#line 47 "pyDoppler.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 47 "pyDoppler.pyx"
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)

#line 47 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 47 "pyDoppler.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 47 "pyDoppler.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 47 "pyDoppler.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 47 "pyDoppler.pyx"
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(3, 47, __pyx_L1_error)

#line 47 "pyDoppler.pyx"
  __pyx_t_5 = ((PyArrayObject *)__pyx_t_4);

#line 47 "pyDoppler.pyx"
  {

#line 47 "pyDoppler.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 47 "pyDoppler.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_fd.rcbuffer->pybuffer, (PyObject*)__pyx_t_5, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 47 "pyDoppler.pyx"
      __pyx_v_fd = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_fd.rcbuffer->pybuffer.buf = NULL;

#line 47 "pyDoppler.pyx"
      __PYX_ERR(3, 47, __pyx_L1_error)
    } else {
#line 47 "pyDoppler.pyx"
__pyx_pybuffernd_fd.diminfo[0].strides = __pyx_pybuffernd_fd.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_fd.diminfo[0].shape = __pyx_pybuffernd_fd.rcbuffer->pybuffer.shape[0];

#line 47 "pyDoppler.pyx"
    }

#line 47 "pyDoppler.pyx"
  }

#line 47 "pyDoppler.pyx"
  __pyx_t_5 = 0;

#line 47 "pyDoppler.pyx"
  __pyx_v_fd = ((PyArrayObject *)__pyx_t_4);

#line 47 "pyDoppler.pyx"
  __pyx_t_4 = 0;

  /* "pyDoppler.pyx":48
 *         cdef int nr = slantRange.shape[0]
 *         cdef np.ndarray[np.float64_t, ndim=1] fd = np.zeros((nr,), dtype=slantRange.dtype)
 *         for i in range(nr):             # <<<<<<<<<<<<<<
 *             fd[i] = self.c_doppler.centroid(slantRange[i], wvl, self.frame, max_iter,
 *                 self.side, self.precession)
 */

#line 48 "pyDoppler.pyx"
  __pyx_t_6 = __pyx_v_nr;

#line 48 "pyDoppler.pyx"
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {

#line 48 "pyDoppler.pyx"
    __pyx_v_i = __pyx_t_7;

    /* "pyDoppler.pyx":49
 *         cdef np.ndarray[np.float64_t, ndim=1] fd = np.zeros((nr,), dtype=slantRange.dtype)
 *         for i in range(nr):
 *             fd[i] = self.c_doppler.centroid(slantRange[i], wvl, self.frame, max_iter,             # <<<<<<<<<<<<<<
 *                 self.side, self.precession)
 *         return fd
 */

#line 49 "pyDoppler.pyx"
    __pyx_t_8 = __pyx_v_i;

    /* "pyDoppler.pyx":50
 *         for i in range(nr):
 *             fd[i] = self.c_doppler.centroid(slantRange[i], wvl, self.frame, max_iter,
 *                 self.side, self.precession)             # <<<<<<<<<<<<<<
 *         return fd
 * 
 */

#line 50 "pyDoppler.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 50 "pyDoppler.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_fd.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_fd.diminfo[0].strides) = __pyx_v_self->c_doppler->centroid((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_slantRange.rcbuffer->pybuffer.buf, __pyx_t_8, __pyx_pybuffernd_slantRange.diminfo[0].strides)), __pyx_v_wvl, __pyx_v_self->frame, __pyx_v_max_iter, __pyx_v_self->side, __pyx_v_self->precession);

#line 50 "pyDoppler.pyx"
  }

  /* "pyDoppler.pyx":51
 *             fd[i] = self.c_doppler.centroid(slantRange[i], wvl, self.frame, max_iter,
 *                 self.side, self.precession)
 *         return fd             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 51 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 51 "pyDoppler.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_fd));

#line 51 "pyDoppler.pyx"
  __pyx_r = ((PyObject *)__pyx_v_fd);

#line 51 "pyDoppler.pyx"
  goto __pyx_L0;

  /* "pyDoppler.pyx":42
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     def centroidProfile(self, np.ndarray[np.float64_t, ndim=1] slantRange,             # <<<<<<<<<<<<<<
 *         double wvl, int max_iter=10):
 * 
 */

#line 42 "pyDoppler.pyx"


#line 42 "pyDoppler.pyx"
  /* function exit code */

#line 42 "pyDoppler.pyx"
  __pyx_L1_error:;

#line 42 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 42 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 42 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 42 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 42 "pyDoppler.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 42 "pyDoppler.pyx"
    __Pyx_PyThreadState_declare

#line 42 "pyDoppler.pyx"
    __Pyx_PyThreadState_assign

#line 42 "pyDoppler.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 42 "pyDoppler.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fd.rcbuffer->pybuffer);

#line 42 "pyDoppler.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_slantRange.rcbuffer->pybuffer);

#line 42 "pyDoppler.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 42 "pyDoppler.pyx"
  __Pyx_AddTraceback("iscecore.pyDoppler.centroidProfile", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 42 "pyDoppler.pyx"
  __pyx_r = NULL;

#line 42 "pyDoppler.pyx"
  goto __pyx_L2;

#line 42 "pyDoppler.pyx"
  __pyx_L0:;

#line 42 "pyDoppler.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fd.rcbuffer->pybuffer);

#line 42 "pyDoppler.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_slantRange.rcbuffer->pybuffer);

#line 42 "pyDoppler.pyx"
  __pyx_L2:;

#line 42 "pyDoppler.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_fd);

#line 42 "pyDoppler.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 42 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 42 "pyDoppler.pyx"
  return __pyx_r;

#line 42 "pyDoppler.pyx"
}

/* "pyDoppler.pyx":54
 * 
 *     @property
 *     def satxyz(self):             # <<<<<<<<<<<<<<
 *         return [self.c_doppler.satxyz[i] for i in range(3)]
 *     @satxyz.setter
 */

#line 54 "pyDoppler.pyx"


#line 54 "pyDoppler.pyx"
/* Python wrapper */

#line 54 "pyDoppler.pyx"
static PyObject *__pyx_pw_8iscecore_9pyDoppler_6satxyz_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 54 "pyDoppler.pyx"
static PyObject *__pyx_pw_8iscecore_9pyDoppler_6satxyz_1__get__(PyObject *__pyx_v_self) {

#line 54 "pyDoppler.pyx"
  PyObject *__pyx_r = 0;

#line 54 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 54 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 54 "pyDoppler.pyx"
__pyx_pf_8iscecore_9pyDoppler_6satxyz___get__(((struct __pyx_obj_8iscecore_pyDoppler *)__pyx_v_self));

#line 54 "pyDoppler.pyx"


#line 54 "pyDoppler.pyx"
  /* function exit code */

#line 54 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 54 "pyDoppler.pyx"
  return __pyx_r;

#line 54 "pyDoppler.pyx"
}

#line 54 "pyDoppler.pyx"


#line 54 "pyDoppler.pyx"
static PyObject *__pyx_pf_8iscecore_9pyDoppler_6satxyz___get__(struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self) {
  long __pyx_8genexpr7__pyx_v_i
#line 54 "pyDoppler.pyx"
;

#line 54 "pyDoppler.pyx"
  PyObject *__pyx_r = NULL;

#line 54 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 54 "pyDoppler.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 54 "pyDoppler.pyx"
  long __pyx_t_2;

#line 54 "pyDoppler.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 54 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyDoppler.pyx":55
 *     @property
 *     def satxyz(self):
 *         return [self.c_doppler.satxyz[i] for i in range(3)]             # <<<<<<<<<<<<<<
 *     @satxyz.setter
 *     def satxyz(self, value):
 */

#line 55 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 55 "pyDoppler.pyx"
  { /* enter inner scope */

#line 55 "pyDoppler.pyx"
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 55, __pyx_L1_error)

#line 55 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 55 "pyDoppler.pyx"
    for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {

#line 55 "pyDoppler.pyx"
      __pyx_8genexpr7__pyx_v_i = __pyx_t_2;

#line 55 "pyDoppler.pyx"
      __pyx_t_3 = PyFloat_FromDouble((__pyx_v_self->c_doppler->satxyz[__pyx_8genexpr7__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 55, __pyx_L1_error)

#line 55 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 55 "pyDoppler.pyx"
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(3, 55, __pyx_L1_error)

#line 55 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 55 "pyDoppler.pyx"
    }

#line 55 "pyDoppler.pyx"
  } /* exit inner scope */

#line 55 "pyDoppler.pyx"
  __pyx_r = __pyx_t_1;

#line 55 "pyDoppler.pyx"
  __pyx_t_1 = 0;

#line 55 "pyDoppler.pyx"
  goto __pyx_L0;

  /* "pyDoppler.pyx":54
 * 
 *     @property
 *     def satxyz(self):             # <<<<<<<<<<<<<<
 *         return [self.c_doppler.satxyz[i] for i in range(3)]
 *     @satxyz.setter
 */

#line 54 "pyDoppler.pyx"


#line 54 "pyDoppler.pyx"
  /* function exit code */

#line 54 "pyDoppler.pyx"
  __pyx_L1_error:;

#line 54 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 54 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 54 "pyDoppler.pyx"
  __Pyx_AddTraceback("iscecore.pyDoppler.satxyz.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 54 "pyDoppler.pyx"
  __pyx_r = NULL;

#line 54 "pyDoppler.pyx"
  __pyx_L0:;

#line 54 "pyDoppler.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 54 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 54 "pyDoppler.pyx"
  return __pyx_r;

#line 54 "pyDoppler.pyx"
}

/* "pyDoppler.pyx":57
 *         return [self.c_doppler.satxyz[i] for i in range(3)]
 *     @satxyz.setter
 *     def satxyz(self, value):             # <<<<<<<<<<<<<<
 *         raise ValueError('Cannot set satxyz')
 * 
 */

#line 57 "pyDoppler.pyx"


#line 57 "pyDoppler.pyx"
/* Python wrapper */

#line 57 "pyDoppler.pyx"
static int __pyx_pw_8iscecore_9pyDoppler_6satxyz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/

#line 57 "pyDoppler.pyx"
static int __pyx_pw_8iscecore_9pyDoppler_6satxyz_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {

#line 57 "pyDoppler.pyx"
  int __pyx_r;

#line 57 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 57 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = 
#line 57 "pyDoppler.pyx"
__pyx_pf_8iscecore_9pyDoppler_6satxyz_2__set__(((struct __pyx_obj_8iscecore_pyDoppler *)__pyx_v_self), ((PyObject *)__pyx_v_value));

#line 57 "pyDoppler.pyx"


#line 57 "pyDoppler.pyx"
  /* function exit code */

#line 57 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 57 "pyDoppler.pyx"
  return __pyx_r;

#line 57 "pyDoppler.pyx"
}

#line 57 "pyDoppler.pyx"


#line 57 "pyDoppler.pyx"
static int __pyx_pf_8iscecore_9pyDoppler_6satxyz_2__set__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value) {

#line 57 "pyDoppler.pyx"
  int __pyx_r;

#line 57 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 57 "pyDoppler.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 57 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyDoppler.pyx":58
 *     @satxyz.setter
 *     def satxyz(self, value):
 *         raise ValueError('Cannot set satxyz')             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 58 "pyDoppler.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 58, __pyx_L1_error)

#line 58 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 58 "pyDoppler.pyx"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 58 "pyDoppler.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 58 "pyDoppler.pyx"
  __PYX_ERR(3, 58, __pyx_L1_error)

  /* "pyDoppler.pyx":57
 *         return [self.c_doppler.satxyz[i] for i in range(3)]
 *     @satxyz.setter
 *     def satxyz(self, value):             # <<<<<<<<<<<<<<
 *         raise ValueError('Cannot set satxyz')
 * 
 */

#line 57 "pyDoppler.pyx"


#line 57 "pyDoppler.pyx"
  /* function exit code */

#line 57 "pyDoppler.pyx"
  __pyx_L1_error:;

#line 57 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 57 "pyDoppler.pyx"
  __Pyx_AddTraceback("iscecore.pyDoppler.satxyz.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 57 "pyDoppler.pyx"
  __pyx_r = -1;

#line 57 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 57 "pyDoppler.pyx"
  return __pyx_r;

#line 57 "pyDoppler.pyx"
}

/* "pyDoppler.pyx":61
 * 
 *     @property
 *     def satvel(self):             # <<<<<<<<<<<<<<
 *         return [self.c_doppler.satvel[i] for i in range(3)]
 *     @satvel.setter
 */

#line 61 "pyDoppler.pyx"


#line 61 "pyDoppler.pyx"
/* Python wrapper */

#line 61 "pyDoppler.pyx"
static PyObject *__pyx_pw_8iscecore_9pyDoppler_6satvel_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 61 "pyDoppler.pyx"
static PyObject *__pyx_pw_8iscecore_9pyDoppler_6satvel_1__get__(PyObject *__pyx_v_self) {

#line 61 "pyDoppler.pyx"
  PyObject *__pyx_r = 0;

#line 61 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 61 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 61 "pyDoppler.pyx"
__pyx_pf_8iscecore_9pyDoppler_6satvel___get__(((struct __pyx_obj_8iscecore_pyDoppler *)__pyx_v_self));

#line 61 "pyDoppler.pyx"


#line 61 "pyDoppler.pyx"
  /* function exit code */

#line 61 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 61 "pyDoppler.pyx"
  return __pyx_r;

#line 61 "pyDoppler.pyx"
}

#line 61 "pyDoppler.pyx"


#line 61 "pyDoppler.pyx"
static PyObject *__pyx_pf_8iscecore_9pyDoppler_6satvel___get__(struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self) {
  long __pyx_8genexpr8__pyx_v_i
#line 61 "pyDoppler.pyx"
;

#line 61 "pyDoppler.pyx"
  PyObject *__pyx_r = NULL;

#line 61 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 61 "pyDoppler.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 61 "pyDoppler.pyx"
  long __pyx_t_2;

#line 61 "pyDoppler.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 61 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyDoppler.pyx":62
 *     @property
 *     def satvel(self):
 *         return [self.c_doppler.satvel[i] for i in range(3)]             # <<<<<<<<<<<<<<
 *     @satvel.setter
 *     def satvel(self, value):
 */

#line 62 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 62 "pyDoppler.pyx"
  { /* enter inner scope */

#line 62 "pyDoppler.pyx"
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 62, __pyx_L1_error)

#line 62 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 62 "pyDoppler.pyx"
    for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {

#line 62 "pyDoppler.pyx"
      __pyx_8genexpr8__pyx_v_i = __pyx_t_2;

#line 62 "pyDoppler.pyx"
      __pyx_t_3 = PyFloat_FromDouble((__pyx_v_self->c_doppler->satvel[__pyx_8genexpr8__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 62, __pyx_L1_error)

#line 62 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 62 "pyDoppler.pyx"
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(3, 62, __pyx_L1_error)

#line 62 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 62 "pyDoppler.pyx"
    }

#line 62 "pyDoppler.pyx"
  } /* exit inner scope */

#line 62 "pyDoppler.pyx"
  __pyx_r = __pyx_t_1;

#line 62 "pyDoppler.pyx"
  __pyx_t_1 = 0;

#line 62 "pyDoppler.pyx"
  goto __pyx_L0;

  /* "pyDoppler.pyx":61
 * 
 *     @property
 *     def satvel(self):             # <<<<<<<<<<<<<<
 *         return [self.c_doppler.satvel[i] for i in range(3)]
 *     @satvel.setter
 */

#line 61 "pyDoppler.pyx"


#line 61 "pyDoppler.pyx"
  /* function exit code */

#line 61 "pyDoppler.pyx"
  __pyx_L1_error:;

#line 61 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 61 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 61 "pyDoppler.pyx"
  __Pyx_AddTraceback("iscecore.pyDoppler.satvel.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 61 "pyDoppler.pyx"
  __pyx_r = NULL;

#line 61 "pyDoppler.pyx"
  __pyx_L0:;

#line 61 "pyDoppler.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 61 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 61 "pyDoppler.pyx"
  return __pyx_r;

#line 61 "pyDoppler.pyx"
}

/* "pyDoppler.pyx":64
 *         return [self.c_doppler.satvel[i] for i in range(3)]
 *     @satvel.setter
 *     def satvel(self, value):             # <<<<<<<<<<<<<<
 *         raise ValueError('Cannot set satvel')
 * 
 */

#line 64 "pyDoppler.pyx"


#line 64 "pyDoppler.pyx"
/* Python wrapper */

#line 64 "pyDoppler.pyx"
static int __pyx_pw_8iscecore_9pyDoppler_6satvel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/

#line 64 "pyDoppler.pyx"
static int __pyx_pw_8iscecore_9pyDoppler_6satvel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {

#line 64 "pyDoppler.pyx"
  int __pyx_r;

#line 64 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 64 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = 
#line 64 "pyDoppler.pyx"
__pyx_pf_8iscecore_9pyDoppler_6satvel_2__set__(((struct __pyx_obj_8iscecore_pyDoppler *)__pyx_v_self), ((PyObject *)__pyx_v_value));

#line 64 "pyDoppler.pyx"


#line 64 "pyDoppler.pyx"
  /* function exit code */

#line 64 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 64 "pyDoppler.pyx"
  return __pyx_r;

#line 64 "pyDoppler.pyx"
}

#line 64 "pyDoppler.pyx"


#line 64 "pyDoppler.pyx"
static int __pyx_pf_8iscecore_9pyDoppler_6satvel_2__set__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value) {

#line 64 "pyDoppler.pyx"
  int __pyx_r;

#line 64 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 64 "pyDoppler.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 64 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyDoppler.pyx":65
 *     @satvel.setter
 *     def satvel(self, value):
 *         raise ValueError('Cannot set satvel')             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 65 "pyDoppler.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 65, __pyx_L1_error)

#line 65 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 65 "pyDoppler.pyx"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 65 "pyDoppler.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 65 "pyDoppler.pyx"
  __PYX_ERR(3, 65, __pyx_L1_error)

  /* "pyDoppler.pyx":64
 *         return [self.c_doppler.satvel[i] for i in range(3)]
 *     @satvel.setter
 *     def satvel(self, value):             # <<<<<<<<<<<<<<
 *         raise ValueError('Cannot set satvel')
 * 
 */

#line 64 "pyDoppler.pyx"


#line 64 "pyDoppler.pyx"
  /* function exit code */

#line 64 "pyDoppler.pyx"
  __pyx_L1_error:;

#line 64 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 64 "pyDoppler.pyx"
  __Pyx_AddTraceback("iscecore.pyDoppler.satvel.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 64 "pyDoppler.pyx"
  __pyx_r = -1;

#line 64 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 64 "pyDoppler.pyx"
  return __pyx_r;

#line 64 "pyDoppler.pyx"
}

/* "pyDoppler.pyx":68
 * 
 *     @property
 *     def satllh(self):             # <<<<<<<<<<<<<<
 *         return [self.c_doppler.satllh[i] for i in range(3)]
 *     @satllh.setter
 */

#line 68 "pyDoppler.pyx"


#line 68 "pyDoppler.pyx"
/* Python wrapper */

#line 68 "pyDoppler.pyx"
static PyObject *__pyx_pw_8iscecore_9pyDoppler_6satllh_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 68 "pyDoppler.pyx"
static PyObject *__pyx_pw_8iscecore_9pyDoppler_6satllh_1__get__(PyObject *__pyx_v_self) {

#line 68 "pyDoppler.pyx"
  PyObject *__pyx_r = 0;

#line 68 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 68 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 68 "pyDoppler.pyx"
__pyx_pf_8iscecore_9pyDoppler_6satllh___get__(((struct __pyx_obj_8iscecore_pyDoppler *)__pyx_v_self));

#line 68 "pyDoppler.pyx"


#line 68 "pyDoppler.pyx"
  /* function exit code */

#line 68 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 68 "pyDoppler.pyx"
  return __pyx_r;

#line 68 "pyDoppler.pyx"
}

#line 68 "pyDoppler.pyx"


#line 68 "pyDoppler.pyx"
static PyObject *__pyx_pf_8iscecore_9pyDoppler_6satllh___get__(struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self) {
  long __pyx_8genexpr9__pyx_v_i
#line 68 "pyDoppler.pyx"
;

#line 68 "pyDoppler.pyx"
  PyObject *__pyx_r = NULL;

#line 68 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 68 "pyDoppler.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 68 "pyDoppler.pyx"
  long __pyx_t_2;

#line 68 "pyDoppler.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 68 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyDoppler.pyx":69
 *     @property
 *     def satllh(self):
 *         return [self.c_doppler.satllh[i] for i in range(3)]             # <<<<<<<<<<<<<<
 *     @satllh.setter
 *     def satllh(self, value):
 */

#line 69 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 69 "pyDoppler.pyx"
  { /* enter inner scope */

#line 69 "pyDoppler.pyx"
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 69, __pyx_L1_error)

#line 69 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 69 "pyDoppler.pyx"
    for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {

#line 69 "pyDoppler.pyx"
      __pyx_8genexpr9__pyx_v_i = __pyx_t_2;

#line 69 "pyDoppler.pyx"
      __pyx_t_3 = PyFloat_FromDouble((__pyx_v_self->c_doppler->satllh[__pyx_8genexpr9__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 69, __pyx_L1_error)

#line 69 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 69 "pyDoppler.pyx"
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(3, 69, __pyx_L1_error)

#line 69 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 69 "pyDoppler.pyx"
    }

#line 69 "pyDoppler.pyx"
  } /* exit inner scope */

#line 69 "pyDoppler.pyx"
  __pyx_r = __pyx_t_1;

#line 69 "pyDoppler.pyx"
  __pyx_t_1 = 0;

#line 69 "pyDoppler.pyx"
  goto __pyx_L0;

  /* "pyDoppler.pyx":68
 * 
 *     @property
 *     def satllh(self):             # <<<<<<<<<<<<<<
 *         return [self.c_doppler.satllh[i] for i in range(3)]
 *     @satllh.setter
 */

#line 68 "pyDoppler.pyx"


#line 68 "pyDoppler.pyx"
  /* function exit code */

#line 68 "pyDoppler.pyx"
  __pyx_L1_error:;

#line 68 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 68 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 68 "pyDoppler.pyx"
  __Pyx_AddTraceback("iscecore.pyDoppler.satllh.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 68 "pyDoppler.pyx"
  __pyx_r = NULL;

#line 68 "pyDoppler.pyx"
  __pyx_L0:;

#line 68 "pyDoppler.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 68 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 68 "pyDoppler.pyx"
  return __pyx_r;

#line 68 "pyDoppler.pyx"
}

/* "pyDoppler.pyx":71
 *         return [self.c_doppler.satllh[i] for i in range(3)]
 *     @satllh.setter
 *     def satllh(self, value):             # <<<<<<<<<<<<<<
 *         raise ValueError('Cannot set satllh')
 * 
 */

#line 71 "pyDoppler.pyx"


#line 71 "pyDoppler.pyx"
/* Python wrapper */

#line 71 "pyDoppler.pyx"
static int __pyx_pw_8iscecore_9pyDoppler_6satllh_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/

#line 71 "pyDoppler.pyx"
static int __pyx_pw_8iscecore_9pyDoppler_6satllh_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {

#line 71 "pyDoppler.pyx"
  int __pyx_r;

#line 71 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 71 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = 
#line 71 "pyDoppler.pyx"
__pyx_pf_8iscecore_9pyDoppler_6satllh_2__set__(((struct __pyx_obj_8iscecore_pyDoppler *)__pyx_v_self), ((PyObject *)__pyx_v_value));

#line 71 "pyDoppler.pyx"


#line 71 "pyDoppler.pyx"
  /* function exit code */

#line 71 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 71 "pyDoppler.pyx"
  return __pyx_r;

#line 71 "pyDoppler.pyx"
}

#line 71 "pyDoppler.pyx"


#line 71 "pyDoppler.pyx"
static int __pyx_pf_8iscecore_9pyDoppler_6satllh_2__set__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value) {

#line 71 "pyDoppler.pyx"
  int __pyx_r;

#line 71 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 71 "pyDoppler.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 71 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyDoppler.pyx":72
 *     @satllh.setter
 *     def satllh(self, value):
 *         raise ValueError('Cannot set satllh')             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 72 "pyDoppler.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 72, __pyx_L1_error)

#line 72 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 72 "pyDoppler.pyx"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 72 "pyDoppler.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 72 "pyDoppler.pyx"
  __PYX_ERR(3, 72, __pyx_L1_error)

  /* "pyDoppler.pyx":71
 *         return [self.c_doppler.satllh[i] for i in range(3)]
 *     @satllh.setter
 *     def satllh(self, value):             # <<<<<<<<<<<<<<
 *         raise ValueError('Cannot set satllh')
 * 
 */

#line 71 "pyDoppler.pyx"


#line 71 "pyDoppler.pyx"
  /* function exit code */

#line 71 "pyDoppler.pyx"
  __pyx_L1_error:;

#line 71 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 71 "pyDoppler.pyx"
  __Pyx_AddTraceback("iscecore.pyDoppler.satllh.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 71 "pyDoppler.pyx"
  __pyx_r = -1;

#line 71 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 71 "pyDoppler.pyx"
  return __pyx_r;

#line 71 "pyDoppler.pyx"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_9pyDoppler_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_9pyDoppler_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_8iscecore_9pyDoppler_8__reduce_cython__(((struct __pyx_obj_8iscecore_pyDoppler *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_9pyDoppler_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyDoppler.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_9pyDoppler_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_9pyDoppler_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf_8iscecore_9pyDoppler_10__setstate_cython__(((struct __pyx_obj_8iscecore_pyDoppler *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_9pyDoppler_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyDoppler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyDoppler.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "pyDoppler.pyx":78
 *     cdef pyEulerAngles eulerangles
 * 
 *     def __cinit__(self, pyOrbit orbit, pyEulerAngles eulerangles, pyEllipsoid ellipsoid,             # <<<<<<<<<<<<<<
 *         double epoch, int side=-1, bool precession=False, frame='inertial'):
 *         self.c_doppler = new Doppler(
 */

#line 78 "pyDoppler.pyx"


#line 78 "pyDoppler.pyx"
/* Python wrapper */

#line 78 "pyDoppler.pyx"
static int __pyx_pw_8iscecore_14pyDopplerEuler_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 78 "pyDoppler.pyx"
static int __pyx_pw_8iscecore_14pyDopplerEuler_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_orbit = 0
#line 78 "pyDoppler.pyx"
;
  struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_eulerangles = 0
#line 78 "pyDoppler.pyx"
;
  struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_ellipsoid = 0
#line 78 "pyDoppler.pyx"
;
  double __pyx_v_epoch
#line 78 "pyDoppler.pyx"
;
  int __pyx_v_side
#line 78 "pyDoppler.pyx"
;
  bool __pyx_v_precession
#line 78 "pyDoppler.pyx"
;
  PyObject *__pyx_v_frame = 0
#line 78 "pyDoppler.pyx"
;

#line 78 "pyDoppler.pyx"
  int __pyx_r;

#line 78 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 78 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 78 "pyDoppler.pyx"
  {

#line 78 "pyDoppler.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_orbit,&__pyx_n_s_eulerangles,&__pyx_n_s_ellipsoid,&__pyx_n_s_epoch,&__pyx_n_s_side,&__pyx_n_s_precession,&__pyx_n_s_frame,0};

#line 78 "pyDoppler.pyx"
    PyObject* values[7] = {0,0,0,0,0,0,0};

#line 78 "pyDoppler.pyx"
    values[6] = ((PyObject *)__pyx_n_u_inertial);

#line 78 "pyDoppler.pyx"
    if (unlikely(__pyx_kwds)) {

#line 78 "pyDoppler.pyx"
      Py_ssize_t kw_args;

#line 78 "pyDoppler.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 78 "pyDoppler.pyx"
      switch (pos_args) {
        case  7: 
#line 78 "pyDoppler.pyx"
values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

#line 78 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  6: 
#line 78 "pyDoppler.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 78 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  5: 
#line 78 "pyDoppler.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 78 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 78 "pyDoppler.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 78 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 78 "pyDoppler.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 78 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 78 "pyDoppler.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 78 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 78 "pyDoppler.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 78 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 78 "pyDoppler.pyx"
        case  0: break;
        default: 
#line 78 "pyDoppler.pyx"
goto __pyx_L5_argtuple_error;

#line 78 "pyDoppler.pyx"
      }

#line 78 "pyDoppler.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 78 "pyDoppler.pyx"
      switch (pos_args) {

#line 78 "pyDoppler.pyx"
        case  0:

#line 78 "pyDoppler.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_orbit)) != 0)) kw_args--;
        else 
#line 78 "pyDoppler.pyx"
goto __pyx_L5_argtuple_error;

#line 78 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 78 "pyDoppler.pyx"
        case  1:

#line 78 "pyDoppler.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_eulerangles)) != 0)) kw_args--;

#line 78 "pyDoppler.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 7, 1); 
#line 78 "pyDoppler.pyx"
__PYX_ERR(3, 78, __pyx_L3_error)

#line 78 "pyDoppler.pyx"
        }

#line 78 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 78 "pyDoppler.pyx"
        case  2:

#line 78 "pyDoppler.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ellipsoid)) != 0)) kw_args--;

#line 78 "pyDoppler.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 7, 2); 
#line 78 "pyDoppler.pyx"
__PYX_ERR(3, 78, __pyx_L3_error)

#line 78 "pyDoppler.pyx"
        }

#line 78 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 78 "pyDoppler.pyx"
        case  3:

#line 78 "pyDoppler.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epoch)) != 0)) kw_args--;

#line 78 "pyDoppler.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 7, 3); 
#line 78 "pyDoppler.pyx"
__PYX_ERR(3, 78, __pyx_L3_error)

#line 78 "pyDoppler.pyx"
        }

#line 78 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 78 "pyDoppler.pyx"
        case  4:

#line 78 "pyDoppler.pyx"
        if (kw_args > 0) {

#line 78 "pyDoppler.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_side);

#line 78 "pyDoppler.pyx"
          if (value) { values[4] = value; kw_args--; }

#line 78 "pyDoppler.pyx"
        }

#line 78 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 78 "pyDoppler.pyx"
        case  5:

#line 78 "pyDoppler.pyx"
        if (kw_args > 0) {

#line 78 "pyDoppler.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_precession);

#line 78 "pyDoppler.pyx"
          if (value) { values[5] = value; kw_args--; }

#line 78 "pyDoppler.pyx"
        }

#line 78 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 78 "pyDoppler.pyx"
        case  6:

#line 78 "pyDoppler.pyx"
        if (kw_args > 0) {

#line 78 "pyDoppler.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_frame);

#line 78 "pyDoppler.pyx"
          if (value) { values[6] = value; kw_args--; }

#line 78 "pyDoppler.pyx"
        }

#line 78 "pyDoppler.pyx"
      }

#line 78 "pyDoppler.pyx"
      if (unlikely(kw_args > 0)) {

#line 78 "pyDoppler.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 78, __pyx_L3_error)

#line 78 "pyDoppler.pyx"
      }

#line 78 "pyDoppler.pyx"
    } else {

#line 78 "pyDoppler.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: 
#line 78 "pyDoppler.pyx"
values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

#line 78 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  6: 
#line 78 "pyDoppler.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 78 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  5: 
#line 78 "pyDoppler.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 78 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 78 "pyDoppler.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 78 "pyDoppler.pyx"
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 78 "pyDoppler.pyx"
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 78 "pyDoppler.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 78 "pyDoppler.pyx"
        break;
        default: 
#line 78 "pyDoppler.pyx"
goto __pyx_L5_argtuple_error;

#line 78 "pyDoppler.pyx"
      }

#line 78 "pyDoppler.pyx"
    }

#line 78 "pyDoppler.pyx"
    __pyx_v_orbit = ((struct __pyx_obj_8iscecore_pyOrbit *)values[0]);

#line 78 "pyDoppler.pyx"
    __pyx_v_eulerangles = ((struct __pyx_obj_8iscecore_pyEulerAngles *)values[1]);

#line 78 "pyDoppler.pyx"
    __pyx_v_ellipsoid = ((struct __pyx_obj_8iscecore_pyEllipsoid *)values[2]);

#line 78 "pyDoppler.pyx"
    __pyx_v_epoch = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_epoch == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 79, __pyx_L3_error)

#line 78 "pyDoppler.pyx"
    if (values[4]) {

#line 78 "pyDoppler.pyx"
      __pyx_v_side = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_side == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 79, __pyx_L3_error)

#line 78 "pyDoppler.pyx"
    } else {

#line 78 "pyDoppler.pyx"
      __pyx_v_side = ((int)-1);

#line 78 "pyDoppler.pyx"
    }

#line 78 "pyDoppler.pyx"
    if (values[5]) {

#line 78 "pyDoppler.pyx"
      __pyx_v_precession = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_precession == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(3, 79, __pyx_L3_error)

#line 78 "pyDoppler.pyx"
    } else {

      /* "pyDoppler.pyx":79
 * 
 *     def __cinit__(self, pyOrbit orbit, pyEulerAngles eulerangles, pyEllipsoid ellipsoid,
 *         double epoch, int side=-1, bool precession=False, frame='inertial'):             # <<<<<<<<<<<<<<
 *         self.c_doppler = new Doppler(
 *             deref(orbit.c_orbit),
 */

#line 79 "pyDoppler.pyx"
      __pyx_v_precession = ((bool)0);

#line 79 "pyDoppler.pyx"
    }

#line 79 "pyDoppler.pyx"
    __pyx_v_frame = values[6];

#line 79 "pyDoppler.pyx"
  }

#line 79 "pyDoppler.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 79 "pyDoppler.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 7, PyTuple_GET_SIZE(__pyx_args)); 
#line 79 "pyDoppler.pyx"
__PYX_ERR(3, 78, __pyx_L3_error)

#line 79 "pyDoppler.pyx"
  __pyx_L3_error:;

#line 79 "pyDoppler.pyx"
  __Pyx_AddTraceback("iscecore.pyDopplerEuler.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 79 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 79 "pyDoppler.pyx"
  return -1;

#line 79 "pyDoppler.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 79 "pyDoppler.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_orbit), __pyx_ptype_8iscecore_pyOrbit, 1, "orbit", 0))) __PYX_ERR(3, 78, __pyx_L1_error)

#line 79 "pyDoppler.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_eulerangles), __pyx_ptype_8iscecore_pyEulerAngles, 1, "eulerangles", 0))) __PYX_ERR(3, 78, __pyx_L1_error)

#line 79 "pyDoppler.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ellipsoid), __pyx_ptype_8iscecore_pyEllipsoid, 1, "ellipsoid", 0))) __PYX_ERR(3, 78, __pyx_L1_error)
  __pyx_r = 
#line 79 "pyDoppler.pyx"
__pyx_pf_8iscecore_14pyDopplerEuler___cinit__(((struct __pyx_obj_8iscecore_pyDopplerEuler *)__pyx_v_self), __pyx_v_orbit, __pyx_v_eulerangles, __pyx_v_ellipsoid, __pyx_v_epoch, __pyx_v_side, __pyx_v_precession, __pyx_v_frame);

  /* "pyDoppler.pyx":78
 *     cdef pyEulerAngles eulerangles
 * 
 *     def __cinit__(self, pyOrbit orbit, pyEulerAngles eulerangles, pyEllipsoid ellipsoid,             # <<<<<<<<<<<<<<
 *         double epoch, int side=-1, bool precession=False, frame='inertial'):
 *         self.c_doppler = new Doppler(
 */

#line 78 "pyDoppler.pyx"


#line 78 "pyDoppler.pyx"
  /* function exit code */

#line 78 "pyDoppler.pyx"
  goto __pyx_L0;

#line 78 "pyDoppler.pyx"
  __pyx_L1_error:;

#line 78 "pyDoppler.pyx"
  __pyx_r = -1;

#line 78 "pyDoppler.pyx"
  __pyx_L0:;

#line 78 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 78 "pyDoppler.pyx"
  return __pyx_r;

#line 78 "pyDoppler.pyx"
}

#line 78 "pyDoppler.pyx"


#line 78 "pyDoppler.pyx"
static int __pyx_pf_8iscecore_14pyDopplerEuler___cinit__(struct __pyx_obj_8iscecore_pyDopplerEuler *__pyx_v_self, struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_orbit, struct __pyx_obj_8iscecore_pyEulerAngles *__pyx_v_eulerangles, struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_ellipsoid, double __pyx_v_epoch, int __pyx_v_side, bool __pyx_v_precession, PyObject *__pyx_v_frame) {

#line 78 "pyDoppler.pyx"
  int __pyx_r;

#line 78 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 78 "pyDoppler.pyx"
  isce::core::Doppler *__pyx_t_1;

#line 78 "pyDoppler.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 78 "pyDoppler.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 78 "pyDoppler.pyx"
  std::string __pyx_t_4;

#line 78 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyDoppler.pyx":80
 *     def __cinit__(self, pyOrbit orbit, pyEulerAngles eulerangles, pyEllipsoid ellipsoid,
 *         double epoch, int side=-1, bool precession=False, frame='inertial'):
 *         self.c_doppler = new Doppler(             # <<<<<<<<<<<<<<
 *             deref(orbit.c_orbit),
 *             eulerangles.c_eulerangles,
 */

#line 80 "pyDoppler.pyx"
  try {

#line 80 "pyDoppler.pyx"
    __pyx_t_1 = new isce::core::Doppler((*__pyx_v_orbit->c_orbit), __pyx_v_eulerangles->c_eulerangles, (*__pyx_v_ellipsoid->c_ellipsoid), __pyx_v_epoch);

#line 80 "pyDoppler.pyx"
  } catch(...) {

#line 80 "pyDoppler.pyx"
    __Pyx_CppExn2PyErr();

#line 80 "pyDoppler.pyx"
    __PYX_ERR(3, 80, __pyx_L1_error)

#line 80 "pyDoppler.pyx"
  }

#line 80 "pyDoppler.pyx"
  __pyx_v_self->__pyx_base.c_doppler = __pyx_t_1;

  /* "pyDoppler.pyx":85
 *             deref(ellipsoid.c_ellipsoid), epoch
 *         )
 *         self.eulerangles = eulerangles             # <<<<<<<<<<<<<<
 *         self.side = side
 *         self.precession = precession
 */

#line 85 "pyDoppler.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_eulerangles));

#line 85 "pyDoppler.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_v_eulerangles));

#line 85 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_v_self->eulerangles);

#line 85 "pyDoppler.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_v_self->eulerangles));

#line 85 "pyDoppler.pyx"
  __pyx_v_self->eulerangles = __pyx_v_eulerangles;

  /* "pyDoppler.pyx":86
 *         )
 *         self.eulerangles = eulerangles
 *         self.side = side             # <<<<<<<<<<<<<<
 *         self.precession = precession
 *         self.frame = frame.encode('utf-8')
 */

#line 86 "pyDoppler.pyx"
  __pyx_v_self->__pyx_base.side = __pyx_v_side;

  /* "pyDoppler.pyx":87
 *         self.eulerangles = eulerangles
 *         self.side = side
 *         self.precession = precession             # <<<<<<<<<<<<<<
 *         self.frame = frame.encode('utf-8')
 *         self.__owner = True
 */

#line 87 "pyDoppler.pyx"
  __pyx_v_self->__pyx_base.precession = __pyx_v_precession;

  /* "pyDoppler.pyx":88
 *         self.side = side
 *         self.precession = precession
 *         self.frame = frame.encode('utf-8')             # <<<<<<<<<<<<<<
 *         self.__owner = True
 * 
 */

#line 88 "pyDoppler.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_frame, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 88, __pyx_L1_error)

#line 88 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 88 "pyDoppler.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 88, __pyx_L1_error)

#line 88 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 88 "pyDoppler.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 88 "pyDoppler.pyx"
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 88, __pyx_L1_error)

#line 88 "pyDoppler.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 88 "pyDoppler.pyx"
  __pyx_v_self->__pyx_base.frame = __pyx_t_4;

  /* "pyDoppler.pyx":89
 *         self.precession = precession
 *         self.frame = frame.encode('utf-8')
 *         self.__owner = True             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 89 "pyDoppler.pyx"
  __pyx_v_self->__pyx_base.__pyx___owner = 1;

  /* "pyDoppler.pyx":78
 *     cdef pyEulerAngles eulerangles
 * 
 *     def __cinit__(self, pyOrbit orbit, pyEulerAngles eulerangles, pyEllipsoid ellipsoid,             # <<<<<<<<<<<<<<
 *         double epoch, int side=-1, bool precession=False, frame='inertial'):
 *         self.c_doppler = new Doppler(
 */

#line 78 "pyDoppler.pyx"


#line 78 "pyDoppler.pyx"
  /* function exit code */

#line 78 "pyDoppler.pyx"
  __pyx_r = 0;

#line 78 "pyDoppler.pyx"
  goto __pyx_L0;

#line 78 "pyDoppler.pyx"
  __pyx_L1_error:;

#line 78 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 78 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 78 "pyDoppler.pyx"
  __Pyx_AddTraceback("iscecore.pyDopplerEuler.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 78 "pyDoppler.pyx"
  __pyx_r = -1;

#line 78 "pyDoppler.pyx"
  __pyx_L0:;

#line 78 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 78 "pyDoppler.pyx"
  return __pyx_r;

#line 78 "pyDoppler.pyx"
}

/* "pyDoppler.pyx":92
 * 
 * 
 *     def derivs(self, np.ndarray[np.float64_t, ndim=1] slantRange, double wvl, int max_iter=10):             # <<<<<<<<<<<<<<
 * 
 *         cdef int nr, j
 */

#line 92 "pyDoppler.pyx"


#line 92 "pyDoppler.pyx"
/* Python wrapper */

#line 92 "pyDoppler.pyx"
static PyObject *__pyx_pw_8iscecore_14pyDopplerEuler_3derivs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 92 "pyDoppler.pyx"
static PyObject *__pyx_pw_8iscecore_14pyDopplerEuler_3derivs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_slantRange = 0
#line 92 "pyDoppler.pyx"
;
  double __pyx_v_wvl
#line 92 "pyDoppler.pyx"
;
  int __pyx_v_max_iter
#line 92 "pyDoppler.pyx"
;

#line 92 "pyDoppler.pyx"
  PyObject *__pyx_r = 0;

#line 92 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 92 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("derivs (wrapper)", 0);

#line 92 "pyDoppler.pyx"
  {

#line 92 "pyDoppler.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_slantRange,&__pyx_n_s_wvl,&__pyx_n_s_max_iter,0};

#line 92 "pyDoppler.pyx"
    PyObject* values[3] = {0,0,0};

#line 92 "pyDoppler.pyx"
    if (unlikely(__pyx_kwds)) {

#line 92 "pyDoppler.pyx"
      Py_ssize_t kw_args;

#line 92 "pyDoppler.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 92 "pyDoppler.pyx"
      switch (pos_args) {
        case  3: 
#line 92 "pyDoppler.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 92 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 92 "pyDoppler.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 92 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 92 "pyDoppler.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 92 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 92 "pyDoppler.pyx"
        case  0: break;
        default: 
#line 92 "pyDoppler.pyx"
goto __pyx_L5_argtuple_error;

#line 92 "pyDoppler.pyx"
      }

#line 92 "pyDoppler.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 92 "pyDoppler.pyx"
      switch (pos_args) {

#line 92 "pyDoppler.pyx"
        case  0:

#line 92 "pyDoppler.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_slantRange)) != 0)) kw_args--;
        else 
#line 92 "pyDoppler.pyx"
goto __pyx_L5_argtuple_error;

#line 92 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 92 "pyDoppler.pyx"
        case  1:

#line 92 "pyDoppler.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_wvl)) != 0)) kw_args--;

#line 92 "pyDoppler.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("derivs", 0, 2, 3, 1); 
#line 92 "pyDoppler.pyx"
__PYX_ERR(3, 92, __pyx_L3_error)

#line 92 "pyDoppler.pyx"
        }

#line 92 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 92 "pyDoppler.pyx"
        case  2:

#line 92 "pyDoppler.pyx"
        if (kw_args > 0) {

#line 92 "pyDoppler.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_iter);

#line 92 "pyDoppler.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 92 "pyDoppler.pyx"
        }

#line 92 "pyDoppler.pyx"
      }

#line 92 "pyDoppler.pyx"
      if (unlikely(kw_args > 0)) {

#line 92 "pyDoppler.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "derivs") < 0)) __PYX_ERR(3, 92, __pyx_L3_error)

#line 92 "pyDoppler.pyx"
      }

#line 92 "pyDoppler.pyx"
    } else {

#line 92 "pyDoppler.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 92 "pyDoppler.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 92 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 92 "pyDoppler.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 92 "pyDoppler.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 92 "pyDoppler.pyx"
        break;
        default: 
#line 92 "pyDoppler.pyx"
goto __pyx_L5_argtuple_error;

#line 92 "pyDoppler.pyx"
      }

#line 92 "pyDoppler.pyx"
    }

#line 92 "pyDoppler.pyx"
    __pyx_v_slantRange = ((PyArrayObject *)values[0]);

#line 92 "pyDoppler.pyx"
    __pyx_v_wvl = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_wvl == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 92, __pyx_L3_error)

#line 92 "pyDoppler.pyx"
    if (values[2]) {

#line 92 "pyDoppler.pyx"
      __pyx_v_max_iter = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_max_iter == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 92, __pyx_L3_error)

#line 92 "pyDoppler.pyx"
    } else {

#line 92 "pyDoppler.pyx"
      __pyx_v_max_iter = ((int)10);

#line 92 "pyDoppler.pyx"
    }

#line 92 "pyDoppler.pyx"
  }

#line 92 "pyDoppler.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 92 "pyDoppler.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("derivs", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 92 "pyDoppler.pyx"
__PYX_ERR(3, 92, __pyx_L3_error)

#line 92 "pyDoppler.pyx"
  __pyx_L3_error:;

#line 92 "pyDoppler.pyx"
  __Pyx_AddTraceback("iscecore.pyDopplerEuler.derivs", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 92 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 92 "pyDoppler.pyx"
  return NULL;

#line 92 "pyDoppler.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 92 "pyDoppler.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_slantRange), __pyx_ptype_5numpy_ndarray, 1, "slantRange", 0))) __PYX_ERR(3, 92, __pyx_L1_error)
  __pyx_r = 
#line 92 "pyDoppler.pyx"
__pyx_pf_8iscecore_14pyDopplerEuler_2derivs(((struct __pyx_obj_8iscecore_pyDopplerEuler *)__pyx_v_self), __pyx_v_slantRange, __pyx_v_wvl, __pyx_v_max_iter);

#line 92 "pyDoppler.pyx"


#line 92 "pyDoppler.pyx"
  /* function exit code */

#line 92 "pyDoppler.pyx"
  goto __pyx_L0;

#line 92 "pyDoppler.pyx"
  __pyx_L1_error:;

#line 92 "pyDoppler.pyx"
  __pyx_r = NULL;

#line 92 "pyDoppler.pyx"
  __pyx_L0:;

#line 92 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 92 "pyDoppler.pyx"
  return __pyx_r;

#line 92 "pyDoppler.pyx"
}

#line 92 "pyDoppler.pyx"


#line 92 "pyDoppler.pyx"
static PyObject *__pyx_pf_8iscecore_14pyDopplerEuler_2derivs(struct __pyx_obj_8iscecore_pyDopplerEuler *__pyx_v_self, PyArrayObject *__pyx_v_slantRange, double __pyx_v_wvl, int __pyx_v_max_iter) {
  int __pyx_v_nr
#line 92 "pyDoppler.pyx"
;
  int __pyx_v_j
#line 92 "pyDoppler.pyx"
;
  double __pyx_v_fd_pos
#line 92 "pyDoppler.pyx"
;
  double __pyx_v_fd_neg
#line 92 "pyDoppler.pyx"
;
  double __pyx_v_yaw_ref
#line 92 "pyDoppler.pyx"
;
  double __pyx_v_pitch_ref
#line 92 "pyDoppler.pyx"
;
  double __pyx_v_dx
#line 92 "pyDoppler.pyx"
;
  PyArrayObject *__pyx_v_outDerivs = 0
#line 92 "pyDoppler.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_outDerivs
#line 92 "pyDoppler.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_outDerivs
#line 92 "pyDoppler.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_slantRange
#line 92 "pyDoppler.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_slantRange
#line 92 "pyDoppler.pyx"
;

#line 92 "pyDoppler.pyx"
  PyObject *__pyx_r = NULL;

#line 92 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 92 "pyDoppler.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 92 "pyDoppler.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 92 "pyDoppler.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 92 "pyDoppler.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 92 "pyDoppler.pyx"
  PyArrayObject *__pyx_t_5 = NULL;

#line 92 "pyDoppler.pyx"
  double __pyx_t_6;

#line 92 "pyDoppler.pyx"
  int __pyx_t_7;

#line 92 "pyDoppler.pyx"
  int __pyx_t_8;

#line 92 "pyDoppler.pyx"
  Py_ssize_t __pyx_t_9;

#line 92 "pyDoppler.pyx"
  int __pyx_t_10;

#line 92 "pyDoppler.pyx"
  PyObject *__pyx_t_11 = NULL;

#line 92 "pyDoppler.pyx"
  PyObject *__pyx_t_12 = NULL;

#line 92 "pyDoppler.pyx"
  PyObject *__pyx_t_13 = NULL;

#line 92 "pyDoppler.pyx"
  Py_ssize_t __pyx_t_14;

#line 92 "pyDoppler.pyx"
  double __pyx_t_15;

#line 92 "pyDoppler.pyx"
  Py_ssize_t __pyx_t_16;

#line 92 "pyDoppler.pyx"
  Py_ssize_t __pyx_t_17;

#line 92 "pyDoppler.pyx"
  Py_ssize_t __pyx_t_18;

#line 92 "pyDoppler.pyx"
  Py_ssize_t __pyx_t_19;

#line 92 "pyDoppler.pyx"
  Py_ssize_t __pyx_t_20;

#line 92 "pyDoppler.pyx"
  Py_ssize_t __pyx_t_21;

#line 92 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("derivs", 0);

#line 92 "pyDoppler.pyx"
  __pyx_pybuffer_outDerivs.pybuffer.buf = NULL;

#line 92 "pyDoppler.pyx"
  __pyx_pybuffer_outDerivs.refcount = 0;

#line 92 "pyDoppler.pyx"
  __pyx_pybuffernd_outDerivs.data = NULL;

#line 92 "pyDoppler.pyx"
  __pyx_pybuffernd_outDerivs.rcbuffer = &__pyx_pybuffer_outDerivs;

#line 92 "pyDoppler.pyx"
  __pyx_pybuffer_slantRange.pybuffer.buf = NULL;

#line 92 "pyDoppler.pyx"
  __pyx_pybuffer_slantRange.refcount = 0;

#line 92 "pyDoppler.pyx"
  __pyx_pybuffernd_slantRange.data = NULL;

#line 92 "pyDoppler.pyx"
  __pyx_pybuffernd_slantRange.rcbuffer = &__pyx_pybuffer_slantRange;

#line 92 "pyDoppler.pyx"
  {

#line 92 "pyDoppler.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 92 "pyDoppler.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_slantRange.rcbuffer->pybuffer, (PyObject*)__pyx_v_slantRange, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 92, __pyx_L1_error)

#line 92 "pyDoppler.pyx"
  }

#line 92 "pyDoppler.pyx"
  __pyx_pybuffernd_slantRange.diminfo[0].strides = __pyx_pybuffernd_slantRange.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_slantRange.diminfo[0].shape = __pyx_pybuffernd_slantRange.rcbuffer->pybuffer.shape[0];

  /* "pyDoppler.pyx":96
 *         cdef int nr, j
 *         cdef double fd_pos, fd_neg, yaw_ref, pitch_ref
 *         cdef double dx = 1.0e-10             # <<<<<<<<<<<<<<
 * 
 *         # Get number of range bins
 */

#line 96 "pyDoppler.pyx"
  __pyx_v_dx = 1.0e-10;

  /* "pyDoppler.pyx":99
 * 
 *         # Get number of range bins
 *         nr = slantRange.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         # Allocate output derivatives
 */

#line 99 "pyDoppler.pyx"
  __pyx_v_nr = (__pyx_v_slantRange->dimensions[0]);

  /* "pyDoppler.pyx":103
 *         # Allocate output derivatives
 *         cdef np.ndarray[np.float64_t, ndim=2] outDerivs = (
 *             np.zeros([nr,2], dtype=slantRange.dtype))             # <<<<<<<<<<<<<<
 * 
 *         # Cache the old attitude values
 */

#line 103 "pyDoppler.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 103, __pyx_L1_error)

#line 103 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 103 "pyDoppler.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 103, __pyx_L1_error)

#line 103 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 103 "pyDoppler.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 103 "pyDoppler.pyx"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_nr); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 103, __pyx_L1_error)

#line 103 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 103 "pyDoppler.pyx"
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 103, __pyx_L1_error)

#line 103 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 103 "pyDoppler.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 103 "pyDoppler.pyx"
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);

#line 103 "pyDoppler.pyx"
  __Pyx_INCREF(__pyx_int_2);

#line 103 "pyDoppler.pyx"
  __Pyx_GIVEREF(__pyx_int_2);

#line 103 "pyDoppler.pyx"
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);

#line 103 "pyDoppler.pyx"
  __pyx_t_1 = 0;

#line 103 "pyDoppler.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 103, __pyx_L1_error)

#line 103 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 103 "pyDoppler.pyx"
  __Pyx_GIVEREF(__pyx_t_3);

#line 103 "pyDoppler.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);

#line 103 "pyDoppler.pyx"
  __pyx_t_3 = 0;

#line 103 "pyDoppler.pyx"
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 103, __pyx_L1_error)

#line 103 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 103 "pyDoppler.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_slantRange), __pyx_n_s_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 103, __pyx_L1_error)

#line 103 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 103 "pyDoppler.pyx"
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(3, 103, __pyx_L1_error)

#line 103 "pyDoppler.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 103 "pyDoppler.pyx"
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 103, __pyx_L1_error)

#line 103 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 103 "pyDoppler.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 103 "pyDoppler.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 103 "pyDoppler.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 103 "pyDoppler.pyx"
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(3, 103, __pyx_L1_error)

#line 103 "pyDoppler.pyx"
  __pyx_t_5 = ((PyArrayObject *)__pyx_t_4);

#line 103 "pyDoppler.pyx"
  {

#line 103 "pyDoppler.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 103 "pyDoppler.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_outDerivs.rcbuffer->pybuffer, (PyObject*)__pyx_t_5, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

#line 103 "pyDoppler.pyx"
      __pyx_v_outDerivs = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_outDerivs.rcbuffer->pybuffer.buf = NULL;

#line 103 "pyDoppler.pyx"
      __PYX_ERR(3, 102, __pyx_L1_error)
    } else {
#line 103 "pyDoppler.pyx"
__pyx_pybuffernd_outDerivs.diminfo[0].strides = __pyx_pybuffernd_outDerivs.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_outDerivs.diminfo[0].shape = __pyx_pybuffernd_outDerivs.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_outDerivs.diminfo[1].strides = __pyx_pybuffernd_outDerivs.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_outDerivs.diminfo[1].shape = __pyx_pybuffernd_outDerivs.rcbuffer->pybuffer.shape[1];

#line 103 "pyDoppler.pyx"
    }

#line 103 "pyDoppler.pyx"
  }

#line 103 "pyDoppler.pyx"
  __pyx_t_5 = 0;

#line 103 "pyDoppler.pyx"
  __pyx_v_outDerivs = ((PyArrayObject *)__pyx_t_4);

#line 103 "pyDoppler.pyx"
  __pyx_t_4 = 0;

  /* "pyDoppler.pyx":106
 * 
 *         # Cache the old attitude values
 *         yaw_ref = self.eulerangles.yaw             # <<<<<<<<<<<<<<
 *         pitch_ref = self.eulerangles.pitch
 * 
 */

#line 106 "pyDoppler.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->eulerangles), __pyx_n_s_yaw); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 106, __pyx_L1_error)

#line 106 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 106 "pyDoppler.pyx"
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 106, __pyx_L1_error)

#line 106 "pyDoppler.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 106 "pyDoppler.pyx"
  __pyx_v_yaw_ref = __pyx_t_6;

  /* "pyDoppler.pyx":107
 *         # Cache the old attitude values
 *         yaw_ref = self.eulerangles.yaw
 *         pitch_ref = self.eulerangles.pitch             # <<<<<<<<<<<<<<
 * 
 *         # Loop over range values
 */

#line 107 "pyDoppler.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->eulerangles), __pyx_n_s_pitch); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 107, __pyx_L1_error)

#line 107 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 107 "pyDoppler.pyx"
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 107, __pyx_L1_error)

#line 107 "pyDoppler.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 107 "pyDoppler.pyx"
  __pyx_v_pitch_ref = __pyx_t_6;

  /* "pyDoppler.pyx":110
 * 
 *         # Loop over range values
 *         for j in range(nr):             # <<<<<<<<<<<<<<
 * 
 *             # Yaw positive
 */

#line 110 "pyDoppler.pyx"
  __pyx_t_7 = __pyx_v_nr;

#line 110 "pyDoppler.pyx"
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {

#line 110 "pyDoppler.pyx"
    __pyx_v_j = __pyx_t_8;

    /* "pyDoppler.pyx":113
 * 
 *             # Yaw positive
 *             self.eulerangles.yaw = yaw_ref + dx             # <<<<<<<<<<<<<<
 *             fd_pos = self.centroid(slantRange[j], wvl, max_iter)
 * 
 */

#line 113 "pyDoppler.pyx"
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_yaw_ref + __pyx_v_dx)); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 113, __pyx_L1_error)

#line 113 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 113 "pyDoppler.pyx"
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self->eulerangles), __pyx_n_s_yaw, __pyx_t_4) < 0) __PYX_ERR(3, 113, __pyx_L1_error)

#line 113 "pyDoppler.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyDoppler.pyx":114
 *             # Yaw positive
 *             self.eulerangles.yaw = yaw_ref + dx
 *             fd_pos = self.centroid(slantRange[j], wvl, max_iter)             # <<<<<<<<<<<<<<
 * 
 *             # Yaw negative
 */

#line 114 "pyDoppler.pyx"
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_centroid); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 114, __pyx_L1_error)

#line 114 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 114 "pyDoppler.pyx"
    __pyx_t_9 = __pyx_v_j;

#line 114 "pyDoppler.pyx"
    __pyx_t_10 = -1;

#line 114 "pyDoppler.pyx"
    if (__pyx_t_9 < 0) {

#line 114 "pyDoppler.pyx"
      __pyx_t_9 += __pyx_pybuffernd_slantRange.diminfo[0].shape;

#line 114 "pyDoppler.pyx"
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
    } else 
#line 114 "pyDoppler.pyx"
if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_slantRange.diminfo[0].shape)) __pyx_t_10 = 0;

#line 114 "pyDoppler.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 114 "pyDoppler.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 114 "pyDoppler.pyx"
      __PYX_ERR(3, 114, __pyx_L1_error)

#line 114 "pyDoppler.pyx"
    }

#line 114 "pyDoppler.pyx"
    __pyx_t_1 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_slantRange.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_slantRange.diminfo[0].strides))); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 114, __pyx_L1_error)

#line 114 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 114 "pyDoppler.pyx"
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_wvl); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 114, __pyx_L1_error)

#line 114 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 114 "pyDoppler.pyx"
    __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_max_iter); if (unlikely(!__pyx_t_11)) __PYX_ERR(3, 114, __pyx_L1_error)

#line 114 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_11);

#line 114 "pyDoppler.pyx"
    __pyx_t_12 = NULL;

#line 114 "pyDoppler.pyx"
    __pyx_t_10 = 0;

#line 114 "pyDoppler.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 114 "pyDoppler.pyx"
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_3);

#line 114 "pyDoppler.pyx"
      if (likely(__pyx_t_12)) {

#line 114 "pyDoppler.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 114 "pyDoppler.pyx"
        __Pyx_INCREF(__pyx_t_12);

#line 114 "pyDoppler.pyx"
        __Pyx_INCREF(function);

#line 114 "pyDoppler.pyx"
        __Pyx_DECREF_SET(__pyx_t_3, function);

#line 114 "pyDoppler.pyx"
        __pyx_t_10 = 1;

#line 114 "pyDoppler.pyx"
      }

#line 114 "pyDoppler.pyx"
    }

#line 114 "pyDoppler.pyx"
    #if CYTHON_FAST_PYCALL

#line 114 "pyDoppler.pyx"
    if (PyFunction_Check(__pyx_t_3)) {

#line 114 "pyDoppler.pyx"
      PyObject *__pyx_temp[4] = {__pyx_t_12, __pyx_t_1, __pyx_t_2, __pyx_t_11};

#line 114 "pyDoppler.pyx"
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 114, __pyx_L1_error)

#line 114 "pyDoppler.pyx"
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 114 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 114 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 114 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 114 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 114 "pyDoppler.pyx"
    } else

#line 114 "pyDoppler.pyx"
    #endif

#line 114 "pyDoppler.pyx"
    #if CYTHON_FAST_PYCCALL

#line 114 "pyDoppler.pyx"
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 114 "pyDoppler.pyx"
      PyObject *__pyx_temp[4] = {__pyx_t_12, __pyx_t_1, __pyx_t_2, __pyx_t_11};

#line 114 "pyDoppler.pyx"
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 114, __pyx_L1_error)

#line 114 "pyDoppler.pyx"
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 114 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 114 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 114 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 114 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 114 "pyDoppler.pyx"
    } else

#line 114 "pyDoppler.pyx"
    #endif

#line 114 "pyDoppler.pyx"
    {

#line 114 "pyDoppler.pyx"
      __pyx_t_13 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 114, __pyx_L1_error)

#line 114 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_13);

#line 114 "pyDoppler.pyx"
      if (__pyx_t_12) {

#line 114 "pyDoppler.pyx"
        __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12); __pyx_t_12 = NULL;

#line 114 "pyDoppler.pyx"
      }

#line 114 "pyDoppler.pyx"
      __Pyx_GIVEREF(__pyx_t_1);

#line 114 "pyDoppler.pyx"
      PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_10, __pyx_t_1);

#line 114 "pyDoppler.pyx"
      __Pyx_GIVEREF(__pyx_t_2);

#line 114 "pyDoppler.pyx"
      PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_10, __pyx_t_2);

#line 114 "pyDoppler.pyx"
      __Pyx_GIVEREF(__pyx_t_11);

#line 114 "pyDoppler.pyx"
      PyTuple_SET_ITEM(__pyx_t_13, 2+__pyx_t_10, __pyx_t_11);

#line 114 "pyDoppler.pyx"
      __pyx_t_1 = 0;

#line 114 "pyDoppler.pyx"
      __pyx_t_2 = 0;

#line 114 "pyDoppler.pyx"
      __pyx_t_11 = 0;

#line 114 "pyDoppler.pyx"
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_13, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 114, __pyx_L1_error)

#line 114 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 114 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 114 "pyDoppler.pyx"
    }

#line 114 "pyDoppler.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 114 "pyDoppler.pyx"
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 114, __pyx_L1_error)

#line 114 "pyDoppler.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 114 "pyDoppler.pyx"
    __pyx_v_fd_pos = __pyx_t_6;

    /* "pyDoppler.pyx":117
 * 
 *             # Yaw negative
 *             self.eulerangles.yaw = yaw_ref - dx             # <<<<<<<<<<<<<<
 *             fd_neg = self.centroid(slantRange[j], wvl, max_iter)
 * 
 */

#line 117 "pyDoppler.pyx"
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_yaw_ref - __pyx_v_dx)); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 117, __pyx_L1_error)

#line 117 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 117 "pyDoppler.pyx"
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self->eulerangles), __pyx_n_s_yaw, __pyx_t_4) < 0) __PYX_ERR(3, 117, __pyx_L1_error)

#line 117 "pyDoppler.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyDoppler.pyx":118
 *             # Yaw negative
 *             self.eulerangles.yaw = yaw_ref - dx
 *             fd_neg = self.centroid(slantRange[j], wvl, max_iter)             # <<<<<<<<<<<<<<
 * 
 *             # Yaw derivative
 */

#line 118 "pyDoppler.pyx"
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_centroid); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 118, __pyx_L1_error)

#line 118 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 118 "pyDoppler.pyx"
    __pyx_t_14 = __pyx_v_j;

#line 118 "pyDoppler.pyx"
    __pyx_t_10 = -1;

#line 118 "pyDoppler.pyx"
    if (__pyx_t_14 < 0) {

#line 118 "pyDoppler.pyx"
      __pyx_t_14 += __pyx_pybuffernd_slantRange.diminfo[0].shape;

#line 118 "pyDoppler.pyx"
      if (unlikely(__pyx_t_14 < 0)) __pyx_t_10 = 0;
    } else 
#line 118 "pyDoppler.pyx"
if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_slantRange.diminfo[0].shape)) __pyx_t_10 = 0;

#line 118 "pyDoppler.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 118 "pyDoppler.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 118 "pyDoppler.pyx"
      __PYX_ERR(3, 118, __pyx_L1_error)

#line 118 "pyDoppler.pyx"
    }

#line 118 "pyDoppler.pyx"
    __pyx_t_13 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_slantRange.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_slantRange.diminfo[0].strides))); if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 118, __pyx_L1_error)

#line 118 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_13);

#line 118 "pyDoppler.pyx"
    __pyx_t_11 = PyFloat_FromDouble(__pyx_v_wvl); if (unlikely(!__pyx_t_11)) __PYX_ERR(3, 118, __pyx_L1_error)

#line 118 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_11);

#line 118 "pyDoppler.pyx"
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_max_iter); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 118, __pyx_L1_error)

#line 118 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 118 "pyDoppler.pyx"
    __pyx_t_1 = NULL;

#line 118 "pyDoppler.pyx"
    __pyx_t_10 = 0;

#line 118 "pyDoppler.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 118 "pyDoppler.pyx"
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);

#line 118 "pyDoppler.pyx"
      if (likely(__pyx_t_1)) {

#line 118 "pyDoppler.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 118 "pyDoppler.pyx"
        __Pyx_INCREF(__pyx_t_1);

#line 118 "pyDoppler.pyx"
        __Pyx_INCREF(function);

#line 118 "pyDoppler.pyx"
        __Pyx_DECREF_SET(__pyx_t_3, function);

#line 118 "pyDoppler.pyx"
        __pyx_t_10 = 1;

#line 118 "pyDoppler.pyx"
      }

#line 118 "pyDoppler.pyx"
    }

#line 118 "pyDoppler.pyx"
    #if CYTHON_FAST_PYCALL

#line 118 "pyDoppler.pyx"
    if (PyFunction_Check(__pyx_t_3)) {

#line 118 "pyDoppler.pyx"
      PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_t_13, __pyx_t_11, __pyx_t_2};

#line 118 "pyDoppler.pyx"
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 118, __pyx_L1_error)

#line 118 "pyDoppler.pyx"
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 118 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 118 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 118 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 118 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 118 "pyDoppler.pyx"
    } else

#line 118 "pyDoppler.pyx"
    #endif

#line 118 "pyDoppler.pyx"
    #if CYTHON_FAST_PYCCALL

#line 118 "pyDoppler.pyx"
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 118 "pyDoppler.pyx"
      PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_t_13, __pyx_t_11, __pyx_t_2};

#line 118 "pyDoppler.pyx"
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 118, __pyx_L1_error)

#line 118 "pyDoppler.pyx"
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 118 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 118 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 118 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 118 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 118 "pyDoppler.pyx"
    } else

#line 118 "pyDoppler.pyx"
    #endif

#line 118 "pyDoppler.pyx"
    {

#line 118 "pyDoppler.pyx"
      __pyx_t_12 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 118, __pyx_L1_error)

#line 118 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_12);

#line 118 "pyDoppler.pyx"
      if (__pyx_t_1) {

#line 118 "pyDoppler.pyx"
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_1); __pyx_t_1 = NULL;

#line 118 "pyDoppler.pyx"
      }

#line 118 "pyDoppler.pyx"
      __Pyx_GIVEREF(__pyx_t_13);

#line 118 "pyDoppler.pyx"
      PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_10, __pyx_t_13);

#line 118 "pyDoppler.pyx"
      __Pyx_GIVEREF(__pyx_t_11);

#line 118 "pyDoppler.pyx"
      PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_10, __pyx_t_11);

#line 118 "pyDoppler.pyx"
      __Pyx_GIVEREF(__pyx_t_2);

#line 118 "pyDoppler.pyx"
      PyTuple_SET_ITEM(__pyx_t_12, 2+__pyx_t_10, __pyx_t_2);

#line 118 "pyDoppler.pyx"
      __pyx_t_13 = 0;

#line 118 "pyDoppler.pyx"
      __pyx_t_11 = 0;

#line 118 "pyDoppler.pyx"
      __pyx_t_2 = 0;

#line 118 "pyDoppler.pyx"
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_12, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 118, __pyx_L1_error)

#line 118 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 118 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 118 "pyDoppler.pyx"
    }

#line 118 "pyDoppler.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 118 "pyDoppler.pyx"
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 118, __pyx_L1_error)

#line 118 "pyDoppler.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 118 "pyDoppler.pyx"
    __pyx_v_fd_neg = __pyx_t_6;

    /* "pyDoppler.pyx":121
 * 
 *             # Yaw derivative
 *             outDerivs[j,0] = (fd_pos - fd_neg) / (2.0 * dx)             # <<<<<<<<<<<<<<
 *             # Reset
 *             self.eulerangles.yaw = yaw_ref
 */

#line 121 "pyDoppler.pyx"
    __pyx_t_6 = (__pyx_v_fd_pos - __pyx_v_fd_neg);

#line 121 "pyDoppler.pyx"
    __pyx_t_15 = (2.0 * __pyx_v_dx);

#line 121 "pyDoppler.pyx"
    if (unlikely(__pyx_t_15 == 0)) {

#line 121 "pyDoppler.pyx"
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");

#line 121 "pyDoppler.pyx"
      __PYX_ERR(3, 121, __pyx_L1_error)

#line 121 "pyDoppler.pyx"
    }

#line 121 "pyDoppler.pyx"
    __pyx_t_16 = __pyx_v_j;

#line 121 "pyDoppler.pyx"
    __pyx_t_17 = 0;

#line 121 "pyDoppler.pyx"
    __pyx_t_10 = -1;

#line 121 "pyDoppler.pyx"
    if (__pyx_t_16 < 0) {

#line 121 "pyDoppler.pyx"
      __pyx_t_16 += __pyx_pybuffernd_outDerivs.diminfo[0].shape;

#line 121 "pyDoppler.pyx"
      if (unlikely(__pyx_t_16 < 0)) __pyx_t_10 = 0;
    } else 
#line 121 "pyDoppler.pyx"
if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_outDerivs.diminfo[0].shape)) __pyx_t_10 = 0;

#line 121 "pyDoppler.pyx"
    if (__pyx_t_17 < 0) {

#line 121 "pyDoppler.pyx"
      __pyx_t_17 += __pyx_pybuffernd_outDerivs.diminfo[1].shape;

#line 121 "pyDoppler.pyx"
      if (unlikely(__pyx_t_17 < 0)) __pyx_t_10 = 1;
    } else 
#line 121 "pyDoppler.pyx"
if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_outDerivs.diminfo[1].shape)) __pyx_t_10 = 1;

#line 121 "pyDoppler.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 121 "pyDoppler.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 121 "pyDoppler.pyx"
      __PYX_ERR(3, 121, __pyx_L1_error)

#line 121 "pyDoppler.pyx"
    }

#line 121 "pyDoppler.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_outDerivs.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_outDerivs.diminfo[0].strides, __pyx_t_17, __pyx_pybuffernd_outDerivs.diminfo[1].strides) = (__pyx_t_6 / __pyx_t_15);

    /* "pyDoppler.pyx":123
 *             outDerivs[j,0] = (fd_pos - fd_neg) / (2.0 * dx)
 *             # Reset
 *             self.eulerangles.yaw = yaw_ref             # <<<<<<<<<<<<<<
 * 
 *             # Pitch positive
 */

#line 123 "pyDoppler.pyx"
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_yaw_ref); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 123, __pyx_L1_error)

#line 123 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 123 "pyDoppler.pyx"
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self->eulerangles), __pyx_n_s_yaw, __pyx_t_4) < 0) __PYX_ERR(3, 123, __pyx_L1_error)

#line 123 "pyDoppler.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyDoppler.pyx":126
 * 
 *             # Pitch positive
 *             self.eulerangles.pitch = pitch_ref + dx             # <<<<<<<<<<<<<<
 *             fd_pos = self.centroid(slantRange[j], wvl, max_iter)
 * 
 */

#line 126 "pyDoppler.pyx"
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_pitch_ref + __pyx_v_dx)); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 126, __pyx_L1_error)

#line 126 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 126 "pyDoppler.pyx"
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self->eulerangles), __pyx_n_s_pitch, __pyx_t_4) < 0) __PYX_ERR(3, 126, __pyx_L1_error)

#line 126 "pyDoppler.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyDoppler.pyx":127
 *             # Pitch positive
 *             self.eulerangles.pitch = pitch_ref + dx
 *             fd_pos = self.centroid(slantRange[j], wvl, max_iter)             # <<<<<<<<<<<<<<
 * 
 *             # Pitch negative
 */

#line 127 "pyDoppler.pyx"
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_centroid); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 127, __pyx_L1_error)

#line 127 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 127 "pyDoppler.pyx"
    __pyx_t_18 = __pyx_v_j;

#line 127 "pyDoppler.pyx"
    __pyx_t_10 = -1;

#line 127 "pyDoppler.pyx"
    if (__pyx_t_18 < 0) {

#line 127 "pyDoppler.pyx"
      __pyx_t_18 += __pyx_pybuffernd_slantRange.diminfo[0].shape;

#line 127 "pyDoppler.pyx"
      if (unlikely(__pyx_t_18 < 0)) __pyx_t_10 = 0;
    } else 
#line 127 "pyDoppler.pyx"
if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_slantRange.diminfo[0].shape)) __pyx_t_10 = 0;

#line 127 "pyDoppler.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 127 "pyDoppler.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 127 "pyDoppler.pyx"
      __PYX_ERR(3, 127, __pyx_L1_error)

#line 127 "pyDoppler.pyx"
    }

#line 127 "pyDoppler.pyx"
    __pyx_t_12 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_slantRange.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_slantRange.diminfo[0].strides))); if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 127, __pyx_L1_error)

#line 127 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_12);

#line 127 "pyDoppler.pyx"
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_wvl); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 127, __pyx_L1_error)

#line 127 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 127 "pyDoppler.pyx"
    __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_max_iter); if (unlikely(!__pyx_t_11)) __PYX_ERR(3, 127, __pyx_L1_error)

#line 127 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_11);

#line 127 "pyDoppler.pyx"
    __pyx_t_13 = NULL;

#line 127 "pyDoppler.pyx"
    __pyx_t_10 = 0;

#line 127 "pyDoppler.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 127 "pyDoppler.pyx"
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_3);

#line 127 "pyDoppler.pyx"
      if (likely(__pyx_t_13)) {

#line 127 "pyDoppler.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 127 "pyDoppler.pyx"
        __Pyx_INCREF(__pyx_t_13);

#line 127 "pyDoppler.pyx"
        __Pyx_INCREF(function);

#line 127 "pyDoppler.pyx"
        __Pyx_DECREF_SET(__pyx_t_3, function);

#line 127 "pyDoppler.pyx"
        __pyx_t_10 = 1;

#line 127 "pyDoppler.pyx"
      }

#line 127 "pyDoppler.pyx"
    }

#line 127 "pyDoppler.pyx"
    #if CYTHON_FAST_PYCALL

#line 127 "pyDoppler.pyx"
    if (PyFunction_Check(__pyx_t_3)) {

#line 127 "pyDoppler.pyx"
      PyObject *__pyx_temp[4] = {__pyx_t_13, __pyx_t_12, __pyx_t_2, __pyx_t_11};

#line 127 "pyDoppler.pyx"
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 127, __pyx_L1_error)

#line 127 "pyDoppler.pyx"
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 127 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 127 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 127 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 127 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 127 "pyDoppler.pyx"
    } else

#line 127 "pyDoppler.pyx"
    #endif

#line 127 "pyDoppler.pyx"
    #if CYTHON_FAST_PYCCALL

#line 127 "pyDoppler.pyx"
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 127 "pyDoppler.pyx"
      PyObject *__pyx_temp[4] = {__pyx_t_13, __pyx_t_12, __pyx_t_2, __pyx_t_11};

#line 127 "pyDoppler.pyx"
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 127, __pyx_L1_error)

#line 127 "pyDoppler.pyx"
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 127 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 127 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 127 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 127 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 127 "pyDoppler.pyx"
    } else

#line 127 "pyDoppler.pyx"
    #endif

#line 127 "pyDoppler.pyx"
    {

#line 127 "pyDoppler.pyx"
      __pyx_t_1 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 127, __pyx_L1_error)

#line 127 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 127 "pyDoppler.pyx"
      if (__pyx_t_13) {

#line 127 "pyDoppler.pyx"
        __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_13); __pyx_t_13 = NULL;

#line 127 "pyDoppler.pyx"
      }

#line 127 "pyDoppler.pyx"
      __Pyx_GIVEREF(__pyx_t_12);

#line 127 "pyDoppler.pyx"
      PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_10, __pyx_t_12);

#line 127 "pyDoppler.pyx"
      __Pyx_GIVEREF(__pyx_t_2);

#line 127 "pyDoppler.pyx"
      PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_10, __pyx_t_2);

#line 127 "pyDoppler.pyx"
      __Pyx_GIVEREF(__pyx_t_11);

#line 127 "pyDoppler.pyx"
      PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_10, __pyx_t_11);

#line 127 "pyDoppler.pyx"
      __pyx_t_12 = 0;

#line 127 "pyDoppler.pyx"
      __pyx_t_2 = 0;

#line 127 "pyDoppler.pyx"
      __pyx_t_11 = 0;

#line 127 "pyDoppler.pyx"
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 127, __pyx_L1_error)

#line 127 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 127 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 127 "pyDoppler.pyx"
    }

#line 127 "pyDoppler.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 127 "pyDoppler.pyx"
    __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 127, __pyx_L1_error)

#line 127 "pyDoppler.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 127 "pyDoppler.pyx"
    __pyx_v_fd_pos = __pyx_t_15;

    /* "pyDoppler.pyx":130
 * 
 *             # Pitch negative
 *             self.eulerangles.pitch = pitch_ref - dx             # <<<<<<<<<<<<<<
 *             fd_neg = self.centroid(slantRange[j], wvl, max_iter)
 * 
 */

#line 130 "pyDoppler.pyx"
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_pitch_ref - __pyx_v_dx)); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 130, __pyx_L1_error)

#line 130 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 130 "pyDoppler.pyx"
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self->eulerangles), __pyx_n_s_pitch, __pyx_t_4) < 0) __PYX_ERR(3, 130, __pyx_L1_error)

#line 130 "pyDoppler.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyDoppler.pyx":131
 *             # Pitch negative
 *             self.eulerangles.pitch = pitch_ref - dx
 *             fd_neg = self.centroid(slantRange[j], wvl, max_iter)             # <<<<<<<<<<<<<<
 * 
 *             # Pitch derivative
 */

#line 131 "pyDoppler.pyx"
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_centroid); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 131, __pyx_L1_error)

#line 131 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 131 "pyDoppler.pyx"
    __pyx_t_19 = __pyx_v_j;

#line 131 "pyDoppler.pyx"
    __pyx_t_10 = -1;

#line 131 "pyDoppler.pyx"
    if (__pyx_t_19 < 0) {

#line 131 "pyDoppler.pyx"
      __pyx_t_19 += __pyx_pybuffernd_slantRange.diminfo[0].shape;

#line 131 "pyDoppler.pyx"
      if (unlikely(__pyx_t_19 < 0)) __pyx_t_10 = 0;
    } else 
#line 131 "pyDoppler.pyx"
if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_slantRange.diminfo[0].shape)) __pyx_t_10 = 0;

#line 131 "pyDoppler.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 131 "pyDoppler.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 131 "pyDoppler.pyx"
      __PYX_ERR(3, 131, __pyx_L1_error)

#line 131 "pyDoppler.pyx"
    }

#line 131 "pyDoppler.pyx"
    __pyx_t_1 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_slantRange.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_slantRange.diminfo[0].strides))); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 131, __pyx_L1_error)

#line 131 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 131 "pyDoppler.pyx"
    __pyx_t_11 = PyFloat_FromDouble(__pyx_v_wvl); if (unlikely(!__pyx_t_11)) __PYX_ERR(3, 131, __pyx_L1_error)

#line 131 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_11);

#line 131 "pyDoppler.pyx"
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_max_iter); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 131, __pyx_L1_error)

#line 131 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 131 "pyDoppler.pyx"
    __pyx_t_12 = NULL;

#line 131 "pyDoppler.pyx"
    __pyx_t_10 = 0;

#line 131 "pyDoppler.pyx"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {

#line 131 "pyDoppler.pyx"
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_3);

#line 131 "pyDoppler.pyx"
      if (likely(__pyx_t_12)) {

#line 131 "pyDoppler.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 131 "pyDoppler.pyx"
        __Pyx_INCREF(__pyx_t_12);

#line 131 "pyDoppler.pyx"
        __Pyx_INCREF(function);

#line 131 "pyDoppler.pyx"
        __Pyx_DECREF_SET(__pyx_t_3, function);

#line 131 "pyDoppler.pyx"
        __pyx_t_10 = 1;

#line 131 "pyDoppler.pyx"
      }

#line 131 "pyDoppler.pyx"
    }

#line 131 "pyDoppler.pyx"
    #if CYTHON_FAST_PYCALL

#line 131 "pyDoppler.pyx"
    if (PyFunction_Check(__pyx_t_3)) {

#line 131 "pyDoppler.pyx"
      PyObject *__pyx_temp[4] = {__pyx_t_12, __pyx_t_1, __pyx_t_11, __pyx_t_2};

#line 131 "pyDoppler.pyx"
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 131, __pyx_L1_error)

#line 131 "pyDoppler.pyx"
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 131 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 131 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 131 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 131 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 131 "pyDoppler.pyx"
    } else

#line 131 "pyDoppler.pyx"
    #endif

#line 131 "pyDoppler.pyx"
    #if CYTHON_FAST_PYCCALL

#line 131 "pyDoppler.pyx"
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {

#line 131 "pyDoppler.pyx"
      PyObject *__pyx_temp[4] = {__pyx_t_12, __pyx_t_1, __pyx_t_11, __pyx_t_2};

#line 131 "pyDoppler.pyx"
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 131, __pyx_L1_error)

#line 131 "pyDoppler.pyx"
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 131 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 131 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 131 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 131 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 131 "pyDoppler.pyx"
    } else

#line 131 "pyDoppler.pyx"
    #endif

#line 131 "pyDoppler.pyx"
    {

#line 131 "pyDoppler.pyx"
      __pyx_t_13 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 131, __pyx_L1_error)

#line 131 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_13);

#line 131 "pyDoppler.pyx"
      if (__pyx_t_12) {

#line 131 "pyDoppler.pyx"
        __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12); __pyx_t_12 = NULL;

#line 131 "pyDoppler.pyx"
      }

#line 131 "pyDoppler.pyx"
      __Pyx_GIVEREF(__pyx_t_1);

#line 131 "pyDoppler.pyx"
      PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_10, __pyx_t_1);

#line 131 "pyDoppler.pyx"
      __Pyx_GIVEREF(__pyx_t_11);

#line 131 "pyDoppler.pyx"
      PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_10, __pyx_t_11);

#line 131 "pyDoppler.pyx"
      __Pyx_GIVEREF(__pyx_t_2);

#line 131 "pyDoppler.pyx"
      PyTuple_SET_ITEM(__pyx_t_13, 2+__pyx_t_10, __pyx_t_2);

#line 131 "pyDoppler.pyx"
      __pyx_t_1 = 0;

#line 131 "pyDoppler.pyx"
      __pyx_t_11 = 0;

#line 131 "pyDoppler.pyx"
      __pyx_t_2 = 0;

#line 131 "pyDoppler.pyx"
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_13, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 131, __pyx_L1_error)

#line 131 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 131 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 131 "pyDoppler.pyx"
    }

#line 131 "pyDoppler.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 131 "pyDoppler.pyx"
    __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 131, __pyx_L1_error)

#line 131 "pyDoppler.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 131 "pyDoppler.pyx"
    __pyx_v_fd_neg = __pyx_t_15;

    /* "pyDoppler.pyx":134
 * 
 *             # Pitch derivative
 *             outDerivs[j,1] = (fd_pos - fd_neg) / (2.0 * dx)             # <<<<<<<<<<<<<<
 *             # Reset
 *             self.eulerangles.pitch = pitch_ref
 */

#line 134 "pyDoppler.pyx"
    __pyx_t_15 = (__pyx_v_fd_pos - __pyx_v_fd_neg);

#line 134 "pyDoppler.pyx"
    __pyx_t_6 = (2.0 * __pyx_v_dx);

#line 134 "pyDoppler.pyx"
    if (unlikely(__pyx_t_6 == 0)) {

#line 134 "pyDoppler.pyx"
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");

#line 134 "pyDoppler.pyx"
      __PYX_ERR(3, 134, __pyx_L1_error)

#line 134 "pyDoppler.pyx"
    }

#line 134 "pyDoppler.pyx"
    __pyx_t_20 = __pyx_v_j;

#line 134 "pyDoppler.pyx"
    __pyx_t_21 = 1;

#line 134 "pyDoppler.pyx"
    __pyx_t_10 = -1;

#line 134 "pyDoppler.pyx"
    if (__pyx_t_20 < 0) {

#line 134 "pyDoppler.pyx"
      __pyx_t_20 += __pyx_pybuffernd_outDerivs.diminfo[0].shape;

#line 134 "pyDoppler.pyx"
      if (unlikely(__pyx_t_20 < 0)) __pyx_t_10 = 0;
    } else 
#line 134 "pyDoppler.pyx"
if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_outDerivs.diminfo[0].shape)) __pyx_t_10 = 0;

#line 134 "pyDoppler.pyx"
    if (__pyx_t_21 < 0) {

#line 134 "pyDoppler.pyx"
      __pyx_t_21 += __pyx_pybuffernd_outDerivs.diminfo[1].shape;

#line 134 "pyDoppler.pyx"
      if (unlikely(__pyx_t_21 < 0)) __pyx_t_10 = 1;
    } else 
#line 134 "pyDoppler.pyx"
if (unlikely(__pyx_t_21 >= __pyx_pybuffernd_outDerivs.diminfo[1].shape)) __pyx_t_10 = 1;

#line 134 "pyDoppler.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 134 "pyDoppler.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 134 "pyDoppler.pyx"
      __PYX_ERR(3, 134, __pyx_L1_error)

#line 134 "pyDoppler.pyx"
    }

#line 134 "pyDoppler.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_outDerivs.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_outDerivs.diminfo[0].strides, __pyx_t_21, __pyx_pybuffernd_outDerivs.diminfo[1].strides) = (__pyx_t_15 / __pyx_t_6);

    /* "pyDoppler.pyx":136
 *             outDerivs[j,1] = (fd_pos - fd_neg) / (2.0 * dx)
 *             # Reset
 *             self.eulerangles.pitch = pitch_ref             # <<<<<<<<<<<<<<
 * 
 *         return outDerivs
 */

#line 136 "pyDoppler.pyx"
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_pitch_ref); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 136, __pyx_L1_error)

#line 136 "pyDoppler.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 136 "pyDoppler.pyx"
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self->eulerangles), __pyx_n_s_pitch, __pyx_t_4) < 0) __PYX_ERR(3, 136, __pyx_L1_error)

#line 136 "pyDoppler.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 136 "pyDoppler.pyx"
  }

  /* "pyDoppler.pyx":138
 *             self.eulerangles.pitch = pitch_ref
 * 
 *         return outDerivs             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 138 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 138 "pyDoppler.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_outDerivs));

#line 138 "pyDoppler.pyx"
  __pyx_r = ((PyObject *)__pyx_v_outDerivs);

#line 138 "pyDoppler.pyx"
  goto __pyx_L0;

  /* "pyDoppler.pyx":92
 * 
 * 
 *     def derivs(self, np.ndarray[np.float64_t, ndim=1] slantRange, double wvl, int max_iter=10):             # <<<<<<<<<<<<<<
 * 
 *         cdef int nr, j
 */

#line 92 "pyDoppler.pyx"


#line 92 "pyDoppler.pyx"
  /* function exit code */

#line 92 "pyDoppler.pyx"
  __pyx_L1_error:;

#line 92 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 92 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 92 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 92 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 92 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_11);

#line 92 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_12);

#line 92 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_13);

#line 92 "pyDoppler.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 92 "pyDoppler.pyx"
    __Pyx_PyThreadState_declare

#line 92 "pyDoppler.pyx"
    __Pyx_PyThreadState_assign

#line 92 "pyDoppler.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 92 "pyDoppler.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outDerivs.rcbuffer->pybuffer);

#line 92 "pyDoppler.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_slantRange.rcbuffer->pybuffer);

#line 92 "pyDoppler.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 92 "pyDoppler.pyx"
  __Pyx_AddTraceback("iscecore.pyDopplerEuler.derivs", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 92 "pyDoppler.pyx"
  __pyx_r = NULL;

#line 92 "pyDoppler.pyx"
  goto __pyx_L2;

#line 92 "pyDoppler.pyx"
  __pyx_L0:;

#line 92 "pyDoppler.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outDerivs.rcbuffer->pybuffer);

#line 92 "pyDoppler.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_slantRange.rcbuffer->pybuffer);

#line 92 "pyDoppler.pyx"
  __pyx_L2:;

#line 92 "pyDoppler.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_outDerivs);

#line 92 "pyDoppler.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 92 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 92 "pyDoppler.pyx"
  return __pyx_r;

#line 92 "pyDoppler.pyx"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_14pyDopplerEuler_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_14pyDopplerEuler_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_8iscecore_14pyDopplerEuler_4__reduce_cython__(((struct __pyx_obj_8iscecore_pyDopplerEuler *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_14pyDopplerEuler_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyDopplerEuler *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyDopplerEuler.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_14pyDopplerEuler_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_14pyDopplerEuler_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf_8iscecore_14pyDopplerEuler_6__setstate_cython__(((struct __pyx_obj_8iscecore_pyDopplerEuler *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_14pyDopplerEuler_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyDopplerEuler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyDopplerEuler.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "pyDoppler.pyx":144
 *     cdef pyQuaternion quaternion
 * 
 *     def __cinit__(self, pyOrbit orbit, pyQuaternion quaternion, pyEllipsoid ellipsoid,             # <<<<<<<<<<<<<<
 *         double epoch):
 *         self.c_doppler = new Doppler(
 */

#line 144 "pyDoppler.pyx"


#line 144 "pyDoppler.pyx"
/* Python wrapper */

#line 144 "pyDoppler.pyx"
static int __pyx_pw_8iscecore_19pyDopplerQuaternion_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 144 "pyDoppler.pyx"
static int __pyx_pw_8iscecore_19pyDopplerQuaternion_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_orbit = 0
#line 144 "pyDoppler.pyx"
;
  struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_quaternion = 0
#line 144 "pyDoppler.pyx"
;
  struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_ellipsoid = 0
#line 144 "pyDoppler.pyx"
;
  double __pyx_v_epoch
#line 144 "pyDoppler.pyx"
;

#line 144 "pyDoppler.pyx"
  int __pyx_r;

#line 144 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 144 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 144 "pyDoppler.pyx"
  {

#line 144 "pyDoppler.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_orbit,&__pyx_n_s_quaternion,&__pyx_n_s_ellipsoid,&__pyx_n_s_epoch,0};

#line 144 "pyDoppler.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 144 "pyDoppler.pyx"
    if (unlikely(__pyx_kwds)) {

#line 144 "pyDoppler.pyx"
      Py_ssize_t kw_args;

#line 144 "pyDoppler.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 144 "pyDoppler.pyx"
      switch (pos_args) {
        case  4: 
#line 144 "pyDoppler.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 144 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 144 "pyDoppler.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 144 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 144 "pyDoppler.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 144 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 144 "pyDoppler.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 144 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 144 "pyDoppler.pyx"
        case  0: break;
        default: 
#line 144 "pyDoppler.pyx"
goto __pyx_L5_argtuple_error;

#line 144 "pyDoppler.pyx"
      }

#line 144 "pyDoppler.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 144 "pyDoppler.pyx"
      switch (pos_args) {

#line 144 "pyDoppler.pyx"
        case  0:

#line 144 "pyDoppler.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_orbit)) != 0)) kw_args--;
        else 
#line 144 "pyDoppler.pyx"
goto __pyx_L5_argtuple_error;

#line 144 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 144 "pyDoppler.pyx"
        case  1:

#line 144 "pyDoppler.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_quaternion)) != 0)) kw_args--;

#line 144 "pyDoppler.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 1); 
#line 144 "pyDoppler.pyx"
__PYX_ERR(3, 144, __pyx_L3_error)

#line 144 "pyDoppler.pyx"
        }

#line 144 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 144 "pyDoppler.pyx"
        case  2:

#line 144 "pyDoppler.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ellipsoid)) != 0)) kw_args--;

#line 144 "pyDoppler.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 2); 
#line 144 "pyDoppler.pyx"
__PYX_ERR(3, 144, __pyx_L3_error)

#line 144 "pyDoppler.pyx"
        }

#line 144 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 144 "pyDoppler.pyx"
        case  3:

#line 144 "pyDoppler.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_epoch)) != 0)) kw_args--;

#line 144 "pyDoppler.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 3); 
#line 144 "pyDoppler.pyx"
__PYX_ERR(3, 144, __pyx_L3_error)

#line 144 "pyDoppler.pyx"
        }

#line 144 "pyDoppler.pyx"
      }

#line 144 "pyDoppler.pyx"
      if (unlikely(kw_args > 0)) {

#line 144 "pyDoppler.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 144, __pyx_L3_error)

#line 144 "pyDoppler.pyx"
      }

#line 144 "pyDoppler.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 144 "pyDoppler.pyx"
      goto __pyx_L5_argtuple_error;

#line 144 "pyDoppler.pyx"
    } else {

#line 144 "pyDoppler.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 144 "pyDoppler.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 144 "pyDoppler.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 144 "pyDoppler.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 144 "pyDoppler.pyx"
    }

#line 144 "pyDoppler.pyx"
    __pyx_v_orbit = ((struct __pyx_obj_8iscecore_pyOrbit *)values[0]);

#line 144 "pyDoppler.pyx"
    __pyx_v_quaternion = ((struct __pyx_obj_8iscecore_pyQuaternion *)values[1]);

#line 144 "pyDoppler.pyx"
    __pyx_v_ellipsoid = ((struct __pyx_obj_8iscecore_pyEllipsoid *)values[2]);

#line 144 "pyDoppler.pyx"
    __pyx_v_epoch = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_epoch == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 145, __pyx_L3_error)

#line 144 "pyDoppler.pyx"
  }

#line 144 "pyDoppler.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 144 "pyDoppler.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 144 "pyDoppler.pyx"
__PYX_ERR(3, 144, __pyx_L3_error)

#line 144 "pyDoppler.pyx"
  __pyx_L3_error:;

#line 144 "pyDoppler.pyx"
  __Pyx_AddTraceback("iscecore.pyDopplerQuaternion.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 144 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 144 "pyDoppler.pyx"
  return -1;

#line 144 "pyDoppler.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 144 "pyDoppler.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_orbit), __pyx_ptype_8iscecore_pyOrbit, 1, "orbit", 0))) __PYX_ERR(3, 144, __pyx_L1_error)

#line 144 "pyDoppler.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_quaternion), __pyx_ptype_8iscecore_pyQuaternion, 1, "quaternion", 0))) __PYX_ERR(3, 144, __pyx_L1_error)

#line 144 "pyDoppler.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ellipsoid), __pyx_ptype_8iscecore_pyEllipsoid, 1, "ellipsoid", 0))) __PYX_ERR(3, 144, __pyx_L1_error)
  __pyx_r = 
#line 144 "pyDoppler.pyx"
__pyx_pf_8iscecore_19pyDopplerQuaternion___cinit__(((struct __pyx_obj_8iscecore_pyDopplerQuaternion *)__pyx_v_self), __pyx_v_orbit, __pyx_v_quaternion, __pyx_v_ellipsoid, __pyx_v_epoch);

#line 144 "pyDoppler.pyx"


#line 144 "pyDoppler.pyx"
  /* function exit code */

#line 144 "pyDoppler.pyx"
  goto __pyx_L0;

#line 144 "pyDoppler.pyx"
  __pyx_L1_error:;

#line 144 "pyDoppler.pyx"
  __pyx_r = -1;

#line 144 "pyDoppler.pyx"
  __pyx_L0:;

#line 144 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 144 "pyDoppler.pyx"
  return __pyx_r;

#line 144 "pyDoppler.pyx"
}

#line 144 "pyDoppler.pyx"


#line 144 "pyDoppler.pyx"
static int __pyx_pf_8iscecore_19pyDopplerQuaternion___cinit__(struct __pyx_obj_8iscecore_pyDopplerQuaternion *__pyx_v_self, struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_orbit, struct __pyx_obj_8iscecore_pyQuaternion *__pyx_v_quaternion, struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_ellipsoid, double __pyx_v_epoch) {

#line 144 "pyDoppler.pyx"
  int __pyx_r;

#line 144 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 144 "pyDoppler.pyx"
  isce::core::Doppler *__pyx_t_1;

#line 144 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyDoppler.pyx":146
 *     def __cinit__(self, pyOrbit orbit, pyQuaternion quaternion, pyEllipsoid ellipsoid,
 *         double epoch):
 *         self.c_doppler = new Doppler(             # <<<<<<<<<<<<<<
 *             deref(orbit.c_orbit),
 *             quaternion.c_quaternion,
 */

#line 146 "pyDoppler.pyx"
  try {

#line 146 "pyDoppler.pyx"
    __pyx_t_1 = new isce::core::Doppler((*__pyx_v_orbit->c_orbit), __pyx_v_quaternion->c_quaternion, (*__pyx_v_ellipsoid->c_ellipsoid), __pyx_v_epoch);

#line 146 "pyDoppler.pyx"
  } catch(...) {

#line 146 "pyDoppler.pyx"
    __Pyx_CppExn2PyErr();

#line 146 "pyDoppler.pyx"
    __PYX_ERR(3, 146, __pyx_L1_error)

#line 146 "pyDoppler.pyx"
  }

#line 146 "pyDoppler.pyx"
  __pyx_v_self->__pyx_base.c_doppler = __pyx_t_1;

  /* "pyDoppler.pyx":151
 *             deref(ellipsoid.c_ellipsoid), epoch
 *         )
 *         self.quaternion = quaternion             # <<<<<<<<<<<<<<
 *         self.__owner = True
 * 
 */

#line 151 "pyDoppler.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_quaternion));

#line 151 "pyDoppler.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_v_quaternion));

#line 151 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_v_self->quaternion);

#line 151 "pyDoppler.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_v_self->quaternion));

#line 151 "pyDoppler.pyx"
  __pyx_v_self->quaternion = __pyx_v_quaternion;

  /* "pyDoppler.pyx":152
 *         )
 *         self.quaternion = quaternion
 *         self.__owner = True             # <<<<<<<<<<<<<<
 * 
 *     def derivs(self, np.ndarray[np.float64_t, ndim=1] slantRange, double wvl,
 */

#line 152 "pyDoppler.pyx"
  __pyx_v_self->__pyx_base.__pyx___owner = 1;

  /* "pyDoppler.pyx":144
 *     cdef pyQuaternion quaternion
 * 
 *     def __cinit__(self, pyOrbit orbit, pyQuaternion quaternion, pyEllipsoid ellipsoid,             # <<<<<<<<<<<<<<
 *         double epoch):
 *         self.c_doppler = new Doppler(
 */

#line 144 "pyDoppler.pyx"


#line 144 "pyDoppler.pyx"
  /* function exit code */

#line 144 "pyDoppler.pyx"
  __pyx_r = 0;

#line 144 "pyDoppler.pyx"
  goto __pyx_L0;

#line 144 "pyDoppler.pyx"
  __pyx_L1_error:;

#line 144 "pyDoppler.pyx"
  __Pyx_AddTraceback("iscecore.pyDopplerQuaternion.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 144 "pyDoppler.pyx"
  __pyx_r = -1;

#line 144 "pyDoppler.pyx"
  __pyx_L0:;

#line 144 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 144 "pyDoppler.pyx"
  return __pyx_r;

#line 144 "pyDoppler.pyx"
}

/* "pyDoppler.pyx":154
 *         self.__owner = True
 * 
 *     def derivs(self, np.ndarray[np.float64_t, ndim=1] slantRange, double wvl,             # <<<<<<<<<<<<<<
 *         string frame, int max_iter, int side, bool precession,
 *         np.ndarray[np.float64_t, ndim=2] outDerivs):
 */

#line 154 "pyDoppler.pyx"


#line 154 "pyDoppler.pyx"
/* Python wrapper */

#line 154 "pyDoppler.pyx"
static PyObject *__pyx_pw_8iscecore_19pyDopplerQuaternion_3derivs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 154 "pyDoppler.pyx"
static PyObject *__pyx_pw_8iscecore_19pyDopplerQuaternion_3derivs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_slantRange = 0
#line 154 "pyDoppler.pyx"
;
  double __pyx_v_wvl
#line 154 "pyDoppler.pyx"
;
  std::string __pyx_v_frame
#line 154 "pyDoppler.pyx"
;
  int __pyx_v_max_iter
#line 154 "pyDoppler.pyx"
;
  int __pyx_v_side
#line 154 "pyDoppler.pyx"
;
  bool __pyx_v_precession
#line 154 "pyDoppler.pyx"
;
  PyArrayObject *__pyx_v_outDerivs = 0
#line 154 "pyDoppler.pyx"
;

#line 154 "pyDoppler.pyx"
  PyObject *__pyx_r = 0;

#line 154 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 154 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("derivs (wrapper)", 0);

#line 154 "pyDoppler.pyx"
  {

#line 154 "pyDoppler.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_slantRange,&__pyx_n_s_wvl,&__pyx_n_s_frame,&__pyx_n_s_max_iter,&__pyx_n_s_side,&__pyx_n_s_precession,&__pyx_n_s_outDerivs,0};

#line 154 "pyDoppler.pyx"
    PyObject* values[7] = {0,0,0,0,0,0,0};

#line 154 "pyDoppler.pyx"
    if (unlikely(__pyx_kwds)) {

#line 154 "pyDoppler.pyx"
      Py_ssize_t kw_args;

#line 154 "pyDoppler.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 154 "pyDoppler.pyx"
      switch (pos_args) {
        case  7: 
#line 154 "pyDoppler.pyx"
values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

#line 154 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  6: 
#line 154 "pyDoppler.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 154 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  5: 
#line 154 "pyDoppler.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 154 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 154 "pyDoppler.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 154 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 154 "pyDoppler.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 154 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 154 "pyDoppler.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 154 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 154 "pyDoppler.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 154 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 154 "pyDoppler.pyx"
        case  0: break;
        default: 
#line 154 "pyDoppler.pyx"
goto __pyx_L5_argtuple_error;

#line 154 "pyDoppler.pyx"
      }

#line 154 "pyDoppler.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 154 "pyDoppler.pyx"
      switch (pos_args) {

#line 154 "pyDoppler.pyx"
        case  0:

#line 154 "pyDoppler.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_slantRange)) != 0)) kw_args--;
        else 
#line 154 "pyDoppler.pyx"
goto __pyx_L5_argtuple_error;

#line 154 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 154 "pyDoppler.pyx"
        case  1:

#line 154 "pyDoppler.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_wvl)) != 0)) kw_args--;

#line 154 "pyDoppler.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("derivs", 1, 7, 7, 1); 
#line 154 "pyDoppler.pyx"
__PYX_ERR(3, 154, __pyx_L3_error)

#line 154 "pyDoppler.pyx"
        }

#line 154 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 154 "pyDoppler.pyx"
        case  2:

#line 154 "pyDoppler.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_frame)) != 0)) kw_args--;

#line 154 "pyDoppler.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("derivs", 1, 7, 7, 2); 
#line 154 "pyDoppler.pyx"
__PYX_ERR(3, 154, __pyx_L3_error)

#line 154 "pyDoppler.pyx"
        }

#line 154 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 154 "pyDoppler.pyx"
        case  3:

#line 154 "pyDoppler.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_iter)) != 0)) kw_args--;

#line 154 "pyDoppler.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("derivs", 1, 7, 7, 3); 
#line 154 "pyDoppler.pyx"
__PYX_ERR(3, 154, __pyx_L3_error)

#line 154 "pyDoppler.pyx"
        }

#line 154 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 154 "pyDoppler.pyx"
        case  4:

#line 154 "pyDoppler.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_side)) != 0)) kw_args--;

#line 154 "pyDoppler.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("derivs", 1, 7, 7, 4); 
#line 154 "pyDoppler.pyx"
__PYX_ERR(3, 154, __pyx_L3_error)

#line 154 "pyDoppler.pyx"
        }

#line 154 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 154 "pyDoppler.pyx"
        case  5:

#line 154 "pyDoppler.pyx"
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_precession)) != 0)) kw_args--;

#line 154 "pyDoppler.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("derivs", 1, 7, 7, 5); 
#line 154 "pyDoppler.pyx"
__PYX_ERR(3, 154, __pyx_L3_error)

#line 154 "pyDoppler.pyx"
        }

#line 154 "pyDoppler.pyx"
        CYTHON_FALLTHROUGH;

#line 154 "pyDoppler.pyx"
        case  6:

#line 154 "pyDoppler.pyx"
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_outDerivs)) != 0)) kw_args--;

#line 154 "pyDoppler.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("derivs", 1, 7, 7, 6); 
#line 154 "pyDoppler.pyx"
__PYX_ERR(3, 154, __pyx_L3_error)

#line 154 "pyDoppler.pyx"
        }

#line 154 "pyDoppler.pyx"
      }

#line 154 "pyDoppler.pyx"
      if (unlikely(kw_args > 0)) {

#line 154 "pyDoppler.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "derivs") < 0)) __PYX_ERR(3, 154, __pyx_L3_error)

#line 154 "pyDoppler.pyx"
      }

#line 154 "pyDoppler.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {

#line 154 "pyDoppler.pyx"
      goto __pyx_L5_argtuple_error;

#line 154 "pyDoppler.pyx"
    } else {

#line 154 "pyDoppler.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 154 "pyDoppler.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 154 "pyDoppler.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 154 "pyDoppler.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 154 "pyDoppler.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 154 "pyDoppler.pyx"
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 154 "pyDoppler.pyx"
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

#line 154 "pyDoppler.pyx"
    }

#line 154 "pyDoppler.pyx"
    __pyx_v_slantRange = ((PyArrayObject *)values[0]);

#line 154 "pyDoppler.pyx"
    __pyx_v_wvl = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_wvl == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 154, __pyx_L3_error)

#line 154 "pyDoppler.pyx"
    __pyx_v_frame = __pyx_convert_string_from_py_std__in_string(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 155, __pyx_L3_error)

#line 154 "pyDoppler.pyx"
    __pyx_v_max_iter = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_max_iter == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 155, __pyx_L3_error)

#line 154 "pyDoppler.pyx"
    __pyx_v_side = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_side == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 155, __pyx_L3_error)

#line 154 "pyDoppler.pyx"
    __pyx_v_precession = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_precession == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(3, 155, __pyx_L3_error)

#line 154 "pyDoppler.pyx"
    __pyx_v_outDerivs = ((PyArrayObject *)values[6]);

#line 154 "pyDoppler.pyx"
  }

#line 154 "pyDoppler.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 154 "pyDoppler.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("derivs", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); 
#line 154 "pyDoppler.pyx"
__PYX_ERR(3, 154, __pyx_L3_error)

#line 154 "pyDoppler.pyx"
  __pyx_L3_error:;

#line 154 "pyDoppler.pyx"
  __Pyx_AddTraceback("iscecore.pyDopplerQuaternion.derivs", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 154 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 154 "pyDoppler.pyx"
  return NULL;

#line 154 "pyDoppler.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 154 "pyDoppler.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_slantRange), __pyx_ptype_5numpy_ndarray, 1, "slantRange", 0))) __PYX_ERR(3, 154, __pyx_L1_error)

#line 154 "pyDoppler.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_outDerivs), __pyx_ptype_5numpy_ndarray, 1, "outDerivs", 0))) __PYX_ERR(3, 156, __pyx_L1_error)
  __pyx_r = 
#line 154 "pyDoppler.pyx"
__pyx_pf_8iscecore_19pyDopplerQuaternion_2derivs(((struct __pyx_obj_8iscecore_pyDopplerQuaternion *)__pyx_v_self), __pyx_v_slantRange, __pyx_v_wvl, __pyx_v_frame, __pyx_v_max_iter, __pyx_v_side, __pyx_v_precession, __pyx_v_outDerivs);

#line 154 "pyDoppler.pyx"


#line 154 "pyDoppler.pyx"
  /* function exit code */

#line 154 "pyDoppler.pyx"
  goto __pyx_L0;

#line 154 "pyDoppler.pyx"
  __pyx_L1_error:;

#line 154 "pyDoppler.pyx"
  __pyx_r = NULL;

#line 154 "pyDoppler.pyx"
  __pyx_L0:;

#line 154 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 154 "pyDoppler.pyx"
  return __pyx_r;

#line 154 "pyDoppler.pyx"
}

#line 154 "pyDoppler.pyx"


#line 154 "pyDoppler.pyx"
static PyObject *__pyx_pf_8iscecore_19pyDopplerQuaternion_2derivs(struct __pyx_obj_8iscecore_pyDopplerQuaternion *__pyx_v_self, PyArrayObject *__pyx_v_slantRange, double __pyx_v_wvl, std::string __pyx_v_frame, int __pyx_v_max_iter, int __pyx_v_side, bool __pyx_v_precession, PyArrayObject *__pyx_v_outDerivs) {
  int __pyx_v_nr
#line 154 "pyDoppler.pyx"
;
  int __pyx_v_j
#line 154 "pyDoppler.pyx"
;
  int __pyx_v_k
#line 154 "pyDoppler.pyx"
;
  double __pyx_v_fd_pos
#line 154 "pyDoppler.pyx"
;
  double __pyx_v_fd_neg
#line 154 "pyDoppler.pyx"
;
  double __pyx_v_dx
#line 154 "pyDoppler.pyx"
;
  std::vector<double>  __pyx_v_qref
#line 154 "pyDoppler.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_outDerivs
#line 154 "pyDoppler.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_outDerivs
#line 154 "pyDoppler.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_slantRange
#line 154 "pyDoppler.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_slantRange
#line 154 "pyDoppler.pyx"
;

#line 154 "pyDoppler.pyx"
  PyObject *__pyx_r = NULL;

#line 154 "pyDoppler.pyx"
  __Pyx_RefNannyDeclarations

#line 154 "pyDoppler.pyx"
  int __pyx_t_1;

#line 154 "pyDoppler.pyx"
  int __pyx_t_2;

#line 154 "pyDoppler.pyx"
  int __pyx_t_3;

#line 154 "pyDoppler.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 154 "pyDoppler.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 154 "pyDoppler.pyx"
  Py_ssize_t __pyx_t_6;

#line 154 "pyDoppler.pyx"
  int __pyx_t_7;

#line 154 "pyDoppler.pyx"
  PyObject *__pyx_t_8 = NULL;

#line 154 "pyDoppler.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 154 "pyDoppler.pyx"
  PyObject *__pyx_t_10 = NULL;

#line 154 "pyDoppler.pyx"
  PyObject *__pyx_t_11 = NULL;

#line 154 "pyDoppler.pyx"
  PyObject *__pyx_t_12 = NULL;

#line 154 "pyDoppler.pyx"
  PyObject *__pyx_t_13 = NULL;

#line 154 "pyDoppler.pyx"
  PyObject *__pyx_t_14 = NULL;

#line 154 "pyDoppler.pyx"
  PyObject *__pyx_t_15 = NULL;

#line 154 "pyDoppler.pyx"
  double __pyx_t_16;

#line 154 "pyDoppler.pyx"
  Py_ssize_t __pyx_t_17;

#line 154 "pyDoppler.pyx"
  double __pyx_t_18;

#line 154 "pyDoppler.pyx"
  Py_ssize_t __pyx_t_19;

#line 154 "pyDoppler.pyx"
  Py_ssize_t __pyx_t_20;

#line 154 "pyDoppler.pyx"
  __Pyx_RefNannySetupContext("derivs", 0);

#line 154 "pyDoppler.pyx"
  __pyx_pybuffer_slantRange.pybuffer.buf = NULL;

#line 154 "pyDoppler.pyx"
  __pyx_pybuffer_slantRange.refcount = 0;

#line 154 "pyDoppler.pyx"
  __pyx_pybuffernd_slantRange.data = NULL;

#line 154 "pyDoppler.pyx"
  __pyx_pybuffernd_slantRange.rcbuffer = &__pyx_pybuffer_slantRange;

#line 154 "pyDoppler.pyx"
  __pyx_pybuffer_outDerivs.pybuffer.buf = NULL;

#line 154 "pyDoppler.pyx"
  __pyx_pybuffer_outDerivs.refcount = 0;

#line 154 "pyDoppler.pyx"
  __pyx_pybuffernd_outDerivs.data = NULL;

#line 154 "pyDoppler.pyx"
  __pyx_pybuffernd_outDerivs.rcbuffer = &__pyx_pybuffer_outDerivs;

#line 154 "pyDoppler.pyx"
  {

#line 154 "pyDoppler.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 154 "pyDoppler.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_slantRange.rcbuffer->pybuffer, (PyObject*)__pyx_v_slantRange, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 154, __pyx_L1_error)

#line 154 "pyDoppler.pyx"
  }

#line 154 "pyDoppler.pyx"
  __pyx_pybuffernd_slantRange.diminfo[0].strides = __pyx_pybuffernd_slantRange.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_slantRange.diminfo[0].shape = __pyx_pybuffernd_slantRange.rcbuffer->pybuffer.shape[0];

#line 154 "pyDoppler.pyx"
  {

#line 154 "pyDoppler.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 154 "pyDoppler.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_outDerivs.rcbuffer->pybuffer, (PyObject*)__pyx_v_outDerivs, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) __PYX_ERR(3, 154, __pyx_L1_error)

#line 154 "pyDoppler.pyx"
  }

#line 154 "pyDoppler.pyx"
  __pyx_pybuffernd_outDerivs.diminfo[0].strides = __pyx_pybuffernd_outDerivs.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_outDerivs.diminfo[0].shape = __pyx_pybuffernd_outDerivs.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_outDerivs.diminfo[1].strides = __pyx_pybuffernd_outDerivs.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_outDerivs.diminfo[1].shape = __pyx_pybuffernd_outDerivs.rcbuffer->pybuffer.shape[1];

  /* "pyDoppler.pyx":160
 *         cdef int nr, j, k
 *         cdef double fd_pos, fd_neg
 *         cdef double dx = 1.0e-10             # <<<<<<<<<<<<<<
 * 
 *         nr = slantRange.shape[0]
 */

#line 160 "pyDoppler.pyx"
  __pyx_v_dx = 1.0e-10;

  /* "pyDoppler.pyx":162
 *         cdef double dx = 1.0e-10
 * 
 *         nr = slantRange.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         # Cache the old attitude values
 */

#line 162 "pyDoppler.pyx"
  __pyx_v_nr = (__pyx_v_slantRange->dimensions[0]);

  /* "pyDoppler.pyx":166
 *         # Cache the old attitude values
 *         cdef vector[double] qref
 *         for k in range(4):             # <<<<<<<<<<<<<<
 *             qref.push_back(self.quaternion.c_quaternion.qvec[k])
 * 
 */

#line 166 "pyDoppler.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {

#line 166 "pyDoppler.pyx"
    __pyx_v_k = __pyx_t_1;

    /* "pyDoppler.pyx":167
 *         cdef vector[double] qref
 *         for k in range(4):
 *             qref.push_back(self.quaternion.c_quaternion.qvec[k])             # <<<<<<<<<<<<<<
 * 
 *         # Loop over range values
 */

#line 167 "pyDoppler.pyx"
    try {

#line 167 "pyDoppler.pyx"
      __pyx_v_qref.push_back((__pyx_v_self->quaternion->c_quaternion->qvec[__pyx_v_k]));

#line 167 "pyDoppler.pyx"
    } catch(...) {

#line 167 "pyDoppler.pyx"
      __Pyx_CppExn2PyErr();

#line 167 "pyDoppler.pyx"
      __PYX_ERR(3, 167, __pyx_L1_error)

#line 167 "pyDoppler.pyx"
    }

#line 167 "pyDoppler.pyx"
  }

  /* "pyDoppler.pyx":170
 * 
 *         # Loop over range values
 *         for j in range(nr):             # <<<<<<<<<<<<<<
 *             # Loop over quaternion elements
 *             for k in range(4):
 */

#line 170 "pyDoppler.pyx"
  __pyx_t_1 = __pyx_v_nr;

#line 170 "pyDoppler.pyx"
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {

#line 170 "pyDoppler.pyx"
    __pyx_v_j = __pyx_t_2;

    /* "pyDoppler.pyx":172
 *         for j in range(nr):
 *             # Loop over quaternion elements
 *             for k in range(4):             # <<<<<<<<<<<<<<
 *                 # Positive
 *                 self.quaternion.c_quaternion.qvec[k] = qref[k] + dx
 */

#line 172 "pyDoppler.pyx"
    for (__pyx_t_3 = 0; __pyx_t_3 < 4; __pyx_t_3+=1) {

#line 172 "pyDoppler.pyx"
      __pyx_v_k = __pyx_t_3;

      /* "pyDoppler.pyx":174
 *             for k in range(4):
 *                 # Positive
 *                 self.quaternion.c_quaternion.qvec[k] = qref[k] + dx             # <<<<<<<<<<<<<<
 *                 fd_pos = self.centroid(slantRange[j], wvl, frame, max_iter, side, precession)
 *                 # Negative
 */

#line 174 "pyDoppler.pyx"
      (__pyx_v_self->quaternion->c_quaternion->qvec[__pyx_v_k]) = ((__pyx_v_qref[__pyx_v_k]) + __pyx_v_dx);

      /* "pyDoppler.pyx":175
 *                 # Positive
 *                 self.quaternion.c_quaternion.qvec[k] = qref[k] + dx
 *                 fd_pos = self.centroid(slantRange[j], wvl, frame, max_iter, side, precession)             # <<<<<<<<<<<<<<
 *                 # Negative
 *                 self.quaternion.c_quaternion.qvec[k] = qref[k] - dx
 */

#line 175 "pyDoppler.pyx"
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_centroid); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 175, __pyx_L1_error)

#line 175 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 175 "pyDoppler.pyx"
      __pyx_t_6 = __pyx_v_j;

#line 175 "pyDoppler.pyx"
      __pyx_t_7 = -1;

#line 175 "pyDoppler.pyx"
      if (__pyx_t_6 < 0) {

#line 175 "pyDoppler.pyx"
        __pyx_t_6 += __pyx_pybuffernd_slantRange.diminfo[0].shape;

#line 175 "pyDoppler.pyx"
        if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
      } else 
#line 175 "pyDoppler.pyx"
if (unlikely(__pyx_t_6 >= __pyx_pybuffernd_slantRange.diminfo[0].shape)) __pyx_t_7 = 0;

#line 175 "pyDoppler.pyx"
      if (unlikely(__pyx_t_7 != -1)) {

#line 175 "pyDoppler.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_7);

#line 175 "pyDoppler.pyx"
        __PYX_ERR(3, 175, __pyx_L1_error)

#line 175 "pyDoppler.pyx"
      }

#line 175 "pyDoppler.pyx"
      __pyx_t_8 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_slantRange.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_slantRange.diminfo[0].strides))); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 175, __pyx_L1_error)

#line 175 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 175 "pyDoppler.pyx"
      __pyx_t_9 = PyFloat_FromDouble(__pyx_v_wvl); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 175, __pyx_L1_error)

#line 175 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 175 "pyDoppler.pyx"
      __pyx_t_10 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_frame); if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 175, __pyx_L1_error)

#line 175 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 175 "pyDoppler.pyx"
      __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_max_iter); if (unlikely(!__pyx_t_11)) __PYX_ERR(3, 175, __pyx_L1_error)

#line 175 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_11);

#line 175 "pyDoppler.pyx"
      __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_side); if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 175, __pyx_L1_error)

#line 175 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_12);

#line 175 "pyDoppler.pyx"
      __pyx_t_13 = __Pyx_PyBool_FromLong(__pyx_v_precession); if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 175, __pyx_L1_error)

#line 175 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_13);

#line 175 "pyDoppler.pyx"
      __pyx_t_14 = NULL;

#line 175 "pyDoppler.pyx"
      __pyx_t_7 = 0;

#line 175 "pyDoppler.pyx"
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {

#line 175 "pyDoppler.pyx"
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);

#line 175 "pyDoppler.pyx"
        if (likely(__pyx_t_14)) {

#line 175 "pyDoppler.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 175 "pyDoppler.pyx"
          __Pyx_INCREF(__pyx_t_14);

#line 175 "pyDoppler.pyx"
          __Pyx_INCREF(function);

#line 175 "pyDoppler.pyx"
          __Pyx_DECREF_SET(__pyx_t_5, function);

#line 175 "pyDoppler.pyx"
          __pyx_t_7 = 1;

#line 175 "pyDoppler.pyx"
        }

#line 175 "pyDoppler.pyx"
      }

#line 175 "pyDoppler.pyx"
      #if CYTHON_FAST_PYCALL

#line 175 "pyDoppler.pyx"
      if (PyFunction_Check(__pyx_t_5)) {

#line 175 "pyDoppler.pyx"
        PyObject *__pyx_temp[7] = {__pyx_t_14, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13};

#line 175 "pyDoppler.pyx"
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 6+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 175, __pyx_L1_error)

#line 175 "pyDoppler.pyx"
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 175 "pyDoppler.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 175 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 175 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 175 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 175 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 175 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 175 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 175 "pyDoppler.pyx"
      } else

#line 175 "pyDoppler.pyx"
      #endif

#line 175 "pyDoppler.pyx"
      #if CYTHON_FAST_PYCCALL

#line 175 "pyDoppler.pyx"
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {

#line 175 "pyDoppler.pyx"
        PyObject *__pyx_temp[7] = {__pyx_t_14, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13};

#line 175 "pyDoppler.pyx"
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 6+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 175, __pyx_L1_error)

#line 175 "pyDoppler.pyx"
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 175 "pyDoppler.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 175 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 175 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 175 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 175 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 175 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 175 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 175 "pyDoppler.pyx"
      } else

#line 175 "pyDoppler.pyx"
      #endif

#line 175 "pyDoppler.pyx"
      {

#line 175 "pyDoppler.pyx"
        __pyx_t_15 = PyTuple_New(6+__pyx_t_7); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 175, __pyx_L1_error)

#line 175 "pyDoppler.pyx"
        __Pyx_GOTREF(__pyx_t_15);

#line 175 "pyDoppler.pyx"
        if (__pyx_t_14) {

#line 175 "pyDoppler.pyx"
          __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_14); __pyx_t_14 = NULL;

#line 175 "pyDoppler.pyx"
        }

#line 175 "pyDoppler.pyx"
        __Pyx_GIVEREF(__pyx_t_8);

#line 175 "pyDoppler.pyx"
        PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_7, __pyx_t_8);

#line 175 "pyDoppler.pyx"
        __Pyx_GIVEREF(__pyx_t_9);

#line 175 "pyDoppler.pyx"
        PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_7, __pyx_t_9);

#line 175 "pyDoppler.pyx"
        __Pyx_GIVEREF(__pyx_t_10);

#line 175 "pyDoppler.pyx"
        PyTuple_SET_ITEM(__pyx_t_15, 2+__pyx_t_7, __pyx_t_10);

#line 175 "pyDoppler.pyx"
        __Pyx_GIVEREF(__pyx_t_11);

#line 175 "pyDoppler.pyx"
        PyTuple_SET_ITEM(__pyx_t_15, 3+__pyx_t_7, __pyx_t_11);

#line 175 "pyDoppler.pyx"
        __Pyx_GIVEREF(__pyx_t_12);

#line 175 "pyDoppler.pyx"
        PyTuple_SET_ITEM(__pyx_t_15, 4+__pyx_t_7, __pyx_t_12);

#line 175 "pyDoppler.pyx"
        __Pyx_GIVEREF(__pyx_t_13);

#line 175 "pyDoppler.pyx"
        PyTuple_SET_ITEM(__pyx_t_15, 5+__pyx_t_7, __pyx_t_13);

#line 175 "pyDoppler.pyx"
        __pyx_t_8 = 0;

#line 175 "pyDoppler.pyx"
        __pyx_t_9 = 0;

#line 175 "pyDoppler.pyx"
        __pyx_t_10 = 0;

#line 175 "pyDoppler.pyx"
        __pyx_t_11 = 0;

#line 175 "pyDoppler.pyx"
        __pyx_t_12 = 0;

#line 175 "pyDoppler.pyx"
        __pyx_t_13 = 0;

#line 175 "pyDoppler.pyx"
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_15, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 175, __pyx_L1_error)

#line 175 "pyDoppler.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 175 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 175 "pyDoppler.pyx"
      }

#line 175 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 175 "pyDoppler.pyx"
      __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 175, __pyx_L1_error)

#line 175 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 175 "pyDoppler.pyx"
      __pyx_v_fd_pos = __pyx_t_16;

      /* "pyDoppler.pyx":177
 *                 fd_pos = self.centroid(slantRange[j], wvl, frame, max_iter, side, precession)
 *                 # Negative
 *                 self.quaternion.c_quaternion.qvec[k] = qref[k] - dx             # <<<<<<<<<<<<<<
 *                 fd_neg = self.centroid(slantRange[j], wvl, frame, max_iter, side, precession)
 *                 # Derivative
 */

#line 177 "pyDoppler.pyx"
      (__pyx_v_self->quaternion->c_quaternion->qvec[__pyx_v_k]) = ((__pyx_v_qref[__pyx_v_k]) - __pyx_v_dx);

      /* "pyDoppler.pyx":178
 *                 # Negative
 *                 self.quaternion.c_quaternion.qvec[k] = qref[k] - dx
 *                 fd_neg = self.centroid(slantRange[j], wvl, frame, max_iter, side, precession)             # <<<<<<<<<<<<<<
 *                 # Derivative
 *                 outDerivs[j,k] = (fd_pos - fd_neg) / (2.0 * dx)
 */

#line 178 "pyDoppler.pyx"
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_centroid); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 178, __pyx_L1_error)

#line 178 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 178 "pyDoppler.pyx"
      __pyx_t_17 = __pyx_v_j;

#line 178 "pyDoppler.pyx"
      __pyx_t_7 = -1;

#line 178 "pyDoppler.pyx"
      if (__pyx_t_17 < 0) {

#line 178 "pyDoppler.pyx"
        __pyx_t_17 += __pyx_pybuffernd_slantRange.diminfo[0].shape;

#line 178 "pyDoppler.pyx"
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_7 = 0;
      } else 
#line 178 "pyDoppler.pyx"
if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_slantRange.diminfo[0].shape)) __pyx_t_7 = 0;

#line 178 "pyDoppler.pyx"
      if (unlikely(__pyx_t_7 != -1)) {

#line 178 "pyDoppler.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_7);

#line 178 "pyDoppler.pyx"
        __PYX_ERR(3, 178, __pyx_L1_error)

#line 178 "pyDoppler.pyx"
      }

#line 178 "pyDoppler.pyx"
      __pyx_t_15 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_slantRange.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_slantRange.diminfo[0].strides))); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 178, __pyx_L1_error)

#line 178 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_15);

#line 178 "pyDoppler.pyx"
      __pyx_t_13 = PyFloat_FromDouble(__pyx_v_wvl); if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 178, __pyx_L1_error)

#line 178 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_13);

#line 178 "pyDoppler.pyx"
      __pyx_t_12 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_frame); if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 178, __pyx_L1_error)

#line 178 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_12);

#line 178 "pyDoppler.pyx"
      __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_max_iter); if (unlikely(!__pyx_t_11)) __PYX_ERR(3, 178, __pyx_L1_error)

#line 178 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_11);

#line 178 "pyDoppler.pyx"
      __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_side); if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 178, __pyx_L1_error)

#line 178 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 178 "pyDoppler.pyx"
      __pyx_t_9 = __Pyx_PyBool_FromLong(__pyx_v_precession); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 178, __pyx_L1_error)

#line 178 "pyDoppler.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 178 "pyDoppler.pyx"
      __pyx_t_8 = NULL;

#line 178 "pyDoppler.pyx"
      __pyx_t_7 = 0;

#line 178 "pyDoppler.pyx"
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {

#line 178 "pyDoppler.pyx"
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);

#line 178 "pyDoppler.pyx"
        if (likely(__pyx_t_8)) {

#line 178 "pyDoppler.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 178 "pyDoppler.pyx"
          __Pyx_INCREF(__pyx_t_8);

#line 178 "pyDoppler.pyx"
          __Pyx_INCREF(function);

#line 178 "pyDoppler.pyx"
          __Pyx_DECREF_SET(__pyx_t_5, function);

#line 178 "pyDoppler.pyx"
          __pyx_t_7 = 1;

#line 178 "pyDoppler.pyx"
        }

#line 178 "pyDoppler.pyx"
      }

#line 178 "pyDoppler.pyx"
      #if CYTHON_FAST_PYCALL

#line 178 "pyDoppler.pyx"
      if (PyFunction_Check(__pyx_t_5)) {

#line 178 "pyDoppler.pyx"
        PyObject *__pyx_temp[7] = {__pyx_t_8, __pyx_t_15, __pyx_t_13, __pyx_t_12, __pyx_t_11, __pyx_t_10, __pyx_t_9};

#line 178 "pyDoppler.pyx"
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 6+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 178, __pyx_L1_error)

#line 178 "pyDoppler.pyx"
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 178 "pyDoppler.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 178 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 178 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 178 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 178 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 178 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 178 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 178 "pyDoppler.pyx"
      } else

#line 178 "pyDoppler.pyx"
      #endif

#line 178 "pyDoppler.pyx"
      #if CYTHON_FAST_PYCCALL

#line 178 "pyDoppler.pyx"
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {

#line 178 "pyDoppler.pyx"
        PyObject *__pyx_temp[7] = {__pyx_t_8, __pyx_t_15, __pyx_t_13, __pyx_t_12, __pyx_t_11, __pyx_t_10, __pyx_t_9};

#line 178 "pyDoppler.pyx"
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 6+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 178, __pyx_L1_error)

#line 178 "pyDoppler.pyx"
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 178 "pyDoppler.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 178 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 178 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 178 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 178 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 178 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 178 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 178 "pyDoppler.pyx"
      } else

#line 178 "pyDoppler.pyx"
      #endif

#line 178 "pyDoppler.pyx"
      {

#line 178 "pyDoppler.pyx"
        __pyx_t_14 = PyTuple_New(6+__pyx_t_7); if (unlikely(!__pyx_t_14)) __PYX_ERR(3, 178, __pyx_L1_error)

#line 178 "pyDoppler.pyx"
        __Pyx_GOTREF(__pyx_t_14);

#line 178 "pyDoppler.pyx"
        if (__pyx_t_8) {

#line 178 "pyDoppler.pyx"
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_8); __pyx_t_8 = NULL;

#line 178 "pyDoppler.pyx"
        }

#line 178 "pyDoppler.pyx"
        __Pyx_GIVEREF(__pyx_t_15);

#line 178 "pyDoppler.pyx"
        PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_7, __pyx_t_15);

#line 178 "pyDoppler.pyx"
        __Pyx_GIVEREF(__pyx_t_13);

#line 178 "pyDoppler.pyx"
        PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_7, __pyx_t_13);

#line 178 "pyDoppler.pyx"
        __Pyx_GIVEREF(__pyx_t_12);

#line 178 "pyDoppler.pyx"
        PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_7, __pyx_t_12);

#line 178 "pyDoppler.pyx"
        __Pyx_GIVEREF(__pyx_t_11);

#line 178 "pyDoppler.pyx"
        PyTuple_SET_ITEM(__pyx_t_14, 3+__pyx_t_7, __pyx_t_11);

#line 178 "pyDoppler.pyx"
        __Pyx_GIVEREF(__pyx_t_10);

#line 178 "pyDoppler.pyx"
        PyTuple_SET_ITEM(__pyx_t_14, 4+__pyx_t_7, __pyx_t_10);

#line 178 "pyDoppler.pyx"
        __Pyx_GIVEREF(__pyx_t_9);

#line 178 "pyDoppler.pyx"
        PyTuple_SET_ITEM(__pyx_t_14, 5+__pyx_t_7, __pyx_t_9);

#line 178 "pyDoppler.pyx"
        __pyx_t_15 = 0;

#line 178 "pyDoppler.pyx"
        __pyx_t_13 = 0;

#line 178 "pyDoppler.pyx"
        __pyx_t_12 = 0;

#line 178 "pyDoppler.pyx"
        __pyx_t_11 = 0;

#line 178 "pyDoppler.pyx"
        __pyx_t_10 = 0;

#line 178 "pyDoppler.pyx"
        __pyx_t_9 = 0;

#line 178 "pyDoppler.pyx"
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_14, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 178, __pyx_L1_error)

#line 178 "pyDoppler.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 178 "pyDoppler.pyx"
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 178 "pyDoppler.pyx"
      }

#line 178 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 178 "pyDoppler.pyx"
      __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 178, __pyx_L1_error)

#line 178 "pyDoppler.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 178 "pyDoppler.pyx"
      __pyx_v_fd_neg = __pyx_t_16;

      /* "pyDoppler.pyx":180
 *                 fd_neg = self.centroid(slantRange[j], wvl, frame, max_iter, side, precession)
 *                 # Derivative
 *                 outDerivs[j,k] = (fd_pos - fd_neg) / (2.0 * dx)             # <<<<<<<<<<<<<<
 *                 # Reset
 *                 self.quaternion.c_quaternion.qvec[k] = qref[k]
 */

#line 180 "pyDoppler.pyx"
      __pyx_t_16 = (__pyx_v_fd_pos - __pyx_v_fd_neg);

#line 180 "pyDoppler.pyx"
      __pyx_t_18 = (2.0 * __pyx_v_dx);

#line 180 "pyDoppler.pyx"
      if (unlikely(__pyx_t_18 == 0)) {

#line 180 "pyDoppler.pyx"
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");

#line 180 "pyDoppler.pyx"
        __PYX_ERR(3, 180, __pyx_L1_error)

#line 180 "pyDoppler.pyx"
      }

#line 180 "pyDoppler.pyx"
      __pyx_t_19 = __pyx_v_j;

#line 180 "pyDoppler.pyx"
      __pyx_t_20 = __pyx_v_k;

#line 180 "pyDoppler.pyx"
      __pyx_t_7 = -1;

#line 180 "pyDoppler.pyx"
      if (__pyx_t_19 < 0) {

#line 180 "pyDoppler.pyx"
        __pyx_t_19 += __pyx_pybuffernd_outDerivs.diminfo[0].shape;

#line 180 "pyDoppler.pyx"
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_7 = 0;
      } else 
#line 180 "pyDoppler.pyx"
if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_outDerivs.diminfo[0].shape)) __pyx_t_7 = 0;

#line 180 "pyDoppler.pyx"
      if (__pyx_t_20 < 0) {

#line 180 "pyDoppler.pyx"
        __pyx_t_20 += __pyx_pybuffernd_outDerivs.diminfo[1].shape;

#line 180 "pyDoppler.pyx"
        if (unlikely(__pyx_t_20 < 0)) __pyx_t_7 = 1;
      } else 
#line 180 "pyDoppler.pyx"
if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_outDerivs.diminfo[1].shape)) __pyx_t_7 = 1;

#line 180 "pyDoppler.pyx"
      if (unlikely(__pyx_t_7 != -1)) {

#line 180 "pyDoppler.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_7);

#line 180 "pyDoppler.pyx"
        __PYX_ERR(3, 180, __pyx_L1_error)

#line 180 "pyDoppler.pyx"
      }

#line 180 "pyDoppler.pyx"
      *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_outDerivs.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_outDerivs.diminfo[0].strides, __pyx_t_20, __pyx_pybuffernd_outDerivs.diminfo[1].strides) = (__pyx_t_16 / __pyx_t_18);

      /* "pyDoppler.pyx":182
 *                 outDerivs[j,k] = (fd_pos - fd_neg) / (2.0 * dx)
 *                 # Reset
 *                 self.quaternion.c_quaternion.qvec[k] = qref[k]             # <<<<<<<<<<<<<<
 * 
 *         return
 */

#line 182 "pyDoppler.pyx"
      (__pyx_v_self->quaternion->c_quaternion->qvec[__pyx_v_k]) = (__pyx_v_qref[__pyx_v_k]);

#line 182 "pyDoppler.pyx"
    }

#line 182 "pyDoppler.pyx"
  }

  /* "pyDoppler.pyx":184
 *                 self.quaternion.c_quaternion.qvec[k] = qref[k]
 * 
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 184 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 184 "pyDoppler.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 184 "pyDoppler.pyx"
  goto __pyx_L0;

  /* "pyDoppler.pyx":154
 *         self.__owner = True
 * 
 *     def derivs(self, np.ndarray[np.float64_t, ndim=1] slantRange, double wvl,             # <<<<<<<<<<<<<<
 *         string frame, int max_iter, int side, bool precession,
 *         np.ndarray[np.float64_t, ndim=2] outDerivs):
 */

#line 154 "pyDoppler.pyx"


#line 154 "pyDoppler.pyx"
  /* function exit code */

#line 154 "pyDoppler.pyx"
  __pyx_L1_error:;

#line 154 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 154 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 154 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 154 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 154 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 154 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_11);

#line 154 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_12);

#line 154 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_13);

#line 154 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_14);

#line 154 "pyDoppler.pyx"
  __Pyx_XDECREF(__pyx_t_15);

#line 154 "pyDoppler.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 154 "pyDoppler.pyx"
    __Pyx_PyThreadState_declare

#line 154 "pyDoppler.pyx"
    __Pyx_PyThreadState_assign

#line 154 "pyDoppler.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 154 "pyDoppler.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outDerivs.rcbuffer->pybuffer);

#line 154 "pyDoppler.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_slantRange.rcbuffer->pybuffer);

#line 154 "pyDoppler.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 154 "pyDoppler.pyx"
  __Pyx_AddTraceback("iscecore.pyDopplerQuaternion.derivs", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 154 "pyDoppler.pyx"
  __pyx_r = NULL;

#line 154 "pyDoppler.pyx"
  goto __pyx_L2;

#line 154 "pyDoppler.pyx"
  __pyx_L0:;

#line 154 "pyDoppler.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_outDerivs.rcbuffer->pybuffer);

#line 154 "pyDoppler.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_slantRange.rcbuffer->pybuffer);

#line 154 "pyDoppler.pyx"
  __pyx_L2:;

#line 154 "pyDoppler.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 154 "pyDoppler.pyx"
  __Pyx_RefNannyFinishContext();

#line 154 "pyDoppler.pyx"
  return __pyx_r;

#line 154 "pyDoppler.pyx"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_19pyDopplerQuaternion_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_19pyDopplerQuaternion_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_8iscecore_19pyDopplerQuaternion_4__reduce_cython__(((struct __pyx_obj_8iscecore_pyDopplerQuaternion *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_19pyDopplerQuaternion_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyDopplerQuaternion *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyDopplerQuaternion.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_19pyDopplerQuaternion_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_19pyDopplerQuaternion_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf_8iscecore_19pyDopplerQuaternion_6__setstate_cython__(((struct __pyx_obj_8iscecore_pyDopplerQuaternion *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_19pyDopplerQuaternion_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyDopplerQuaternion *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyDopplerQuaternion.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "pyEllipsoid.pyx":15
 *     cdef bool __owner
 * 
 *     def __cinit__(self, a=0., e2=0.):             # <<<<<<<<<<<<<<
 *         self.c_ellipsoid = new Ellipsoid(a, e2)
 *         self.__owner = True
 */

#line 15 "pyEllipsoid.pyx"


#line 15 "pyEllipsoid.pyx"
/* Python wrapper */

#line 15 "pyEllipsoid.pyx"
static int __pyx_pw_8iscecore_11pyEllipsoid_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 15 "pyEllipsoid.pyx"
static int __pyx_pw_8iscecore_11pyEllipsoid_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0
#line 15 "pyEllipsoid.pyx"
;
  PyObject *__pyx_v_e2 = 0
#line 15 "pyEllipsoid.pyx"
;

#line 15 "pyEllipsoid.pyx"
  int __pyx_r;

#line 15 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 15 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 15 "pyEllipsoid.pyx"
  {

#line 15 "pyEllipsoid.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_e2,0};

#line 15 "pyEllipsoid.pyx"
    PyObject* values[2] = {0,0};

#line 15 "pyEllipsoid.pyx"
    values[0] = ((PyObject *)__pyx_float_0_);

#line 15 "pyEllipsoid.pyx"
    values[1] = ((PyObject *)__pyx_float_0_);

#line 15 "pyEllipsoid.pyx"
    if (unlikely(__pyx_kwds)) {

#line 15 "pyEllipsoid.pyx"
      Py_ssize_t kw_args;

#line 15 "pyEllipsoid.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 15 "pyEllipsoid.pyx"
      switch (pos_args) {
        case  2: 
#line 15 "pyEllipsoid.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 15 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 15 "pyEllipsoid.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 15 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 15 "pyEllipsoid.pyx"
        case  0: break;
        default: 
#line 15 "pyEllipsoid.pyx"
goto __pyx_L5_argtuple_error;

#line 15 "pyEllipsoid.pyx"
      }

#line 15 "pyEllipsoid.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 15 "pyEllipsoid.pyx"
      switch (pos_args) {

#line 15 "pyEllipsoid.pyx"
        case  0:

#line 15 "pyEllipsoid.pyx"
        if (kw_args > 0) {

#line 15 "pyEllipsoid.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a);

#line 15 "pyEllipsoid.pyx"
          if (value) { values[0] = value; kw_args--; }

#line 15 "pyEllipsoid.pyx"
        }

#line 15 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 15 "pyEllipsoid.pyx"
        case  1:

#line 15 "pyEllipsoid.pyx"
        if (kw_args > 0) {

#line 15 "pyEllipsoid.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_e2);

#line 15 "pyEllipsoid.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 15 "pyEllipsoid.pyx"
        }

#line 15 "pyEllipsoid.pyx"
      }

#line 15 "pyEllipsoid.pyx"
      if (unlikely(kw_args > 0)) {

#line 15 "pyEllipsoid.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 15, __pyx_L3_error)

#line 15 "pyEllipsoid.pyx"
      }

#line 15 "pyEllipsoid.pyx"
    } else {

#line 15 "pyEllipsoid.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: 
#line 15 "pyEllipsoid.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 15 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 15 "pyEllipsoid.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 15 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;
        case  0: 
#line 15 "pyEllipsoid.pyx"
break;
        default: 
#line 15 "pyEllipsoid.pyx"
goto __pyx_L5_argtuple_error;

#line 15 "pyEllipsoid.pyx"
      }

#line 15 "pyEllipsoid.pyx"
    }

#line 15 "pyEllipsoid.pyx"
    __pyx_v_a = values[0];

#line 15 "pyEllipsoid.pyx"
    __pyx_v_e2 = values[1];

#line 15 "pyEllipsoid.pyx"
  }

#line 15 "pyEllipsoid.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 15 "pyEllipsoid.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 15 "pyEllipsoid.pyx"
__PYX_ERR(0, 15, __pyx_L3_error)

#line 15 "pyEllipsoid.pyx"
  __pyx_L3_error:;

#line 15 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 15 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 15 "pyEllipsoid.pyx"
  return -1;

#line 15 "pyEllipsoid.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 15 "pyEllipsoid.pyx"
__pyx_pf_8iscecore_11pyEllipsoid___cinit__(((struct __pyx_obj_8iscecore_pyEllipsoid *)__pyx_v_self), __pyx_v_a, __pyx_v_e2);

#line 15 "pyEllipsoid.pyx"


#line 15 "pyEllipsoid.pyx"
  /* function exit code */

#line 15 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 15 "pyEllipsoid.pyx"
  return __pyx_r;

#line 15 "pyEllipsoid.pyx"
}

#line 15 "pyEllipsoid.pyx"


#line 15 "pyEllipsoid.pyx"
static int __pyx_pf_8iscecore_11pyEllipsoid___cinit__(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_e2) {

#line 15 "pyEllipsoid.pyx"
  int __pyx_r;

#line 15 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 15 "pyEllipsoid.pyx"
  double __pyx_t_1;

#line 15 "pyEllipsoid.pyx"
  double __pyx_t_2;

#line 15 "pyEllipsoid.pyx"
  isce::core::Ellipsoid *__pyx_t_3;

#line 15 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyEllipsoid.pyx":16
 * 
 *     def __cinit__(self, a=0., e2=0.):
 *         self.c_ellipsoid = new Ellipsoid(a, e2)             # <<<<<<<<<<<<<<
 *         self.__owner = True
 *     def __dealloc__(self):
 */

#line 16 "pyEllipsoid.pyx"
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_a); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 16, __pyx_L1_error)

#line 16 "pyEllipsoid.pyx"
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_e2); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 16, __pyx_L1_error)

#line 16 "pyEllipsoid.pyx"
  try {

#line 16 "pyEllipsoid.pyx"
    __pyx_t_3 = new isce::core::Ellipsoid(__pyx_t_1, __pyx_t_2);

#line 16 "pyEllipsoid.pyx"
  } catch(...) {

#line 16 "pyEllipsoid.pyx"
    __Pyx_CppExn2PyErr();

#line 16 "pyEllipsoid.pyx"
    __PYX_ERR(0, 16, __pyx_L1_error)

#line 16 "pyEllipsoid.pyx"
  }

#line 16 "pyEllipsoid.pyx"
  __pyx_v_self->c_ellipsoid = __pyx_t_3;

  /* "pyEllipsoid.pyx":17
 *     def __cinit__(self, a=0., e2=0.):
 *         self.c_ellipsoid = new Ellipsoid(a, e2)
 *         self.__owner = True             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.__owner:
 */

#line 17 "pyEllipsoid.pyx"
  __pyx_v_self->__pyx___owner = 1;

  /* "pyEllipsoid.pyx":15
 *     cdef bool __owner
 * 
 *     def __cinit__(self, a=0., e2=0.):             # <<<<<<<<<<<<<<
 *         self.c_ellipsoid = new Ellipsoid(a, e2)
 *         self.__owner = True
 */

#line 15 "pyEllipsoid.pyx"


#line 15 "pyEllipsoid.pyx"
  /* function exit code */

#line 15 "pyEllipsoid.pyx"
  __pyx_r = 0;

#line 15 "pyEllipsoid.pyx"
  goto __pyx_L0;

#line 15 "pyEllipsoid.pyx"
  __pyx_L1_error:;

#line 15 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 15 "pyEllipsoid.pyx"
  __pyx_r = -1;

#line 15 "pyEllipsoid.pyx"
  __pyx_L0:;

#line 15 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 15 "pyEllipsoid.pyx"
  return __pyx_r;

#line 15 "pyEllipsoid.pyx"
}

/* "pyEllipsoid.pyx":18
 *         self.c_ellipsoid = new Ellipsoid(a, e2)
 *         self.__owner = True
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_ellipsoid
 */

#line 18 "pyEllipsoid.pyx"


#line 18 "pyEllipsoid.pyx"
/* Python wrapper */

#line 18 "pyEllipsoid.pyx"
static void __pyx_pw_8iscecore_11pyEllipsoid_3__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 18 "pyEllipsoid.pyx"
static void __pyx_pw_8iscecore_11pyEllipsoid_3__dealloc__(PyObject *__pyx_v_self) {

#line 18 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 18 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 18 "pyEllipsoid.pyx"
  __pyx_pf_8iscecore_11pyEllipsoid_2__dealloc__(((struct __pyx_obj_8iscecore_pyEllipsoid *)__pyx_v_self));

#line 18 "pyEllipsoid.pyx"


#line 18 "pyEllipsoid.pyx"
  /* function exit code */

#line 18 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 18 "pyEllipsoid.pyx"
}

#line 18 "pyEllipsoid.pyx"


#line 18 "pyEllipsoid.pyx"
static void __pyx_pf_8iscecore_11pyEllipsoid_2__dealloc__(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self) {

#line 18 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 18 "pyEllipsoid.pyx"
  int __pyx_t_1;

#line 18 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyEllipsoid.pyx":19
 *         self.__owner = True
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_ellipsoid
 *     @staticmethod
 */

#line 19 "pyEllipsoid.pyx"
  __pyx_t_1 = (__pyx_v_self->__pyx___owner != 0);

#line 19 "pyEllipsoid.pyx"
  if (__pyx_t_1) {

    /* "pyEllipsoid.pyx":20
 *     def __dealloc__(self):
 *         if self.__owner:
 *             del self.c_ellipsoid             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     def bind(pyEllipsoid elp):
 */

#line 20 "pyEllipsoid.pyx"
    delete __pyx_v_self->c_ellipsoid;

    /* "pyEllipsoid.pyx":19
 *         self.__owner = True
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_ellipsoid
 *     @staticmethod
 */

#line 19 "pyEllipsoid.pyx"
  }

  /* "pyEllipsoid.pyx":18
 *         self.c_ellipsoid = new Ellipsoid(a, e2)
 *         self.__owner = True
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_ellipsoid
 */

#line 18 "pyEllipsoid.pyx"


#line 18 "pyEllipsoid.pyx"
  /* function exit code */

#line 18 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 18 "pyEllipsoid.pyx"
}

/* "pyEllipsoid.pyx":22
 *             del self.c_ellipsoid
 *     @staticmethod
 *     def bind(pyEllipsoid elp):             # <<<<<<<<<<<<<<
 *         new_elp = pyEllipsoid()
 *         del new_elp.c_ellipsoid
 */

#line 22 "pyEllipsoid.pyx"


#line 22 "pyEllipsoid.pyx"
/* Python wrapper */

#line 22 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_5bind(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8iscecore_11pyEllipsoid_5bind = 
#line 22 "pyEllipsoid.pyx"
{"bind", (PyCFunction)__pyx_pw_8iscecore_11pyEllipsoid_5bind, METH_VARARGS|METH_KEYWORDS, 0};

#line 22 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_5bind(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_elp = 0
#line 22 "pyEllipsoid.pyx"
;

#line 22 "pyEllipsoid.pyx"
  PyObject *__pyx_r = 0;

#line 22 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 22 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("bind (wrapper)", 0);

#line 22 "pyEllipsoid.pyx"
  {

#line 22 "pyEllipsoid.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_elp,0};

#line 22 "pyEllipsoid.pyx"
    PyObject* values[1] = {0};

#line 22 "pyEllipsoid.pyx"
    if (unlikely(__pyx_kwds)) {

#line 22 "pyEllipsoid.pyx"
      Py_ssize_t kw_args;

#line 22 "pyEllipsoid.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 22 "pyEllipsoid.pyx"
      switch (pos_args) {
        case  1: 
#line 22 "pyEllipsoid.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 22 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 22 "pyEllipsoid.pyx"
        case  0: break;
        default: 
#line 22 "pyEllipsoid.pyx"
goto __pyx_L5_argtuple_error;

#line 22 "pyEllipsoid.pyx"
      }

#line 22 "pyEllipsoid.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 22 "pyEllipsoid.pyx"
      switch (pos_args) {

#line 22 "pyEllipsoid.pyx"
        case  0:

#line 22 "pyEllipsoid.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_elp)) != 0)) kw_args--;
        else 
#line 22 "pyEllipsoid.pyx"
goto __pyx_L5_argtuple_error;

#line 22 "pyEllipsoid.pyx"
      }

#line 22 "pyEllipsoid.pyx"
      if (unlikely(kw_args > 0)) {

#line 22 "pyEllipsoid.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "bind") < 0)) __PYX_ERR(0, 22, __pyx_L3_error)

#line 22 "pyEllipsoid.pyx"
      }

#line 22 "pyEllipsoid.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {

#line 22 "pyEllipsoid.pyx"
      goto __pyx_L5_argtuple_error;

#line 22 "pyEllipsoid.pyx"
    } else {

#line 22 "pyEllipsoid.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 22 "pyEllipsoid.pyx"
    }

#line 22 "pyEllipsoid.pyx"
    __pyx_v_elp = ((struct __pyx_obj_8iscecore_pyEllipsoid *)values[0]);

#line 22 "pyEllipsoid.pyx"
  }

#line 22 "pyEllipsoid.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 22 "pyEllipsoid.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bind", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 22 "pyEllipsoid.pyx"
__PYX_ERR(0, 22, __pyx_L3_error)

#line 22 "pyEllipsoid.pyx"
  __pyx_L3_error:;

#line 22 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.bind", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 22 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 22 "pyEllipsoid.pyx"
  return NULL;

#line 22 "pyEllipsoid.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 22 "pyEllipsoid.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elp), __pyx_ptype_8iscecore_pyEllipsoid, 1, "elp", 0))) __PYX_ERR(0, 22, __pyx_L1_error)
  __pyx_r = 
#line 22 "pyEllipsoid.pyx"
__pyx_pf_8iscecore_11pyEllipsoid_4bind(__pyx_v_elp);

#line 22 "pyEllipsoid.pyx"


#line 22 "pyEllipsoid.pyx"
  /* function exit code */

#line 22 "pyEllipsoid.pyx"
  goto __pyx_L0;

#line 22 "pyEllipsoid.pyx"
  __pyx_L1_error:;

#line 22 "pyEllipsoid.pyx"
  __pyx_r = NULL;

#line 22 "pyEllipsoid.pyx"
  __pyx_L0:;

#line 22 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 22 "pyEllipsoid.pyx"
  return __pyx_r;

#line 22 "pyEllipsoid.pyx"
}

#line 22 "pyEllipsoid.pyx"


#line 22 "pyEllipsoid.pyx"
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_4bind(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_elp) {
  struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_new_elp = NULL
#line 22 "pyEllipsoid.pyx"
;

#line 22 "pyEllipsoid.pyx"
  PyObject *__pyx_r = NULL;

#line 22 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 22 "pyEllipsoid.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 22 "pyEllipsoid.pyx"
  isce::core::Ellipsoid *__pyx_t_2;

#line 22 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("bind", 0);

  /* "pyEllipsoid.pyx":23
 *     @staticmethod
 *     def bind(pyEllipsoid elp):
 *         new_elp = pyEllipsoid()             # <<<<<<<<<<<<<<
 *         del new_elp.c_ellipsoid
 *         new_elp.c_ellipsoid = elp.c_ellipsoid
 */

#line 23 "pyEllipsoid.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8iscecore_pyEllipsoid), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)

#line 23 "pyEllipsoid.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 23 "pyEllipsoid.pyx"
  __pyx_v_new_elp = ((struct __pyx_obj_8iscecore_pyEllipsoid *)__pyx_t_1);

#line 23 "pyEllipsoid.pyx"
  __pyx_t_1 = 0;

  /* "pyEllipsoid.pyx":24
 *     def bind(pyEllipsoid elp):
 *         new_elp = pyEllipsoid()
 *         del new_elp.c_ellipsoid             # <<<<<<<<<<<<<<
 *         new_elp.c_ellipsoid = elp.c_ellipsoid
 *         new_elp.__owner = False
 */

#line 24 "pyEllipsoid.pyx"
  delete __pyx_v_new_elp->c_ellipsoid;

  /* "pyEllipsoid.pyx":25
 *         new_elp = pyEllipsoid()
 *         del new_elp.c_ellipsoid
 *         new_elp.c_ellipsoid = elp.c_ellipsoid             # <<<<<<<<<<<<<<
 *         new_elp.__owner = False
 *         return new_elp
 */

#line 25 "pyEllipsoid.pyx"
  __pyx_t_2 = __pyx_v_elp->c_ellipsoid;

#line 25 "pyEllipsoid.pyx"
  __pyx_v_new_elp->c_ellipsoid = __pyx_t_2;

  /* "pyEllipsoid.pyx":26
 *         del new_elp.c_ellipsoid
 *         new_elp.c_ellipsoid = elp.c_ellipsoid
 *         new_elp.__owner = False             # <<<<<<<<<<<<<<
 *         return new_elp
 * 
 */

#line 26 "pyEllipsoid.pyx"
  __pyx_v_new_elp->__pyx___owner = 0;

  /* "pyEllipsoid.pyx":27
 *         new_elp.c_ellipsoid = elp.c_ellipsoid
 *         new_elp.__owner = False
 *         return new_elp             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 27 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 27 "pyEllipsoid.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_new_elp));

#line 27 "pyEllipsoid.pyx"
  __pyx_r = ((PyObject *)__pyx_v_new_elp);

#line 27 "pyEllipsoid.pyx"
  goto __pyx_L0;

  /* "pyEllipsoid.pyx":22
 *             del self.c_ellipsoid
 *     @staticmethod
 *     def bind(pyEllipsoid elp):             # <<<<<<<<<<<<<<
 *         new_elp = pyEllipsoid()
 *         del new_elp.c_ellipsoid
 */

#line 22 "pyEllipsoid.pyx"


#line 22 "pyEllipsoid.pyx"
  /* function exit code */

#line 22 "pyEllipsoid.pyx"
  __pyx_L1_error:;

#line 22 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 22 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.bind", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 22 "pyEllipsoid.pyx"
  __pyx_r = NULL;

#line 22 "pyEllipsoid.pyx"
  __pyx_L0:;

#line 22 "pyEllipsoid.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_new_elp);

#line 22 "pyEllipsoid.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 22 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 22 "pyEllipsoid.pyx"
  return __pyx_r;

#line 22 "pyEllipsoid.pyx"
}

/* "pyEllipsoid.pyx":30
 * 
 *     @property
 *     def a(self):             # <<<<<<<<<<<<<<
 *         return self.c_ellipsoid.a
 *     @a.setter
 */

#line 30 "pyEllipsoid.pyx"


#line 30 "pyEllipsoid.pyx"
/* Python wrapper */

#line 30 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_1a_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 30 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_1a_1__get__(PyObject *__pyx_v_self) {

#line 30 "pyEllipsoid.pyx"
  PyObject *__pyx_r = 0;

#line 30 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 30 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 30 "pyEllipsoid.pyx"
__pyx_pf_8iscecore_11pyEllipsoid_1a___get__(((struct __pyx_obj_8iscecore_pyEllipsoid *)__pyx_v_self));

#line 30 "pyEllipsoid.pyx"


#line 30 "pyEllipsoid.pyx"
  /* function exit code */

#line 30 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 30 "pyEllipsoid.pyx"
  return __pyx_r;

#line 30 "pyEllipsoid.pyx"
}

#line 30 "pyEllipsoid.pyx"


#line 30 "pyEllipsoid.pyx"
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_1a___get__(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self) {

#line 30 "pyEllipsoid.pyx"
  PyObject *__pyx_r = NULL;

#line 30 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 30 "pyEllipsoid.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 30 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyEllipsoid.pyx":31
 *     @property
 *     def a(self):
 *         return self.c_ellipsoid.a             # <<<<<<<<<<<<<<
 *     @a.setter
 *     def a(self, double a):
 */

#line 31 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 31 "pyEllipsoid.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_ellipsoid->a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)

#line 31 "pyEllipsoid.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 31 "pyEllipsoid.pyx"
  __pyx_r = __pyx_t_1;

#line 31 "pyEllipsoid.pyx"
  __pyx_t_1 = 0;

#line 31 "pyEllipsoid.pyx"
  goto __pyx_L0;

  /* "pyEllipsoid.pyx":30
 * 
 *     @property
 *     def a(self):             # <<<<<<<<<<<<<<
 *         return self.c_ellipsoid.a
 *     @a.setter
 */

#line 30 "pyEllipsoid.pyx"


#line 30 "pyEllipsoid.pyx"
  /* function exit code */

#line 30 "pyEllipsoid.pyx"
  __pyx_L1_error:;

#line 30 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 30 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.a.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 30 "pyEllipsoid.pyx"
  __pyx_r = NULL;

#line 30 "pyEllipsoid.pyx"
  __pyx_L0:;

#line 30 "pyEllipsoid.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 30 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 30 "pyEllipsoid.pyx"
  return __pyx_r;

#line 30 "pyEllipsoid.pyx"
}

/* "pyEllipsoid.pyx":33
 *         return self.c_ellipsoid.a
 *     @a.setter
 *     def a(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_ellipsoid.a = a
 *     @property
 */

#line 33 "pyEllipsoid.pyx"


#line 33 "pyEllipsoid.pyx"
/* Python wrapper */

#line 33 "pyEllipsoid.pyx"
static int __pyx_pw_8iscecore_11pyEllipsoid_1a_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 33 "pyEllipsoid.pyx"
static int __pyx_pw_8iscecore_11pyEllipsoid_1a_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a
#line 33 "pyEllipsoid.pyx"
;

#line 33 "pyEllipsoid.pyx"
  int __pyx_r;

#line 33 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 33 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);

#line 33 "pyEllipsoid.pyx"
  assert(__pyx_arg_a); {

#line 33 "pyEllipsoid.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 33, __pyx_L3_error)

#line 33 "pyEllipsoid.pyx"
  }

#line 33 "pyEllipsoid.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 33 "pyEllipsoid.pyx"
  __pyx_L3_error:;

#line 33 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.a.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 33 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 33 "pyEllipsoid.pyx"
  return -1;

#line 33 "pyEllipsoid.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 33 "pyEllipsoid.pyx"
__pyx_pf_8iscecore_11pyEllipsoid_1a_2__set__(((struct __pyx_obj_8iscecore_pyEllipsoid *)__pyx_v_self), ((double)__pyx_v_a));

#line 33 "pyEllipsoid.pyx"


#line 33 "pyEllipsoid.pyx"
  /* function exit code */

#line 33 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 33 "pyEllipsoid.pyx"
  return __pyx_r;

#line 33 "pyEllipsoid.pyx"
}

#line 33 "pyEllipsoid.pyx"


#line 33 "pyEllipsoid.pyx"
static int __pyx_pf_8iscecore_11pyEllipsoid_1a_2__set__(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, double __pyx_v_a) {

#line 33 "pyEllipsoid.pyx"
  int __pyx_r;

#line 33 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 33 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyEllipsoid.pyx":34
 *     @a.setter
 *     def a(self, double a):
 *         self.c_ellipsoid.a = a             # <<<<<<<<<<<<<<
 *     @property
 *     def e2(self):
 */

#line 34 "pyEllipsoid.pyx"
  __pyx_v_self->c_ellipsoid->a = __pyx_v_a;

  /* "pyEllipsoid.pyx":33
 *         return self.c_ellipsoid.a
 *     @a.setter
 *     def a(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_ellipsoid.a = a
 *     @property
 */

#line 33 "pyEllipsoid.pyx"


#line 33 "pyEllipsoid.pyx"
  /* function exit code */

#line 33 "pyEllipsoid.pyx"
  __pyx_r = 0;

#line 33 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 33 "pyEllipsoid.pyx"
  return __pyx_r;

#line 33 "pyEllipsoid.pyx"
}

/* "pyEllipsoid.pyx":36
 *         self.c_ellipsoid.a = a
 *     @property
 *     def e2(self):             # <<<<<<<<<<<<<<
 *         return self.c_ellipsoid.e2
 *     @e2.setter
 */

#line 36 "pyEllipsoid.pyx"


#line 36 "pyEllipsoid.pyx"
/* Python wrapper */

#line 36 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_2e2_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 36 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_2e2_1__get__(PyObject *__pyx_v_self) {

#line 36 "pyEllipsoid.pyx"
  PyObject *__pyx_r = 0;

#line 36 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 36 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 36 "pyEllipsoid.pyx"
__pyx_pf_8iscecore_11pyEllipsoid_2e2___get__(((struct __pyx_obj_8iscecore_pyEllipsoid *)__pyx_v_self));

#line 36 "pyEllipsoid.pyx"


#line 36 "pyEllipsoid.pyx"
  /* function exit code */

#line 36 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 36 "pyEllipsoid.pyx"
  return __pyx_r;

#line 36 "pyEllipsoid.pyx"
}

#line 36 "pyEllipsoid.pyx"


#line 36 "pyEllipsoid.pyx"
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_2e2___get__(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self) {

#line 36 "pyEllipsoid.pyx"
  PyObject *__pyx_r = NULL;

#line 36 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 36 "pyEllipsoid.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 36 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyEllipsoid.pyx":37
 *     @property
 *     def e2(self):
 *         return self.c_ellipsoid.e2             # <<<<<<<<<<<<<<
 *     @e2.setter
 *     def e2(self, double a):
 */

#line 37 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 37 "pyEllipsoid.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_ellipsoid->e2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)

#line 37 "pyEllipsoid.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 37 "pyEllipsoid.pyx"
  __pyx_r = __pyx_t_1;

#line 37 "pyEllipsoid.pyx"
  __pyx_t_1 = 0;

#line 37 "pyEllipsoid.pyx"
  goto __pyx_L0;

  /* "pyEllipsoid.pyx":36
 *         self.c_ellipsoid.a = a
 *     @property
 *     def e2(self):             # <<<<<<<<<<<<<<
 *         return self.c_ellipsoid.e2
 *     @e2.setter
 */

#line 36 "pyEllipsoid.pyx"


#line 36 "pyEllipsoid.pyx"
  /* function exit code */

#line 36 "pyEllipsoid.pyx"
  __pyx_L1_error:;

#line 36 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 36 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.e2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 36 "pyEllipsoid.pyx"
  __pyx_r = NULL;

#line 36 "pyEllipsoid.pyx"
  __pyx_L0:;

#line 36 "pyEllipsoid.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 36 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 36 "pyEllipsoid.pyx"
  return __pyx_r;

#line 36 "pyEllipsoid.pyx"
}

/* "pyEllipsoid.pyx":39
 *         return self.c_ellipsoid.e2
 *     @e2.setter
 *     def e2(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_ellipsoid.e2 = a
 *     def copyFrom(self, elp):
 */

#line 39 "pyEllipsoid.pyx"


#line 39 "pyEllipsoid.pyx"
/* Python wrapper */

#line 39 "pyEllipsoid.pyx"
static int __pyx_pw_8iscecore_11pyEllipsoid_2e2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 39 "pyEllipsoid.pyx"
static int __pyx_pw_8iscecore_11pyEllipsoid_2e2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a
#line 39 "pyEllipsoid.pyx"
;

#line 39 "pyEllipsoid.pyx"
  int __pyx_r;

#line 39 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 39 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);

#line 39 "pyEllipsoid.pyx"
  assert(__pyx_arg_a); {

#line 39 "pyEllipsoid.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 39, __pyx_L3_error)

#line 39 "pyEllipsoid.pyx"
  }

#line 39 "pyEllipsoid.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 39 "pyEllipsoid.pyx"
  __pyx_L3_error:;

#line 39 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.e2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 39 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 39 "pyEllipsoid.pyx"
  return -1;

#line 39 "pyEllipsoid.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 39 "pyEllipsoid.pyx"
__pyx_pf_8iscecore_11pyEllipsoid_2e2_2__set__(((struct __pyx_obj_8iscecore_pyEllipsoid *)__pyx_v_self), ((double)__pyx_v_a));

#line 39 "pyEllipsoid.pyx"


#line 39 "pyEllipsoid.pyx"
  /* function exit code */

#line 39 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 39 "pyEllipsoid.pyx"
  return __pyx_r;

#line 39 "pyEllipsoid.pyx"
}

#line 39 "pyEllipsoid.pyx"


#line 39 "pyEllipsoid.pyx"
static int __pyx_pf_8iscecore_11pyEllipsoid_2e2_2__set__(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, double __pyx_v_a) {

#line 39 "pyEllipsoid.pyx"
  int __pyx_r;

#line 39 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 39 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyEllipsoid.pyx":40
 *     @e2.setter
 *     def e2(self, double a):
 *         self.c_ellipsoid.e2 = a             # <<<<<<<<<<<<<<
 *     def copyFrom(self, elp):
 *         # Replaces copy-constructor functionality
 */

#line 40 "pyEllipsoid.pyx"
  __pyx_v_self->c_ellipsoid->e2 = __pyx_v_a;

  /* "pyEllipsoid.pyx":39
 *         return self.c_ellipsoid.e2
 *     @e2.setter
 *     def e2(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_ellipsoid.e2 = a
 *     def copyFrom(self, elp):
 */

#line 39 "pyEllipsoid.pyx"


#line 39 "pyEllipsoid.pyx"
  /* function exit code */

#line 39 "pyEllipsoid.pyx"
  __pyx_r = 0;

#line 39 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 39 "pyEllipsoid.pyx"
  return __pyx_r;

#line 39 "pyEllipsoid.pyx"
}

/* "pyEllipsoid.pyx":41
 *     def e2(self, double a):
 *         self.c_ellipsoid.e2 = a
 *     def copyFrom(self, elp):             # <<<<<<<<<<<<<<
 *         # Replaces copy-constructor functionality
 *         try:
 */

#line 41 "pyEllipsoid.pyx"


#line 41 "pyEllipsoid.pyx"
/* Python wrapper */

#line 41 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_7copyFrom(PyObject *__pyx_v_self, PyObject *__pyx_v_elp); /*proto*/

#line 41 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_7copyFrom(PyObject *__pyx_v_self, PyObject *__pyx_v_elp) {

#line 41 "pyEllipsoid.pyx"
  PyObject *__pyx_r = 0;

#line 41 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 41 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("copyFrom (wrapper)", 0);
  __pyx_r = 
#line 41 "pyEllipsoid.pyx"
__pyx_pf_8iscecore_11pyEllipsoid_6copyFrom(((struct __pyx_obj_8iscecore_pyEllipsoid *)__pyx_v_self), ((PyObject *)__pyx_v_elp));

#line 41 "pyEllipsoid.pyx"


#line 41 "pyEllipsoid.pyx"
  /* function exit code */

#line 41 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 41 "pyEllipsoid.pyx"
  return __pyx_r;

#line 41 "pyEllipsoid.pyx"
}

#line 41 "pyEllipsoid.pyx"


#line 41 "pyEllipsoid.pyx"
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_6copyFrom(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, PyObject *__pyx_v_elp) {

#line 41 "pyEllipsoid.pyx"
  PyObject *__pyx_r = NULL;

#line 41 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 41 "pyEllipsoid.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 41 "pyEllipsoid.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 41 "pyEllipsoid.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 41 "pyEllipsoid.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 41 "pyEllipsoid.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 41 "pyEllipsoid.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 41 "pyEllipsoid.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 41 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("copyFrom", 0);

  /* "pyEllipsoid.pyx":43
 *     def copyFrom(self, elp):
 *         # Replaces copy-constructor functionality
 *         try:             # <<<<<<<<<<<<<<
 *             self.a = elp.a
 *             self.e2 = elp.e2
 */

#line 43 "pyEllipsoid.pyx"
  {

#line 43 "pyEllipsoid.pyx"
    __Pyx_PyThreadState_declare

#line 43 "pyEllipsoid.pyx"
    __Pyx_PyThreadState_assign

#line 43 "pyEllipsoid.pyx"
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);

#line 43 "pyEllipsoid.pyx"
    __Pyx_XGOTREF(__pyx_t_1);

#line 43 "pyEllipsoid.pyx"
    __Pyx_XGOTREF(__pyx_t_2);

#line 43 "pyEllipsoid.pyx"
    __Pyx_XGOTREF(__pyx_t_3);

#line 43 "pyEllipsoid.pyx"
    /*try:*/ {

      /* "pyEllipsoid.pyx":44
 *         # Replaces copy-constructor functionality
 *         try:
 *             self.a = elp.a             # <<<<<<<<<<<<<<
 *             self.e2 = elp.e2
 *         # Note: this allows for a dummy class object to be passed in that just has a and e2 as
 */

#line 44 "pyEllipsoid.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_elp, __pyx_n_s_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 44, __pyx_L3_error)

#line 44 "pyEllipsoid.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 44 "pyEllipsoid.pyx"
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_a, __pyx_t_4) < 0) __PYX_ERR(0, 44, __pyx_L3_error)

#line 44 "pyEllipsoid.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyEllipsoid.pyx":45
 *         try:
 *             self.a = elp.a
 *             self.e2 = elp.e2             # <<<<<<<<<<<<<<
 *         # Note: this allows for a dummy class object to be passed in that just has a and e2 as
 *         # parameters!
 */

#line 45 "pyEllipsoid.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_elp, __pyx_n_s_e2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 45, __pyx_L3_error)

#line 45 "pyEllipsoid.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 45 "pyEllipsoid.pyx"
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_e2, __pyx_t_4) < 0) __PYX_ERR(0, 45, __pyx_L3_error)

#line 45 "pyEllipsoid.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyEllipsoid.pyx":43
 *     def copyFrom(self, elp):
 *         # Replaces copy-constructor functionality
 *         try:             # <<<<<<<<<<<<<<
 *             self.a = elp.a
 *             self.e2 = elp.e2
 */

#line 43 "pyEllipsoid.pyx"
    }

#line 43 "pyEllipsoid.pyx"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 43 "pyEllipsoid.pyx"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 43 "pyEllipsoid.pyx"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 43 "pyEllipsoid.pyx"
    goto __pyx_L8_try_end;

#line 43 "pyEllipsoid.pyx"
    __pyx_L3_error:;

#line 43 "pyEllipsoid.pyx"
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyEllipsoid.pyx":48
 *         # Note: this allows for a dummy class object to be passed in that just has a and e2 as
 *         # parameters!
 *         except:             # <<<<<<<<<<<<<<
 *             print("Error: Object passed in to copy is incompatible with object of type " +
 *                   "pyEllipsoid.")
 */

#line 48 "pyEllipsoid.pyx"
    /*except:*/ {

#line 48 "pyEllipsoid.pyx"
      __Pyx_AddTraceback("iscecore.pyEllipsoid.copyFrom", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 48 "pyEllipsoid.pyx"
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 48, __pyx_L5_except_error)

#line 48 "pyEllipsoid.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 48 "pyEllipsoid.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 48 "pyEllipsoid.pyx"
      __Pyx_GOTREF(__pyx_t_6);

      /* "pyEllipsoid.pyx":49
 *         # parameters!
 *         except:
 *             print("Error: Object passed in to copy is incompatible with object of type " +             # <<<<<<<<<<<<<<
 *                   "pyEllipsoid.")
 * 
 */

#line 49 "pyEllipsoid.pyx"
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 49, __pyx_L5_except_error)

#line 49 "pyEllipsoid.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 49 "pyEllipsoid.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 49 "pyEllipsoid.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 49 "pyEllipsoid.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 49 "pyEllipsoid.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 49 "pyEllipsoid.pyx"
      goto __pyx_L4_exception_handled;

#line 49 "pyEllipsoid.pyx"
    }

#line 49 "pyEllipsoid.pyx"
    __pyx_L5_except_error:;

    /* "pyEllipsoid.pyx":43
 *     def copyFrom(self, elp):
 *         # Replaces copy-constructor functionality
 *         try:             # <<<<<<<<<<<<<<
 *             self.a = elp.a
 *             self.e2 = elp.e2
 */

#line 43 "pyEllipsoid.pyx"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 43 "pyEllipsoid.pyx"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 43 "pyEllipsoid.pyx"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 43 "pyEllipsoid.pyx"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 43 "pyEllipsoid.pyx"
    goto __pyx_L1_error;

#line 43 "pyEllipsoid.pyx"
    __pyx_L4_exception_handled:;

#line 43 "pyEllipsoid.pyx"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 43 "pyEllipsoid.pyx"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 43 "pyEllipsoid.pyx"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 43 "pyEllipsoid.pyx"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 43 "pyEllipsoid.pyx"
    __pyx_L8_try_end:;

#line 43 "pyEllipsoid.pyx"
  }

  /* "pyEllipsoid.pyx":41
 *     def e2(self, double a):
 *         self.c_ellipsoid.e2 = a
 *     def copyFrom(self, elp):             # <<<<<<<<<<<<<<
 *         # Replaces copy-constructor functionality
 *         try:
 */

#line 41 "pyEllipsoid.pyx"


#line 41 "pyEllipsoid.pyx"
  /* function exit code */

#line 41 "pyEllipsoid.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 41 "pyEllipsoid.pyx"
  goto __pyx_L0;

#line 41 "pyEllipsoid.pyx"
  __pyx_L1_error:;

#line 41 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 41 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 41 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 41 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 41 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.copyFrom", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 41 "pyEllipsoid.pyx"
  __pyx_r = NULL;

#line 41 "pyEllipsoid.pyx"
  __pyx_L0:;

#line 41 "pyEllipsoid.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 41 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 41 "pyEllipsoid.pyx"
  return __pyx_r;

#line 41 "pyEllipsoid.pyx"
}

/* "pyEllipsoid.pyx":52
 *                   "pyEllipsoid.")
 * 
 *     def rEast(self, double a):             # <<<<<<<<<<<<<<
 *         return self.c_ellipsoid.rEast(a)
 *     def rNorth(self, double a):
 */

#line 52 "pyEllipsoid.pyx"


#line 52 "pyEllipsoid.pyx"
/* Python wrapper */

#line 52 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_9rEast(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 52 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_9rEast(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a
#line 52 "pyEllipsoid.pyx"
;

#line 52 "pyEllipsoid.pyx"
  PyObject *__pyx_r = 0;

#line 52 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 52 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("rEast (wrapper)", 0);

#line 52 "pyEllipsoid.pyx"
  assert(__pyx_arg_a); {

#line 52 "pyEllipsoid.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 52, __pyx_L3_error)

#line 52 "pyEllipsoid.pyx"
  }

#line 52 "pyEllipsoid.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 52 "pyEllipsoid.pyx"
  __pyx_L3_error:;

#line 52 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.rEast", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 52 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 52 "pyEllipsoid.pyx"
  return NULL;

#line 52 "pyEllipsoid.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 52 "pyEllipsoid.pyx"
__pyx_pf_8iscecore_11pyEllipsoid_8rEast(((struct __pyx_obj_8iscecore_pyEllipsoid *)__pyx_v_self), ((double)__pyx_v_a));

#line 52 "pyEllipsoid.pyx"


#line 52 "pyEllipsoid.pyx"
  /* function exit code */

#line 52 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 52 "pyEllipsoid.pyx"
  return __pyx_r;

#line 52 "pyEllipsoid.pyx"
}

#line 52 "pyEllipsoid.pyx"


#line 52 "pyEllipsoid.pyx"
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_8rEast(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, double __pyx_v_a) {

#line 52 "pyEllipsoid.pyx"
  PyObject *__pyx_r = NULL;

#line 52 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 52 "pyEllipsoid.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 52 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("rEast", 0);

  /* "pyEllipsoid.pyx":53
 * 
 *     def rEast(self, double a):
 *         return self.c_ellipsoid.rEast(a)             # <<<<<<<<<<<<<<
 *     def rNorth(self, double a):
 *         return self.c_ellipsoid.rNorth(a)
 */

#line 53 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 53 "pyEllipsoid.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_ellipsoid->rEast(__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)

#line 53 "pyEllipsoid.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 53 "pyEllipsoid.pyx"
  __pyx_r = __pyx_t_1;

#line 53 "pyEllipsoid.pyx"
  __pyx_t_1 = 0;

#line 53 "pyEllipsoid.pyx"
  goto __pyx_L0;

  /* "pyEllipsoid.pyx":52
 *                   "pyEllipsoid.")
 * 
 *     def rEast(self, double a):             # <<<<<<<<<<<<<<
 *         return self.c_ellipsoid.rEast(a)
 *     def rNorth(self, double a):
 */

#line 52 "pyEllipsoid.pyx"


#line 52 "pyEllipsoid.pyx"
  /* function exit code */

#line 52 "pyEllipsoid.pyx"
  __pyx_L1_error:;

#line 52 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 52 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.rEast", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 52 "pyEllipsoid.pyx"
  __pyx_r = NULL;

#line 52 "pyEllipsoid.pyx"
  __pyx_L0:;

#line 52 "pyEllipsoid.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 52 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 52 "pyEllipsoid.pyx"
  return __pyx_r;

#line 52 "pyEllipsoid.pyx"
}

/* "pyEllipsoid.pyx":54
 *     def rEast(self, double a):
 *         return self.c_ellipsoid.rEast(a)
 *     def rNorth(self, double a):             # <<<<<<<<<<<<<<
 *         return self.c_ellipsoid.rNorth(a)
 *     def rDir(self, double a, double b):
 */

#line 54 "pyEllipsoid.pyx"


#line 54 "pyEllipsoid.pyx"
/* Python wrapper */

#line 54 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_11rNorth(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 54 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_11rNorth(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a
#line 54 "pyEllipsoid.pyx"
;

#line 54 "pyEllipsoid.pyx"
  PyObject *__pyx_r = 0;

#line 54 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 54 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("rNorth (wrapper)", 0);

#line 54 "pyEllipsoid.pyx"
  assert(__pyx_arg_a); {

#line 54 "pyEllipsoid.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 54, __pyx_L3_error)

#line 54 "pyEllipsoid.pyx"
  }

#line 54 "pyEllipsoid.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 54 "pyEllipsoid.pyx"
  __pyx_L3_error:;

#line 54 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.rNorth", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 54 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 54 "pyEllipsoid.pyx"
  return NULL;

#line 54 "pyEllipsoid.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 54 "pyEllipsoid.pyx"
__pyx_pf_8iscecore_11pyEllipsoid_10rNorth(((struct __pyx_obj_8iscecore_pyEllipsoid *)__pyx_v_self), ((double)__pyx_v_a));

#line 54 "pyEllipsoid.pyx"


#line 54 "pyEllipsoid.pyx"
  /* function exit code */

#line 54 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 54 "pyEllipsoid.pyx"
  return __pyx_r;

#line 54 "pyEllipsoid.pyx"
}

#line 54 "pyEllipsoid.pyx"


#line 54 "pyEllipsoid.pyx"
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_10rNorth(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, double __pyx_v_a) {

#line 54 "pyEllipsoid.pyx"
  PyObject *__pyx_r = NULL;

#line 54 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 54 "pyEllipsoid.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 54 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("rNorth", 0);

  /* "pyEllipsoid.pyx":55
 *         return self.c_ellipsoid.rEast(a)
 *     def rNorth(self, double a):
 *         return self.c_ellipsoid.rNorth(a)             # <<<<<<<<<<<<<<
 *     def rDir(self, double a, double b):
 *         return self.c_ellipsoid.rDir(a,b)
 */

#line 55 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 55 "pyEllipsoid.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_ellipsoid->rNorth(__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)

#line 55 "pyEllipsoid.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 55 "pyEllipsoid.pyx"
  __pyx_r = __pyx_t_1;

#line 55 "pyEllipsoid.pyx"
  __pyx_t_1 = 0;

#line 55 "pyEllipsoid.pyx"
  goto __pyx_L0;

  /* "pyEllipsoid.pyx":54
 *     def rEast(self, double a):
 *         return self.c_ellipsoid.rEast(a)
 *     def rNorth(self, double a):             # <<<<<<<<<<<<<<
 *         return self.c_ellipsoid.rNorth(a)
 *     def rDir(self, double a, double b):
 */

#line 54 "pyEllipsoid.pyx"


#line 54 "pyEllipsoid.pyx"
  /* function exit code */

#line 54 "pyEllipsoid.pyx"
  __pyx_L1_error:;

#line 54 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 54 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.rNorth", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 54 "pyEllipsoid.pyx"
  __pyx_r = NULL;

#line 54 "pyEllipsoid.pyx"
  __pyx_L0:;

#line 54 "pyEllipsoid.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 54 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 54 "pyEllipsoid.pyx"
  return __pyx_r;

#line 54 "pyEllipsoid.pyx"
}

/* "pyEllipsoid.pyx":56
 *     def rNorth(self, double a):
 *         return self.c_ellipsoid.rNorth(a)
 *     def rDir(self, double a, double b):             # <<<<<<<<<<<<<<
 *         return self.c_ellipsoid.rDir(a,b)
 *     def latLonToXyz(self, list a, list b):
 */

#line 56 "pyEllipsoid.pyx"


#line 56 "pyEllipsoid.pyx"
/* Python wrapper */

#line 56 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_13rDir(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 56 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_13rDir(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a
#line 56 "pyEllipsoid.pyx"
;
  double __pyx_v_b
#line 56 "pyEllipsoid.pyx"
;

#line 56 "pyEllipsoid.pyx"
  PyObject *__pyx_r = 0;

#line 56 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 56 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("rDir (wrapper)", 0);

#line 56 "pyEllipsoid.pyx"
  {

#line 56 "pyEllipsoid.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};

#line 56 "pyEllipsoid.pyx"
    PyObject* values[2] = {0,0};

#line 56 "pyEllipsoid.pyx"
    if (unlikely(__pyx_kwds)) {

#line 56 "pyEllipsoid.pyx"
      Py_ssize_t kw_args;

#line 56 "pyEllipsoid.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 56 "pyEllipsoid.pyx"
      switch (pos_args) {
        case  2: 
#line 56 "pyEllipsoid.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 56 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 56 "pyEllipsoid.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 56 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 56 "pyEllipsoid.pyx"
        case  0: break;
        default: 
#line 56 "pyEllipsoid.pyx"
goto __pyx_L5_argtuple_error;

#line 56 "pyEllipsoid.pyx"
      }

#line 56 "pyEllipsoid.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 56 "pyEllipsoid.pyx"
      switch (pos_args) {

#line 56 "pyEllipsoid.pyx"
        case  0:

#line 56 "pyEllipsoid.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 56 "pyEllipsoid.pyx"
goto __pyx_L5_argtuple_error;

#line 56 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 56 "pyEllipsoid.pyx"
        case  1:

#line 56 "pyEllipsoid.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 56 "pyEllipsoid.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("rDir", 1, 2, 2, 1); 
#line 56 "pyEllipsoid.pyx"
__PYX_ERR(0, 56, __pyx_L3_error)

#line 56 "pyEllipsoid.pyx"
        }

#line 56 "pyEllipsoid.pyx"
      }

#line 56 "pyEllipsoid.pyx"
      if (unlikely(kw_args > 0)) {

#line 56 "pyEllipsoid.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rDir") < 0)) __PYX_ERR(0, 56, __pyx_L3_error)

#line 56 "pyEllipsoid.pyx"
      }

#line 56 "pyEllipsoid.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 56 "pyEllipsoid.pyx"
      goto __pyx_L5_argtuple_error;

#line 56 "pyEllipsoid.pyx"
    } else {

#line 56 "pyEllipsoid.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 56 "pyEllipsoid.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 56 "pyEllipsoid.pyx"
    }

#line 56 "pyEllipsoid.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 56, __pyx_L3_error)

#line 56 "pyEllipsoid.pyx"
    __pyx_v_b = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 56, __pyx_L3_error)

#line 56 "pyEllipsoid.pyx"
  }

#line 56 "pyEllipsoid.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 56 "pyEllipsoid.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rDir", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 56 "pyEllipsoid.pyx"
__PYX_ERR(0, 56, __pyx_L3_error)

#line 56 "pyEllipsoid.pyx"
  __pyx_L3_error:;

#line 56 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.rDir", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 56 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 56 "pyEllipsoid.pyx"
  return NULL;

#line 56 "pyEllipsoid.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 56 "pyEllipsoid.pyx"
__pyx_pf_8iscecore_11pyEllipsoid_12rDir(((struct __pyx_obj_8iscecore_pyEllipsoid *)__pyx_v_self), __pyx_v_a, __pyx_v_b);

#line 56 "pyEllipsoid.pyx"


#line 56 "pyEllipsoid.pyx"
  /* function exit code */

#line 56 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 56 "pyEllipsoid.pyx"
  return __pyx_r;

#line 56 "pyEllipsoid.pyx"
}

#line 56 "pyEllipsoid.pyx"


#line 56 "pyEllipsoid.pyx"
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_12rDir(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, double __pyx_v_a, double __pyx_v_b) {

#line 56 "pyEllipsoid.pyx"
  PyObject *__pyx_r = NULL;

#line 56 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 56 "pyEllipsoid.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 56 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("rDir", 0);

  /* "pyEllipsoid.pyx":57
 *         return self.c_ellipsoid.rNorth(a)
 *     def rDir(self, double a, double b):
 *         return self.c_ellipsoid.rDir(a,b)             # <<<<<<<<<<<<<<
 *     def latLonToXyz(self, list a, list b):
 *         cdef vector[double] _a
 */

#line 57 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 57 "pyEllipsoid.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_ellipsoid->rDir(__pyx_v_a, __pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)

#line 57 "pyEllipsoid.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 57 "pyEllipsoid.pyx"
  __pyx_r = __pyx_t_1;

#line 57 "pyEllipsoid.pyx"
  __pyx_t_1 = 0;

#line 57 "pyEllipsoid.pyx"
  goto __pyx_L0;

  /* "pyEllipsoid.pyx":56
 *     def rNorth(self, double a):
 *         return self.c_ellipsoid.rNorth(a)
 *     def rDir(self, double a, double b):             # <<<<<<<<<<<<<<
 *         return self.c_ellipsoid.rDir(a,b)
 *     def latLonToXyz(self, list a, list b):
 */

#line 56 "pyEllipsoid.pyx"


#line 56 "pyEllipsoid.pyx"
  /* function exit code */

#line 56 "pyEllipsoid.pyx"
  __pyx_L1_error:;

#line 56 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 56 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.rDir", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 56 "pyEllipsoid.pyx"
  __pyx_r = NULL;

#line 56 "pyEllipsoid.pyx"
  __pyx_L0:;

#line 56 "pyEllipsoid.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 56 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 56 "pyEllipsoid.pyx"
  return __pyx_r;

#line 56 "pyEllipsoid.pyx"
}

/* "pyEllipsoid.pyx":58
 *     def rDir(self, double a, double b):
 *         return self.c_ellipsoid.rDir(a,b)
 *     def latLonToXyz(self, list a, list b):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 58 "pyEllipsoid.pyx"


#line 58 "pyEllipsoid.pyx"
/* Python wrapper */

#line 58 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_15latLonToXyz(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 58 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_15latLonToXyz(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0
#line 58 "pyEllipsoid.pyx"
;
  PyObject *__pyx_v_b = 0
#line 58 "pyEllipsoid.pyx"
;

#line 58 "pyEllipsoid.pyx"
  PyObject *__pyx_r = 0;

#line 58 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 58 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("latLonToXyz (wrapper)", 0);

#line 58 "pyEllipsoid.pyx"
  {

#line 58 "pyEllipsoid.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};

#line 58 "pyEllipsoid.pyx"
    PyObject* values[2] = {0,0};

#line 58 "pyEllipsoid.pyx"
    if (unlikely(__pyx_kwds)) {

#line 58 "pyEllipsoid.pyx"
      Py_ssize_t kw_args;

#line 58 "pyEllipsoid.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 58 "pyEllipsoid.pyx"
      switch (pos_args) {
        case  2: 
#line 58 "pyEllipsoid.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 58 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 58 "pyEllipsoid.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 58 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 58 "pyEllipsoid.pyx"
        case  0: break;
        default: 
#line 58 "pyEllipsoid.pyx"
goto __pyx_L5_argtuple_error;

#line 58 "pyEllipsoid.pyx"
      }

#line 58 "pyEllipsoid.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 58 "pyEllipsoid.pyx"
      switch (pos_args) {

#line 58 "pyEllipsoid.pyx"
        case  0:

#line 58 "pyEllipsoid.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 58 "pyEllipsoid.pyx"
goto __pyx_L5_argtuple_error;

#line 58 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 58 "pyEllipsoid.pyx"
        case  1:

#line 58 "pyEllipsoid.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 58 "pyEllipsoid.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("latLonToXyz", 1, 2, 2, 1); 
#line 58 "pyEllipsoid.pyx"
__PYX_ERR(0, 58, __pyx_L3_error)

#line 58 "pyEllipsoid.pyx"
        }

#line 58 "pyEllipsoid.pyx"
      }

#line 58 "pyEllipsoid.pyx"
      if (unlikely(kw_args > 0)) {

#line 58 "pyEllipsoid.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "latLonToXyz") < 0)) __PYX_ERR(0, 58, __pyx_L3_error)

#line 58 "pyEllipsoid.pyx"
      }

#line 58 "pyEllipsoid.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 58 "pyEllipsoid.pyx"
      goto __pyx_L5_argtuple_error;

#line 58 "pyEllipsoid.pyx"
    } else {

#line 58 "pyEllipsoid.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 58 "pyEllipsoid.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 58 "pyEllipsoid.pyx"
    }

#line 58 "pyEllipsoid.pyx"
    __pyx_v_a = ((PyObject*)values[0]);

#line 58 "pyEllipsoid.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 58 "pyEllipsoid.pyx"
  }

#line 58 "pyEllipsoid.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 58 "pyEllipsoid.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("latLonToXyz", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 58 "pyEllipsoid.pyx"
__PYX_ERR(0, 58, __pyx_L3_error)

#line 58 "pyEllipsoid.pyx"
  __pyx_L3_error:;

#line 58 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.latLonToXyz", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 58 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 58 "pyEllipsoid.pyx"
  return NULL;

#line 58 "pyEllipsoid.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 58 "pyEllipsoid.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), (&PyList_Type), 1, "a", 1))) __PYX_ERR(0, 58, __pyx_L1_error)

#line 58 "pyEllipsoid.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(0, 58, __pyx_L1_error)
  __pyx_r = 
#line 58 "pyEllipsoid.pyx"
__pyx_pf_8iscecore_11pyEllipsoid_14latLonToXyz(((struct __pyx_obj_8iscecore_pyEllipsoid *)__pyx_v_self), __pyx_v_a, __pyx_v_b);

#line 58 "pyEllipsoid.pyx"


#line 58 "pyEllipsoid.pyx"
  /* function exit code */

#line 58 "pyEllipsoid.pyx"
  goto __pyx_L0;

#line 58 "pyEllipsoid.pyx"
  __pyx_L1_error:;

#line 58 "pyEllipsoid.pyx"
  __pyx_r = NULL;

#line 58 "pyEllipsoid.pyx"
  __pyx_L0:;

#line 58 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 58 "pyEllipsoid.pyx"
  return __pyx_r;

#line 58 "pyEllipsoid.pyx"
}

#line 58 "pyEllipsoid.pyx"


#line 58 "pyEllipsoid.pyx"
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_14latLonToXyz(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  std::vector<double>  __pyx_v__a
#line 58 "pyEllipsoid.pyx"
;
  std::vector<double>  __pyx_v__b
#line 58 "pyEllipsoid.pyx"
;
  long __pyx_v_i
#line 58 "pyEllipsoid.pyx"
;

#line 58 "pyEllipsoid.pyx"
  PyObject *__pyx_r = NULL;

#line 58 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 58 "pyEllipsoid.pyx"
  long __pyx_t_1;

#line 58 "pyEllipsoid.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 58 "pyEllipsoid.pyx"
  double __pyx_t_3;

#line 58 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("latLonToXyz", 0);

  /* "pyEllipsoid.pyx":61
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])
 */

#line 61 "pyEllipsoid.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 61 "pyEllipsoid.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyEllipsoid.pyx":62
 *         cdef vector[double] _b
 *         for i in range(3):
 *             _a.push_back(a[i])             # <<<<<<<<<<<<<<
 *             _b.push_back(b[i])
 *         self.c_ellipsoid.latLonToXyz(_a,_b)
 */

#line 62 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_a == Py_None)) {

#line 62 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 62 "pyEllipsoid.pyx"
      __PYX_ERR(0, 62, __pyx_L1_error)

#line 62 "pyEllipsoid.pyx"
    }

#line 62 "pyEllipsoid.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L1_error)

#line 62 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 62 "pyEllipsoid.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 62, __pyx_L1_error)

#line 62 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 62 "pyEllipsoid.pyx"
    try {

#line 62 "pyEllipsoid.pyx"
      __pyx_v__a.push_back(__pyx_t_3);

#line 62 "pyEllipsoid.pyx"
    } catch(...) {

#line 62 "pyEllipsoid.pyx"
      __Pyx_CppExn2PyErr();

#line 62 "pyEllipsoid.pyx"
      __PYX_ERR(0, 62, __pyx_L1_error)

#line 62 "pyEllipsoid.pyx"
    }

    /* "pyEllipsoid.pyx":63
 *         for i in range(3):
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])             # <<<<<<<<<<<<<<
 *         self.c_ellipsoid.latLonToXyz(_a,_b)
 *         for i in range(3):
 */

#line 63 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 63 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 63 "pyEllipsoid.pyx"
      __PYX_ERR(0, 63, __pyx_L1_error)

#line 63 "pyEllipsoid.pyx"
    }

#line 63 "pyEllipsoid.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L1_error)

#line 63 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 63 "pyEllipsoid.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 63, __pyx_L1_error)

#line 63 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 63 "pyEllipsoid.pyx"
    try {

#line 63 "pyEllipsoid.pyx"
      __pyx_v__b.push_back(__pyx_t_3);

#line 63 "pyEllipsoid.pyx"
    } catch(...) {

#line 63 "pyEllipsoid.pyx"
      __Pyx_CppExn2PyErr();

#line 63 "pyEllipsoid.pyx"
      __PYX_ERR(0, 63, __pyx_L1_error)

#line 63 "pyEllipsoid.pyx"
    }

#line 63 "pyEllipsoid.pyx"
  }

  /* "pyEllipsoid.pyx":64
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])
 *         self.c_ellipsoid.latLonToXyz(_a,_b)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             a[i] = _a[i]
 */

#line 64 "pyEllipsoid.pyx"
  __pyx_v_self->c_ellipsoid->latLonToXyz(__pyx_v__a, __pyx_v__b);

  /* "pyEllipsoid.pyx":65
 *             _b.push_back(b[i])
 *         self.c_ellipsoid.latLonToXyz(_a,_b)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             a[i] = _a[i]
 *             b[i] = _b[i]
 */

#line 65 "pyEllipsoid.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 65 "pyEllipsoid.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyEllipsoid.pyx":66
 *         self.c_ellipsoid.latLonToXyz(_a,_b)
 *         for i in range(3):
 *             a[i] = _a[i]             # <<<<<<<<<<<<<<
 *             b[i] = _b[i]
 *     def xyzToLatLon(self, list a, list b):
 */

#line 66 "pyEllipsoid.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__a[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 66, __pyx_L1_error)

#line 66 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 66 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_a == Py_None)) {

#line 66 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 66 "pyEllipsoid.pyx"
      __PYX_ERR(0, 66, __pyx_L1_error)

#line 66 "pyEllipsoid.pyx"
    }

#line 66 "pyEllipsoid.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_a, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(0, 66, __pyx_L1_error)

#line 66 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyEllipsoid.pyx":67
 *         for i in range(3):
 *             a[i] = _a[i]
 *             b[i] = _b[i]             # <<<<<<<<<<<<<<
 *     def xyzToLatLon(self, list a, list b):
 *         cdef vector[double] _a
 */

#line 67 "pyEllipsoid.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__b[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 67, __pyx_L1_error)

#line 67 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 67 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 67 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 67 "pyEllipsoid.pyx"
      __PYX_ERR(0, 67, __pyx_L1_error)

#line 67 "pyEllipsoid.pyx"
    }

#line 67 "pyEllipsoid.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_b, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(0, 67, __pyx_L1_error)

#line 67 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 67 "pyEllipsoid.pyx"
  }

  /* "pyEllipsoid.pyx":58
 *     def rDir(self, double a, double b):
 *         return self.c_ellipsoid.rDir(a,b)
 *     def latLonToXyz(self, list a, list b):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 58 "pyEllipsoid.pyx"


#line 58 "pyEllipsoid.pyx"
  /* function exit code */

#line 58 "pyEllipsoid.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 58 "pyEllipsoid.pyx"
  goto __pyx_L0;

#line 58 "pyEllipsoid.pyx"
  __pyx_L1_error:;

#line 58 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 58 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.latLonToXyz", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 58 "pyEllipsoid.pyx"
  __pyx_r = NULL;

#line 58 "pyEllipsoid.pyx"
  __pyx_L0:;

#line 58 "pyEllipsoid.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 58 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 58 "pyEllipsoid.pyx"
  return __pyx_r;

#line 58 "pyEllipsoid.pyx"
}

/* "pyEllipsoid.pyx":68
 *             a[i] = _a[i]
 *             b[i] = _b[i]
 *     def xyzToLatLon(self, list a, list b):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 68 "pyEllipsoid.pyx"


#line 68 "pyEllipsoid.pyx"
/* Python wrapper */

#line 68 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_17xyzToLatLon(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 68 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_17xyzToLatLon(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0
#line 68 "pyEllipsoid.pyx"
;
  PyObject *__pyx_v_b = 0
#line 68 "pyEllipsoid.pyx"
;

#line 68 "pyEllipsoid.pyx"
  PyObject *__pyx_r = 0;

#line 68 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 68 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("xyzToLatLon (wrapper)", 0);

#line 68 "pyEllipsoid.pyx"
  {

#line 68 "pyEllipsoid.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};

#line 68 "pyEllipsoid.pyx"
    PyObject* values[2] = {0,0};

#line 68 "pyEllipsoid.pyx"
    if (unlikely(__pyx_kwds)) {

#line 68 "pyEllipsoid.pyx"
      Py_ssize_t kw_args;

#line 68 "pyEllipsoid.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 68 "pyEllipsoid.pyx"
      switch (pos_args) {
        case  2: 
#line 68 "pyEllipsoid.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 68 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 68 "pyEllipsoid.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 68 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 68 "pyEllipsoid.pyx"
        case  0: break;
        default: 
#line 68 "pyEllipsoid.pyx"
goto __pyx_L5_argtuple_error;

#line 68 "pyEllipsoid.pyx"
      }

#line 68 "pyEllipsoid.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 68 "pyEllipsoid.pyx"
      switch (pos_args) {

#line 68 "pyEllipsoid.pyx"
        case  0:

#line 68 "pyEllipsoid.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 68 "pyEllipsoid.pyx"
goto __pyx_L5_argtuple_error;

#line 68 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 68 "pyEllipsoid.pyx"
        case  1:

#line 68 "pyEllipsoid.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 68 "pyEllipsoid.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("xyzToLatLon", 1, 2, 2, 1); 
#line 68 "pyEllipsoid.pyx"
__PYX_ERR(0, 68, __pyx_L3_error)

#line 68 "pyEllipsoid.pyx"
        }

#line 68 "pyEllipsoid.pyx"
      }

#line 68 "pyEllipsoid.pyx"
      if (unlikely(kw_args > 0)) {

#line 68 "pyEllipsoid.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "xyzToLatLon") < 0)) __PYX_ERR(0, 68, __pyx_L3_error)

#line 68 "pyEllipsoid.pyx"
      }

#line 68 "pyEllipsoid.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 68 "pyEllipsoid.pyx"
      goto __pyx_L5_argtuple_error;

#line 68 "pyEllipsoid.pyx"
    } else {

#line 68 "pyEllipsoid.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 68 "pyEllipsoid.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 68 "pyEllipsoid.pyx"
    }

#line 68 "pyEllipsoid.pyx"
    __pyx_v_a = ((PyObject*)values[0]);

#line 68 "pyEllipsoid.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 68 "pyEllipsoid.pyx"
  }

#line 68 "pyEllipsoid.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 68 "pyEllipsoid.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("xyzToLatLon", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 68 "pyEllipsoid.pyx"
__PYX_ERR(0, 68, __pyx_L3_error)

#line 68 "pyEllipsoid.pyx"
  __pyx_L3_error:;

#line 68 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.xyzToLatLon", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 68 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 68 "pyEllipsoid.pyx"
  return NULL;

#line 68 "pyEllipsoid.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 68 "pyEllipsoid.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), (&PyList_Type), 1, "a", 1))) __PYX_ERR(0, 68, __pyx_L1_error)

#line 68 "pyEllipsoid.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(0, 68, __pyx_L1_error)
  __pyx_r = 
#line 68 "pyEllipsoid.pyx"
__pyx_pf_8iscecore_11pyEllipsoid_16xyzToLatLon(((struct __pyx_obj_8iscecore_pyEllipsoid *)__pyx_v_self), __pyx_v_a, __pyx_v_b);

#line 68 "pyEllipsoid.pyx"


#line 68 "pyEllipsoid.pyx"
  /* function exit code */

#line 68 "pyEllipsoid.pyx"
  goto __pyx_L0;

#line 68 "pyEllipsoid.pyx"
  __pyx_L1_error:;

#line 68 "pyEllipsoid.pyx"
  __pyx_r = NULL;

#line 68 "pyEllipsoid.pyx"
  __pyx_L0:;

#line 68 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 68 "pyEllipsoid.pyx"
  return __pyx_r;

#line 68 "pyEllipsoid.pyx"
}

#line 68 "pyEllipsoid.pyx"


#line 68 "pyEllipsoid.pyx"
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_16xyzToLatLon(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  std::vector<double>  __pyx_v__a
#line 68 "pyEllipsoid.pyx"
;
  std::vector<double>  __pyx_v__b
#line 68 "pyEllipsoid.pyx"
;
  long __pyx_v_i
#line 68 "pyEllipsoid.pyx"
;

#line 68 "pyEllipsoid.pyx"
  PyObject *__pyx_r = NULL;

#line 68 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 68 "pyEllipsoid.pyx"
  long __pyx_t_1;

#line 68 "pyEllipsoid.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 68 "pyEllipsoid.pyx"
  double __pyx_t_3;

#line 68 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("xyzToLatLon", 0);

  /* "pyEllipsoid.pyx":71
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])
 */

#line 71 "pyEllipsoid.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 71 "pyEllipsoid.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyEllipsoid.pyx":72
 *         cdef vector[double] _b
 *         for i in range(3):
 *             _a.push_back(a[i])             # <<<<<<<<<<<<<<
 *             _b.push_back(b[i])
 *         self.c_ellipsoid.xyzToLatLon(_a,_b)
 */

#line 72 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_a == Py_None)) {

#line 72 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 72 "pyEllipsoid.pyx"
      __PYX_ERR(0, 72, __pyx_L1_error)

#line 72 "pyEllipsoid.pyx"
    }

#line 72 "pyEllipsoid.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)

#line 72 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 72 "pyEllipsoid.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 72, __pyx_L1_error)

#line 72 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 72 "pyEllipsoid.pyx"
    try {

#line 72 "pyEllipsoid.pyx"
      __pyx_v__a.push_back(__pyx_t_3);

#line 72 "pyEllipsoid.pyx"
    } catch(...) {

#line 72 "pyEllipsoid.pyx"
      __Pyx_CppExn2PyErr();

#line 72 "pyEllipsoid.pyx"
      __PYX_ERR(0, 72, __pyx_L1_error)

#line 72 "pyEllipsoid.pyx"
    }

    /* "pyEllipsoid.pyx":73
 *         for i in range(3):
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])             # <<<<<<<<<<<<<<
 *         self.c_ellipsoid.xyzToLatLon(_a,_b)
 *         for i in range(3):
 */

#line 73 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 73 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 73 "pyEllipsoid.pyx"
      __PYX_ERR(0, 73, __pyx_L1_error)

#line 73 "pyEllipsoid.pyx"
    }

#line 73 "pyEllipsoid.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 73, __pyx_L1_error)

#line 73 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 73 "pyEllipsoid.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L1_error)

#line 73 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 73 "pyEllipsoid.pyx"
    try {

#line 73 "pyEllipsoid.pyx"
      __pyx_v__b.push_back(__pyx_t_3);

#line 73 "pyEllipsoid.pyx"
    } catch(...) {

#line 73 "pyEllipsoid.pyx"
      __Pyx_CppExn2PyErr();

#line 73 "pyEllipsoid.pyx"
      __PYX_ERR(0, 73, __pyx_L1_error)

#line 73 "pyEllipsoid.pyx"
    }

#line 73 "pyEllipsoid.pyx"
  }

  /* "pyEllipsoid.pyx":74
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])
 *         self.c_ellipsoid.xyzToLatLon(_a,_b)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             a[i] = _a[i]
 */

#line 74 "pyEllipsoid.pyx"
  __pyx_v_self->c_ellipsoid->xyzToLatLon(__pyx_v__a, __pyx_v__b);

  /* "pyEllipsoid.pyx":75
 *             _b.push_back(b[i])
 *         self.c_ellipsoid.xyzToLatLon(_a,_b)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             a[i] = _a[i]
 *             b[i] = _b[i]
 */

#line 75 "pyEllipsoid.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 75 "pyEllipsoid.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyEllipsoid.pyx":76
 *         self.c_ellipsoid.xyzToLatLon(_a,_b)
 *         for i in range(3):
 *             a[i] = _a[i]             # <<<<<<<<<<<<<<
 *             b[i] = _b[i]
 *     def getAngs(self, list a, list b, list c, d, e=None):
 */

#line 76 "pyEllipsoid.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__a[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)

#line 76 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 76 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_a == Py_None)) {

#line 76 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 76 "pyEllipsoid.pyx"
      __PYX_ERR(0, 76, __pyx_L1_error)

#line 76 "pyEllipsoid.pyx"
    }

#line 76 "pyEllipsoid.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_a, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(0, 76, __pyx_L1_error)

#line 76 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyEllipsoid.pyx":77
 *         for i in range(3):
 *             a[i] = _a[i]
 *             b[i] = _b[i]             # <<<<<<<<<<<<<<
 *     def getAngs(self, list a, list b, list c, d, e=None):
 *         cdef vector[double] _a
 */

#line 77 "pyEllipsoid.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__b[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L1_error)

#line 77 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 77 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 77 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 77 "pyEllipsoid.pyx"
      __PYX_ERR(0, 77, __pyx_L1_error)

#line 77 "pyEllipsoid.pyx"
    }

#line 77 "pyEllipsoid.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_b, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(0, 77, __pyx_L1_error)

#line 77 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 77 "pyEllipsoid.pyx"
  }

  /* "pyEllipsoid.pyx":68
 *             a[i] = _a[i]
 *             b[i] = _b[i]
 *     def xyzToLatLon(self, list a, list b):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 68 "pyEllipsoid.pyx"


#line 68 "pyEllipsoid.pyx"
  /* function exit code */

#line 68 "pyEllipsoid.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 68 "pyEllipsoid.pyx"
  goto __pyx_L0;

#line 68 "pyEllipsoid.pyx"
  __pyx_L1_error:;

#line 68 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 68 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.xyzToLatLon", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 68 "pyEllipsoid.pyx"
  __pyx_r = NULL;

#line 68 "pyEllipsoid.pyx"
  __pyx_L0:;

#line 68 "pyEllipsoid.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 68 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 68 "pyEllipsoid.pyx"
  return __pyx_r;

#line 68 "pyEllipsoid.pyx"
}

/* "pyEllipsoid.pyx":78
 *             a[i] = _a[i]
 *             b[i] = _b[i]
 *     def getAngs(self, list a, list b, list c, d, e=None):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 78 "pyEllipsoid.pyx"


#line 78 "pyEllipsoid.pyx"
/* Python wrapper */

#line 78 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_19getAngs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 78 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_19getAngs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0
#line 78 "pyEllipsoid.pyx"
;
  PyObject *__pyx_v_b = 0
#line 78 "pyEllipsoid.pyx"
;
  PyObject *__pyx_v_c = 0
#line 78 "pyEllipsoid.pyx"
;
  PyObject *__pyx_v_d = 0
#line 78 "pyEllipsoid.pyx"
;
  PyObject *__pyx_v_e = 0
#line 78 "pyEllipsoid.pyx"
;

#line 78 "pyEllipsoid.pyx"
  PyObject *__pyx_r = 0;

#line 78 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 78 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("getAngs (wrapper)", 0);

#line 78 "pyEllipsoid.pyx"
  {

#line 78 "pyEllipsoid.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,&__pyx_n_s_d,&__pyx_n_s_e,0};

#line 78 "pyEllipsoid.pyx"
    PyObject* values[5] = {0,0,0,0,0};

#line 78 "pyEllipsoid.pyx"
    values[4] = ((PyObject *)Py_None);

#line 78 "pyEllipsoid.pyx"
    if (unlikely(__pyx_kwds)) {

#line 78 "pyEllipsoid.pyx"
      Py_ssize_t kw_args;

#line 78 "pyEllipsoid.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 78 "pyEllipsoid.pyx"
      switch (pos_args) {
        case  5: 
#line 78 "pyEllipsoid.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 78 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 78 "pyEllipsoid.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 78 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 78 "pyEllipsoid.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 78 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 78 "pyEllipsoid.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 78 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 78 "pyEllipsoid.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 78 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 78 "pyEllipsoid.pyx"
        case  0: break;
        default: 
#line 78 "pyEllipsoid.pyx"
goto __pyx_L5_argtuple_error;

#line 78 "pyEllipsoid.pyx"
      }

#line 78 "pyEllipsoid.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 78 "pyEllipsoid.pyx"
      switch (pos_args) {

#line 78 "pyEllipsoid.pyx"
        case  0:

#line 78 "pyEllipsoid.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 78 "pyEllipsoid.pyx"
goto __pyx_L5_argtuple_error;

#line 78 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 78 "pyEllipsoid.pyx"
        case  1:

#line 78 "pyEllipsoid.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 78 "pyEllipsoid.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("getAngs", 0, 4, 5, 1); 
#line 78 "pyEllipsoid.pyx"
__PYX_ERR(0, 78, __pyx_L3_error)

#line 78 "pyEllipsoid.pyx"
        }

#line 78 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 78 "pyEllipsoid.pyx"
        case  2:

#line 78 "pyEllipsoid.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 78 "pyEllipsoid.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("getAngs", 0, 4, 5, 2); 
#line 78 "pyEllipsoid.pyx"
__PYX_ERR(0, 78, __pyx_L3_error)

#line 78 "pyEllipsoid.pyx"
        }

#line 78 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 78 "pyEllipsoid.pyx"
        case  3:

#line 78 "pyEllipsoid.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;

#line 78 "pyEllipsoid.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("getAngs", 0, 4, 5, 3); 
#line 78 "pyEllipsoid.pyx"
__PYX_ERR(0, 78, __pyx_L3_error)

#line 78 "pyEllipsoid.pyx"
        }

#line 78 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 78 "pyEllipsoid.pyx"
        case  4:

#line 78 "pyEllipsoid.pyx"
        if (kw_args > 0) {

#line 78 "pyEllipsoid.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_e);

#line 78 "pyEllipsoid.pyx"
          if (value) { values[4] = value; kw_args--; }

#line 78 "pyEllipsoid.pyx"
        }

#line 78 "pyEllipsoid.pyx"
      }

#line 78 "pyEllipsoid.pyx"
      if (unlikely(kw_args > 0)) {

#line 78 "pyEllipsoid.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getAngs") < 0)) __PYX_ERR(0, 78, __pyx_L3_error)

#line 78 "pyEllipsoid.pyx"
      }

#line 78 "pyEllipsoid.pyx"
    } else {

#line 78 "pyEllipsoid.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: 
#line 78 "pyEllipsoid.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 78 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 78 "pyEllipsoid.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 78 "pyEllipsoid.pyx"
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 78 "pyEllipsoid.pyx"
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 78 "pyEllipsoid.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 78 "pyEllipsoid.pyx"
        break;
        default: 
#line 78 "pyEllipsoid.pyx"
goto __pyx_L5_argtuple_error;

#line 78 "pyEllipsoid.pyx"
      }

#line 78 "pyEllipsoid.pyx"
    }

#line 78 "pyEllipsoid.pyx"
    __pyx_v_a = ((PyObject*)values[0]);

#line 78 "pyEllipsoid.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 78 "pyEllipsoid.pyx"
    __pyx_v_c = ((PyObject*)values[2]);

#line 78 "pyEllipsoid.pyx"
    __pyx_v_d = values[3];

#line 78 "pyEllipsoid.pyx"
    __pyx_v_e = values[4];

#line 78 "pyEllipsoid.pyx"
  }

#line 78 "pyEllipsoid.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 78 "pyEllipsoid.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getAngs", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); 
#line 78 "pyEllipsoid.pyx"
__PYX_ERR(0, 78, __pyx_L3_error)

#line 78 "pyEllipsoid.pyx"
  __pyx_L3_error:;

#line 78 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.getAngs", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 78 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 78 "pyEllipsoid.pyx"
  return NULL;

#line 78 "pyEllipsoid.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 78 "pyEllipsoid.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), (&PyList_Type), 1, "a", 1))) __PYX_ERR(0, 78, __pyx_L1_error)

#line 78 "pyEllipsoid.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(0, 78, __pyx_L1_error)

#line 78 "pyEllipsoid.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), (&PyList_Type), 1, "c", 1))) __PYX_ERR(0, 78, __pyx_L1_error)
  __pyx_r = 
#line 78 "pyEllipsoid.pyx"
__pyx_pf_8iscecore_11pyEllipsoid_18getAngs(((struct __pyx_obj_8iscecore_pyEllipsoid *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c, __pyx_v_d, __pyx_v_e);

#line 78 "pyEllipsoid.pyx"


#line 78 "pyEllipsoid.pyx"
  /* function exit code */

#line 78 "pyEllipsoid.pyx"
  goto __pyx_L0;

#line 78 "pyEllipsoid.pyx"
  __pyx_L1_error:;

#line 78 "pyEllipsoid.pyx"
  __pyx_r = NULL;

#line 78 "pyEllipsoid.pyx"
  __pyx_L0:;

#line 78 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 78 "pyEllipsoid.pyx"
  return __pyx_r;

#line 78 "pyEllipsoid.pyx"
}

#line 78 "pyEllipsoid.pyx"


#line 78 "pyEllipsoid.pyx"
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_18getAngs(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  std::vector<double>  __pyx_v__a
#line 78 "pyEllipsoid.pyx"
;
  std::vector<double>  __pyx_v__b
#line 78 "pyEllipsoid.pyx"
;
  std::vector<double>  __pyx_v__c
#line 78 "pyEllipsoid.pyx"
;
  double __pyx_v__d
#line 78 "pyEllipsoid.pyx"
;
  double __pyx_v__e
#line 78 "pyEllipsoid.pyx"
;
  long __pyx_v_i
#line 78 "pyEllipsoid.pyx"
;

#line 78 "pyEllipsoid.pyx"
  PyObject *__pyx_r = NULL;

#line 78 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 78 "pyEllipsoid.pyx"
  int __pyx_t_1;

#line 78 "pyEllipsoid.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 78 "pyEllipsoid.pyx"
  long __pyx_t_3;

#line 78 "pyEllipsoid.pyx"
  double __pyx_t_4;

#line 78 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("getAngs", 0);

  /* "pyEllipsoid.pyx":84
 *         cdef double _d
 *         cdef double _e
 *         if (e):             # <<<<<<<<<<<<<<
 *             print("Error: Python cannot pass primitives by reference.")
 *             print("To call this function, please pass the function an empty tuple as the fourth")
 */

#line 84 "pyEllipsoid.pyx"
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_e); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 84, __pyx_L1_error)

#line 84 "pyEllipsoid.pyx"
  if (__pyx_t_1) {

    /* "pyEllipsoid.pyx":85
 *         cdef double _e
 *         if (e):
 *             print("Error: Python cannot pass primitives by reference.")             # <<<<<<<<<<<<<<
 *             print("To call this function, please pass the function an empty tuple as the fourth")
 *             print("argument (no fifth argument). The first element of the list will be the azimuth")
 */

#line 85 "pyEllipsoid.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 85, __pyx_L1_error)

#line 85 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 85 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyEllipsoid.pyx":86
 *         if (e):
 *             print("Error: Python cannot pass primitives by reference.")
 *             print("To call this function, please pass the function an empty tuple as the fourth")             # <<<<<<<<<<<<<<
 *             print("argument (no fifth argument). The first element of the list will be the azimuth")
 *             print("angle, the second element will be the look angle.")
 */

#line 86 "pyEllipsoid.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 86, __pyx_L1_error)

#line 86 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 86 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyEllipsoid.pyx":87
 *             print("Error: Python cannot pass primitives by reference.")
 *             print("To call this function, please pass the function an empty tuple as the fourth")
 *             print("argument (no fifth argument). The first element of the list will be the azimuth")             # <<<<<<<<<<<<<<
 *             print("angle, the second element will be the look angle.")
 *             return
 */

#line 87 "pyEllipsoid.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)

#line 87 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 87 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyEllipsoid.pyx":88
 *             print("To call this function, please pass the function an empty tuple as the fourth")
 *             print("argument (no fifth argument). The first element of the list will be the azimuth")
 *             print("angle, the second element will be the look angle.")             # <<<<<<<<<<<<<<
 *             return
 *         else:
 */

#line 88 "pyEllipsoid.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)

#line 88 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 88 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyEllipsoid.pyx":89
 *             print("argument (no fifth argument). The first element of the list will be the azimuth")
 *             print("angle, the second element will be the look angle.")
 *             return             # <<<<<<<<<<<<<<
 *         else:
 *             _d = 0.
 */

#line 89 "pyEllipsoid.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 89 "pyEllipsoid.pyx"
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 89 "pyEllipsoid.pyx"
    goto __pyx_L0;

    /* "pyEllipsoid.pyx":84
 *         cdef double _d
 *         cdef double _e
 *         if (e):             # <<<<<<<<<<<<<<
 *             print("Error: Python cannot pass primitives by reference.")
 *             print("To call this function, please pass the function an empty tuple as the fourth")
 */

#line 84 "pyEllipsoid.pyx"
  }

  /* "pyEllipsoid.pyx":91
 *             return
 *         else:
 *             _d = 0.             # <<<<<<<<<<<<<<
 *             _e = 0.
 *             for i in range(3):
 */

#line 91 "pyEllipsoid.pyx"
  /*else*/ {

#line 91 "pyEllipsoid.pyx"
    __pyx_v__d = 0.;

    /* "pyEllipsoid.pyx":92
 *         else:
 *             _d = 0.
 *             _e = 0.             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 _a.push_back(a[i])
 */

#line 92 "pyEllipsoid.pyx"
    __pyx_v__e = 0.;

    /* "pyEllipsoid.pyx":93
 *             _d = 0.
 *             _e = 0.
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 _a.push_back(a[i])
 *                 _b.push_back(b[i])
 */

#line 93 "pyEllipsoid.pyx"
    for (__pyx_t_3 = 0; __pyx_t_3 < 3; __pyx_t_3+=1) {

#line 93 "pyEllipsoid.pyx"
      __pyx_v_i = __pyx_t_3;

      /* "pyEllipsoid.pyx":94
 *             _e = 0.
 *             for i in range(3):
 *                 _a.push_back(a[i])             # <<<<<<<<<<<<<<
 *                 _b.push_back(b[i])
 *                 _c.push_back(c[i])
 */

#line 94 "pyEllipsoid.pyx"
      if (unlikely(__pyx_v_a == Py_None)) {

#line 94 "pyEllipsoid.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 94 "pyEllipsoid.pyx"
        __PYX_ERR(0, 94, __pyx_L1_error)

#line 94 "pyEllipsoid.pyx"
      }

#line 94 "pyEllipsoid.pyx"
      __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)

#line 94 "pyEllipsoid.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 94 "pyEllipsoid.pyx"
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 94, __pyx_L1_error)

#line 94 "pyEllipsoid.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 94 "pyEllipsoid.pyx"
      try {

#line 94 "pyEllipsoid.pyx"
        __pyx_v__a.push_back(__pyx_t_4);

#line 94 "pyEllipsoid.pyx"
      } catch(...) {

#line 94 "pyEllipsoid.pyx"
        __Pyx_CppExn2PyErr();

#line 94 "pyEllipsoid.pyx"
        __PYX_ERR(0, 94, __pyx_L1_error)

#line 94 "pyEllipsoid.pyx"
      }

      /* "pyEllipsoid.pyx":95
 *             for i in range(3):
 *                 _a.push_back(a[i])
 *                 _b.push_back(b[i])             # <<<<<<<<<<<<<<
 *                 _c.push_back(c[i])
 *             self.c_ellipsoid.getAngs(_a,_b,_c,_d,_e)
 */

#line 95 "pyEllipsoid.pyx"
      if (unlikely(__pyx_v_b == Py_None)) {

#line 95 "pyEllipsoid.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 95 "pyEllipsoid.pyx"
        __PYX_ERR(0, 95, __pyx_L1_error)

#line 95 "pyEllipsoid.pyx"
      }

#line 95 "pyEllipsoid.pyx"
      __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)

#line 95 "pyEllipsoid.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 95 "pyEllipsoid.pyx"
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L1_error)

#line 95 "pyEllipsoid.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 95 "pyEllipsoid.pyx"
      try {

#line 95 "pyEllipsoid.pyx"
        __pyx_v__b.push_back(__pyx_t_4);

#line 95 "pyEllipsoid.pyx"
      } catch(...) {

#line 95 "pyEllipsoid.pyx"
        __Pyx_CppExn2PyErr();

#line 95 "pyEllipsoid.pyx"
        __PYX_ERR(0, 95, __pyx_L1_error)

#line 95 "pyEllipsoid.pyx"
      }

      /* "pyEllipsoid.pyx":96
 *                 _a.push_back(a[i])
 *                 _b.push_back(b[i])
 *                 _c.push_back(c[i])             # <<<<<<<<<<<<<<
 *             self.c_ellipsoid.getAngs(_a,_b,_c,_d,_e)
 *             for i in range(3):
 */

#line 96 "pyEllipsoid.pyx"
      if (unlikely(__pyx_v_c == Py_None)) {

#line 96 "pyEllipsoid.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 96 "pyEllipsoid.pyx"
        __PYX_ERR(0, 96, __pyx_L1_error)

#line 96 "pyEllipsoid.pyx"
      }

#line 96 "pyEllipsoid.pyx"
      __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)

#line 96 "pyEllipsoid.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 96 "pyEllipsoid.pyx"
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 96, __pyx_L1_error)

#line 96 "pyEllipsoid.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 96 "pyEllipsoid.pyx"
      try {

#line 96 "pyEllipsoid.pyx"
        __pyx_v__c.push_back(__pyx_t_4);

#line 96 "pyEllipsoid.pyx"
      } catch(...) {

#line 96 "pyEllipsoid.pyx"
        __Pyx_CppExn2PyErr();

#line 96 "pyEllipsoid.pyx"
        __PYX_ERR(0, 96, __pyx_L1_error)

#line 96 "pyEllipsoid.pyx"
      }

#line 96 "pyEllipsoid.pyx"
    }

    /* "pyEllipsoid.pyx":97
 *                 _b.push_back(b[i])
 *                 _c.push_back(c[i])
 *             self.c_ellipsoid.getAngs(_a,_b,_c,_d,_e)             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 a[i] = _a[i]
 */

#line 97 "pyEllipsoid.pyx"
    __pyx_v_self->c_ellipsoid->getAngs(__pyx_v__a, __pyx_v__b, __pyx_v__c, __pyx_v__d, __pyx_v__e);

    /* "pyEllipsoid.pyx":98
 *                 _c.push_back(c[i])
 *             self.c_ellipsoid.getAngs(_a,_b,_c,_d,_e)
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 a[i] = _a[i]
 *                 b[i] = _b[i]
 */

#line 98 "pyEllipsoid.pyx"
    for (__pyx_t_3 = 0; __pyx_t_3 < 3; __pyx_t_3+=1) {

#line 98 "pyEllipsoid.pyx"
      __pyx_v_i = __pyx_t_3;

      /* "pyEllipsoid.pyx":99
 *             self.c_ellipsoid.getAngs(_a,_b,_c,_d,_e)
 *             for i in range(3):
 *                 a[i] = _a[i]             # <<<<<<<<<<<<<<
 *                 b[i] = _b[i]
 *                 c[i] = _c[i]
 */

#line 99 "pyEllipsoid.pyx"
      __pyx_t_2 = PyFloat_FromDouble((__pyx_v__a[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)

#line 99 "pyEllipsoid.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 99 "pyEllipsoid.pyx"
      if (unlikely(__pyx_v_a == Py_None)) {

#line 99 "pyEllipsoid.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 99 "pyEllipsoid.pyx"
        __PYX_ERR(0, 99, __pyx_L1_error)

#line 99 "pyEllipsoid.pyx"
      }

#line 99 "pyEllipsoid.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_v_a, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(0, 99, __pyx_L1_error)

#line 99 "pyEllipsoid.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyEllipsoid.pyx":100
 *             for i in range(3):
 *                 a[i] = _a[i]
 *                 b[i] = _b[i]             # <<<<<<<<<<<<<<
 *                 c[i] = _c[i]
 *             d[0] = _d
 */

#line 100 "pyEllipsoid.pyx"
      __pyx_t_2 = PyFloat_FromDouble((__pyx_v__b[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)

#line 100 "pyEllipsoid.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 100 "pyEllipsoid.pyx"
      if (unlikely(__pyx_v_b == Py_None)) {

#line 100 "pyEllipsoid.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 100 "pyEllipsoid.pyx"
        __PYX_ERR(0, 100, __pyx_L1_error)

#line 100 "pyEllipsoid.pyx"
      }

#line 100 "pyEllipsoid.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_v_b, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(0, 100, __pyx_L1_error)

#line 100 "pyEllipsoid.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyEllipsoid.pyx":101
 *                 a[i] = _a[i]
 *                 b[i] = _b[i]
 *                 c[i] = _c[i]             # <<<<<<<<<<<<<<
 *             d[0] = _d
 *             d[1] = _e
 */

#line 101 "pyEllipsoid.pyx"
      __pyx_t_2 = PyFloat_FromDouble((__pyx_v__c[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)

#line 101 "pyEllipsoid.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 101 "pyEllipsoid.pyx"
      if (unlikely(__pyx_v_c == Py_None)) {

#line 101 "pyEllipsoid.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 101 "pyEllipsoid.pyx"
        __PYX_ERR(0, 101, __pyx_L1_error)

#line 101 "pyEllipsoid.pyx"
      }

#line 101 "pyEllipsoid.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_v_c, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(0, 101, __pyx_L1_error)

#line 101 "pyEllipsoid.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 101 "pyEllipsoid.pyx"
    }

    /* "pyEllipsoid.pyx":102
 *                 b[i] = _b[i]
 *                 c[i] = _c[i]
 *             d[0] = _d             # <<<<<<<<<<<<<<
 *             d[1] = _e
 *     def getTCN_TCvec(self, list a, list b, list c, list d):
 */

#line 102 "pyEllipsoid.pyx"
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v__d); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)

#line 102 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 102 "pyEllipsoid.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_d, 0, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 102, __pyx_L1_error)

#line 102 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyEllipsoid.pyx":103
 *                 c[i] = _c[i]
 *             d[0] = _d
 *             d[1] = _e             # <<<<<<<<<<<<<<
 *     def getTCN_TCvec(self, list a, list b, list c, list d):
 *         cdef vector[double] _a
 */

#line 103 "pyEllipsoid.pyx"
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v__e); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L1_error)

#line 103 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 103 "pyEllipsoid.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_d, 1, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(0, 103, __pyx_L1_error)

#line 103 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 103 "pyEllipsoid.pyx"
  }

  /* "pyEllipsoid.pyx":78
 *             a[i] = _a[i]
 *             b[i] = _b[i]
 *     def getAngs(self, list a, list b, list c, d, e=None):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 78 "pyEllipsoid.pyx"


#line 78 "pyEllipsoid.pyx"
  /* function exit code */

#line 78 "pyEllipsoid.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 78 "pyEllipsoid.pyx"
  goto __pyx_L0;

#line 78 "pyEllipsoid.pyx"
  __pyx_L1_error:;

#line 78 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 78 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.getAngs", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 78 "pyEllipsoid.pyx"
  __pyx_r = NULL;

#line 78 "pyEllipsoid.pyx"
  __pyx_L0:;

#line 78 "pyEllipsoid.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 78 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 78 "pyEllipsoid.pyx"
  return __pyx_r;

#line 78 "pyEllipsoid.pyx"
}

/* "pyEllipsoid.pyx":104
 *             d[0] = _d
 *             d[1] = _e
 *     def getTCN_TCvec(self, list a, list b, list c, list d):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 104 "pyEllipsoid.pyx"


#line 104 "pyEllipsoid.pyx"
/* Python wrapper */

#line 104 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_21getTCN_TCvec(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 104 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_21getTCN_TCvec(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0
#line 104 "pyEllipsoid.pyx"
;
  PyObject *__pyx_v_b = 0
#line 104 "pyEllipsoid.pyx"
;
  PyObject *__pyx_v_c = 0
#line 104 "pyEllipsoid.pyx"
;
  PyObject *__pyx_v_d = 0
#line 104 "pyEllipsoid.pyx"
;

#line 104 "pyEllipsoid.pyx"
  PyObject *__pyx_r = 0;

#line 104 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 104 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("getTCN_TCvec (wrapper)", 0);

#line 104 "pyEllipsoid.pyx"
  {

#line 104 "pyEllipsoid.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,&__pyx_n_s_d,0};

#line 104 "pyEllipsoid.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 104 "pyEllipsoid.pyx"
    if (unlikely(__pyx_kwds)) {

#line 104 "pyEllipsoid.pyx"
      Py_ssize_t kw_args;

#line 104 "pyEllipsoid.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 104 "pyEllipsoid.pyx"
      switch (pos_args) {
        case  4: 
#line 104 "pyEllipsoid.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 104 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 104 "pyEllipsoid.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 104 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 104 "pyEllipsoid.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 104 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 104 "pyEllipsoid.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 104 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 104 "pyEllipsoid.pyx"
        case  0: break;
        default: 
#line 104 "pyEllipsoid.pyx"
goto __pyx_L5_argtuple_error;

#line 104 "pyEllipsoid.pyx"
      }

#line 104 "pyEllipsoid.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 104 "pyEllipsoid.pyx"
      switch (pos_args) {

#line 104 "pyEllipsoid.pyx"
        case  0:

#line 104 "pyEllipsoid.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 104 "pyEllipsoid.pyx"
goto __pyx_L5_argtuple_error;

#line 104 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 104 "pyEllipsoid.pyx"
        case  1:

#line 104 "pyEllipsoid.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 104 "pyEllipsoid.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("getTCN_TCvec", 1, 4, 4, 1); 
#line 104 "pyEllipsoid.pyx"
__PYX_ERR(0, 104, __pyx_L3_error)

#line 104 "pyEllipsoid.pyx"
        }

#line 104 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 104 "pyEllipsoid.pyx"
        case  2:

#line 104 "pyEllipsoid.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 104 "pyEllipsoid.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("getTCN_TCvec", 1, 4, 4, 2); 
#line 104 "pyEllipsoid.pyx"
__PYX_ERR(0, 104, __pyx_L3_error)

#line 104 "pyEllipsoid.pyx"
        }

#line 104 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 104 "pyEllipsoid.pyx"
        case  3:

#line 104 "pyEllipsoid.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;

#line 104 "pyEllipsoid.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("getTCN_TCvec", 1, 4, 4, 3); 
#line 104 "pyEllipsoid.pyx"
__PYX_ERR(0, 104, __pyx_L3_error)

#line 104 "pyEllipsoid.pyx"
        }

#line 104 "pyEllipsoid.pyx"
      }

#line 104 "pyEllipsoid.pyx"
      if (unlikely(kw_args > 0)) {

#line 104 "pyEllipsoid.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getTCN_TCvec") < 0)) __PYX_ERR(0, 104, __pyx_L3_error)

#line 104 "pyEllipsoid.pyx"
      }

#line 104 "pyEllipsoid.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 104 "pyEllipsoid.pyx"
      goto __pyx_L5_argtuple_error;

#line 104 "pyEllipsoid.pyx"
    } else {

#line 104 "pyEllipsoid.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 104 "pyEllipsoid.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 104 "pyEllipsoid.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 104 "pyEllipsoid.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 104 "pyEllipsoid.pyx"
    }

#line 104 "pyEllipsoid.pyx"
    __pyx_v_a = ((PyObject*)values[0]);

#line 104 "pyEllipsoid.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 104 "pyEllipsoid.pyx"
    __pyx_v_c = ((PyObject*)values[2]);

#line 104 "pyEllipsoid.pyx"
    __pyx_v_d = ((PyObject*)values[3]);

#line 104 "pyEllipsoid.pyx"
  }

#line 104 "pyEllipsoid.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 104 "pyEllipsoid.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getTCN_TCvec", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 104 "pyEllipsoid.pyx"
__PYX_ERR(0, 104, __pyx_L3_error)

#line 104 "pyEllipsoid.pyx"
  __pyx_L3_error:;

#line 104 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.getTCN_TCvec", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 104 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 104 "pyEllipsoid.pyx"
  return NULL;

#line 104 "pyEllipsoid.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 104 "pyEllipsoid.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), (&PyList_Type), 1, "a", 1))) __PYX_ERR(0, 104, __pyx_L1_error)

#line 104 "pyEllipsoid.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(0, 104, __pyx_L1_error)

#line 104 "pyEllipsoid.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), (&PyList_Type), 1, "c", 1))) __PYX_ERR(0, 104, __pyx_L1_error)

#line 104 "pyEllipsoid.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_d), (&PyList_Type), 1, "d", 1))) __PYX_ERR(0, 104, __pyx_L1_error)
  __pyx_r = 
#line 104 "pyEllipsoid.pyx"
__pyx_pf_8iscecore_11pyEllipsoid_20getTCN_TCvec(((struct __pyx_obj_8iscecore_pyEllipsoid *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c, __pyx_v_d);

#line 104 "pyEllipsoid.pyx"


#line 104 "pyEllipsoid.pyx"
  /* function exit code */

#line 104 "pyEllipsoid.pyx"
  goto __pyx_L0;

#line 104 "pyEllipsoid.pyx"
  __pyx_L1_error:;

#line 104 "pyEllipsoid.pyx"
  __pyx_r = NULL;

#line 104 "pyEllipsoid.pyx"
  __pyx_L0:;

#line 104 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 104 "pyEllipsoid.pyx"
  return __pyx_r;

#line 104 "pyEllipsoid.pyx"
}

#line 104 "pyEllipsoid.pyx"


#line 104 "pyEllipsoid.pyx"
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_20getTCN_TCvec(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  std::vector<double>  __pyx_v__a
#line 104 "pyEllipsoid.pyx"
;
  std::vector<double>  __pyx_v__b
#line 104 "pyEllipsoid.pyx"
;
  std::vector<double>  __pyx_v__c
#line 104 "pyEllipsoid.pyx"
;
  std::vector<double>  __pyx_v__d
#line 104 "pyEllipsoid.pyx"
;
  long __pyx_v_i
#line 104 "pyEllipsoid.pyx"
;

#line 104 "pyEllipsoid.pyx"
  PyObject *__pyx_r = NULL;

#line 104 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 104 "pyEllipsoid.pyx"
  long __pyx_t_1;

#line 104 "pyEllipsoid.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 104 "pyEllipsoid.pyx"
  double __pyx_t_3;

#line 104 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("getTCN_TCvec", 0);

  /* "pyEllipsoid.pyx":109
 *         cdef vector[double] _c
 *         cdef vector[double] _d
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])
 */

#line 109 "pyEllipsoid.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 109 "pyEllipsoid.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyEllipsoid.pyx":110
 *         cdef vector[double] _d
 *         for i in range(3):
 *             _a.push_back(a[i])             # <<<<<<<<<<<<<<
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 */

#line 110 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_a == Py_None)) {

#line 110 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 110 "pyEllipsoid.pyx"
      __PYX_ERR(0, 110, __pyx_L1_error)

#line 110 "pyEllipsoid.pyx"
    }

#line 110 "pyEllipsoid.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 110, __pyx_L1_error)

#line 110 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 110 "pyEllipsoid.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 110, __pyx_L1_error)

#line 110 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 110 "pyEllipsoid.pyx"
    try {

#line 110 "pyEllipsoid.pyx"
      __pyx_v__a.push_back(__pyx_t_3);

#line 110 "pyEllipsoid.pyx"
    } catch(...) {

#line 110 "pyEllipsoid.pyx"
      __Pyx_CppExn2PyErr();

#line 110 "pyEllipsoid.pyx"
      __PYX_ERR(0, 110, __pyx_L1_error)

#line 110 "pyEllipsoid.pyx"
    }

    /* "pyEllipsoid.pyx":111
 *         for i in range(3):
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])             # <<<<<<<<<<<<<<
 *             _c.push_back(c[i])
 *             _d.push_back(d[i])
 */

#line 111 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 111 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 111 "pyEllipsoid.pyx"
      __PYX_ERR(0, 111, __pyx_L1_error)

#line 111 "pyEllipsoid.pyx"
    }

#line 111 "pyEllipsoid.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)

#line 111 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 111 "pyEllipsoid.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L1_error)

#line 111 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 111 "pyEllipsoid.pyx"
    try {

#line 111 "pyEllipsoid.pyx"
      __pyx_v__b.push_back(__pyx_t_3);

#line 111 "pyEllipsoid.pyx"
    } catch(...) {

#line 111 "pyEllipsoid.pyx"
      __Pyx_CppExn2PyErr();

#line 111 "pyEllipsoid.pyx"
      __PYX_ERR(0, 111, __pyx_L1_error)

#line 111 "pyEllipsoid.pyx"
    }

    /* "pyEllipsoid.pyx":112
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])             # <<<<<<<<<<<<<<
 *             _d.push_back(d[i])
 *         self.c_ellipsoid.getTCN_TCvec(_a,_b,_c,_d)
 */

#line 112 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 112 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 112 "pyEllipsoid.pyx"
      __PYX_ERR(0, 112, __pyx_L1_error)

#line 112 "pyEllipsoid.pyx"
    }

#line 112 "pyEllipsoid.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)

#line 112 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 112 "pyEllipsoid.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 112, __pyx_L1_error)

#line 112 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 112 "pyEllipsoid.pyx"
    try {

#line 112 "pyEllipsoid.pyx"
      __pyx_v__c.push_back(__pyx_t_3);

#line 112 "pyEllipsoid.pyx"
    } catch(...) {

#line 112 "pyEllipsoid.pyx"
      __Pyx_CppExn2PyErr();

#line 112 "pyEllipsoid.pyx"
      __PYX_ERR(0, 112, __pyx_L1_error)

#line 112 "pyEllipsoid.pyx"
    }

    /* "pyEllipsoid.pyx":113
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 *             _d.push_back(d[i])             # <<<<<<<<<<<<<<
 *         self.c_ellipsoid.getTCN_TCvec(_a,_b,_c,_d)
 *         for i in range(3):
 */

#line 113 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_d == Py_None)) {

#line 113 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 113 "pyEllipsoid.pyx"
      __PYX_ERR(0, 113, __pyx_L1_error)

#line 113 "pyEllipsoid.pyx"
    }

#line 113 "pyEllipsoid.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_d, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 113, __pyx_L1_error)

#line 113 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 113 "pyEllipsoid.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 113, __pyx_L1_error)

#line 113 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 113 "pyEllipsoid.pyx"
    try {

#line 113 "pyEllipsoid.pyx"
      __pyx_v__d.push_back(__pyx_t_3);

#line 113 "pyEllipsoid.pyx"
    } catch(...) {

#line 113 "pyEllipsoid.pyx"
      __Pyx_CppExn2PyErr();

#line 113 "pyEllipsoid.pyx"
      __PYX_ERR(0, 113, __pyx_L1_error)

#line 113 "pyEllipsoid.pyx"
    }

#line 113 "pyEllipsoid.pyx"
  }

  /* "pyEllipsoid.pyx":114
 *             _c.push_back(c[i])
 *             _d.push_back(d[i])
 *         self.c_ellipsoid.getTCN_TCvec(_a,_b,_c,_d)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             a[i] = _a[i]
 */

#line 114 "pyEllipsoid.pyx"
  __pyx_v_self->c_ellipsoid->getTCN_TCvec(__pyx_v__a, __pyx_v__b, __pyx_v__c, __pyx_v__d);

  /* "pyEllipsoid.pyx":115
 *             _d.push_back(d[i])
 *         self.c_ellipsoid.getTCN_TCvec(_a,_b,_c,_d)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             a[i] = _a[i]
 *             b[i] = _b[i]
 */

#line 115 "pyEllipsoid.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 115 "pyEllipsoid.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyEllipsoid.pyx":116
 *         self.c_ellipsoid.getTCN_TCvec(_a,_b,_c,_d)
 *         for i in range(3):
 *             a[i] = _a[i]             # <<<<<<<<<<<<<<
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 */

#line 116 "pyEllipsoid.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__a[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)

#line 116 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 116 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_a == Py_None)) {

#line 116 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 116 "pyEllipsoid.pyx"
      __PYX_ERR(0, 116, __pyx_L1_error)

#line 116 "pyEllipsoid.pyx"
    }

#line 116 "pyEllipsoid.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_a, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(0, 116, __pyx_L1_error)

#line 116 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyEllipsoid.pyx":117
 *         for i in range(3):
 *             a[i] = _a[i]
 *             b[i] = _b[i]             # <<<<<<<<<<<<<<
 *             c[i] = _c[i]
 *             d[i] = _d[i]
 */

#line 117 "pyEllipsoid.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__b[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)

#line 117 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 117 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 117 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 117 "pyEllipsoid.pyx"
      __PYX_ERR(0, 117, __pyx_L1_error)

#line 117 "pyEllipsoid.pyx"
    }

#line 117 "pyEllipsoid.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_b, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(0, 117, __pyx_L1_error)

#line 117 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyEllipsoid.pyx":118
 *             a[i] = _a[i]
 *             b[i] = _b[i]
 *             c[i] = _c[i]             # <<<<<<<<<<<<<<
 *             d[i] = _d[i]
 *     def TCNbasis(self, list a, list b, list c, list d, list e):
 */

#line 118 "pyEllipsoid.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__c[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 118, __pyx_L1_error)

#line 118 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 118 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 118 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 118 "pyEllipsoid.pyx"
      __PYX_ERR(0, 118, __pyx_L1_error)

#line 118 "pyEllipsoid.pyx"
    }

#line 118 "pyEllipsoid.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_c, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(0, 118, __pyx_L1_error)

#line 118 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyEllipsoid.pyx":119
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 *             d[i] = _d[i]             # <<<<<<<<<<<<<<
 *     def TCNbasis(self, list a, list b, list c, list d, list e):
 *         cdef vector[double] _a
 */

#line 119 "pyEllipsoid.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__d[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 119, __pyx_L1_error)

#line 119 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 119 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_d == Py_None)) {

#line 119 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 119 "pyEllipsoid.pyx"
      __PYX_ERR(0, 119, __pyx_L1_error)

#line 119 "pyEllipsoid.pyx"
    }

#line 119 "pyEllipsoid.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_d, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(0, 119, __pyx_L1_error)

#line 119 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 119 "pyEllipsoid.pyx"
  }

  /* "pyEllipsoid.pyx":104
 *             d[0] = _d
 *             d[1] = _e
 *     def getTCN_TCvec(self, list a, list b, list c, list d):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 104 "pyEllipsoid.pyx"


#line 104 "pyEllipsoid.pyx"
  /* function exit code */

#line 104 "pyEllipsoid.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 104 "pyEllipsoid.pyx"
  goto __pyx_L0;

#line 104 "pyEllipsoid.pyx"
  __pyx_L1_error:;

#line 104 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 104 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.getTCN_TCvec", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 104 "pyEllipsoid.pyx"
  __pyx_r = NULL;

#line 104 "pyEllipsoid.pyx"
  __pyx_L0:;

#line 104 "pyEllipsoid.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 104 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 104 "pyEllipsoid.pyx"
  return __pyx_r;

#line 104 "pyEllipsoid.pyx"
}

/* "pyEllipsoid.pyx":120
 *             c[i] = _c[i]
 *             d[i] = _d[i]
 *     def TCNbasis(self, list a, list b, list c, list d, list e):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 120 "pyEllipsoid.pyx"


#line 120 "pyEllipsoid.pyx"
/* Python wrapper */

#line 120 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_23TCNbasis(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 120 "pyEllipsoid.pyx"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_23TCNbasis(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0
#line 120 "pyEllipsoid.pyx"
;
  PyObject *__pyx_v_b = 0
#line 120 "pyEllipsoid.pyx"
;
  PyObject *__pyx_v_c = 0
#line 120 "pyEllipsoid.pyx"
;
  PyObject *__pyx_v_d = 0
#line 120 "pyEllipsoid.pyx"
;
  PyObject *__pyx_v_e = 0
#line 120 "pyEllipsoid.pyx"
;

#line 120 "pyEllipsoid.pyx"
  PyObject *__pyx_r = 0;

#line 120 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 120 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("TCNbasis (wrapper)", 0);

#line 120 "pyEllipsoid.pyx"
  {

#line 120 "pyEllipsoid.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,&__pyx_n_s_d,&__pyx_n_s_e,0};

#line 120 "pyEllipsoid.pyx"
    PyObject* values[5] = {0,0,0,0,0};

#line 120 "pyEllipsoid.pyx"
    if (unlikely(__pyx_kwds)) {

#line 120 "pyEllipsoid.pyx"
      Py_ssize_t kw_args;

#line 120 "pyEllipsoid.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 120 "pyEllipsoid.pyx"
      switch (pos_args) {
        case  5: 
#line 120 "pyEllipsoid.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 120 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 120 "pyEllipsoid.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 120 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 120 "pyEllipsoid.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 120 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 120 "pyEllipsoid.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 120 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 120 "pyEllipsoid.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 120 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 120 "pyEllipsoid.pyx"
        case  0: break;
        default: 
#line 120 "pyEllipsoid.pyx"
goto __pyx_L5_argtuple_error;

#line 120 "pyEllipsoid.pyx"
      }

#line 120 "pyEllipsoid.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 120 "pyEllipsoid.pyx"
      switch (pos_args) {

#line 120 "pyEllipsoid.pyx"
        case  0:

#line 120 "pyEllipsoid.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 120 "pyEllipsoid.pyx"
goto __pyx_L5_argtuple_error;

#line 120 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 120 "pyEllipsoid.pyx"
        case  1:

#line 120 "pyEllipsoid.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 120 "pyEllipsoid.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("TCNbasis", 1, 5, 5, 1); 
#line 120 "pyEllipsoid.pyx"
__PYX_ERR(0, 120, __pyx_L3_error)

#line 120 "pyEllipsoid.pyx"
        }

#line 120 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 120 "pyEllipsoid.pyx"
        case  2:

#line 120 "pyEllipsoid.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 120 "pyEllipsoid.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("TCNbasis", 1, 5, 5, 2); 
#line 120 "pyEllipsoid.pyx"
__PYX_ERR(0, 120, __pyx_L3_error)

#line 120 "pyEllipsoid.pyx"
        }

#line 120 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 120 "pyEllipsoid.pyx"
        case  3:

#line 120 "pyEllipsoid.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;

#line 120 "pyEllipsoid.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("TCNbasis", 1, 5, 5, 3); 
#line 120 "pyEllipsoid.pyx"
__PYX_ERR(0, 120, __pyx_L3_error)

#line 120 "pyEllipsoid.pyx"
        }

#line 120 "pyEllipsoid.pyx"
        CYTHON_FALLTHROUGH;

#line 120 "pyEllipsoid.pyx"
        case  4:

#line 120 "pyEllipsoid.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_e)) != 0)) kw_args--;

#line 120 "pyEllipsoid.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("TCNbasis", 1, 5, 5, 4); 
#line 120 "pyEllipsoid.pyx"
__PYX_ERR(0, 120, __pyx_L3_error)

#line 120 "pyEllipsoid.pyx"
        }

#line 120 "pyEllipsoid.pyx"
      }

#line 120 "pyEllipsoid.pyx"
      if (unlikely(kw_args > 0)) {

#line 120 "pyEllipsoid.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "TCNbasis") < 0)) __PYX_ERR(0, 120, __pyx_L3_error)

#line 120 "pyEllipsoid.pyx"
      }

#line 120 "pyEllipsoid.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {

#line 120 "pyEllipsoid.pyx"
      goto __pyx_L5_argtuple_error;

#line 120 "pyEllipsoid.pyx"
    } else {

#line 120 "pyEllipsoid.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 120 "pyEllipsoid.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 120 "pyEllipsoid.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 120 "pyEllipsoid.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 120 "pyEllipsoid.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 120 "pyEllipsoid.pyx"
    }

#line 120 "pyEllipsoid.pyx"
    __pyx_v_a = ((PyObject*)values[0]);

#line 120 "pyEllipsoid.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 120 "pyEllipsoid.pyx"
    __pyx_v_c = ((PyObject*)values[2]);

#line 120 "pyEllipsoid.pyx"
    __pyx_v_d = ((PyObject*)values[3]);

#line 120 "pyEllipsoid.pyx"
    __pyx_v_e = ((PyObject*)values[4]);

#line 120 "pyEllipsoid.pyx"
  }

#line 120 "pyEllipsoid.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 120 "pyEllipsoid.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("TCNbasis", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); 
#line 120 "pyEllipsoid.pyx"
__PYX_ERR(0, 120, __pyx_L3_error)

#line 120 "pyEllipsoid.pyx"
  __pyx_L3_error:;

#line 120 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.TCNbasis", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 120 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 120 "pyEllipsoid.pyx"
  return NULL;

#line 120 "pyEllipsoid.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 120 "pyEllipsoid.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), (&PyList_Type), 1, "a", 1))) __PYX_ERR(0, 120, __pyx_L1_error)

#line 120 "pyEllipsoid.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(0, 120, __pyx_L1_error)

#line 120 "pyEllipsoid.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), (&PyList_Type), 1, "c", 1))) __PYX_ERR(0, 120, __pyx_L1_error)

#line 120 "pyEllipsoid.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_d), (&PyList_Type), 1, "d", 1))) __PYX_ERR(0, 120, __pyx_L1_error)

#line 120 "pyEllipsoid.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_e), (&PyList_Type), 1, "e", 1))) __PYX_ERR(0, 120, __pyx_L1_error)
  __pyx_r = 
#line 120 "pyEllipsoid.pyx"
__pyx_pf_8iscecore_11pyEllipsoid_22TCNbasis(((struct __pyx_obj_8iscecore_pyEllipsoid *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c, __pyx_v_d, __pyx_v_e);

#line 120 "pyEllipsoid.pyx"


#line 120 "pyEllipsoid.pyx"
  /* function exit code */

#line 120 "pyEllipsoid.pyx"
  goto __pyx_L0;

#line 120 "pyEllipsoid.pyx"
  __pyx_L1_error:;

#line 120 "pyEllipsoid.pyx"
  __pyx_r = NULL;

#line 120 "pyEllipsoid.pyx"
  __pyx_L0:;

#line 120 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 120 "pyEllipsoid.pyx"
  return __pyx_r;

#line 120 "pyEllipsoid.pyx"
}

#line 120 "pyEllipsoid.pyx"


#line 120 "pyEllipsoid.pyx"
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_22TCNbasis(struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  std::vector<double>  __pyx_v__a
#line 120 "pyEllipsoid.pyx"
;
  std::vector<double>  __pyx_v__b
#line 120 "pyEllipsoid.pyx"
;
  std::vector<double>  __pyx_v__c
#line 120 "pyEllipsoid.pyx"
;
  std::vector<double>  __pyx_v__d
#line 120 "pyEllipsoid.pyx"
;
  std::vector<double>  __pyx_v__e
#line 120 "pyEllipsoid.pyx"
;
  long __pyx_v_i
#line 120 "pyEllipsoid.pyx"
;

#line 120 "pyEllipsoid.pyx"
  PyObject *__pyx_r = NULL;

#line 120 "pyEllipsoid.pyx"
  __Pyx_RefNannyDeclarations

#line 120 "pyEllipsoid.pyx"
  long __pyx_t_1;

#line 120 "pyEllipsoid.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 120 "pyEllipsoid.pyx"
  double __pyx_t_3;

#line 120 "pyEllipsoid.pyx"
  __Pyx_RefNannySetupContext("TCNbasis", 0);

  /* "pyEllipsoid.pyx":126
 *         cdef vector[double] _d
 *         cdef vector[double] _e
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])
 */

#line 126 "pyEllipsoid.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 126 "pyEllipsoid.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyEllipsoid.pyx":127
 *         cdef vector[double] _e
 *         for i in range(3):
 *             _a.push_back(a[i])             # <<<<<<<<<<<<<<
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 */

#line 127 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_a == Py_None)) {

#line 127 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 127 "pyEllipsoid.pyx"
      __PYX_ERR(0, 127, __pyx_L1_error)

#line 127 "pyEllipsoid.pyx"
    }

#line 127 "pyEllipsoid.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 127, __pyx_L1_error)

#line 127 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 127 "pyEllipsoid.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 127, __pyx_L1_error)

#line 127 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 127 "pyEllipsoid.pyx"
    try {

#line 127 "pyEllipsoid.pyx"
      __pyx_v__a.push_back(__pyx_t_3);

#line 127 "pyEllipsoid.pyx"
    } catch(...) {

#line 127 "pyEllipsoid.pyx"
      __Pyx_CppExn2PyErr();

#line 127 "pyEllipsoid.pyx"
      __PYX_ERR(0, 127, __pyx_L1_error)

#line 127 "pyEllipsoid.pyx"
    }

    /* "pyEllipsoid.pyx":128
 *         for i in range(3):
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])             # <<<<<<<<<<<<<<
 *             _c.push_back(c[i])
 *             _d.push_back(d[i])
 */

#line 128 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 128 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 128 "pyEllipsoid.pyx"
      __PYX_ERR(0, 128, __pyx_L1_error)

#line 128 "pyEllipsoid.pyx"
    }

#line 128 "pyEllipsoid.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 128, __pyx_L1_error)

#line 128 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 128 "pyEllipsoid.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 128, __pyx_L1_error)

#line 128 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 128 "pyEllipsoid.pyx"
    try {

#line 128 "pyEllipsoid.pyx"
      __pyx_v__b.push_back(__pyx_t_3);

#line 128 "pyEllipsoid.pyx"
    } catch(...) {

#line 128 "pyEllipsoid.pyx"
      __Pyx_CppExn2PyErr();

#line 128 "pyEllipsoid.pyx"
      __PYX_ERR(0, 128, __pyx_L1_error)

#line 128 "pyEllipsoid.pyx"
    }

    /* "pyEllipsoid.pyx":129
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])             # <<<<<<<<<<<<<<
 *             _d.push_back(d[i])
 *             _e.push_back(e[i])
 */

#line 129 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 129 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 129 "pyEllipsoid.pyx"
      __PYX_ERR(0, 129, __pyx_L1_error)

#line 129 "pyEllipsoid.pyx"
    }

#line 129 "pyEllipsoid.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 129, __pyx_L1_error)

#line 129 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 129 "pyEllipsoid.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 129, __pyx_L1_error)

#line 129 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 129 "pyEllipsoid.pyx"
    try {

#line 129 "pyEllipsoid.pyx"
      __pyx_v__c.push_back(__pyx_t_3);

#line 129 "pyEllipsoid.pyx"
    } catch(...) {

#line 129 "pyEllipsoid.pyx"
      __Pyx_CppExn2PyErr();

#line 129 "pyEllipsoid.pyx"
      __PYX_ERR(0, 129, __pyx_L1_error)

#line 129 "pyEllipsoid.pyx"
    }

    /* "pyEllipsoid.pyx":130
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 *             _d.push_back(d[i])             # <<<<<<<<<<<<<<
 *             _e.push_back(e[i])
 *         self.c_ellipsoid.TCNbasis(_a,_b,_c,_d,_e)
 */

#line 130 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_d == Py_None)) {

#line 130 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 130 "pyEllipsoid.pyx"
      __PYX_ERR(0, 130, __pyx_L1_error)

#line 130 "pyEllipsoid.pyx"
    }

#line 130 "pyEllipsoid.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_d, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)

#line 130 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 130 "pyEllipsoid.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 130, __pyx_L1_error)

#line 130 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 130 "pyEllipsoid.pyx"
    try {

#line 130 "pyEllipsoid.pyx"
      __pyx_v__d.push_back(__pyx_t_3);

#line 130 "pyEllipsoid.pyx"
    } catch(...) {

#line 130 "pyEllipsoid.pyx"
      __Pyx_CppExn2PyErr();

#line 130 "pyEllipsoid.pyx"
      __PYX_ERR(0, 130, __pyx_L1_error)

#line 130 "pyEllipsoid.pyx"
    }

    /* "pyEllipsoid.pyx":131
 *             _c.push_back(c[i])
 *             _d.push_back(d[i])
 *             _e.push_back(e[i])             # <<<<<<<<<<<<<<
 *         self.c_ellipsoid.TCNbasis(_a,_b,_c,_d,_e)
 *         for i in range(3):
 */

#line 131 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_e == Py_None)) {

#line 131 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 131 "pyEllipsoid.pyx"
      __PYX_ERR(0, 131, __pyx_L1_error)

#line 131 "pyEllipsoid.pyx"
    }

#line 131 "pyEllipsoid.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_e, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 131, __pyx_L1_error)

#line 131 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 131 "pyEllipsoid.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L1_error)

#line 131 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 131 "pyEllipsoid.pyx"
    try {

#line 131 "pyEllipsoid.pyx"
      __pyx_v__e.push_back(__pyx_t_3);

#line 131 "pyEllipsoid.pyx"
    } catch(...) {

#line 131 "pyEllipsoid.pyx"
      __Pyx_CppExn2PyErr();

#line 131 "pyEllipsoid.pyx"
      __PYX_ERR(0, 131, __pyx_L1_error)

#line 131 "pyEllipsoid.pyx"
    }

#line 131 "pyEllipsoid.pyx"
  }

  /* "pyEllipsoid.pyx":132
 *             _d.push_back(d[i])
 *             _e.push_back(e[i])
 *         self.c_ellipsoid.TCNbasis(_a,_b,_c,_d,_e)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             c[i] = _c[i]
 */

#line 132 "pyEllipsoid.pyx"
  __pyx_v_self->c_ellipsoid->TCNbasis(__pyx_v__a, __pyx_v__b, __pyx_v__c, __pyx_v__d, __pyx_v__e);

  /* "pyEllipsoid.pyx":133
 *             _e.push_back(e[i])
 *         self.c_ellipsoid.TCNbasis(_a,_b,_c,_d,_e)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             c[i] = _c[i]
 *             d[i] = _d[i]
 */

#line 133 "pyEllipsoid.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 133 "pyEllipsoid.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyEllipsoid.pyx":134
 *         self.c_ellipsoid.TCNbasis(_a,_b,_c,_d,_e)
 *         for i in range(3):
 *             c[i] = _c[i]             # <<<<<<<<<<<<<<
 *             d[i] = _d[i]
 *             e[i] = _e[i]
 */

#line 134 "pyEllipsoid.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__c[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)

#line 134 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 134 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 134 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 134 "pyEllipsoid.pyx"
      __PYX_ERR(0, 134, __pyx_L1_error)

#line 134 "pyEllipsoid.pyx"
    }

#line 134 "pyEllipsoid.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_c, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(0, 134, __pyx_L1_error)

#line 134 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyEllipsoid.pyx":135
 *         for i in range(3):
 *             c[i] = _c[i]
 *             d[i] = _d[i]             # <<<<<<<<<<<<<<
 *             e[i] = _e[i]
 * 
 */

#line 135 "pyEllipsoid.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__d[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)

#line 135 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 135 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_d == Py_None)) {

#line 135 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 135 "pyEllipsoid.pyx"
      __PYX_ERR(0, 135, __pyx_L1_error)

#line 135 "pyEllipsoid.pyx"
    }

#line 135 "pyEllipsoid.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_d, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(0, 135, __pyx_L1_error)

#line 135 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyEllipsoid.pyx":136
 *             c[i] = _c[i]
 *             d[i] = _d[i]
 *             e[i] = _e[i]             # <<<<<<<<<<<<<<
 * 
 */

#line 136 "pyEllipsoid.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__e[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)

#line 136 "pyEllipsoid.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 136 "pyEllipsoid.pyx"
    if (unlikely(__pyx_v_e == Py_None)) {

#line 136 "pyEllipsoid.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 136 "pyEllipsoid.pyx"
      __PYX_ERR(0, 136, __pyx_L1_error)

#line 136 "pyEllipsoid.pyx"
    }

#line 136 "pyEllipsoid.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_e, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(0, 136, __pyx_L1_error)

#line 136 "pyEllipsoid.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 136 "pyEllipsoid.pyx"
  }

  /* "pyEllipsoid.pyx":120
 *             c[i] = _c[i]
 *             d[i] = _d[i]
 *     def TCNbasis(self, list a, list b, list c, list d, list e):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 120 "pyEllipsoid.pyx"


#line 120 "pyEllipsoid.pyx"
  /* function exit code */

#line 120 "pyEllipsoid.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 120 "pyEllipsoid.pyx"
  goto __pyx_L0;

#line 120 "pyEllipsoid.pyx"
  __pyx_L1_error:;

#line 120 "pyEllipsoid.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 120 "pyEllipsoid.pyx"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.TCNbasis", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 120 "pyEllipsoid.pyx"
  __pyx_r = NULL;

#line 120 "pyEllipsoid.pyx"
  __pyx_L0:;

#line 120 "pyEllipsoid.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 120 "pyEllipsoid.pyx"
  __Pyx_RefNannyFinishContext();

#line 120 "pyEllipsoid.pyx"
  return __pyx_r;

#line 120 "pyEllipsoid.pyx"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_8iscecore_11pyEllipsoid_24__reduce_cython__(((struct __pyx_obj_8iscecore_pyEllipsoid *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_11pyEllipsoid_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf_8iscecore_11pyEllipsoid_26__setstate_cython__(((struct __pyx_obj_8iscecore_pyEllipsoid *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_11pyEllipsoid_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyEllipsoid.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "pyInterpolator.pyx":16
 *     cdef bool __owner
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.c_interp = new Interpolator()
 *         self.__owner = True
 */

#line 16 "pyInterpolator.pyx"


#line 16 "pyInterpolator.pyx"
/* Python wrapper */

#line 16 "pyInterpolator.pyx"
static int __pyx_pw_8iscecore_14pyInterpolator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 16 "pyInterpolator.pyx"
static int __pyx_pw_8iscecore_14pyInterpolator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 16 "pyInterpolator.pyx"
  int __pyx_r;

#line 16 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 16 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 16 "pyInterpolator.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 16 "pyInterpolator.pyx"
}

#line 16 "pyInterpolator.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = 
#line 16 "pyInterpolator.pyx"
__pyx_pf_8iscecore_14pyInterpolator___cinit__(((struct __pyx_obj_8iscecore_pyInterpolator *)__pyx_v_self));

#line 16 "pyInterpolator.pyx"


#line 16 "pyInterpolator.pyx"
  /* function exit code */

#line 16 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 16 "pyInterpolator.pyx"
  return __pyx_r;

#line 16 "pyInterpolator.pyx"
}

#line 16 "pyInterpolator.pyx"


#line 16 "pyInterpolator.pyx"
static int __pyx_pf_8iscecore_14pyInterpolator___cinit__(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self) {

#line 16 "pyInterpolator.pyx"
  int __pyx_r;

#line 16 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 16 "pyInterpolator.pyx"
  isce::core::Interpolator *__pyx_t_1;

#line 16 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyInterpolator.pyx":17
 * 
 *     def __cinit__(self):
 *         self.c_interp = new Interpolator()             # <<<<<<<<<<<<<<
 *         self.__owner = True
 *     def __dealloc__(self):
 */

#line 17 "pyInterpolator.pyx"
  try {

#line 17 "pyInterpolator.pyx"
    __pyx_t_1 = new isce::core::Interpolator();

#line 17 "pyInterpolator.pyx"
  } catch(...) {

#line 17 "pyInterpolator.pyx"
    __Pyx_CppExn2PyErr();

#line 17 "pyInterpolator.pyx"
    __PYX_ERR(4, 17, __pyx_L1_error)

#line 17 "pyInterpolator.pyx"
  }

#line 17 "pyInterpolator.pyx"
  __pyx_v_self->c_interp = __pyx_t_1;

  /* "pyInterpolator.pyx":18
 *     def __cinit__(self):
 *         self.c_interp = new Interpolator()
 *         self.__owner = True             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.__owner:
 */

#line 18 "pyInterpolator.pyx"
  __pyx_v_self->__pyx___owner = 1;

  /* "pyInterpolator.pyx":16
 *     cdef bool __owner
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.c_interp = new Interpolator()
 *         self.__owner = True
 */

#line 16 "pyInterpolator.pyx"


#line 16 "pyInterpolator.pyx"
  /* function exit code */

#line 16 "pyInterpolator.pyx"
  __pyx_r = 0;

#line 16 "pyInterpolator.pyx"
  goto __pyx_L0;

#line 16 "pyInterpolator.pyx"
  __pyx_L1_error:;

#line 16 "pyInterpolator.pyx"
  __Pyx_AddTraceback("iscecore.pyInterpolator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 16 "pyInterpolator.pyx"
  __pyx_r = -1;

#line 16 "pyInterpolator.pyx"
  __pyx_L0:;

#line 16 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 16 "pyInterpolator.pyx"
  return __pyx_r;

#line 16 "pyInterpolator.pyx"
}

/* "pyInterpolator.pyx":19
 *         self.c_interp = new Interpolator()
 *         self.__owner = True
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_interp
 */

#line 19 "pyInterpolator.pyx"


#line 19 "pyInterpolator.pyx"
/* Python wrapper */

#line 19 "pyInterpolator.pyx"
static void __pyx_pw_8iscecore_14pyInterpolator_3__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 19 "pyInterpolator.pyx"
static void __pyx_pw_8iscecore_14pyInterpolator_3__dealloc__(PyObject *__pyx_v_self) {

#line 19 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 19 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 19 "pyInterpolator.pyx"
  __pyx_pf_8iscecore_14pyInterpolator_2__dealloc__(((struct __pyx_obj_8iscecore_pyInterpolator *)__pyx_v_self));

#line 19 "pyInterpolator.pyx"


#line 19 "pyInterpolator.pyx"
  /* function exit code */

#line 19 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 19 "pyInterpolator.pyx"
}

#line 19 "pyInterpolator.pyx"


#line 19 "pyInterpolator.pyx"
static void __pyx_pf_8iscecore_14pyInterpolator_2__dealloc__(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self) {

#line 19 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 19 "pyInterpolator.pyx"
  int __pyx_t_1;

#line 19 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyInterpolator.pyx":20
 *         self.__owner = True
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_interp
 *     # Note no static binder since we'll never need to pass any particular Interpolator object
 */

#line 20 "pyInterpolator.pyx"
  __pyx_t_1 = (__pyx_v_self->__pyx___owner != 0);

#line 20 "pyInterpolator.pyx"
  if (__pyx_t_1) {

    /* "pyInterpolator.pyx":21
 *     def __dealloc__(self):
 *         if self.__owner:
 *             del self.c_interp             # <<<<<<<<<<<<<<
 *     # Note no static binder since we'll never need to pass any particular Interpolator object
 *     # around...
 */

#line 21 "pyInterpolator.pyx"
    delete __pyx_v_self->c_interp;

    /* "pyInterpolator.pyx":20
 *         self.__owner = True
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_interp
 *     # Note no static binder since we'll never need to pass any particular Interpolator object
 */

#line 20 "pyInterpolator.pyx"
  }

  /* "pyInterpolator.pyx":19
 *         self.c_interp = new Interpolator()
 *         self.__owner = True
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_interp
 */

#line 19 "pyInterpolator.pyx"


#line 19 "pyInterpolator.pyx"
  /* function exit code */

#line 19 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 19 "pyInterpolator.pyx"
}

/* "pyInterpolator.pyx":40
 *             return self.c_interp.bicubic[double](a,b,_c0)
 *     '''
 *     def bilinear(self, double a, double b, c):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] _c = c
 *         return self.c_interp.bilinear[double](a,b,_c)
 */

#line 40 "pyInterpolator.pyx"


#line 40 "pyInterpolator.pyx"
/* Python wrapper */

#line 40 "pyInterpolator.pyx"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_5bilinear(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 40 "pyInterpolator.pyx"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_5bilinear(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a
#line 40 "pyInterpolator.pyx"
;
  double __pyx_v_b
#line 40 "pyInterpolator.pyx"
;
  PyObject *__pyx_v_c = 0
#line 40 "pyInterpolator.pyx"
;

#line 40 "pyInterpolator.pyx"
  PyObject *__pyx_r = 0;

#line 40 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 40 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("bilinear (wrapper)", 0);

#line 40 "pyInterpolator.pyx"
  {

#line 40 "pyInterpolator.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,0};

#line 40 "pyInterpolator.pyx"
    PyObject* values[3] = {0,0,0};

#line 40 "pyInterpolator.pyx"
    if (unlikely(__pyx_kwds)) {

#line 40 "pyInterpolator.pyx"
      Py_ssize_t kw_args;

#line 40 "pyInterpolator.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 40 "pyInterpolator.pyx"
      switch (pos_args) {
        case  3: 
#line 40 "pyInterpolator.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 40 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 40 "pyInterpolator.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 40 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 40 "pyInterpolator.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 40 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 40 "pyInterpolator.pyx"
        case  0: break;
        default: 
#line 40 "pyInterpolator.pyx"
goto __pyx_L5_argtuple_error;

#line 40 "pyInterpolator.pyx"
      }

#line 40 "pyInterpolator.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 40 "pyInterpolator.pyx"
      switch (pos_args) {

#line 40 "pyInterpolator.pyx"
        case  0:

#line 40 "pyInterpolator.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 40 "pyInterpolator.pyx"
goto __pyx_L5_argtuple_error;

#line 40 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 40 "pyInterpolator.pyx"
        case  1:

#line 40 "pyInterpolator.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 40 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("bilinear", 1, 3, 3, 1); 
#line 40 "pyInterpolator.pyx"
__PYX_ERR(4, 40, __pyx_L3_error)

#line 40 "pyInterpolator.pyx"
        }

#line 40 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 40 "pyInterpolator.pyx"
        case  2:

#line 40 "pyInterpolator.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 40 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("bilinear", 1, 3, 3, 2); 
#line 40 "pyInterpolator.pyx"
__PYX_ERR(4, 40, __pyx_L3_error)

#line 40 "pyInterpolator.pyx"
        }

#line 40 "pyInterpolator.pyx"
      }

#line 40 "pyInterpolator.pyx"
      if (unlikely(kw_args > 0)) {

#line 40 "pyInterpolator.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "bilinear") < 0)) __PYX_ERR(4, 40, __pyx_L3_error)

#line 40 "pyInterpolator.pyx"
      }

#line 40 "pyInterpolator.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 40 "pyInterpolator.pyx"
      goto __pyx_L5_argtuple_error;

#line 40 "pyInterpolator.pyx"
    } else {

#line 40 "pyInterpolator.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 40 "pyInterpolator.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 40 "pyInterpolator.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 40 "pyInterpolator.pyx"
    }

#line 40 "pyInterpolator.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 40, __pyx_L3_error)

#line 40 "pyInterpolator.pyx"
    __pyx_v_b = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 40, __pyx_L3_error)

#line 40 "pyInterpolator.pyx"
    __pyx_v_c = values[2];

#line 40 "pyInterpolator.pyx"
  }

#line 40 "pyInterpolator.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 40 "pyInterpolator.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bilinear", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 40 "pyInterpolator.pyx"
__PYX_ERR(4, 40, __pyx_L3_error)

#line 40 "pyInterpolator.pyx"
  __pyx_L3_error:;

#line 40 "pyInterpolator.pyx"
  __Pyx_AddTraceback("iscecore.pyInterpolator.bilinear", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 40 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 40 "pyInterpolator.pyx"
  return NULL;

#line 40 "pyInterpolator.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 40 "pyInterpolator.pyx"
__pyx_pf_8iscecore_14pyInterpolator_4bilinear(((struct __pyx_obj_8iscecore_pyInterpolator *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c);

#line 40 "pyInterpolator.pyx"


#line 40 "pyInterpolator.pyx"
  /* function exit code */

#line 40 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 40 "pyInterpolator.pyx"
  return __pyx_r;

#line 40 "pyInterpolator.pyx"
}

#line 40 "pyInterpolator.pyx"


#line 40 "pyInterpolator.pyx"
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_4bilinear(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self, double __pyx_v_a, double __pyx_v_b, PyObject *__pyx_v_c) {
  std::vector<std::vector<double> >  __pyx_v__c
#line 40 "pyInterpolator.pyx"
;

#line 40 "pyInterpolator.pyx"
  PyObject *__pyx_r = NULL;

#line 40 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 40 "pyInterpolator.pyx"
  std::vector<std::vector<double> >  __pyx_t_1;

#line 40 "pyInterpolator.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 40 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("bilinear", 0);

  /* "pyInterpolator.pyx":41
 *     '''
 *     def bilinear(self, double a, double b, c):
 *         cdef vector[vector[double]] _c = c             # <<<<<<<<<<<<<<
 *         return self.c_interp.bilinear[double](a,b,_c)
 *     def bicubic(self, double a, double b, c):
 */

#line 41 "pyInterpolator.pyx"
  __pyx_t_1 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(__pyx_v_c); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 41, __pyx_L1_error)

#line 41 "pyInterpolator.pyx"
  __pyx_v__c = __pyx_t_1;

  /* "pyInterpolator.pyx":42
 *     def bilinear(self, double a, double b, c):
 *         cdef vector[vector[double]] _c = c
 *         return self.c_interp.bilinear[double](a,b,_c)             # <<<<<<<<<<<<<<
 *     def bicubic(self, double a, double b, c):
 *         cdef vector[vector[double]] _c = c
 */

#line 42 "pyInterpolator.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 42 "pyInterpolator.pyx"
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->c_interp->bilinear<double>(__pyx_v_a, __pyx_v_b, __pyx_v__c)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 42, __pyx_L1_error)

#line 42 "pyInterpolator.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 42 "pyInterpolator.pyx"
  __pyx_r = __pyx_t_2;

#line 42 "pyInterpolator.pyx"
  __pyx_t_2 = 0;

#line 42 "pyInterpolator.pyx"
  goto __pyx_L0;

  /* "pyInterpolator.pyx":40
 *             return self.c_interp.bicubic[double](a,b,_c0)
 *     '''
 *     def bilinear(self, double a, double b, c):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] _c = c
 *         return self.c_interp.bilinear[double](a,b,_c)
 */

#line 40 "pyInterpolator.pyx"


#line 40 "pyInterpolator.pyx"
  /* function exit code */

#line 40 "pyInterpolator.pyx"
  __pyx_L1_error:;

#line 40 "pyInterpolator.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 40 "pyInterpolator.pyx"
  __Pyx_AddTraceback("iscecore.pyInterpolator.bilinear", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 40 "pyInterpolator.pyx"
  __pyx_r = NULL;

#line 40 "pyInterpolator.pyx"
  __pyx_L0:;

#line 40 "pyInterpolator.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 40 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 40 "pyInterpolator.pyx"
  return __pyx_r;

#line 40 "pyInterpolator.pyx"
}

/* "pyInterpolator.pyx":43
 *         cdef vector[vector[double]] _c = c
 *         return self.c_interp.bilinear[double](a,b,_c)
 *     def bicubic(self, double a, double b, c):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] _c = c
 *         return self.c_interp.bicubic[double](a,b,_c)
 */

#line 43 "pyInterpolator.pyx"


#line 43 "pyInterpolator.pyx"
/* Python wrapper */

#line 43 "pyInterpolator.pyx"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_7bicubic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 43 "pyInterpolator.pyx"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_7bicubic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a
#line 43 "pyInterpolator.pyx"
;
  double __pyx_v_b
#line 43 "pyInterpolator.pyx"
;
  PyObject *__pyx_v_c = 0
#line 43 "pyInterpolator.pyx"
;

#line 43 "pyInterpolator.pyx"
  PyObject *__pyx_r = 0;

#line 43 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 43 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("bicubic (wrapper)", 0);

#line 43 "pyInterpolator.pyx"
  {

#line 43 "pyInterpolator.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,0};

#line 43 "pyInterpolator.pyx"
    PyObject* values[3] = {0,0,0};

#line 43 "pyInterpolator.pyx"
    if (unlikely(__pyx_kwds)) {

#line 43 "pyInterpolator.pyx"
      Py_ssize_t kw_args;

#line 43 "pyInterpolator.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 43 "pyInterpolator.pyx"
      switch (pos_args) {
        case  3: 
#line 43 "pyInterpolator.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 43 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 43 "pyInterpolator.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 43 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 43 "pyInterpolator.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 43 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 43 "pyInterpolator.pyx"
        case  0: break;
        default: 
#line 43 "pyInterpolator.pyx"
goto __pyx_L5_argtuple_error;

#line 43 "pyInterpolator.pyx"
      }

#line 43 "pyInterpolator.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 43 "pyInterpolator.pyx"
      switch (pos_args) {

#line 43 "pyInterpolator.pyx"
        case  0:

#line 43 "pyInterpolator.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 43 "pyInterpolator.pyx"
goto __pyx_L5_argtuple_error;

#line 43 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 43 "pyInterpolator.pyx"
        case  1:

#line 43 "pyInterpolator.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 43 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("bicubic", 1, 3, 3, 1); 
#line 43 "pyInterpolator.pyx"
__PYX_ERR(4, 43, __pyx_L3_error)

#line 43 "pyInterpolator.pyx"
        }

#line 43 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 43 "pyInterpolator.pyx"
        case  2:

#line 43 "pyInterpolator.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 43 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("bicubic", 1, 3, 3, 2); 
#line 43 "pyInterpolator.pyx"
__PYX_ERR(4, 43, __pyx_L3_error)

#line 43 "pyInterpolator.pyx"
        }

#line 43 "pyInterpolator.pyx"
      }

#line 43 "pyInterpolator.pyx"
      if (unlikely(kw_args > 0)) {

#line 43 "pyInterpolator.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "bicubic") < 0)) __PYX_ERR(4, 43, __pyx_L3_error)

#line 43 "pyInterpolator.pyx"
      }

#line 43 "pyInterpolator.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 43 "pyInterpolator.pyx"
      goto __pyx_L5_argtuple_error;

#line 43 "pyInterpolator.pyx"
    } else {

#line 43 "pyInterpolator.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 43 "pyInterpolator.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 43 "pyInterpolator.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 43 "pyInterpolator.pyx"
    }

#line 43 "pyInterpolator.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 43, __pyx_L3_error)

#line 43 "pyInterpolator.pyx"
    __pyx_v_b = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 43, __pyx_L3_error)

#line 43 "pyInterpolator.pyx"
    __pyx_v_c = values[2];

#line 43 "pyInterpolator.pyx"
  }

#line 43 "pyInterpolator.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 43 "pyInterpolator.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bicubic", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 43 "pyInterpolator.pyx"
__PYX_ERR(4, 43, __pyx_L3_error)

#line 43 "pyInterpolator.pyx"
  __pyx_L3_error:;

#line 43 "pyInterpolator.pyx"
  __Pyx_AddTraceback("iscecore.pyInterpolator.bicubic", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 43 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 43 "pyInterpolator.pyx"
  return NULL;

#line 43 "pyInterpolator.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 43 "pyInterpolator.pyx"
__pyx_pf_8iscecore_14pyInterpolator_6bicubic(((struct __pyx_obj_8iscecore_pyInterpolator *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c);

#line 43 "pyInterpolator.pyx"


#line 43 "pyInterpolator.pyx"
  /* function exit code */

#line 43 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 43 "pyInterpolator.pyx"
  return __pyx_r;

#line 43 "pyInterpolator.pyx"
}

#line 43 "pyInterpolator.pyx"


#line 43 "pyInterpolator.pyx"
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_6bicubic(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self, double __pyx_v_a, double __pyx_v_b, PyObject *__pyx_v_c) {
  std::vector<std::vector<double> >  __pyx_v__c
#line 43 "pyInterpolator.pyx"
;

#line 43 "pyInterpolator.pyx"
  PyObject *__pyx_r = NULL;

#line 43 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 43 "pyInterpolator.pyx"
  std::vector<std::vector<double> >  __pyx_t_1;

#line 43 "pyInterpolator.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 43 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("bicubic", 0);

  /* "pyInterpolator.pyx":44
 *         return self.c_interp.bilinear[double](a,b,_c)
 *     def bicubic(self, double a, double b, c):
 *         cdef vector[vector[double]] _c = c             # <<<<<<<<<<<<<<
 *         return self.c_interp.bicubic[double](a,b,_c)
 *     def sinc_coef(self, double a, double b, int c, double d, int e, f, g, h=None):
 */

#line 44 "pyInterpolator.pyx"
  __pyx_t_1 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(__pyx_v_c); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 44, __pyx_L1_error)

#line 44 "pyInterpolator.pyx"
  __pyx_v__c = __pyx_t_1;

  /* "pyInterpolator.pyx":45
 *     def bicubic(self, double a, double b, c):
 *         cdef vector[vector[double]] _c = c
 *         return self.c_interp.bicubic[double](a,b,_c)             # <<<<<<<<<<<<<<
 *     def sinc_coef(self, double a, double b, int c, double d, int e, f, g, h=None):
 *         cdef int _f
 */

#line 45 "pyInterpolator.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 45 "pyInterpolator.pyx"
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->c_interp->bicubic<double>(__pyx_v_a, __pyx_v_b, __pyx_v__c)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 45, __pyx_L1_error)

#line 45 "pyInterpolator.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 45 "pyInterpolator.pyx"
  __pyx_r = __pyx_t_2;

#line 45 "pyInterpolator.pyx"
  __pyx_t_2 = 0;

#line 45 "pyInterpolator.pyx"
  goto __pyx_L0;

  /* "pyInterpolator.pyx":43
 *         cdef vector[vector[double]] _c = c
 *         return self.c_interp.bilinear[double](a,b,_c)
 *     def bicubic(self, double a, double b, c):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] _c = c
 *         return self.c_interp.bicubic[double](a,b,_c)
 */

#line 43 "pyInterpolator.pyx"


#line 43 "pyInterpolator.pyx"
  /* function exit code */

#line 43 "pyInterpolator.pyx"
  __pyx_L1_error:;

#line 43 "pyInterpolator.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 43 "pyInterpolator.pyx"
  __Pyx_AddTraceback("iscecore.pyInterpolator.bicubic", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 43 "pyInterpolator.pyx"
  __pyx_r = NULL;

#line 43 "pyInterpolator.pyx"
  __pyx_L0:;

#line 43 "pyInterpolator.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 43 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 43 "pyInterpolator.pyx"
  return __pyx_r;

#line 43 "pyInterpolator.pyx"
}

/* "pyInterpolator.pyx":46
 *         cdef vector[vector[double]] _c = c
 *         return self.c_interp.bicubic[double](a,b,_c)
 *     def sinc_coef(self, double a, double b, int c, double d, int e, f, g, h=None):             # <<<<<<<<<<<<<<
 *         cdef int _f
 *         cdef int _g
 */

#line 46 "pyInterpolator.pyx"


#line 46 "pyInterpolator.pyx"
/* Python wrapper */

#line 46 "pyInterpolator.pyx"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_9sinc_coef(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 46 "pyInterpolator.pyx"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_9sinc_coef(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a
#line 46 "pyInterpolator.pyx"
;
  double __pyx_v_b
#line 46 "pyInterpolator.pyx"
;
  int __pyx_v_c
#line 46 "pyInterpolator.pyx"
;
  double __pyx_v_d
#line 46 "pyInterpolator.pyx"
;
  int __pyx_v_e
#line 46 "pyInterpolator.pyx"
;
  PyObject *__pyx_v_f = 0
#line 46 "pyInterpolator.pyx"
;
  PyObject *__pyx_v_g = 0
#line 46 "pyInterpolator.pyx"
;
  PyObject *__pyx_v_h = 0
#line 46 "pyInterpolator.pyx"
;

#line 46 "pyInterpolator.pyx"
  PyObject *__pyx_r = 0;

#line 46 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 46 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("sinc_coef (wrapper)", 0);

#line 46 "pyInterpolator.pyx"
  {

#line 46 "pyInterpolator.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,&__pyx_n_s_d,&__pyx_n_s_e,&__pyx_n_s_f,&__pyx_n_s_g,&__pyx_n_s_h,0};

#line 46 "pyInterpolator.pyx"
    PyObject* values[8] = {0,0,0,0,0,0,0,0};

#line 46 "pyInterpolator.pyx"
    values[7] = ((PyObject *)Py_None);

#line 46 "pyInterpolator.pyx"
    if (unlikely(__pyx_kwds)) {

#line 46 "pyInterpolator.pyx"
      Py_ssize_t kw_args;

#line 46 "pyInterpolator.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 46 "pyInterpolator.pyx"
      switch (pos_args) {
        case  8: 
#line 46 "pyInterpolator.pyx"
values[7] = PyTuple_GET_ITEM(__pyx_args, 7);

#line 46 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  7: 
#line 46 "pyInterpolator.pyx"
values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

#line 46 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  6: 
#line 46 "pyInterpolator.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 46 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  5: 
#line 46 "pyInterpolator.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 46 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 46 "pyInterpolator.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 46 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 46 "pyInterpolator.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 46 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 46 "pyInterpolator.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 46 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 46 "pyInterpolator.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 46 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 46 "pyInterpolator.pyx"
        case  0: break;
        default: 
#line 46 "pyInterpolator.pyx"
goto __pyx_L5_argtuple_error;

#line 46 "pyInterpolator.pyx"
      }

#line 46 "pyInterpolator.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 46 "pyInterpolator.pyx"
      switch (pos_args) {

#line 46 "pyInterpolator.pyx"
        case  0:

#line 46 "pyInterpolator.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 46 "pyInterpolator.pyx"
goto __pyx_L5_argtuple_error;

#line 46 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 46 "pyInterpolator.pyx"
        case  1:

#line 46 "pyInterpolator.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 46 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_coef", 0, 7, 8, 1); 
#line 46 "pyInterpolator.pyx"
__PYX_ERR(4, 46, __pyx_L3_error)

#line 46 "pyInterpolator.pyx"
        }

#line 46 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 46 "pyInterpolator.pyx"
        case  2:

#line 46 "pyInterpolator.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 46 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_coef", 0, 7, 8, 2); 
#line 46 "pyInterpolator.pyx"
__PYX_ERR(4, 46, __pyx_L3_error)

#line 46 "pyInterpolator.pyx"
        }

#line 46 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 46 "pyInterpolator.pyx"
        case  3:

#line 46 "pyInterpolator.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;

#line 46 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_coef", 0, 7, 8, 3); 
#line 46 "pyInterpolator.pyx"
__PYX_ERR(4, 46, __pyx_L3_error)

#line 46 "pyInterpolator.pyx"
        }

#line 46 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 46 "pyInterpolator.pyx"
        case  4:

#line 46 "pyInterpolator.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_e)) != 0)) kw_args--;

#line 46 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_coef", 0, 7, 8, 4); 
#line 46 "pyInterpolator.pyx"
__PYX_ERR(4, 46, __pyx_L3_error)

#line 46 "pyInterpolator.pyx"
        }

#line 46 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 46 "pyInterpolator.pyx"
        case  5:

#line 46 "pyInterpolator.pyx"
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f)) != 0)) kw_args--;

#line 46 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_coef", 0, 7, 8, 5); 
#line 46 "pyInterpolator.pyx"
__PYX_ERR(4, 46, __pyx_L3_error)

#line 46 "pyInterpolator.pyx"
        }

#line 46 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 46 "pyInterpolator.pyx"
        case  6:

#line 46 "pyInterpolator.pyx"
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;

#line 46 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_coef", 0, 7, 8, 6); 
#line 46 "pyInterpolator.pyx"
__PYX_ERR(4, 46, __pyx_L3_error)

#line 46 "pyInterpolator.pyx"
        }

#line 46 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 46 "pyInterpolator.pyx"
        case  7:

#line 46 "pyInterpolator.pyx"
        if (kw_args > 0) {

#line 46 "pyInterpolator.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h);

#line 46 "pyInterpolator.pyx"
          if (value) { values[7] = value; kw_args--; }

#line 46 "pyInterpolator.pyx"
        }

#line 46 "pyInterpolator.pyx"
      }

#line 46 "pyInterpolator.pyx"
      if (unlikely(kw_args > 0)) {

#line 46 "pyInterpolator.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sinc_coef") < 0)) __PYX_ERR(4, 46, __pyx_L3_error)

#line 46 "pyInterpolator.pyx"
      }

#line 46 "pyInterpolator.pyx"
    } else {

#line 46 "pyInterpolator.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: 
#line 46 "pyInterpolator.pyx"
values[7] = PyTuple_GET_ITEM(__pyx_args, 7);

#line 46 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  7: 
#line 46 "pyInterpolator.pyx"
values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

#line 46 "pyInterpolator.pyx"
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 46 "pyInterpolator.pyx"
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 46 "pyInterpolator.pyx"
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 46 "pyInterpolator.pyx"
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 46 "pyInterpolator.pyx"
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 46 "pyInterpolator.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 46 "pyInterpolator.pyx"
        break;
        default: 
#line 46 "pyInterpolator.pyx"
goto __pyx_L5_argtuple_error;

#line 46 "pyInterpolator.pyx"
      }

#line 46 "pyInterpolator.pyx"
    }

#line 46 "pyInterpolator.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 46, __pyx_L3_error)

#line 46 "pyInterpolator.pyx"
    __pyx_v_b = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 46, __pyx_L3_error)

#line 46 "pyInterpolator.pyx"
    __pyx_v_c = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_c == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 46, __pyx_L3_error)

#line 46 "pyInterpolator.pyx"
    __pyx_v_d = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_d == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 46, __pyx_L3_error)

#line 46 "pyInterpolator.pyx"
    __pyx_v_e = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_e == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 46, __pyx_L3_error)

#line 46 "pyInterpolator.pyx"
    __pyx_v_f = values[5];

#line 46 "pyInterpolator.pyx"
    __pyx_v_g = values[6];

#line 46 "pyInterpolator.pyx"
    __pyx_v_h = values[7];

#line 46 "pyInterpolator.pyx"
  }

#line 46 "pyInterpolator.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 46 "pyInterpolator.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sinc_coef", 0, 7, 8, PyTuple_GET_SIZE(__pyx_args)); 
#line 46 "pyInterpolator.pyx"
__PYX_ERR(4, 46, __pyx_L3_error)

#line 46 "pyInterpolator.pyx"
  __pyx_L3_error:;

#line 46 "pyInterpolator.pyx"
  __Pyx_AddTraceback("iscecore.pyInterpolator.sinc_coef", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 46 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 46 "pyInterpolator.pyx"
  return NULL;

#line 46 "pyInterpolator.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 46 "pyInterpolator.pyx"
__pyx_pf_8iscecore_14pyInterpolator_8sinc_coef(((struct __pyx_obj_8iscecore_pyInterpolator *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c, __pyx_v_d, __pyx_v_e, __pyx_v_f, __pyx_v_g, __pyx_v_h);

#line 46 "pyInterpolator.pyx"


#line 46 "pyInterpolator.pyx"
  /* function exit code */

#line 46 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 46 "pyInterpolator.pyx"
  return __pyx_r;

#line 46 "pyInterpolator.pyx"
}

#line 46 "pyInterpolator.pyx"


#line 46 "pyInterpolator.pyx"
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_8sinc_coef(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self, double __pyx_v_a, double __pyx_v_b, int __pyx_v_c, double __pyx_v_d, int __pyx_v_e, PyObject *__pyx_v_f, PyObject *__pyx_v_g, PyObject *__pyx_v_h) {
  int __pyx_v__f
#line 46 "pyInterpolator.pyx"
;
  int __pyx_v__g
#line 46 "pyInterpolator.pyx"
;
  std::vector<double>  __pyx_v__h
#line 46 "pyInterpolator.pyx"
;
  PyObject *__pyx_v_elem = NULL
#line 46 "pyInterpolator.pyx"
;

#line 46 "pyInterpolator.pyx"
  PyObject *__pyx_r = NULL;

#line 46 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 46 "pyInterpolator.pyx"
  int __pyx_t_1;

#line 46 "pyInterpolator.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 46 "pyInterpolator.pyx"
  Py_ssize_t __pyx_t_3;

#line 46 "pyInterpolator.pyx"
  PyObject *(*__pyx_t_4)(PyObject *);

#line 46 "pyInterpolator.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 46 "pyInterpolator.pyx"
  double __pyx_t_6;

#line 46 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("sinc_coef", 0);

  /* "pyInterpolator.pyx":50
 *         cdef int _g
 *         cdef vector[double] _h
 *         if (h):             # <<<<<<<<<<<<<<
 *             print("Error: Python does not allow for pass-by-reference, therefore the function " +
 *                   "call is modified.")
 */

#line 50 "pyInterpolator.pyx"
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_h); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(4, 50, __pyx_L1_error)

#line 50 "pyInterpolator.pyx"
  if (__pyx_t_1) {

    /* "pyInterpolator.pyx":51
 *         cdef vector[double] _h
 *         if (h):
 *             print("Error: Python does not allow for pass-by-reference, therefore the function " +             # <<<<<<<<<<<<<<
 *                   "call is modified.")
 *             print("       Please pass the pair of reference arguments (sixth and seventh " +
 */

#line 51 "pyInterpolator.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 51, __pyx_L1_error)

#line 51 "pyInterpolator.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 51 "pyInterpolator.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyInterpolator.pyx":53
 *             print("Error: Python does not allow for pass-by-reference, therefore the function " +
 *                   "call is modified.")
 *             print("       Please pass the pair of reference arguments (sixth and seventh " +             # <<<<<<<<<<<<<<
 *                   "position) as a tuple,")
 *             print("       and the 0th and 1st element of the tuple will contain the modified " +
 */

#line 53 "pyInterpolator.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 53, __pyx_L1_error)

#line 53 "pyInterpolator.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 53 "pyInterpolator.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyInterpolator.pyx":55
 *             print("       Please pass the pair of reference arguments (sixth and seventh " +
 *                   "position) as a tuple,")
 *             print("       and the 0th and 1st element of the tuple will contain the modified " +             # <<<<<<<<<<<<<<
 *                   "return value.")
 *             return
 */

#line 55 "pyInterpolator.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 55, __pyx_L1_error)

#line 55 "pyInterpolator.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 55 "pyInterpolator.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyInterpolator.pyx":57
 *             print("       and the 0th and 1st element of the tuple will contain the modified " +
 *                   "return value.")
 *             return             # <<<<<<<<<<<<<<
 *         _f = 0
 *         _g = 0
 */

#line 57 "pyInterpolator.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 57 "pyInterpolator.pyx"
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 57 "pyInterpolator.pyx"
    goto __pyx_L0;

    /* "pyInterpolator.pyx":50
 *         cdef int _g
 *         cdef vector[double] _h
 *         if (h):             # <<<<<<<<<<<<<<
 *             print("Error: Python does not allow for pass-by-reference, therefore the function " +
 *                   "call is modified.")
 */

#line 50 "pyInterpolator.pyx"
  }

  /* "pyInterpolator.pyx":58
 *                   "return value.")
 *             return
 *         _f = 0             # <<<<<<<<<<<<<<
 *         _g = 0
 *         for elem in g:
 */

#line 58 "pyInterpolator.pyx"
  __pyx_v__f = 0;

  /* "pyInterpolator.pyx":59
 *             return
 *         _f = 0
 *         _g = 0             # <<<<<<<<<<<<<<
 *         for elem in g:
 *             _h.push_back(elem)
 */

#line 59 "pyInterpolator.pyx"
  __pyx_v__g = 0;

  /* "pyInterpolator.pyx":60
 *         _f = 0
 *         _g = 0
 *         for elem in g:             # <<<<<<<<<<<<<<
 *             _h.push_back(elem)
 *         self.c_interp.sinc_coef(a,b,c,d,e,_f,_g,_h)
 */

#line 60 "pyInterpolator.pyx"
  if (likely(PyList_CheckExact(__pyx_v_g)) || PyTuple_CheckExact(__pyx_v_g)) {

#line 60 "pyInterpolator.pyx"
    __pyx_t_2 = __pyx_v_g; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;

#line 60 "pyInterpolator.pyx"
    __pyx_t_4 = NULL;

#line 60 "pyInterpolator.pyx"
  } else {
    __pyx_t_3 = -1; 
#line 60 "pyInterpolator.pyx"
__pyx_t_2 = PyObject_GetIter(__pyx_v_g); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 60, __pyx_L1_error)

#line 60 "pyInterpolator.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 60 "pyInterpolator.pyx"
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 60, __pyx_L1_error)

#line 60 "pyInterpolator.pyx"
  }

#line 60 "pyInterpolator.pyx"
  for (;;) {

#line 60 "pyInterpolator.pyx"
    if (likely(!__pyx_t_4)) {

#line 60 "pyInterpolator.pyx"
      if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 60 "pyInterpolator.pyx"
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 60 "pyInterpolator.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 60 "pyInterpolator.pyx"
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(4, 60, __pyx_L1_error)

#line 60 "pyInterpolator.pyx"
        #else

#line 60 "pyInterpolator.pyx"
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 60, __pyx_L1_error)

#line 60 "pyInterpolator.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 60 "pyInterpolator.pyx"
        #endif

#line 60 "pyInterpolator.pyx"
      } else {

#line 60 "pyInterpolator.pyx"
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 60 "pyInterpolator.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 60 "pyInterpolator.pyx"
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(4, 60, __pyx_L1_error)

#line 60 "pyInterpolator.pyx"
        #else

#line 60 "pyInterpolator.pyx"
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 60, __pyx_L1_error)

#line 60 "pyInterpolator.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 60 "pyInterpolator.pyx"
        #endif

#line 60 "pyInterpolator.pyx"
      }
    } else 
#line 60 "pyInterpolator.pyx"
{

#line 60 "pyInterpolator.pyx"
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);

#line 60 "pyInterpolator.pyx"
      if (unlikely(!__pyx_t_5)) {

#line 60 "pyInterpolator.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 60 "pyInterpolator.pyx"
        if (exc_type) {

#line 60 "pyInterpolator.pyx"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 60 "pyInterpolator.pyx"
          else __PYX_ERR(4, 60, __pyx_L1_error)

#line 60 "pyInterpolator.pyx"
        }

#line 60 "pyInterpolator.pyx"
        break;

#line 60 "pyInterpolator.pyx"
      }

#line 60 "pyInterpolator.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 60 "pyInterpolator.pyx"
    }

#line 60 "pyInterpolator.pyx"
    __Pyx_XDECREF_SET(__pyx_v_elem, __pyx_t_5);

#line 60 "pyInterpolator.pyx"
    __pyx_t_5 = 0;

    /* "pyInterpolator.pyx":61
 *         _g = 0
 *         for elem in g:
 *             _h.push_back(elem)             # <<<<<<<<<<<<<<
 *         self.c_interp.sinc_coef(a,b,c,d,e,_f,_g,_h)
 *         f[0] = _f
 */

#line 61 "pyInterpolator.pyx"
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_elem); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 61, __pyx_L1_error)

#line 61 "pyInterpolator.pyx"
    try {

#line 61 "pyInterpolator.pyx"
      __pyx_v__h.push_back(__pyx_t_6);

#line 61 "pyInterpolator.pyx"
    } catch(...) {

#line 61 "pyInterpolator.pyx"
      __Pyx_CppExn2PyErr();

#line 61 "pyInterpolator.pyx"
      __PYX_ERR(4, 61, __pyx_L1_error)

#line 61 "pyInterpolator.pyx"
    }

    /* "pyInterpolator.pyx":60
 *         _f = 0
 *         _g = 0
 *         for elem in g:             # <<<<<<<<<<<<<<
 *             _h.push_back(elem)
 *         self.c_interp.sinc_coef(a,b,c,d,e,_f,_g,_h)
 */

#line 60 "pyInterpolator.pyx"
  }

#line 60 "pyInterpolator.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyInterpolator.pyx":62
 *         for elem in g:
 *             _h.push_back(elem)
 *         self.c_interp.sinc_coef(a,b,c,d,e,_f,_g,_h)             # <<<<<<<<<<<<<<
 *         f[0] = _f
 *         f[1] = _g
 */

#line 62 "pyInterpolator.pyx"
  __pyx_v_self->c_interp->sinc_coef(__pyx_v_a, __pyx_v_b, __pyx_v_c, __pyx_v_d, __pyx_v_e, __pyx_v__f, __pyx_v__g, __pyx_v__h);

  /* "pyInterpolator.pyx":63
 *             _h.push_back(elem)
 *         self.c_interp.sinc_coef(a,b,c,d,e,_f,_g,_h)
 *         f[0] = _f             # <<<<<<<<<<<<<<
 *         f[1] = _g
 *     '''
 */

#line 63 "pyInterpolator.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v__f); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 63, __pyx_L1_error)

#line 63 "pyInterpolator.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 63 "pyInterpolator.pyx"
  if (unlikely(__Pyx_SetItemInt(__pyx_v_f, 0, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(4, 63, __pyx_L1_error)

#line 63 "pyInterpolator.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyInterpolator.pyx":64
 *         self.c_interp.sinc_coef(a,b,c,d,e,_f,_g,_h)
 *         f[0] = _f
 *         f[1] = _g             # <<<<<<<<<<<<<<
 *     '''
 *     def sinc_eval(self, a, b, int c, int d, int e, double f):
 */

#line 64 "pyInterpolator.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v__g); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 64, __pyx_L1_error)

#line 64 "pyInterpolator.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 64 "pyInterpolator.pyx"
  if (unlikely(__Pyx_SetItemInt(__pyx_v_f, 1, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(4, 64, __pyx_L1_error)

#line 64 "pyInterpolator.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyInterpolator.pyx":46
 *         cdef vector[vector[double]] _c = c
 *         return self.c_interp.bicubic[double](a,b,_c)
 *     def sinc_coef(self, double a, double b, int c, double d, int e, f, g, h=None):             # <<<<<<<<<<<<<<
 *         cdef int _f
 *         cdef int _g
 */

#line 46 "pyInterpolator.pyx"


#line 46 "pyInterpolator.pyx"
  /* function exit code */

#line 46 "pyInterpolator.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 46 "pyInterpolator.pyx"
  goto __pyx_L0;

#line 46 "pyInterpolator.pyx"
  __pyx_L1_error:;

#line 46 "pyInterpolator.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 46 "pyInterpolator.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 46 "pyInterpolator.pyx"
  __Pyx_AddTraceback("iscecore.pyInterpolator.sinc_coef", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 46 "pyInterpolator.pyx"
  __pyx_r = NULL;

#line 46 "pyInterpolator.pyx"
  __pyx_L0:;

#line 46 "pyInterpolator.pyx"
  __Pyx_XDECREF(__pyx_v_elem);

#line 46 "pyInterpolator.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 46 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 46 "pyInterpolator.pyx"
  return __pyx_r;

#line 46 "pyInterpolator.pyx"
}

/* "pyInterpolator.pyx":83
 *             return self.c_interp.sinc_eval_2d[double,double](_a1,_b,c,d,e,f,g,h,i,j)
 *     '''
 *     def sinc_eval(self, a, b, int c, int d, int e, double f, int g):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a = a
 *         cdef vector[double] _b = b
 */

#line 83 "pyInterpolator.pyx"


#line 83 "pyInterpolator.pyx"
/* Python wrapper */

#line 83 "pyInterpolator.pyx"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_11sinc_eval(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 83 "pyInterpolator.pyx"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_11sinc_eval(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0
#line 83 "pyInterpolator.pyx"
;
  PyObject *__pyx_v_b = 0
#line 83 "pyInterpolator.pyx"
;
  int __pyx_v_c
#line 83 "pyInterpolator.pyx"
;
  int __pyx_v_d
#line 83 "pyInterpolator.pyx"
;
  int __pyx_v_e
#line 83 "pyInterpolator.pyx"
;
  double __pyx_v_f
#line 83 "pyInterpolator.pyx"
;
  int __pyx_v_g
#line 83 "pyInterpolator.pyx"
;

#line 83 "pyInterpolator.pyx"
  PyObject *__pyx_r = 0;

#line 83 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 83 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("sinc_eval (wrapper)", 0);

#line 83 "pyInterpolator.pyx"
  {

#line 83 "pyInterpolator.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,&__pyx_n_s_d,&__pyx_n_s_e,&__pyx_n_s_f,&__pyx_n_s_g,0};

#line 83 "pyInterpolator.pyx"
    PyObject* values[7] = {0,0,0,0,0,0,0};

#line 83 "pyInterpolator.pyx"
    if (unlikely(__pyx_kwds)) {

#line 83 "pyInterpolator.pyx"
      Py_ssize_t kw_args;

#line 83 "pyInterpolator.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 83 "pyInterpolator.pyx"
      switch (pos_args) {
        case  7: 
#line 83 "pyInterpolator.pyx"
values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

#line 83 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  6: 
#line 83 "pyInterpolator.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 83 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  5: 
#line 83 "pyInterpolator.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 83 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 83 "pyInterpolator.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 83 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 83 "pyInterpolator.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 83 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 83 "pyInterpolator.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 83 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 83 "pyInterpolator.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 83 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 83 "pyInterpolator.pyx"
        case  0: break;
        default: 
#line 83 "pyInterpolator.pyx"
goto __pyx_L5_argtuple_error;

#line 83 "pyInterpolator.pyx"
      }

#line 83 "pyInterpolator.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 83 "pyInterpolator.pyx"
      switch (pos_args) {

#line 83 "pyInterpolator.pyx"
        case  0:

#line 83 "pyInterpolator.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 83 "pyInterpolator.pyx"
goto __pyx_L5_argtuple_error;

#line 83 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 83 "pyInterpolator.pyx"
        case  1:

#line 83 "pyInterpolator.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 83 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_eval", 1, 7, 7, 1); 
#line 83 "pyInterpolator.pyx"
__PYX_ERR(4, 83, __pyx_L3_error)

#line 83 "pyInterpolator.pyx"
        }

#line 83 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 83 "pyInterpolator.pyx"
        case  2:

#line 83 "pyInterpolator.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 83 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_eval", 1, 7, 7, 2); 
#line 83 "pyInterpolator.pyx"
__PYX_ERR(4, 83, __pyx_L3_error)

#line 83 "pyInterpolator.pyx"
        }

#line 83 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 83 "pyInterpolator.pyx"
        case  3:

#line 83 "pyInterpolator.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;

#line 83 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_eval", 1, 7, 7, 3); 
#line 83 "pyInterpolator.pyx"
__PYX_ERR(4, 83, __pyx_L3_error)

#line 83 "pyInterpolator.pyx"
        }

#line 83 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 83 "pyInterpolator.pyx"
        case  4:

#line 83 "pyInterpolator.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_e)) != 0)) kw_args--;

#line 83 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_eval", 1, 7, 7, 4); 
#line 83 "pyInterpolator.pyx"
__PYX_ERR(4, 83, __pyx_L3_error)

#line 83 "pyInterpolator.pyx"
        }

#line 83 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 83 "pyInterpolator.pyx"
        case  5:

#line 83 "pyInterpolator.pyx"
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f)) != 0)) kw_args--;

#line 83 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_eval", 1, 7, 7, 5); 
#line 83 "pyInterpolator.pyx"
__PYX_ERR(4, 83, __pyx_L3_error)

#line 83 "pyInterpolator.pyx"
        }

#line 83 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 83 "pyInterpolator.pyx"
        case  6:

#line 83 "pyInterpolator.pyx"
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;

#line 83 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_eval", 1, 7, 7, 6); 
#line 83 "pyInterpolator.pyx"
__PYX_ERR(4, 83, __pyx_L3_error)

#line 83 "pyInterpolator.pyx"
        }

#line 83 "pyInterpolator.pyx"
      }

#line 83 "pyInterpolator.pyx"
      if (unlikely(kw_args > 0)) {

#line 83 "pyInterpolator.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sinc_eval") < 0)) __PYX_ERR(4, 83, __pyx_L3_error)

#line 83 "pyInterpolator.pyx"
      }

#line 83 "pyInterpolator.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {

#line 83 "pyInterpolator.pyx"
      goto __pyx_L5_argtuple_error;

#line 83 "pyInterpolator.pyx"
    } else {

#line 83 "pyInterpolator.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 83 "pyInterpolator.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 83 "pyInterpolator.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 83 "pyInterpolator.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 83 "pyInterpolator.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 83 "pyInterpolator.pyx"
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 83 "pyInterpolator.pyx"
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

#line 83 "pyInterpolator.pyx"
    }

#line 83 "pyInterpolator.pyx"
    __pyx_v_a = values[0];

#line 83 "pyInterpolator.pyx"
    __pyx_v_b = values[1];

#line 83 "pyInterpolator.pyx"
    __pyx_v_c = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_c == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 83, __pyx_L3_error)

#line 83 "pyInterpolator.pyx"
    __pyx_v_d = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_d == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 83, __pyx_L3_error)

#line 83 "pyInterpolator.pyx"
    __pyx_v_e = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_e == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 83, __pyx_L3_error)

#line 83 "pyInterpolator.pyx"
    __pyx_v_f = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_f == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 83, __pyx_L3_error)

#line 83 "pyInterpolator.pyx"
    __pyx_v_g = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_g == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 83, __pyx_L3_error)

#line 83 "pyInterpolator.pyx"
  }

#line 83 "pyInterpolator.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 83 "pyInterpolator.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sinc_eval", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); 
#line 83 "pyInterpolator.pyx"
__PYX_ERR(4, 83, __pyx_L3_error)

#line 83 "pyInterpolator.pyx"
  __pyx_L3_error:;

#line 83 "pyInterpolator.pyx"
  __Pyx_AddTraceback("iscecore.pyInterpolator.sinc_eval", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 83 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 83 "pyInterpolator.pyx"
  return NULL;

#line 83 "pyInterpolator.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 83 "pyInterpolator.pyx"
__pyx_pf_8iscecore_14pyInterpolator_10sinc_eval(((struct __pyx_obj_8iscecore_pyInterpolator *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c, __pyx_v_d, __pyx_v_e, __pyx_v_f, __pyx_v_g);

#line 83 "pyInterpolator.pyx"


#line 83 "pyInterpolator.pyx"
  /* function exit code */

#line 83 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 83 "pyInterpolator.pyx"
  return __pyx_r;

#line 83 "pyInterpolator.pyx"
}

#line 83 "pyInterpolator.pyx"


#line 83 "pyInterpolator.pyx"
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_10sinc_eval(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, int __pyx_v_c, int __pyx_v_d, int __pyx_v_e, double __pyx_v_f, int __pyx_v_g) {
  std::vector<double>  __pyx_v__a
#line 83 "pyInterpolator.pyx"
;
  std::vector<double>  __pyx_v__b
#line 83 "pyInterpolator.pyx"
;

#line 83 "pyInterpolator.pyx"
  PyObject *__pyx_r = NULL;

#line 83 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 83 "pyInterpolator.pyx"
  std::vector<double>  __pyx_t_1;

#line 83 "pyInterpolator.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 83 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("sinc_eval", 0);

  /* "pyInterpolator.pyx":84
 *     '''
 *     def sinc_eval(self, a, b, int c, int d, int e, double f, int g):
 *         cdef vector[double] _a = a             # <<<<<<<<<<<<<<
 *         cdef vector[double] _b = b
 *         return self.c_interp.sinc_eval[double,double](_a,_b,c,d,e,f,g)
 */

#line 84 "pyInterpolator.pyx"
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 84, __pyx_L1_error)

#line 84 "pyInterpolator.pyx"
  __pyx_v__a = __pyx_t_1;

  /* "pyInterpolator.pyx":85
 *     def sinc_eval(self, a, b, int c, int d, int e, double f, int g):
 *         cdef vector[double] _a = a
 *         cdef vector[double] _b = b             # <<<<<<<<<<<<<<
 *         return self.c_interp.sinc_eval[double,double](_a,_b,c,d,e,f,g)
 *     def sinc_eval_2d(self, a, b, int c, int d, int e, int f, double g, double h, int i, int j):
 */

#line 85 "pyInterpolator.pyx"
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_b); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 85, __pyx_L1_error)

#line 85 "pyInterpolator.pyx"
  __pyx_v__b = __pyx_t_1;

  /* "pyInterpolator.pyx":86
 *         cdef vector[double] _a = a
 *         cdef vector[double] _b = b
 *         return self.c_interp.sinc_eval[double,double](_a,_b,c,d,e,f,g)             # <<<<<<<<<<<<<<
 *     def sinc_eval_2d(self, a, b, int c, int d, int e, int f, double g, double h, int i, int j):
 *         cdef vector[vector[double]] _a = a
 */

#line 86 "pyInterpolator.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 86 "pyInterpolator.pyx"
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->c_interp->sinc_eval<double,double>(__pyx_v__a, __pyx_v__b, __pyx_v_c, __pyx_v_d, __pyx_v_e, __pyx_v_f, __pyx_v_g)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 86, __pyx_L1_error)

#line 86 "pyInterpolator.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 86 "pyInterpolator.pyx"
  __pyx_r = __pyx_t_2;

#line 86 "pyInterpolator.pyx"
  __pyx_t_2 = 0;

#line 86 "pyInterpolator.pyx"
  goto __pyx_L0;

  /* "pyInterpolator.pyx":83
 *             return self.c_interp.sinc_eval_2d[double,double](_a1,_b,c,d,e,f,g,h,i,j)
 *     '''
 *     def sinc_eval(self, a, b, int c, int d, int e, double f, int g):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a = a
 *         cdef vector[double] _b = b
 */

#line 83 "pyInterpolator.pyx"


#line 83 "pyInterpolator.pyx"
  /* function exit code */

#line 83 "pyInterpolator.pyx"
  __pyx_L1_error:;

#line 83 "pyInterpolator.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 83 "pyInterpolator.pyx"
  __Pyx_AddTraceback("iscecore.pyInterpolator.sinc_eval", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 83 "pyInterpolator.pyx"
  __pyx_r = NULL;

#line 83 "pyInterpolator.pyx"
  __pyx_L0:;

#line 83 "pyInterpolator.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 83 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 83 "pyInterpolator.pyx"
  return __pyx_r;

#line 83 "pyInterpolator.pyx"
}

/* "pyInterpolator.pyx":87
 *         cdef vector[double] _b = b
 *         return self.c_interp.sinc_eval[double,double](_a,_b,c,d,e,f,g)
 *     def sinc_eval_2d(self, a, b, int c, int d, int e, int f, double g, double h, int i, int j):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] _a = a
 *         cdef vector[double] _b = b
 */

#line 87 "pyInterpolator.pyx"


#line 87 "pyInterpolator.pyx"
/* Python wrapper */

#line 87 "pyInterpolator.pyx"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_13sinc_eval_2d(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 87 "pyInterpolator.pyx"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_13sinc_eval_2d(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0
#line 87 "pyInterpolator.pyx"
;
  PyObject *__pyx_v_b = 0
#line 87 "pyInterpolator.pyx"
;
  int __pyx_v_c
#line 87 "pyInterpolator.pyx"
;
  int __pyx_v_d
#line 87 "pyInterpolator.pyx"
;
  int __pyx_v_e
#line 87 "pyInterpolator.pyx"
;
  int __pyx_v_f
#line 87 "pyInterpolator.pyx"
;
  double __pyx_v_g
#line 87 "pyInterpolator.pyx"
;
  double __pyx_v_h
#line 87 "pyInterpolator.pyx"
;
  int __pyx_v_i
#line 87 "pyInterpolator.pyx"
;
  int __pyx_v_j
#line 87 "pyInterpolator.pyx"
;

#line 87 "pyInterpolator.pyx"
  PyObject *__pyx_r = 0;

#line 87 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 87 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("sinc_eval_2d (wrapper)", 0);

#line 87 "pyInterpolator.pyx"
  {

#line 87 "pyInterpolator.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,&__pyx_n_s_d,&__pyx_n_s_e,&__pyx_n_s_f,&__pyx_n_s_g,&__pyx_n_s_h,&__pyx_n_s_i,&__pyx_n_s_j,0};

#line 87 "pyInterpolator.pyx"
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};

#line 87 "pyInterpolator.pyx"
    if (unlikely(__pyx_kwds)) {

#line 87 "pyInterpolator.pyx"
      Py_ssize_t kw_args;

#line 87 "pyInterpolator.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 87 "pyInterpolator.pyx"
      switch (pos_args) {
        case 10: 
#line 87 "pyInterpolator.pyx"
values[9] = PyTuple_GET_ITEM(__pyx_args, 9);

#line 87 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  9: 
#line 87 "pyInterpolator.pyx"
values[8] = PyTuple_GET_ITEM(__pyx_args, 8);

#line 87 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  8: 
#line 87 "pyInterpolator.pyx"
values[7] = PyTuple_GET_ITEM(__pyx_args, 7);

#line 87 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  7: 
#line 87 "pyInterpolator.pyx"
values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

#line 87 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  6: 
#line 87 "pyInterpolator.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 87 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  5: 
#line 87 "pyInterpolator.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 87 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 87 "pyInterpolator.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 87 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 87 "pyInterpolator.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 87 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 87 "pyInterpolator.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 87 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 87 "pyInterpolator.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 87 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 87 "pyInterpolator.pyx"
        case  0: break;
        default: 
#line 87 "pyInterpolator.pyx"
goto __pyx_L5_argtuple_error;

#line 87 "pyInterpolator.pyx"
      }

#line 87 "pyInterpolator.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 87 "pyInterpolator.pyx"
      switch (pos_args) {

#line 87 "pyInterpolator.pyx"
        case  0:

#line 87 "pyInterpolator.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 87 "pyInterpolator.pyx"
goto __pyx_L5_argtuple_error;

#line 87 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 87 "pyInterpolator.pyx"
        case  1:

#line 87 "pyInterpolator.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 87 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_eval_2d", 1, 10, 10, 1); 
#line 87 "pyInterpolator.pyx"
__PYX_ERR(4, 87, __pyx_L3_error)

#line 87 "pyInterpolator.pyx"
        }

#line 87 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 87 "pyInterpolator.pyx"
        case  2:

#line 87 "pyInterpolator.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 87 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_eval_2d", 1, 10, 10, 2); 
#line 87 "pyInterpolator.pyx"
__PYX_ERR(4, 87, __pyx_L3_error)

#line 87 "pyInterpolator.pyx"
        }

#line 87 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 87 "pyInterpolator.pyx"
        case  3:

#line 87 "pyInterpolator.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;

#line 87 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_eval_2d", 1, 10, 10, 3); 
#line 87 "pyInterpolator.pyx"
__PYX_ERR(4, 87, __pyx_L3_error)

#line 87 "pyInterpolator.pyx"
        }

#line 87 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 87 "pyInterpolator.pyx"
        case  4:

#line 87 "pyInterpolator.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_e)) != 0)) kw_args--;

#line 87 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_eval_2d", 1, 10, 10, 4); 
#line 87 "pyInterpolator.pyx"
__PYX_ERR(4, 87, __pyx_L3_error)

#line 87 "pyInterpolator.pyx"
        }

#line 87 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 87 "pyInterpolator.pyx"
        case  5:

#line 87 "pyInterpolator.pyx"
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f)) != 0)) kw_args--;

#line 87 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_eval_2d", 1, 10, 10, 5); 
#line 87 "pyInterpolator.pyx"
__PYX_ERR(4, 87, __pyx_L3_error)

#line 87 "pyInterpolator.pyx"
        }

#line 87 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 87 "pyInterpolator.pyx"
        case  6:

#line 87 "pyInterpolator.pyx"
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;

#line 87 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_eval_2d", 1, 10, 10, 6); 
#line 87 "pyInterpolator.pyx"
__PYX_ERR(4, 87, __pyx_L3_error)

#line 87 "pyInterpolator.pyx"
        }

#line 87 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 87 "pyInterpolator.pyx"
        case  7:

#line 87 "pyInterpolator.pyx"
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h)) != 0)) kw_args--;

#line 87 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_eval_2d", 1, 10, 10, 7); 
#line 87 "pyInterpolator.pyx"
__PYX_ERR(4, 87, __pyx_L3_error)

#line 87 "pyInterpolator.pyx"
        }

#line 87 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 87 "pyInterpolator.pyx"
        case  8:

#line 87 "pyInterpolator.pyx"
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;

#line 87 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_eval_2d", 1, 10, 10, 8); 
#line 87 "pyInterpolator.pyx"
__PYX_ERR(4, 87, __pyx_L3_error)

#line 87 "pyInterpolator.pyx"
        }

#line 87 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 87 "pyInterpolator.pyx"
        case  9:

#line 87 "pyInterpolator.pyx"
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_j)) != 0)) kw_args--;

#line 87 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sinc_eval_2d", 1, 10, 10, 9); 
#line 87 "pyInterpolator.pyx"
__PYX_ERR(4, 87, __pyx_L3_error)

#line 87 "pyInterpolator.pyx"
        }

#line 87 "pyInterpolator.pyx"
      }

#line 87 "pyInterpolator.pyx"
      if (unlikely(kw_args > 0)) {

#line 87 "pyInterpolator.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sinc_eval_2d") < 0)) __PYX_ERR(4, 87, __pyx_L3_error)

#line 87 "pyInterpolator.pyx"
      }

#line 87 "pyInterpolator.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 10) {

#line 87 "pyInterpolator.pyx"
      goto __pyx_L5_argtuple_error;

#line 87 "pyInterpolator.pyx"
    } else {

#line 87 "pyInterpolator.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 87 "pyInterpolator.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 87 "pyInterpolator.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 87 "pyInterpolator.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 87 "pyInterpolator.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 87 "pyInterpolator.pyx"
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 87 "pyInterpolator.pyx"
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

#line 87 "pyInterpolator.pyx"
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);

#line 87 "pyInterpolator.pyx"
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);

#line 87 "pyInterpolator.pyx"
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);

#line 87 "pyInterpolator.pyx"
    }

#line 87 "pyInterpolator.pyx"
    __pyx_v_a = values[0];

#line 87 "pyInterpolator.pyx"
    __pyx_v_b = values[1];

#line 87 "pyInterpolator.pyx"
    __pyx_v_c = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_c == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 87, __pyx_L3_error)

#line 87 "pyInterpolator.pyx"
    __pyx_v_d = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_d == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 87, __pyx_L3_error)

#line 87 "pyInterpolator.pyx"
    __pyx_v_e = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_e == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 87, __pyx_L3_error)

#line 87 "pyInterpolator.pyx"
    __pyx_v_f = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_f == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 87, __pyx_L3_error)

#line 87 "pyInterpolator.pyx"
    __pyx_v_g = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_g == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 87, __pyx_L3_error)

#line 87 "pyInterpolator.pyx"
    __pyx_v_h = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_h == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 87, __pyx_L3_error)

#line 87 "pyInterpolator.pyx"
    __pyx_v_i = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 87, __pyx_L3_error)

#line 87 "pyInterpolator.pyx"
    __pyx_v_j = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_j == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 87, __pyx_L3_error)

#line 87 "pyInterpolator.pyx"
  }

#line 87 "pyInterpolator.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 87 "pyInterpolator.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sinc_eval_2d", 1, 10, 10, PyTuple_GET_SIZE(__pyx_args)); 
#line 87 "pyInterpolator.pyx"
__PYX_ERR(4, 87, __pyx_L3_error)

#line 87 "pyInterpolator.pyx"
  __pyx_L3_error:;

#line 87 "pyInterpolator.pyx"
  __Pyx_AddTraceback("iscecore.pyInterpolator.sinc_eval_2d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 87 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 87 "pyInterpolator.pyx"
  return NULL;

#line 87 "pyInterpolator.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 87 "pyInterpolator.pyx"
__pyx_pf_8iscecore_14pyInterpolator_12sinc_eval_2d(((struct __pyx_obj_8iscecore_pyInterpolator *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c, __pyx_v_d, __pyx_v_e, __pyx_v_f, __pyx_v_g, __pyx_v_h, __pyx_v_i, __pyx_v_j);

#line 87 "pyInterpolator.pyx"


#line 87 "pyInterpolator.pyx"
  /* function exit code */

#line 87 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 87 "pyInterpolator.pyx"
  return __pyx_r;

#line 87 "pyInterpolator.pyx"
}

#line 87 "pyInterpolator.pyx"


#line 87 "pyInterpolator.pyx"
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_12sinc_eval_2d(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, int __pyx_v_c, int __pyx_v_d, int __pyx_v_e, int __pyx_v_f, double __pyx_v_g, double __pyx_v_h, int __pyx_v_i, int __pyx_v_j) {
  std::vector<std::vector<double> >  __pyx_v__a
#line 87 "pyInterpolator.pyx"
;
  std::vector<double>  __pyx_v__b
#line 87 "pyInterpolator.pyx"
;

#line 87 "pyInterpolator.pyx"
  PyObject *__pyx_r = NULL;

#line 87 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 87 "pyInterpolator.pyx"
  std::vector<std::vector<double> >  __pyx_t_1;

#line 87 "pyInterpolator.pyx"
  std::vector<double>  __pyx_t_2;

#line 87 "pyInterpolator.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 87 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("sinc_eval_2d", 0);

  /* "pyInterpolator.pyx":88
 *         return self.c_interp.sinc_eval[double,double](_a,_b,c,d,e,f,g)
 *     def sinc_eval_2d(self, a, b, int c, int d, int e, int f, double g, double h, int i, int j):
 *         cdef vector[vector[double]] _a = a             # <<<<<<<<<<<<<<
 *         cdef vector[double] _b = b
 *         return self.c_interp.sinc_eval_2d[double,double](_a,_b,c,d,e,f,g,h,i,j)
 */

#line 88 "pyInterpolator.pyx"
  __pyx_t_1 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(__pyx_v_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 88, __pyx_L1_error)

#line 88 "pyInterpolator.pyx"
  __pyx_v__a = __pyx_t_1;

  /* "pyInterpolator.pyx":89
 *     def sinc_eval_2d(self, a, b, int c, int d, int e, int f, double g, double h, int i, int j):
 *         cdef vector[vector[double]] _a = a
 *         cdef vector[double] _b = b             # <<<<<<<<<<<<<<
 *         return self.c_interp.sinc_eval_2d[double,double](_a,_b,c,d,e,f,g,h,i,j)
 *     def interp_2d_spline(self, int a, int b, int c, list d, double e, double f):
 */

#line 89 "pyInterpolator.pyx"
  __pyx_t_2 = __pyx_convert_vector_from_py_double(__pyx_v_b); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 89, __pyx_L1_error)

#line 89 "pyInterpolator.pyx"
  __pyx_v__b = __pyx_t_2;

  /* "pyInterpolator.pyx":90
 *         cdef vector[vector[double]] _a = a
 *         cdef vector[double] _b = b
 *         return self.c_interp.sinc_eval_2d[double,double](_a,_b,c,d,e,f,g,h,i,j)             # <<<<<<<<<<<<<<
 *     def interp_2d_spline(self, int a, int b, int c, list d, double e, double f):
 *         cdef vector[vector[float]] _d = d
 */

#line 90 "pyInterpolator.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 90 "pyInterpolator.pyx"
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->c_interp->sinc_eval_2d<double,double>(__pyx_v__a, __pyx_v__b, __pyx_v_c, __pyx_v_d, __pyx_v_e, __pyx_v_f, __pyx_v_g, __pyx_v_h, __pyx_v_i, __pyx_v_j)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 90, __pyx_L1_error)

#line 90 "pyInterpolator.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 90 "pyInterpolator.pyx"
  __pyx_r = __pyx_t_3;

#line 90 "pyInterpolator.pyx"
  __pyx_t_3 = 0;

#line 90 "pyInterpolator.pyx"
  goto __pyx_L0;

  /* "pyInterpolator.pyx":87
 *         cdef vector[double] _b = b
 *         return self.c_interp.sinc_eval[double,double](_a,_b,c,d,e,f,g)
 *     def sinc_eval_2d(self, a, b, int c, int d, int e, int f, double g, double h, int i, int j):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] _a = a
 *         cdef vector[double] _b = b
 */

#line 87 "pyInterpolator.pyx"


#line 87 "pyInterpolator.pyx"
  /* function exit code */

#line 87 "pyInterpolator.pyx"
  __pyx_L1_error:;

#line 87 "pyInterpolator.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 87 "pyInterpolator.pyx"
  __Pyx_AddTraceback("iscecore.pyInterpolator.sinc_eval_2d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 87 "pyInterpolator.pyx"
  __pyx_r = NULL;

#line 87 "pyInterpolator.pyx"
  __pyx_L0:;

#line 87 "pyInterpolator.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 87 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 87 "pyInterpolator.pyx"
  return __pyx_r;

#line 87 "pyInterpolator.pyx"
}

/* "pyInterpolator.pyx":91
 *         cdef vector[double] _b = b
 *         return self.c_interp.sinc_eval_2d[double,double](_a,_b,c,d,e,f,g,h,i,j)
 *     def interp_2d_spline(self, int a, int b, int c, list d, double e, double f):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[float]] _d = d
 *         return self.c_interp.interp_2d_spline(a,b,c,_d,e,f)
 */

#line 91 "pyInterpolator.pyx"


#line 91 "pyInterpolator.pyx"
/* Python wrapper */

#line 91 "pyInterpolator.pyx"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_15interp_2d_spline(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 91 "pyInterpolator.pyx"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_15interp_2d_spline(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_a
#line 91 "pyInterpolator.pyx"
;
  int __pyx_v_b
#line 91 "pyInterpolator.pyx"
;
  int __pyx_v_c
#line 91 "pyInterpolator.pyx"
;
  PyObject *__pyx_v_d = 0
#line 91 "pyInterpolator.pyx"
;
  double __pyx_v_e
#line 91 "pyInterpolator.pyx"
;
  double __pyx_v_f
#line 91 "pyInterpolator.pyx"
;

#line 91 "pyInterpolator.pyx"
  PyObject *__pyx_r = 0;

#line 91 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 91 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("interp_2d_spline (wrapper)", 0);

#line 91 "pyInterpolator.pyx"
  {

#line 91 "pyInterpolator.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,&__pyx_n_s_d,&__pyx_n_s_e,&__pyx_n_s_f,0};

#line 91 "pyInterpolator.pyx"
    PyObject* values[6] = {0,0,0,0,0,0};

#line 91 "pyInterpolator.pyx"
    if (unlikely(__pyx_kwds)) {

#line 91 "pyInterpolator.pyx"
      Py_ssize_t kw_args;

#line 91 "pyInterpolator.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 91 "pyInterpolator.pyx"
      switch (pos_args) {
        case  6: 
#line 91 "pyInterpolator.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 91 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  5: 
#line 91 "pyInterpolator.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 91 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 91 "pyInterpolator.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 91 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 91 "pyInterpolator.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 91 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 91 "pyInterpolator.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 91 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 91 "pyInterpolator.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 91 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 91 "pyInterpolator.pyx"
        case  0: break;
        default: 
#line 91 "pyInterpolator.pyx"
goto __pyx_L5_argtuple_error;

#line 91 "pyInterpolator.pyx"
      }

#line 91 "pyInterpolator.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 91 "pyInterpolator.pyx"
      switch (pos_args) {

#line 91 "pyInterpolator.pyx"
        case  0:

#line 91 "pyInterpolator.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 91 "pyInterpolator.pyx"
goto __pyx_L5_argtuple_error;

#line 91 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 91 "pyInterpolator.pyx"
        case  1:

#line 91 "pyInterpolator.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 91 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("interp_2d_spline", 1, 6, 6, 1); 
#line 91 "pyInterpolator.pyx"
__PYX_ERR(4, 91, __pyx_L3_error)

#line 91 "pyInterpolator.pyx"
        }

#line 91 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 91 "pyInterpolator.pyx"
        case  2:

#line 91 "pyInterpolator.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 91 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("interp_2d_spline", 1, 6, 6, 2); 
#line 91 "pyInterpolator.pyx"
__PYX_ERR(4, 91, __pyx_L3_error)

#line 91 "pyInterpolator.pyx"
        }

#line 91 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 91 "pyInterpolator.pyx"
        case  3:

#line 91 "pyInterpolator.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;

#line 91 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("interp_2d_spline", 1, 6, 6, 3); 
#line 91 "pyInterpolator.pyx"
__PYX_ERR(4, 91, __pyx_L3_error)

#line 91 "pyInterpolator.pyx"
        }

#line 91 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 91 "pyInterpolator.pyx"
        case  4:

#line 91 "pyInterpolator.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_e)) != 0)) kw_args--;

#line 91 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("interp_2d_spline", 1, 6, 6, 4); 
#line 91 "pyInterpolator.pyx"
__PYX_ERR(4, 91, __pyx_L3_error)

#line 91 "pyInterpolator.pyx"
        }

#line 91 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 91 "pyInterpolator.pyx"
        case  5:

#line 91 "pyInterpolator.pyx"
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f)) != 0)) kw_args--;

#line 91 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("interp_2d_spline", 1, 6, 6, 5); 
#line 91 "pyInterpolator.pyx"
__PYX_ERR(4, 91, __pyx_L3_error)

#line 91 "pyInterpolator.pyx"
        }

#line 91 "pyInterpolator.pyx"
      }

#line 91 "pyInterpolator.pyx"
      if (unlikely(kw_args > 0)) {

#line 91 "pyInterpolator.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "interp_2d_spline") < 0)) __PYX_ERR(4, 91, __pyx_L3_error)

#line 91 "pyInterpolator.pyx"
      }

#line 91 "pyInterpolator.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {

#line 91 "pyInterpolator.pyx"
      goto __pyx_L5_argtuple_error;

#line 91 "pyInterpolator.pyx"
    } else {

#line 91 "pyInterpolator.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 91 "pyInterpolator.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 91 "pyInterpolator.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 91 "pyInterpolator.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 91 "pyInterpolator.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 91 "pyInterpolator.pyx"
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 91 "pyInterpolator.pyx"
    }

#line 91 "pyInterpolator.pyx"
    __pyx_v_a = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_a == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 91, __pyx_L3_error)

#line 91 "pyInterpolator.pyx"
    __pyx_v_b = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_b == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 91, __pyx_L3_error)

#line 91 "pyInterpolator.pyx"
    __pyx_v_c = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_c == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 91, __pyx_L3_error)

#line 91 "pyInterpolator.pyx"
    __pyx_v_d = ((PyObject*)values[3]);

#line 91 "pyInterpolator.pyx"
    __pyx_v_e = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_e == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 91, __pyx_L3_error)

#line 91 "pyInterpolator.pyx"
    __pyx_v_f = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_f == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 91, __pyx_L3_error)

#line 91 "pyInterpolator.pyx"
  }

#line 91 "pyInterpolator.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 91 "pyInterpolator.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("interp_2d_spline", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); 
#line 91 "pyInterpolator.pyx"
__PYX_ERR(4, 91, __pyx_L3_error)

#line 91 "pyInterpolator.pyx"
  __pyx_L3_error:;

#line 91 "pyInterpolator.pyx"
  __Pyx_AddTraceback("iscecore.pyInterpolator.interp_2d_spline", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 91 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 91 "pyInterpolator.pyx"
  return NULL;

#line 91 "pyInterpolator.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 91 "pyInterpolator.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_d), (&PyList_Type), 1, "d", 1))) __PYX_ERR(4, 91, __pyx_L1_error)
  __pyx_r = 
#line 91 "pyInterpolator.pyx"
__pyx_pf_8iscecore_14pyInterpolator_14interp_2d_spline(((struct __pyx_obj_8iscecore_pyInterpolator *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c, __pyx_v_d, __pyx_v_e, __pyx_v_f);

#line 91 "pyInterpolator.pyx"


#line 91 "pyInterpolator.pyx"
  /* function exit code */

#line 91 "pyInterpolator.pyx"
  goto __pyx_L0;

#line 91 "pyInterpolator.pyx"
  __pyx_L1_error:;

#line 91 "pyInterpolator.pyx"
  __pyx_r = NULL;

#line 91 "pyInterpolator.pyx"
  __pyx_L0:;

#line 91 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 91 "pyInterpolator.pyx"
  return __pyx_r;

#line 91 "pyInterpolator.pyx"
}

#line 91 "pyInterpolator.pyx"


#line 91 "pyInterpolator.pyx"
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_14interp_2d_spline(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self, int __pyx_v_a, int __pyx_v_b, int __pyx_v_c, PyObject *__pyx_v_d, double __pyx_v_e, double __pyx_v_f) {
  std::vector<std::vector<float> >  __pyx_v__d
#line 91 "pyInterpolator.pyx"
;

#line 91 "pyInterpolator.pyx"
  PyObject *__pyx_r = NULL;

#line 91 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 91 "pyInterpolator.pyx"
  std::vector<std::vector<float> >  __pyx_t_1;

#line 91 "pyInterpolator.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 91 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("interp_2d_spline", 0);

  /* "pyInterpolator.pyx":92
 *         return self.c_interp.sinc_eval_2d[double,double](_a,_b,c,d,e,f,g,h,i,j)
 *     def interp_2d_spline(self, int a, int b, int c, list d, double e, double f):
 *         cdef vector[vector[float]] _d = d             # <<<<<<<<<<<<<<
 *         return self.c_interp.interp_2d_spline(a,b,c,_d,e,f)
 *     def quadInterpolate(self, a, b, double c):
 */

#line 92 "pyInterpolator.pyx"
  __pyx_t_1 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_float_3e___(__pyx_v_d); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 92, __pyx_L1_error)

#line 92 "pyInterpolator.pyx"
  __pyx_v__d = __pyx_t_1;

  /* "pyInterpolator.pyx":93
 *     def interp_2d_spline(self, int a, int b, int c, list d, double e, double f):
 *         cdef vector[vector[float]] _d = d
 *         return self.c_interp.interp_2d_spline(a,b,c,_d,e,f)             # <<<<<<<<<<<<<<
 *     def quadInterpolate(self, a, b, double c):
 *         cdef vector[double] _a = a
 */

#line 93 "pyInterpolator.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 93 "pyInterpolator.pyx"
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->c_interp->interp_2d_spline(__pyx_v_a, __pyx_v_b, __pyx_v_c, __pyx_v__d, __pyx_v_e, __pyx_v_f)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 93, __pyx_L1_error)

#line 93 "pyInterpolator.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 93 "pyInterpolator.pyx"
  __pyx_r = __pyx_t_2;

#line 93 "pyInterpolator.pyx"
  __pyx_t_2 = 0;

#line 93 "pyInterpolator.pyx"
  goto __pyx_L0;

  /* "pyInterpolator.pyx":91
 *         cdef vector[double] _b = b
 *         return self.c_interp.sinc_eval_2d[double,double](_a,_b,c,d,e,f,g,h,i,j)
 *     def interp_2d_spline(self, int a, int b, int c, list d, double e, double f):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[float]] _d = d
 *         return self.c_interp.interp_2d_spline(a,b,c,_d,e,f)
 */

#line 91 "pyInterpolator.pyx"


#line 91 "pyInterpolator.pyx"
  /* function exit code */

#line 91 "pyInterpolator.pyx"
  __pyx_L1_error:;

#line 91 "pyInterpolator.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 91 "pyInterpolator.pyx"
  __Pyx_AddTraceback("iscecore.pyInterpolator.interp_2d_spline", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 91 "pyInterpolator.pyx"
  __pyx_r = NULL;

#line 91 "pyInterpolator.pyx"
  __pyx_L0:;

#line 91 "pyInterpolator.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 91 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 91 "pyInterpolator.pyx"
  return __pyx_r;

#line 91 "pyInterpolator.pyx"
}

/* "pyInterpolator.pyx":94
 *         cdef vector[vector[float]] _d = d
 *         return self.c_interp.interp_2d_spline(a,b,c,_d,e,f)
 *     def quadInterpolate(self, a, b, double c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a = a
 *         cdef vector[double] _b = b
 */

#line 94 "pyInterpolator.pyx"


#line 94 "pyInterpolator.pyx"
/* Python wrapper */

#line 94 "pyInterpolator.pyx"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_17quadInterpolate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 94 "pyInterpolator.pyx"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_17quadInterpolate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0
#line 94 "pyInterpolator.pyx"
;
  PyObject *__pyx_v_b = 0
#line 94 "pyInterpolator.pyx"
;
  double __pyx_v_c
#line 94 "pyInterpolator.pyx"
;

#line 94 "pyInterpolator.pyx"
  PyObject *__pyx_r = 0;

#line 94 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 94 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("quadInterpolate (wrapper)", 0);

#line 94 "pyInterpolator.pyx"
  {

#line 94 "pyInterpolator.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,0};

#line 94 "pyInterpolator.pyx"
    PyObject* values[3] = {0,0,0};

#line 94 "pyInterpolator.pyx"
    if (unlikely(__pyx_kwds)) {

#line 94 "pyInterpolator.pyx"
      Py_ssize_t kw_args;

#line 94 "pyInterpolator.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 94 "pyInterpolator.pyx"
      switch (pos_args) {
        case  3: 
#line 94 "pyInterpolator.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 94 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 94 "pyInterpolator.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 94 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 94 "pyInterpolator.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 94 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 94 "pyInterpolator.pyx"
        case  0: break;
        default: 
#line 94 "pyInterpolator.pyx"
goto __pyx_L5_argtuple_error;

#line 94 "pyInterpolator.pyx"
      }

#line 94 "pyInterpolator.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 94 "pyInterpolator.pyx"
      switch (pos_args) {

#line 94 "pyInterpolator.pyx"
        case  0:

#line 94 "pyInterpolator.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 94 "pyInterpolator.pyx"
goto __pyx_L5_argtuple_error;

#line 94 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 94 "pyInterpolator.pyx"
        case  1:

#line 94 "pyInterpolator.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 94 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("quadInterpolate", 1, 3, 3, 1); 
#line 94 "pyInterpolator.pyx"
__PYX_ERR(4, 94, __pyx_L3_error)

#line 94 "pyInterpolator.pyx"
        }

#line 94 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 94 "pyInterpolator.pyx"
        case  2:

#line 94 "pyInterpolator.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 94 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("quadInterpolate", 1, 3, 3, 2); 
#line 94 "pyInterpolator.pyx"
__PYX_ERR(4, 94, __pyx_L3_error)

#line 94 "pyInterpolator.pyx"
        }

#line 94 "pyInterpolator.pyx"
      }

#line 94 "pyInterpolator.pyx"
      if (unlikely(kw_args > 0)) {

#line 94 "pyInterpolator.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "quadInterpolate") < 0)) __PYX_ERR(4, 94, __pyx_L3_error)

#line 94 "pyInterpolator.pyx"
      }

#line 94 "pyInterpolator.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 94 "pyInterpolator.pyx"
      goto __pyx_L5_argtuple_error;

#line 94 "pyInterpolator.pyx"
    } else {

#line 94 "pyInterpolator.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 94 "pyInterpolator.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 94 "pyInterpolator.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 94 "pyInterpolator.pyx"
    }

#line 94 "pyInterpolator.pyx"
    __pyx_v_a = values[0];

#line 94 "pyInterpolator.pyx"
    __pyx_v_b = values[1];

#line 94 "pyInterpolator.pyx"
    __pyx_v_c = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_c == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 94, __pyx_L3_error)

#line 94 "pyInterpolator.pyx"
  }

#line 94 "pyInterpolator.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 94 "pyInterpolator.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("quadInterpolate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 94 "pyInterpolator.pyx"
__PYX_ERR(4, 94, __pyx_L3_error)

#line 94 "pyInterpolator.pyx"
  __pyx_L3_error:;

#line 94 "pyInterpolator.pyx"
  __Pyx_AddTraceback("iscecore.pyInterpolator.quadInterpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 94 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 94 "pyInterpolator.pyx"
  return NULL;

#line 94 "pyInterpolator.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 94 "pyInterpolator.pyx"
__pyx_pf_8iscecore_14pyInterpolator_16quadInterpolate(((struct __pyx_obj_8iscecore_pyInterpolator *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c);

#line 94 "pyInterpolator.pyx"


#line 94 "pyInterpolator.pyx"
  /* function exit code */

#line 94 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 94 "pyInterpolator.pyx"
  return __pyx_r;

#line 94 "pyInterpolator.pyx"
}

#line 94 "pyInterpolator.pyx"


#line 94 "pyInterpolator.pyx"
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_16quadInterpolate(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, double __pyx_v_c) {
  std::vector<double>  __pyx_v__a
#line 94 "pyInterpolator.pyx"
;
  std::vector<double>  __pyx_v__b
#line 94 "pyInterpolator.pyx"
;

#line 94 "pyInterpolator.pyx"
  PyObject *__pyx_r = NULL;

#line 94 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 94 "pyInterpolator.pyx"
  std::vector<double>  __pyx_t_1;

#line 94 "pyInterpolator.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 94 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("quadInterpolate", 0);

  /* "pyInterpolator.pyx":95
 *         return self.c_interp.interp_2d_spline(a,b,c,_d,e,f)
 *     def quadInterpolate(self, a, b, double c):
 *         cdef vector[double] _a = a             # <<<<<<<<<<<<<<
 *         cdef vector[double] _b = b
 *         return self.c_interp.quadInterpolate(_a,_b,c)
 */

#line 95 "pyInterpolator.pyx"
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 95, __pyx_L1_error)

#line 95 "pyInterpolator.pyx"
  __pyx_v__a = __pyx_t_1;

  /* "pyInterpolator.pyx":96
 *     def quadInterpolate(self, a, b, double c):
 *         cdef vector[double] _a = a
 *         cdef vector[double] _b = b             # <<<<<<<<<<<<<<
 *         return self.c_interp.quadInterpolate(_a,_b,c)
 *     def akima(self, int a, int b, c, double d, double e):
 */

#line 96 "pyInterpolator.pyx"
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_b); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 96, __pyx_L1_error)

#line 96 "pyInterpolator.pyx"
  __pyx_v__b = __pyx_t_1;

  /* "pyInterpolator.pyx":97
 *         cdef vector[double] _a = a
 *         cdef vector[double] _b = b
 *         return self.c_interp.quadInterpolate(_a,_b,c)             # <<<<<<<<<<<<<<
 *     def akima(self, int a, int b, c, double d, double e):
 *         cdef vector[vector[float]] _c = c
 */

#line 97 "pyInterpolator.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 97 "pyInterpolator.pyx"
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->c_interp->quadInterpolate(__pyx_v__a, __pyx_v__b, __pyx_v_c)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 97, __pyx_L1_error)

#line 97 "pyInterpolator.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 97 "pyInterpolator.pyx"
  __pyx_r = __pyx_t_2;

#line 97 "pyInterpolator.pyx"
  __pyx_t_2 = 0;

#line 97 "pyInterpolator.pyx"
  goto __pyx_L0;

  /* "pyInterpolator.pyx":94
 *         cdef vector[vector[float]] _d = d
 *         return self.c_interp.interp_2d_spline(a,b,c,_d,e,f)
 *     def quadInterpolate(self, a, b, double c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a = a
 *         cdef vector[double] _b = b
 */

#line 94 "pyInterpolator.pyx"


#line 94 "pyInterpolator.pyx"
  /* function exit code */

#line 94 "pyInterpolator.pyx"
  __pyx_L1_error:;

#line 94 "pyInterpolator.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 94 "pyInterpolator.pyx"
  __Pyx_AddTraceback("iscecore.pyInterpolator.quadInterpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 94 "pyInterpolator.pyx"
  __pyx_r = NULL;

#line 94 "pyInterpolator.pyx"
  __pyx_L0:;

#line 94 "pyInterpolator.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 94 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 94 "pyInterpolator.pyx"
  return __pyx_r;

#line 94 "pyInterpolator.pyx"
}

/* "pyInterpolator.pyx":98
 *         cdef vector[double] _b = b
 *         return self.c_interp.quadInterpolate(_a,_b,c)
 *     def akima(self, int a, int b, c, double d, double e):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[float]] _c = c
 *         return self.c_interp.akima(a,b,_c,d,e)
 */

#line 98 "pyInterpolator.pyx"


#line 98 "pyInterpolator.pyx"
/* Python wrapper */

#line 98 "pyInterpolator.pyx"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_19akima(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 98 "pyInterpolator.pyx"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_19akima(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_a
#line 98 "pyInterpolator.pyx"
;
  int __pyx_v_b
#line 98 "pyInterpolator.pyx"
;
  PyObject *__pyx_v_c = 0
#line 98 "pyInterpolator.pyx"
;
  double __pyx_v_d
#line 98 "pyInterpolator.pyx"
;
  double __pyx_v_e
#line 98 "pyInterpolator.pyx"
;

#line 98 "pyInterpolator.pyx"
  PyObject *__pyx_r = 0;

#line 98 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 98 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("akima (wrapper)", 0);

#line 98 "pyInterpolator.pyx"
  {

#line 98 "pyInterpolator.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,&__pyx_n_s_d,&__pyx_n_s_e,0};

#line 98 "pyInterpolator.pyx"
    PyObject* values[5] = {0,0,0,0,0};

#line 98 "pyInterpolator.pyx"
    if (unlikely(__pyx_kwds)) {

#line 98 "pyInterpolator.pyx"
      Py_ssize_t kw_args;

#line 98 "pyInterpolator.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 98 "pyInterpolator.pyx"
      switch (pos_args) {
        case  5: 
#line 98 "pyInterpolator.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 98 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 98 "pyInterpolator.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 98 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 98 "pyInterpolator.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 98 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 98 "pyInterpolator.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 98 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 98 "pyInterpolator.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 98 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 98 "pyInterpolator.pyx"
        case  0: break;
        default: 
#line 98 "pyInterpolator.pyx"
goto __pyx_L5_argtuple_error;

#line 98 "pyInterpolator.pyx"
      }

#line 98 "pyInterpolator.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 98 "pyInterpolator.pyx"
      switch (pos_args) {

#line 98 "pyInterpolator.pyx"
        case  0:

#line 98 "pyInterpolator.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 98 "pyInterpolator.pyx"
goto __pyx_L5_argtuple_error;

#line 98 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 98 "pyInterpolator.pyx"
        case  1:

#line 98 "pyInterpolator.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 98 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("akima", 1, 5, 5, 1); 
#line 98 "pyInterpolator.pyx"
__PYX_ERR(4, 98, __pyx_L3_error)

#line 98 "pyInterpolator.pyx"
        }

#line 98 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 98 "pyInterpolator.pyx"
        case  2:

#line 98 "pyInterpolator.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 98 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("akima", 1, 5, 5, 2); 
#line 98 "pyInterpolator.pyx"
__PYX_ERR(4, 98, __pyx_L3_error)

#line 98 "pyInterpolator.pyx"
        }

#line 98 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 98 "pyInterpolator.pyx"
        case  3:

#line 98 "pyInterpolator.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;

#line 98 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("akima", 1, 5, 5, 3); 
#line 98 "pyInterpolator.pyx"
__PYX_ERR(4, 98, __pyx_L3_error)

#line 98 "pyInterpolator.pyx"
        }

#line 98 "pyInterpolator.pyx"
        CYTHON_FALLTHROUGH;

#line 98 "pyInterpolator.pyx"
        case  4:

#line 98 "pyInterpolator.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_e)) != 0)) kw_args--;

#line 98 "pyInterpolator.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("akima", 1, 5, 5, 4); 
#line 98 "pyInterpolator.pyx"
__PYX_ERR(4, 98, __pyx_L3_error)

#line 98 "pyInterpolator.pyx"
        }

#line 98 "pyInterpolator.pyx"
      }

#line 98 "pyInterpolator.pyx"
      if (unlikely(kw_args > 0)) {

#line 98 "pyInterpolator.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "akima") < 0)) __PYX_ERR(4, 98, __pyx_L3_error)

#line 98 "pyInterpolator.pyx"
      }

#line 98 "pyInterpolator.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {

#line 98 "pyInterpolator.pyx"
      goto __pyx_L5_argtuple_error;

#line 98 "pyInterpolator.pyx"
    } else {

#line 98 "pyInterpolator.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 98 "pyInterpolator.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 98 "pyInterpolator.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 98 "pyInterpolator.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 98 "pyInterpolator.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 98 "pyInterpolator.pyx"
    }

#line 98 "pyInterpolator.pyx"
    __pyx_v_a = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_a == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 98, __pyx_L3_error)

#line 98 "pyInterpolator.pyx"
    __pyx_v_b = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_b == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 98, __pyx_L3_error)

#line 98 "pyInterpolator.pyx"
    __pyx_v_c = values[2];

#line 98 "pyInterpolator.pyx"
    __pyx_v_d = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_d == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 98, __pyx_L3_error)

#line 98 "pyInterpolator.pyx"
    __pyx_v_e = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_e == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 98, __pyx_L3_error)

#line 98 "pyInterpolator.pyx"
  }

#line 98 "pyInterpolator.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 98 "pyInterpolator.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("akima", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); 
#line 98 "pyInterpolator.pyx"
__PYX_ERR(4, 98, __pyx_L3_error)

#line 98 "pyInterpolator.pyx"
  __pyx_L3_error:;

#line 98 "pyInterpolator.pyx"
  __Pyx_AddTraceback("iscecore.pyInterpolator.akima", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 98 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 98 "pyInterpolator.pyx"
  return NULL;

#line 98 "pyInterpolator.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 98 "pyInterpolator.pyx"
__pyx_pf_8iscecore_14pyInterpolator_18akima(((struct __pyx_obj_8iscecore_pyInterpolator *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c, __pyx_v_d, __pyx_v_e);

#line 98 "pyInterpolator.pyx"


#line 98 "pyInterpolator.pyx"
  /* function exit code */

#line 98 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 98 "pyInterpolator.pyx"
  return __pyx_r;

#line 98 "pyInterpolator.pyx"
}

#line 98 "pyInterpolator.pyx"


#line 98 "pyInterpolator.pyx"
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_18akima(struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self, int __pyx_v_a, int __pyx_v_b, PyObject *__pyx_v_c, double __pyx_v_d, double __pyx_v_e) {
  std::vector<std::vector<float> >  __pyx_v__c
#line 98 "pyInterpolator.pyx"
;

#line 98 "pyInterpolator.pyx"
  PyObject *__pyx_r = NULL;

#line 98 "pyInterpolator.pyx"
  __Pyx_RefNannyDeclarations

#line 98 "pyInterpolator.pyx"
  std::vector<std::vector<float> >  __pyx_t_1;

#line 98 "pyInterpolator.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 98 "pyInterpolator.pyx"
  __Pyx_RefNannySetupContext("akima", 0);

  /* "pyInterpolator.pyx":99
 *         return self.c_interp.quadInterpolate(_a,_b,c)
 *     def akima(self, int a, int b, c, double d, double e):
 *         cdef vector[vector[float]] _c = c             # <<<<<<<<<<<<<<
 *         return self.c_interp.akima(a,b,_c,d,e)
 * 
 */

#line 99 "pyInterpolator.pyx"
  __pyx_t_1 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_float_3e___(__pyx_v_c); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 99, __pyx_L1_error)

#line 99 "pyInterpolator.pyx"
  __pyx_v__c = __pyx_t_1;

  /* "pyInterpolator.pyx":100
 *     def akima(self, int a, int b, c, double d, double e):
 *         cdef vector[vector[float]] _c = c
 *         return self.c_interp.akima(a,b,_c,d,e)             # <<<<<<<<<<<<<<
 * 
 */

#line 100 "pyInterpolator.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 100 "pyInterpolator.pyx"
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->c_interp->akima(__pyx_v_a, __pyx_v_b, __pyx_v__c, __pyx_v_d, __pyx_v_e)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 100, __pyx_L1_error)

#line 100 "pyInterpolator.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 100 "pyInterpolator.pyx"
  __pyx_r = __pyx_t_2;

#line 100 "pyInterpolator.pyx"
  __pyx_t_2 = 0;

#line 100 "pyInterpolator.pyx"
  goto __pyx_L0;

  /* "pyInterpolator.pyx":98
 *         cdef vector[double] _b = b
 *         return self.c_interp.quadInterpolate(_a,_b,c)
 *     def akima(self, int a, int b, c, double d, double e):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[float]] _c = c
 *         return self.c_interp.akima(a,b,_c,d,e)
 */

#line 98 "pyInterpolator.pyx"


#line 98 "pyInterpolator.pyx"
  /* function exit code */

#line 98 "pyInterpolator.pyx"
  __pyx_L1_error:;

#line 98 "pyInterpolator.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 98 "pyInterpolator.pyx"
  __Pyx_AddTraceback("iscecore.pyInterpolator.akima", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 98 "pyInterpolator.pyx"
  __pyx_r = NULL;

#line 98 "pyInterpolator.pyx"
  __pyx_L0:;

#line 98 "pyInterpolator.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 98 "pyInterpolator.pyx"
  __Pyx_RefNannyFinishContext();

#line 98 "pyInterpolator.pyx"
  return __pyx_r;

#line 98 "pyInterpolator.pyx"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_8iscecore_14pyInterpolator_20__reduce_cython__(((struct __pyx_obj_8iscecore_pyInterpolator *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyInterpolator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_14pyInterpolator_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf_8iscecore_14pyInterpolator_22__setstate_cython__(((struct __pyx_obj_8iscecore_pyInterpolator *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_14pyInterpolator_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyInterpolator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyInterpolator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "pyPeg.pyx":14
 *     cdef bool __owner
 * 
 *     def __cinit__(self, lat=0., lon=0., hdg=0.):             # <<<<<<<<<<<<<<
 *         self.c_peg = new Peg(lat,lon,hdg)
 *         self.__owner = True
 */

#line 14 "pyPeg.pyx"


#line 14 "pyPeg.pyx"
/* Python wrapper */

#line 14 "pyPeg.pyx"
static int __pyx_pw_8iscecore_5pyPeg_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 14 "pyPeg.pyx"
static int __pyx_pw_8iscecore_5pyPeg_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_lat = 0
#line 14 "pyPeg.pyx"
;
  PyObject *__pyx_v_lon = 0
#line 14 "pyPeg.pyx"
;
  PyObject *__pyx_v_hdg = 0
#line 14 "pyPeg.pyx"
;

#line 14 "pyPeg.pyx"
  int __pyx_r;

#line 14 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 14 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 14 "pyPeg.pyx"
  {

#line 14 "pyPeg.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lat,&__pyx_n_s_lon,&__pyx_n_s_hdg,0};

#line 14 "pyPeg.pyx"
    PyObject* values[3] = {0,0,0};

#line 14 "pyPeg.pyx"
    values[0] = ((PyObject *)__pyx_float_0_);

#line 14 "pyPeg.pyx"
    values[1] = ((PyObject *)__pyx_float_0_);

#line 14 "pyPeg.pyx"
    values[2] = ((PyObject *)__pyx_float_0_);

#line 14 "pyPeg.pyx"
    if (unlikely(__pyx_kwds)) {

#line 14 "pyPeg.pyx"
      Py_ssize_t kw_args;

#line 14 "pyPeg.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 14 "pyPeg.pyx"
      switch (pos_args) {
        case  3: 
#line 14 "pyPeg.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 14 "pyPeg.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 14 "pyPeg.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 14 "pyPeg.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 14 "pyPeg.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 14 "pyPeg.pyx"
        CYTHON_FALLTHROUGH;

#line 14 "pyPeg.pyx"
        case  0: break;
        default: 
#line 14 "pyPeg.pyx"
goto __pyx_L5_argtuple_error;

#line 14 "pyPeg.pyx"
      }

#line 14 "pyPeg.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 14 "pyPeg.pyx"
      switch (pos_args) {

#line 14 "pyPeg.pyx"
        case  0:

#line 14 "pyPeg.pyx"
        if (kw_args > 0) {

#line 14 "pyPeg.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lat);

#line 14 "pyPeg.pyx"
          if (value) { values[0] = value; kw_args--; }

#line 14 "pyPeg.pyx"
        }

#line 14 "pyPeg.pyx"
        CYTHON_FALLTHROUGH;

#line 14 "pyPeg.pyx"
        case  1:

#line 14 "pyPeg.pyx"
        if (kw_args > 0) {

#line 14 "pyPeg.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lon);

#line 14 "pyPeg.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 14 "pyPeg.pyx"
        }

#line 14 "pyPeg.pyx"
        CYTHON_FALLTHROUGH;

#line 14 "pyPeg.pyx"
        case  2:

#line 14 "pyPeg.pyx"
        if (kw_args > 0) {

#line 14 "pyPeg.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hdg);

#line 14 "pyPeg.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 14 "pyPeg.pyx"
        }

#line 14 "pyPeg.pyx"
      }

#line 14 "pyPeg.pyx"
      if (unlikely(kw_args > 0)) {

#line 14 "pyPeg.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(5, 14, __pyx_L3_error)

#line 14 "pyPeg.pyx"
      }

#line 14 "pyPeg.pyx"
    } else {

#line 14 "pyPeg.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 14 "pyPeg.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 14 "pyPeg.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 14 "pyPeg.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 14 "pyPeg.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 14 "pyPeg.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 14 "pyPeg.pyx"
        CYTHON_FALLTHROUGH;
        case  0: 
#line 14 "pyPeg.pyx"
break;
        default: 
#line 14 "pyPeg.pyx"
goto __pyx_L5_argtuple_error;

#line 14 "pyPeg.pyx"
      }

#line 14 "pyPeg.pyx"
    }

#line 14 "pyPeg.pyx"
    __pyx_v_lat = values[0];

#line 14 "pyPeg.pyx"
    __pyx_v_lon = values[1];

#line 14 "pyPeg.pyx"
    __pyx_v_hdg = values[2];

#line 14 "pyPeg.pyx"
  }

#line 14 "pyPeg.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 14 "pyPeg.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 14 "pyPeg.pyx"
__PYX_ERR(5, 14, __pyx_L3_error)

#line 14 "pyPeg.pyx"
  __pyx_L3_error:;

#line 14 "pyPeg.pyx"
  __Pyx_AddTraceback("iscecore.pyPeg.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 14 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 14 "pyPeg.pyx"
  return -1;

#line 14 "pyPeg.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 14 "pyPeg.pyx"
__pyx_pf_8iscecore_5pyPeg___cinit__(((struct __pyx_obj_8iscecore_pyPeg *)__pyx_v_self), __pyx_v_lat, __pyx_v_lon, __pyx_v_hdg);

#line 14 "pyPeg.pyx"


#line 14 "pyPeg.pyx"
  /* function exit code */

#line 14 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 14 "pyPeg.pyx"
  return __pyx_r;

#line 14 "pyPeg.pyx"
}

#line 14 "pyPeg.pyx"


#line 14 "pyPeg.pyx"
static int __pyx_pf_8iscecore_5pyPeg___cinit__(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self, PyObject *__pyx_v_lat, PyObject *__pyx_v_lon, PyObject *__pyx_v_hdg) {

#line 14 "pyPeg.pyx"
  int __pyx_r;

#line 14 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 14 "pyPeg.pyx"
  double __pyx_t_1;

#line 14 "pyPeg.pyx"
  double __pyx_t_2;

#line 14 "pyPeg.pyx"
  double __pyx_t_3;

#line 14 "pyPeg.pyx"
  isce::core::Peg *__pyx_t_4;

#line 14 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyPeg.pyx":15
 * 
 *     def __cinit__(self, lat=0., lon=0., hdg=0.):
 *         self.c_peg = new Peg(lat,lon,hdg)             # <<<<<<<<<<<<<<
 *         self.__owner = True
 *     def __dealloc__(self):
 */

#line 15 "pyPeg.pyx"
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_lat); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 15, __pyx_L1_error)

#line 15 "pyPeg.pyx"
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_lon); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 15, __pyx_L1_error)

#line 15 "pyPeg.pyx"
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_hdg); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 15, __pyx_L1_error)

#line 15 "pyPeg.pyx"
  try {

#line 15 "pyPeg.pyx"
    __pyx_t_4 = new isce::core::Peg(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 15 "pyPeg.pyx"
  } catch(...) {

#line 15 "pyPeg.pyx"
    __Pyx_CppExn2PyErr();

#line 15 "pyPeg.pyx"
    __PYX_ERR(5, 15, __pyx_L1_error)

#line 15 "pyPeg.pyx"
  }

#line 15 "pyPeg.pyx"
  __pyx_v_self->c_peg = __pyx_t_4;

  /* "pyPeg.pyx":16
 *     def __cinit__(self, lat=0., lon=0., hdg=0.):
 *         self.c_peg = new Peg(lat,lon,hdg)
 *         self.__owner = True             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.__owner:
 */

#line 16 "pyPeg.pyx"
  __pyx_v_self->__pyx___owner = 1;

  /* "pyPeg.pyx":14
 *     cdef bool __owner
 * 
 *     def __cinit__(self, lat=0., lon=0., hdg=0.):             # <<<<<<<<<<<<<<
 *         self.c_peg = new Peg(lat,lon,hdg)
 *         self.__owner = True
 */

#line 14 "pyPeg.pyx"


#line 14 "pyPeg.pyx"
  /* function exit code */

#line 14 "pyPeg.pyx"
  __pyx_r = 0;

#line 14 "pyPeg.pyx"
  goto __pyx_L0;

#line 14 "pyPeg.pyx"
  __pyx_L1_error:;

#line 14 "pyPeg.pyx"
  __Pyx_AddTraceback("iscecore.pyPeg.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 14 "pyPeg.pyx"
  __pyx_r = -1;

#line 14 "pyPeg.pyx"
  __pyx_L0:;

#line 14 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 14 "pyPeg.pyx"
  return __pyx_r;

#line 14 "pyPeg.pyx"
}

/* "pyPeg.pyx":17
 *         self.c_peg = new Peg(lat,lon,hdg)
 *         self.__owner = True
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_peg
 */

#line 17 "pyPeg.pyx"


#line 17 "pyPeg.pyx"
/* Python wrapper */

#line 17 "pyPeg.pyx"
static void __pyx_pw_8iscecore_5pyPeg_3__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 17 "pyPeg.pyx"
static void __pyx_pw_8iscecore_5pyPeg_3__dealloc__(PyObject *__pyx_v_self) {

#line 17 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 17 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 17 "pyPeg.pyx"
  __pyx_pf_8iscecore_5pyPeg_2__dealloc__(((struct __pyx_obj_8iscecore_pyPeg *)__pyx_v_self));

#line 17 "pyPeg.pyx"


#line 17 "pyPeg.pyx"
  /* function exit code */

#line 17 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 17 "pyPeg.pyx"
}

#line 17 "pyPeg.pyx"


#line 17 "pyPeg.pyx"
static void __pyx_pf_8iscecore_5pyPeg_2__dealloc__(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self) {

#line 17 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 17 "pyPeg.pyx"
  int __pyx_t_1;

#line 17 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyPeg.pyx":18
 *         self.__owner = True
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_peg
 *     @staticmethod
 */

#line 18 "pyPeg.pyx"
  __pyx_t_1 = (__pyx_v_self->__pyx___owner != 0);

#line 18 "pyPeg.pyx"
  if (__pyx_t_1) {

    /* "pyPeg.pyx":19
 *     def __dealloc__(self):
 *         if self.__owner:
 *             del self.c_peg             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     def bind(pyPeg peg):
 */

#line 19 "pyPeg.pyx"
    delete __pyx_v_self->c_peg;

    /* "pyPeg.pyx":18
 *         self.__owner = True
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_peg
 *     @staticmethod
 */

#line 18 "pyPeg.pyx"
  }

  /* "pyPeg.pyx":17
 *         self.c_peg = new Peg(lat,lon,hdg)
 *         self.__owner = True
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_peg
 */

#line 17 "pyPeg.pyx"


#line 17 "pyPeg.pyx"
  /* function exit code */

#line 17 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 17 "pyPeg.pyx"
}

/* "pyPeg.pyx":21
 *             del self.c_peg
 *     @staticmethod
 *     def bind(pyPeg peg):             # <<<<<<<<<<<<<<
 *         new_peg = pyPeg()
 *         del new_peg.c_peg
 */

#line 21 "pyPeg.pyx"


#line 21 "pyPeg.pyx"
/* Python wrapper */

#line 21 "pyPeg.pyx"
static PyObject *__pyx_pw_8iscecore_5pyPeg_5bind(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8iscecore_5pyPeg_5bind = 
#line 21 "pyPeg.pyx"
{"bind", (PyCFunction)__pyx_pw_8iscecore_5pyPeg_5bind, METH_VARARGS|METH_KEYWORDS, 0};

#line 21 "pyPeg.pyx"
static PyObject *__pyx_pw_8iscecore_5pyPeg_5bind(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8iscecore_pyPeg *__pyx_v_peg = 0
#line 21 "pyPeg.pyx"
;

#line 21 "pyPeg.pyx"
  PyObject *__pyx_r = 0;

#line 21 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 21 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("bind (wrapper)", 0);

#line 21 "pyPeg.pyx"
  {

#line 21 "pyPeg.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_peg,0};

#line 21 "pyPeg.pyx"
    PyObject* values[1] = {0};

#line 21 "pyPeg.pyx"
    if (unlikely(__pyx_kwds)) {

#line 21 "pyPeg.pyx"
      Py_ssize_t kw_args;

#line 21 "pyPeg.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 21 "pyPeg.pyx"
      switch (pos_args) {
        case  1: 
#line 21 "pyPeg.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 21 "pyPeg.pyx"
        CYTHON_FALLTHROUGH;

#line 21 "pyPeg.pyx"
        case  0: break;
        default: 
#line 21 "pyPeg.pyx"
goto __pyx_L5_argtuple_error;

#line 21 "pyPeg.pyx"
      }

#line 21 "pyPeg.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 21 "pyPeg.pyx"
      switch (pos_args) {

#line 21 "pyPeg.pyx"
        case  0:

#line 21 "pyPeg.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_peg)) != 0)) kw_args--;
        else 
#line 21 "pyPeg.pyx"
goto __pyx_L5_argtuple_error;

#line 21 "pyPeg.pyx"
      }

#line 21 "pyPeg.pyx"
      if (unlikely(kw_args > 0)) {

#line 21 "pyPeg.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "bind") < 0)) __PYX_ERR(5, 21, __pyx_L3_error)

#line 21 "pyPeg.pyx"
      }

#line 21 "pyPeg.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {

#line 21 "pyPeg.pyx"
      goto __pyx_L5_argtuple_error;

#line 21 "pyPeg.pyx"
    } else {

#line 21 "pyPeg.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 21 "pyPeg.pyx"
    }

#line 21 "pyPeg.pyx"
    __pyx_v_peg = ((struct __pyx_obj_8iscecore_pyPeg *)values[0]);

#line 21 "pyPeg.pyx"
  }

#line 21 "pyPeg.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 21 "pyPeg.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bind", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 21 "pyPeg.pyx"
__PYX_ERR(5, 21, __pyx_L3_error)

#line 21 "pyPeg.pyx"
  __pyx_L3_error:;

#line 21 "pyPeg.pyx"
  __Pyx_AddTraceback("iscecore.pyPeg.bind", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 21 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 21 "pyPeg.pyx"
  return NULL;

#line 21 "pyPeg.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 21 "pyPeg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_peg), __pyx_ptype_8iscecore_pyPeg, 1, "peg", 0))) __PYX_ERR(5, 21, __pyx_L1_error)
  __pyx_r = 
#line 21 "pyPeg.pyx"
__pyx_pf_8iscecore_5pyPeg_4bind(__pyx_v_peg);

#line 21 "pyPeg.pyx"


#line 21 "pyPeg.pyx"
  /* function exit code */

#line 21 "pyPeg.pyx"
  goto __pyx_L0;

#line 21 "pyPeg.pyx"
  __pyx_L1_error:;

#line 21 "pyPeg.pyx"
  __pyx_r = NULL;

#line 21 "pyPeg.pyx"
  __pyx_L0:;

#line 21 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 21 "pyPeg.pyx"
  return __pyx_r;

#line 21 "pyPeg.pyx"
}

#line 21 "pyPeg.pyx"


#line 21 "pyPeg.pyx"
static PyObject *__pyx_pf_8iscecore_5pyPeg_4bind(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_peg) {
  struct __pyx_obj_8iscecore_pyPeg *__pyx_v_new_peg = NULL
#line 21 "pyPeg.pyx"
;

#line 21 "pyPeg.pyx"
  PyObject *__pyx_r = NULL;

#line 21 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 21 "pyPeg.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 21 "pyPeg.pyx"
  isce::core::Peg *__pyx_t_2;

#line 21 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("bind", 0);

  /* "pyPeg.pyx":22
 *     @staticmethod
 *     def bind(pyPeg peg):
 *         new_peg = pyPeg()             # <<<<<<<<<<<<<<
 *         del new_peg.c_peg
 *         new_peg.c_peg = peg.c_peg
 */

#line 22 "pyPeg.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8iscecore_pyPeg), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 22, __pyx_L1_error)

#line 22 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 22 "pyPeg.pyx"
  __pyx_v_new_peg = ((struct __pyx_obj_8iscecore_pyPeg *)__pyx_t_1);

#line 22 "pyPeg.pyx"
  __pyx_t_1 = 0;

  /* "pyPeg.pyx":23
 *     def bind(pyPeg peg):
 *         new_peg = pyPeg()
 *         del new_peg.c_peg             # <<<<<<<<<<<<<<
 *         new_peg.c_peg = peg.c_peg
 *         new_peg.__owner = False
 */

#line 23 "pyPeg.pyx"
  delete __pyx_v_new_peg->c_peg;

  /* "pyPeg.pyx":24
 *         new_peg = pyPeg()
 *         del new_peg.c_peg
 *         new_peg.c_peg = peg.c_peg             # <<<<<<<<<<<<<<
 *         new_peg.__owner = False
 *         return new_peg
 */

#line 24 "pyPeg.pyx"
  __pyx_t_2 = __pyx_v_peg->c_peg;

#line 24 "pyPeg.pyx"
  __pyx_v_new_peg->c_peg = __pyx_t_2;

  /* "pyPeg.pyx":25
 *         del new_peg.c_peg
 *         new_peg.c_peg = peg.c_peg
 *         new_peg.__owner = False             # <<<<<<<<<<<<<<
 *         return new_peg
 * 
 */

#line 25 "pyPeg.pyx"
  __pyx_v_new_peg->__pyx___owner = 0;

  /* "pyPeg.pyx":26
 *         new_peg.c_peg = peg.c_peg
 *         new_peg.__owner = False
 *         return new_peg             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 26 "pyPeg.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 26 "pyPeg.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_new_peg));

#line 26 "pyPeg.pyx"
  __pyx_r = ((PyObject *)__pyx_v_new_peg);

#line 26 "pyPeg.pyx"
  goto __pyx_L0;

  /* "pyPeg.pyx":21
 *             del self.c_peg
 *     @staticmethod
 *     def bind(pyPeg peg):             # <<<<<<<<<<<<<<
 *         new_peg = pyPeg()
 *         del new_peg.c_peg
 */

#line 21 "pyPeg.pyx"


#line 21 "pyPeg.pyx"
  /* function exit code */

#line 21 "pyPeg.pyx"
  __pyx_L1_error:;

#line 21 "pyPeg.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 21 "pyPeg.pyx"
  __Pyx_AddTraceback("iscecore.pyPeg.bind", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 21 "pyPeg.pyx"
  __pyx_r = NULL;

#line 21 "pyPeg.pyx"
  __pyx_L0:;

#line 21 "pyPeg.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_new_peg);

#line 21 "pyPeg.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 21 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 21 "pyPeg.pyx"
  return __pyx_r;

#line 21 "pyPeg.pyx"
}

/* "pyPeg.pyx":29
 * 
 *     @property
 *     def lat(self):             # <<<<<<<<<<<<<<
 *         return self.c_peg.lat
 *     @lat.setter
 */

#line 29 "pyPeg.pyx"


#line 29 "pyPeg.pyx"
/* Python wrapper */

#line 29 "pyPeg.pyx"
static PyObject *__pyx_pw_8iscecore_5pyPeg_3lat_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 29 "pyPeg.pyx"
static PyObject *__pyx_pw_8iscecore_5pyPeg_3lat_1__get__(PyObject *__pyx_v_self) {

#line 29 "pyPeg.pyx"
  PyObject *__pyx_r = 0;

#line 29 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 29 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 29 "pyPeg.pyx"
__pyx_pf_8iscecore_5pyPeg_3lat___get__(((struct __pyx_obj_8iscecore_pyPeg *)__pyx_v_self));

#line 29 "pyPeg.pyx"


#line 29 "pyPeg.pyx"
  /* function exit code */

#line 29 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 29 "pyPeg.pyx"
  return __pyx_r;

#line 29 "pyPeg.pyx"
}

#line 29 "pyPeg.pyx"


#line 29 "pyPeg.pyx"
static PyObject *__pyx_pf_8iscecore_5pyPeg_3lat___get__(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self) {

#line 29 "pyPeg.pyx"
  PyObject *__pyx_r = NULL;

#line 29 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 29 "pyPeg.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 29 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPeg.pyx":30
 *     @property
 *     def lat(self):
 *         return self.c_peg.lat             # <<<<<<<<<<<<<<
 *     @lat.setter
 *     def lat(self, double a):
 */

#line 30 "pyPeg.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 30 "pyPeg.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_peg->lat); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 30, __pyx_L1_error)

#line 30 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 30 "pyPeg.pyx"
  __pyx_r = __pyx_t_1;

#line 30 "pyPeg.pyx"
  __pyx_t_1 = 0;

#line 30 "pyPeg.pyx"
  goto __pyx_L0;

  /* "pyPeg.pyx":29
 * 
 *     @property
 *     def lat(self):             # <<<<<<<<<<<<<<
 *         return self.c_peg.lat
 *     @lat.setter
 */

#line 29 "pyPeg.pyx"


#line 29 "pyPeg.pyx"
  /* function exit code */

#line 29 "pyPeg.pyx"
  __pyx_L1_error:;

#line 29 "pyPeg.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 29 "pyPeg.pyx"
  __Pyx_AddTraceback("iscecore.pyPeg.lat.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 29 "pyPeg.pyx"
  __pyx_r = NULL;

#line 29 "pyPeg.pyx"
  __pyx_L0:;

#line 29 "pyPeg.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 29 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 29 "pyPeg.pyx"
  return __pyx_r;

#line 29 "pyPeg.pyx"
}

/* "pyPeg.pyx":32
 *         return self.c_peg.lat
 *     @lat.setter
 *     def lat(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_peg.lat = a
 *     @property
 */

#line 32 "pyPeg.pyx"


#line 32 "pyPeg.pyx"
/* Python wrapper */

#line 32 "pyPeg.pyx"
static int __pyx_pw_8iscecore_5pyPeg_3lat_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 32 "pyPeg.pyx"
static int __pyx_pw_8iscecore_5pyPeg_3lat_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a
#line 32 "pyPeg.pyx"
;

#line 32 "pyPeg.pyx"
  int __pyx_r;

#line 32 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 32 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);

#line 32 "pyPeg.pyx"
  assert(__pyx_arg_a); {

#line 32 "pyPeg.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 32, __pyx_L3_error)

#line 32 "pyPeg.pyx"
  }

#line 32 "pyPeg.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 32 "pyPeg.pyx"
  __pyx_L3_error:;

#line 32 "pyPeg.pyx"
  __Pyx_AddTraceback("iscecore.pyPeg.lat.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 32 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 32 "pyPeg.pyx"
  return -1;

#line 32 "pyPeg.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 32 "pyPeg.pyx"
__pyx_pf_8iscecore_5pyPeg_3lat_2__set__(((struct __pyx_obj_8iscecore_pyPeg *)__pyx_v_self), ((double)__pyx_v_a));

#line 32 "pyPeg.pyx"


#line 32 "pyPeg.pyx"
  /* function exit code */

#line 32 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 32 "pyPeg.pyx"
  return __pyx_r;

#line 32 "pyPeg.pyx"
}

#line 32 "pyPeg.pyx"


#line 32 "pyPeg.pyx"
static int __pyx_pf_8iscecore_5pyPeg_3lat_2__set__(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self, double __pyx_v_a) {

#line 32 "pyPeg.pyx"
  int __pyx_r;

#line 32 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 32 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPeg.pyx":33
 *     @lat.setter
 *     def lat(self, double a):
 *         self.c_peg.lat = a             # <<<<<<<<<<<<<<
 *     @property
 *     def lon(self):
 */

#line 33 "pyPeg.pyx"
  __pyx_v_self->c_peg->lat = __pyx_v_a;

  /* "pyPeg.pyx":32
 *         return self.c_peg.lat
 *     @lat.setter
 *     def lat(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_peg.lat = a
 *     @property
 */

#line 32 "pyPeg.pyx"


#line 32 "pyPeg.pyx"
  /* function exit code */

#line 32 "pyPeg.pyx"
  __pyx_r = 0;

#line 32 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 32 "pyPeg.pyx"
  return __pyx_r;

#line 32 "pyPeg.pyx"
}

/* "pyPeg.pyx":35
 *         self.c_peg.lat = a
 *     @property
 *     def lon(self):             # <<<<<<<<<<<<<<
 *         return self.c_peg.lon
 *     @lon.setter
 */

#line 35 "pyPeg.pyx"


#line 35 "pyPeg.pyx"
/* Python wrapper */

#line 35 "pyPeg.pyx"
static PyObject *__pyx_pw_8iscecore_5pyPeg_3lon_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 35 "pyPeg.pyx"
static PyObject *__pyx_pw_8iscecore_5pyPeg_3lon_1__get__(PyObject *__pyx_v_self) {

#line 35 "pyPeg.pyx"
  PyObject *__pyx_r = 0;

#line 35 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 35 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 35 "pyPeg.pyx"
__pyx_pf_8iscecore_5pyPeg_3lon___get__(((struct __pyx_obj_8iscecore_pyPeg *)__pyx_v_self));

#line 35 "pyPeg.pyx"


#line 35 "pyPeg.pyx"
  /* function exit code */

#line 35 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 35 "pyPeg.pyx"
  return __pyx_r;

#line 35 "pyPeg.pyx"
}

#line 35 "pyPeg.pyx"


#line 35 "pyPeg.pyx"
static PyObject *__pyx_pf_8iscecore_5pyPeg_3lon___get__(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self) {

#line 35 "pyPeg.pyx"
  PyObject *__pyx_r = NULL;

#line 35 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 35 "pyPeg.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 35 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPeg.pyx":36
 *     @property
 *     def lon(self):
 *         return self.c_peg.lon             # <<<<<<<<<<<<<<
 *     @lon.setter
 *     def lon(self, double a):
 */

#line 36 "pyPeg.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 36 "pyPeg.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_peg->lon); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 36, __pyx_L1_error)

#line 36 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 36 "pyPeg.pyx"
  __pyx_r = __pyx_t_1;

#line 36 "pyPeg.pyx"
  __pyx_t_1 = 0;

#line 36 "pyPeg.pyx"
  goto __pyx_L0;

  /* "pyPeg.pyx":35
 *         self.c_peg.lat = a
 *     @property
 *     def lon(self):             # <<<<<<<<<<<<<<
 *         return self.c_peg.lon
 *     @lon.setter
 */

#line 35 "pyPeg.pyx"


#line 35 "pyPeg.pyx"
  /* function exit code */

#line 35 "pyPeg.pyx"
  __pyx_L1_error:;

#line 35 "pyPeg.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 35 "pyPeg.pyx"
  __Pyx_AddTraceback("iscecore.pyPeg.lon.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 35 "pyPeg.pyx"
  __pyx_r = NULL;

#line 35 "pyPeg.pyx"
  __pyx_L0:;

#line 35 "pyPeg.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 35 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 35 "pyPeg.pyx"
  return __pyx_r;

#line 35 "pyPeg.pyx"
}

/* "pyPeg.pyx":38
 *         return self.c_peg.lon
 *     @lon.setter
 *     def lon(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_peg.lon = a
 *     @property
 */

#line 38 "pyPeg.pyx"


#line 38 "pyPeg.pyx"
/* Python wrapper */

#line 38 "pyPeg.pyx"
static int __pyx_pw_8iscecore_5pyPeg_3lon_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 38 "pyPeg.pyx"
static int __pyx_pw_8iscecore_5pyPeg_3lon_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a
#line 38 "pyPeg.pyx"
;

#line 38 "pyPeg.pyx"
  int __pyx_r;

#line 38 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 38 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);

#line 38 "pyPeg.pyx"
  assert(__pyx_arg_a); {

#line 38 "pyPeg.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 38, __pyx_L3_error)

#line 38 "pyPeg.pyx"
  }

#line 38 "pyPeg.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 38 "pyPeg.pyx"
  __pyx_L3_error:;

#line 38 "pyPeg.pyx"
  __Pyx_AddTraceback("iscecore.pyPeg.lon.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 38 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 38 "pyPeg.pyx"
  return -1;

#line 38 "pyPeg.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 38 "pyPeg.pyx"
__pyx_pf_8iscecore_5pyPeg_3lon_2__set__(((struct __pyx_obj_8iscecore_pyPeg *)__pyx_v_self), ((double)__pyx_v_a));

#line 38 "pyPeg.pyx"


#line 38 "pyPeg.pyx"
  /* function exit code */

#line 38 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 38 "pyPeg.pyx"
  return __pyx_r;

#line 38 "pyPeg.pyx"
}

#line 38 "pyPeg.pyx"


#line 38 "pyPeg.pyx"
static int __pyx_pf_8iscecore_5pyPeg_3lon_2__set__(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self, double __pyx_v_a) {

#line 38 "pyPeg.pyx"
  int __pyx_r;

#line 38 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 38 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPeg.pyx":39
 *     @lon.setter
 *     def lon(self, double a):
 *         self.c_peg.lon = a             # <<<<<<<<<<<<<<
 *     @property
 *     def hdg(self):
 */

#line 39 "pyPeg.pyx"
  __pyx_v_self->c_peg->lon = __pyx_v_a;

  /* "pyPeg.pyx":38
 *         return self.c_peg.lon
 *     @lon.setter
 *     def lon(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_peg.lon = a
 *     @property
 */

#line 38 "pyPeg.pyx"


#line 38 "pyPeg.pyx"
  /* function exit code */

#line 38 "pyPeg.pyx"
  __pyx_r = 0;

#line 38 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 38 "pyPeg.pyx"
  return __pyx_r;

#line 38 "pyPeg.pyx"
}

/* "pyPeg.pyx":41
 *         self.c_peg.lon = a
 *     @property
 *     def hdg(self):             # <<<<<<<<<<<<<<
 *         return self.c_peg.hdg
 *     @hdg.setter
 */

#line 41 "pyPeg.pyx"


#line 41 "pyPeg.pyx"
/* Python wrapper */

#line 41 "pyPeg.pyx"
static PyObject *__pyx_pw_8iscecore_5pyPeg_3hdg_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 41 "pyPeg.pyx"
static PyObject *__pyx_pw_8iscecore_5pyPeg_3hdg_1__get__(PyObject *__pyx_v_self) {

#line 41 "pyPeg.pyx"
  PyObject *__pyx_r = 0;

#line 41 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 41 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 41 "pyPeg.pyx"
__pyx_pf_8iscecore_5pyPeg_3hdg___get__(((struct __pyx_obj_8iscecore_pyPeg *)__pyx_v_self));

#line 41 "pyPeg.pyx"


#line 41 "pyPeg.pyx"
  /* function exit code */

#line 41 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 41 "pyPeg.pyx"
  return __pyx_r;

#line 41 "pyPeg.pyx"
}

#line 41 "pyPeg.pyx"


#line 41 "pyPeg.pyx"
static PyObject *__pyx_pf_8iscecore_5pyPeg_3hdg___get__(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self) {

#line 41 "pyPeg.pyx"
  PyObject *__pyx_r = NULL;

#line 41 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 41 "pyPeg.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 41 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPeg.pyx":42
 *     @property
 *     def hdg(self):
 *         return self.c_peg.hdg             # <<<<<<<<<<<<<<
 *     @hdg.setter
 *     def hdg(self, double a):
 */

#line 42 "pyPeg.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 42 "pyPeg.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_peg->hdg); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 42, __pyx_L1_error)

#line 42 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 42 "pyPeg.pyx"
  __pyx_r = __pyx_t_1;

#line 42 "pyPeg.pyx"
  __pyx_t_1 = 0;

#line 42 "pyPeg.pyx"
  goto __pyx_L0;

  /* "pyPeg.pyx":41
 *         self.c_peg.lon = a
 *     @property
 *     def hdg(self):             # <<<<<<<<<<<<<<
 *         return self.c_peg.hdg
 *     @hdg.setter
 */

#line 41 "pyPeg.pyx"


#line 41 "pyPeg.pyx"
  /* function exit code */

#line 41 "pyPeg.pyx"
  __pyx_L1_error:;

#line 41 "pyPeg.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 41 "pyPeg.pyx"
  __Pyx_AddTraceback("iscecore.pyPeg.hdg.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 41 "pyPeg.pyx"
  __pyx_r = NULL;

#line 41 "pyPeg.pyx"
  __pyx_L0:;

#line 41 "pyPeg.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 41 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 41 "pyPeg.pyx"
  return __pyx_r;

#line 41 "pyPeg.pyx"
}

/* "pyPeg.pyx":44
 *         return self.c_peg.hdg
 *     @hdg.setter
 *     def hdg(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_peg.hdg = a
 *     def dPrint(self):
 */

#line 44 "pyPeg.pyx"


#line 44 "pyPeg.pyx"
/* Python wrapper */

#line 44 "pyPeg.pyx"
static int __pyx_pw_8iscecore_5pyPeg_3hdg_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 44 "pyPeg.pyx"
static int __pyx_pw_8iscecore_5pyPeg_3hdg_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a
#line 44 "pyPeg.pyx"
;

#line 44 "pyPeg.pyx"
  int __pyx_r;

#line 44 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 44 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);

#line 44 "pyPeg.pyx"
  assert(__pyx_arg_a); {

#line 44 "pyPeg.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 44, __pyx_L3_error)

#line 44 "pyPeg.pyx"
  }

#line 44 "pyPeg.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 44 "pyPeg.pyx"
  __pyx_L3_error:;

#line 44 "pyPeg.pyx"
  __Pyx_AddTraceback("iscecore.pyPeg.hdg.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 44 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 44 "pyPeg.pyx"
  return -1;

#line 44 "pyPeg.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 44 "pyPeg.pyx"
__pyx_pf_8iscecore_5pyPeg_3hdg_2__set__(((struct __pyx_obj_8iscecore_pyPeg *)__pyx_v_self), ((double)__pyx_v_a));

#line 44 "pyPeg.pyx"


#line 44 "pyPeg.pyx"
  /* function exit code */

#line 44 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 44 "pyPeg.pyx"
  return __pyx_r;

#line 44 "pyPeg.pyx"
}

#line 44 "pyPeg.pyx"


#line 44 "pyPeg.pyx"
static int __pyx_pf_8iscecore_5pyPeg_3hdg_2__set__(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self, double __pyx_v_a) {

#line 44 "pyPeg.pyx"
  int __pyx_r;

#line 44 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 44 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPeg.pyx":45
 *     @hdg.setter
 *     def hdg(self, double a):
 *         self.c_peg.hdg = a             # <<<<<<<<<<<<<<
 *     def dPrint(self):
 *         print("lat = "+str(self.lat)+", lon = "+str(self.lon)+", hdg = "+str(self.hdg))
 */

#line 45 "pyPeg.pyx"
  __pyx_v_self->c_peg->hdg = __pyx_v_a;

  /* "pyPeg.pyx":44
 *         return self.c_peg.hdg
 *     @hdg.setter
 *     def hdg(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_peg.hdg = a
 *     def dPrint(self):
 */

#line 44 "pyPeg.pyx"


#line 44 "pyPeg.pyx"
  /* function exit code */

#line 44 "pyPeg.pyx"
  __pyx_r = 0;

#line 44 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 44 "pyPeg.pyx"
  return __pyx_r;

#line 44 "pyPeg.pyx"
}

/* "pyPeg.pyx":46
 *     def hdg(self, double a):
 *         self.c_peg.hdg = a
 *     def dPrint(self):             # <<<<<<<<<<<<<<
 *         print("lat = "+str(self.lat)+", lon = "+str(self.lon)+", hdg = "+str(self.hdg))
 *     def copy(self, pg):
 */

#line 46 "pyPeg.pyx"


#line 46 "pyPeg.pyx"
/* Python wrapper */

#line 46 "pyPeg.pyx"
static PyObject *__pyx_pw_8iscecore_5pyPeg_7dPrint(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 46 "pyPeg.pyx"
static PyObject *__pyx_pw_8iscecore_5pyPeg_7dPrint(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 46 "pyPeg.pyx"
  PyObject *__pyx_r = 0;

#line 46 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 46 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("dPrint (wrapper)", 0);
  __pyx_r = 
#line 46 "pyPeg.pyx"
__pyx_pf_8iscecore_5pyPeg_6dPrint(((struct __pyx_obj_8iscecore_pyPeg *)__pyx_v_self));

#line 46 "pyPeg.pyx"


#line 46 "pyPeg.pyx"
  /* function exit code */

#line 46 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 46 "pyPeg.pyx"
  return __pyx_r;

#line 46 "pyPeg.pyx"
}

#line 46 "pyPeg.pyx"


#line 46 "pyPeg.pyx"
static PyObject *__pyx_pf_8iscecore_5pyPeg_6dPrint(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self) {

#line 46 "pyPeg.pyx"
  PyObject *__pyx_r = NULL;

#line 46 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 46 "pyPeg.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 46 "pyPeg.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 46 "pyPeg.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 46 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("dPrint", 0);

  /* "pyPeg.pyx":47
 *         self.c_peg.hdg = a
 *     def dPrint(self):
 *         print("lat = "+str(self.lat)+", lon = "+str(self.lon)+", hdg = "+str(self.hdg))             # <<<<<<<<<<<<<<
 *     def copy(self, pg):
 *         try:
 */

#line 47 "pyPeg.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_lat); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 47, __pyx_L1_error)

#line 47 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 47 "pyPeg.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 47, __pyx_L1_error)

#line 47 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 47 "pyPeg.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 47 "pyPeg.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 47 "pyPeg.pyx"
  __pyx_t_1 = 0;

#line 47 "pyPeg.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 47, __pyx_L1_error)

#line 47 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 47 "pyPeg.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 47 "pyPeg.pyx"
  __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_lat_2, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 47, __pyx_L1_error)

#line 47 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 47 "pyPeg.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 47 "pyPeg.pyx"
  __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_t_2, __pyx_kp_u_lon_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 47, __pyx_L1_error)

#line 47 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 47 "pyPeg.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 47 "pyPeg.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_lon); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 47, __pyx_L1_error)

#line 47 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 47 "pyPeg.pyx"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 47, __pyx_L1_error)

#line 47 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 47 "pyPeg.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 47 "pyPeg.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 47 "pyPeg.pyx"
  __pyx_t_2 = 0;

#line 47 "pyPeg.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 47, __pyx_L1_error)

#line 47 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 47 "pyPeg.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 47 "pyPeg.pyx"
  __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 47, __pyx_L1_error)

#line 47 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 47 "pyPeg.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 47 "pyPeg.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 47 "pyPeg.pyx"
  __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_t_3, __pyx_kp_u_hdg_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 47, __pyx_L1_error)

#line 47 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 47 "pyPeg.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 47 "pyPeg.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hdg); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 47, __pyx_L1_error)

#line 47 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 47 "pyPeg.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 47, __pyx_L1_error)

#line 47 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 47 "pyPeg.pyx"
  __Pyx_GIVEREF(__pyx_t_3);

#line 47 "pyPeg.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);

#line 47 "pyPeg.pyx"
  __pyx_t_3 = 0;

#line 47 "pyPeg.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 47, __pyx_L1_error)

#line 47 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 47 "pyPeg.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 47 "pyPeg.pyx"
  __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 47, __pyx_L1_error)

#line 47 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 47 "pyPeg.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 47 "pyPeg.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 47 "pyPeg.pyx"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 47, __pyx_L1_error)

#line 47 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 47 "pyPeg.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 47 "pyPeg.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);

#line 47 "pyPeg.pyx"
  __pyx_t_1 = 0;

#line 47 "pyPeg.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 47, __pyx_L1_error)

#line 47 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 47 "pyPeg.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 47 "pyPeg.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyPeg.pyx":46
 *     def hdg(self, double a):
 *         self.c_peg.hdg = a
 *     def dPrint(self):             # <<<<<<<<<<<<<<
 *         print("lat = "+str(self.lat)+", lon = "+str(self.lon)+", hdg = "+str(self.hdg))
 *     def copy(self, pg):
 */

#line 46 "pyPeg.pyx"


#line 46 "pyPeg.pyx"
  /* function exit code */

#line 46 "pyPeg.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 46 "pyPeg.pyx"
  goto __pyx_L0;

#line 46 "pyPeg.pyx"
  __pyx_L1_error:;

#line 46 "pyPeg.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 46 "pyPeg.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 46 "pyPeg.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 46 "pyPeg.pyx"
  __Pyx_AddTraceback("iscecore.pyPeg.dPrint", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 46 "pyPeg.pyx"
  __pyx_r = NULL;

#line 46 "pyPeg.pyx"
  __pyx_L0:;

#line 46 "pyPeg.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 46 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 46 "pyPeg.pyx"
  return __pyx_r;

#line 46 "pyPeg.pyx"
}

/* "pyPeg.pyx":48
 *     def dPrint(self):
 *         print("lat = "+str(self.lat)+", lon = "+str(self.lon)+", hdg = "+str(self.hdg))
 *     def copy(self, pg):             # <<<<<<<<<<<<<<
 *         try:
 *             self.lat = pg.lat
 */

#line 48 "pyPeg.pyx"


#line 48 "pyPeg.pyx"
/* Python wrapper */

#line 48 "pyPeg.pyx"
static PyObject *__pyx_pw_8iscecore_5pyPeg_9copy(PyObject *__pyx_v_self, PyObject *__pyx_v_pg); /*proto*/

#line 48 "pyPeg.pyx"
static PyObject *__pyx_pw_8iscecore_5pyPeg_9copy(PyObject *__pyx_v_self, PyObject *__pyx_v_pg) {

#line 48 "pyPeg.pyx"
  PyObject *__pyx_r = 0;

#line 48 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 48 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = 
#line 48 "pyPeg.pyx"
__pyx_pf_8iscecore_5pyPeg_8copy(((struct __pyx_obj_8iscecore_pyPeg *)__pyx_v_self), ((PyObject *)__pyx_v_pg));

#line 48 "pyPeg.pyx"


#line 48 "pyPeg.pyx"
  /* function exit code */

#line 48 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 48 "pyPeg.pyx"
  return __pyx_r;

#line 48 "pyPeg.pyx"
}

#line 48 "pyPeg.pyx"


#line 48 "pyPeg.pyx"
static PyObject *__pyx_pf_8iscecore_5pyPeg_8copy(struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self, PyObject *__pyx_v_pg) {

#line 48 "pyPeg.pyx"
  PyObject *__pyx_r = NULL;

#line 48 "pyPeg.pyx"
  __Pyx_RefNannyDeclarations

#line 48 "pyPeg.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 48 "pyPeg.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 48 "pyPeg.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 48 "pyPeg.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 48 "pyPeg.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 48 "pyPeg.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 48 "pyPeg.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 48 "pyPeg.pyx"
  __Pyx_RefNannySetupContext("copy", 0);

  /* "pyPeg.pyx":49
 *         print("lat = "+str(self.lat)+", lon = "+str(self.lon)+", hdg = "+str(self.hdg))
 *     def copy(self, pg):
 *         try:             # <<<<<<<<<<<<<<
 *             self.lat = pg.lat
 *             self.lon = pg.lon
 */

#line 49 "pyPeg.pyx"
  {

#line 49 "pyPeg.pyx"
    __Pyx_PyThreadState_declare

#line 49 "pyPeg.pyx"
    __Pyx_PyThreadState_assign

#line 49 "pyPeg.pyx"
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);

#line 49 "pyPeg.pyx"
    __Pyx_XGOTREF(__pyx_t_1);

#line 49 "pyPeg.pyx"
    __Pyx_XGOTREF(__pyx_t_2);

#line 49 "pyPeg.pyx"
    __Pyx_XGOTREF(__pyx_t_3);

#line 49 "pyPeg.pyx"
    /*try:*/ {

      /* "pyPeg.pyx":50
 *     def copy(self, pg):
 *         try:
 *             self.lat = pg.lat             # <<<<<<<<<<<<<<
 *             self.lon = pg.lon
 *             self.hdg = pg.hdg
 */

#line 50 "pyPeg.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_pg, __pyx_n_s_lat); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 50, __pyx_L3_error)

#line 50 "pyPeg.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 50 "pyPeg.pyx"
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_lat, __pyx_t_4) < 0) __PYX_ERR(5, 50, __pyx_L3_error)

#line 50 "pyPeg.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyPeg.pyx":51
 *         try:
 *             self.lat = pg.lat
 *             self.lon = pg.lon             # <<<<<<<<<<<<<<
 *             self.hdg = pg.hdg
 *         # Note: this allows for a dummy class object to be passed in that just has lat, lon, and hdg
 */

#line 51 "pyPeg.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_pg, __pyx_n_s_lon); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 51, __pyx_L3_error)

#line 51 "pyPeg.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 51 "pyPeg.pyx"
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_lon, __pyx_t_4) < 0) __PYX_ERR(5, 51, __pyx_L3_error)

#line 51 "pyPeg.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyPeg.pyx":52
 *             self.lat = pg.lat
 *             self.lon = pg.lon
 *             self.hdg = pg.hdg             # <<<<<<<<<<<<<<
 *         # Note: this allows for a dummy class object to be passed in that just has lat, lon, and hdg
 *         # as parameters!
 */

#line 52 "pyPeg.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_pg, __pyx_n_s_hdg); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 52, __pyx_L3_error)

#line 52 "pyPeg.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 52 "pyPeg.pyx"
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hdg, __pyx_t_4) < 0) __PYX_ERR(5, 52, __pyx_L3_error)

#line 52 "pyPeg.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyPeg.pyx":49
 *         print("lat = "+str(self.lat)+", lon = "+str(self.lon)+", hdg = "+str(self.hdg))
 *     def copy(self, pg):
 *         try:             # <<<<<<<<<<<<<<
 *             self.lat = pg.lat
 *             self.lon = pg.lon
 */

#line 49 "pyPeg.pyx"
    }

#line 49 "pyPeg.pyx"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 49 "pyPeg.pyx"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 49 "pyPeg.pyx"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 49 "pyPeg.pyx"
    goto __pyx_L8_try_end;

#line 49 "pyPeg.pyx"
    __pyx_L3_error:;

#line 49 "pyPeg.pyx"
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyPeg.pyx":55
 *         # Note: this allows for a dummy class object to be passed in that just has lat, lon, and hdg
 *         # as parameters!
 *         except:             # <<<<<<<<<<<<<<
 *             print("Error: Object passed in to copy is incompatible with object of type pyPeg.")
 */

#line 55 "pyPeg.pyx"
    /*except:*/ {

#line 55 "pyPeg.pyx"
      __Pyx_AddTraceback("iscecore.pyPeg.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 55 "pyPeg.pyx"
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(5, 55, __pyx_L5_except_error)

#line 55 "pyPeg.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 55 "pyPeg.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 55 "pyPeg.pyx"
      __Pyx_GOTREF(__pyx_t_6);

      /* "pyPeg.pyx":56
 *         # as parameters!
 *         except:
 *             print("Error: Object passed in to copy is incompatible with object of type pyPeg.")             # <<<<<<<<<<<<<<
 */

#line 56 "pyPeg.pyx"
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 56, __pyx_L5_except_error)

#line 56 "pyPeg.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 56 "pyPeg.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 56 "pyPeg.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 56 "pyPeg.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 56 "pyPeg.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 56 "pyPeg.pyx"
      goto __pyx_L4_exception_handled;

#line 56 "pyPeg.pyx"
    }

#line 56 "pyPeg.pyx"
    __pyx_L5_except_error:;

    /* "pyPeg.pyx":49
 *         print("lat = "+str(self.lat)+", lon = "+str(self.lon)+", hdg = "+str(self.hdg))
 *     def copy(self, pg):
 *         try:             # <<<<<<<<<<<<<<
 *             self.lat = pg.lat
 *             self.lon = pg.lon
 */

#line 49 "pyPeg.pyx"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 49 "pyPeg.pyx"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 49 "pyPeg.pyx"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 49 "pyPeg.pyx"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 49 "pyPeg.pyx"
    goto __pyx_L1_error;

#line 49 "pyPeg.pyx"
    __pyx_L4_exception_handled:;

#line 49 "pyPeg.pyx"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 49 "pyPeg.pyx"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 49 "pyPeg.pyx"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 49 "pyPeg.pyx"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 49 "pyPeg.pyx"
    __pyx_L8_try_end:;

#line 49 "pyPeg.pyx"
  }

  /* "pyPeg.pyx":48
 *     def dPrint(self):
 *         print("lat = "+str(self.lat)+", lon = "+str(self.lon)+", hdg = "+str(self.hdg))
 *     def copy(self, pg):             # <<<<<<<<<<<<<<
 *         try:
 *             self.lat = pg.lat
 */

#line 48 "pyPeg.pyx"


#line 48 "pyPeg.pyx"
  /* function exit code */

#line 48 "pyPeg.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 48 "pyPeg.pyx"
  goto __pyx_L0;

#line 48 "pyPeg.pyx"
  __pyx_L1_error:;

#line 48 "pyPeg.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 48 "pyPeg.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 48 "pyPeg.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 48 "pyPeg.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 48 "pyPeg.pyx"
  __Pyx_AddTraceback("iscecore.pyPeg.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 48 "pyPeg.pyx"
  __pyx_r = NULL;

#line 48 "pyPeg.pyx"
  __pyx_L0:;

#line 48 "pyPeg.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 48 "pyPeg.pyx"
  __Pyx_RefNannyFinishContext();

#line 48 "pyPeg.pyx"
  return __pyx_r;

#line 48 "pyPeg.pyx"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_5pyPeg_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_5pyPeg_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_8iscecore_5pyPeg_10__reduce_cython__(((struct __pyx_obj_8iscecore_pyPeg *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_5pyPeg_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyPeg.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_5pyPeg_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_5pyPeg_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf_8iscecore_5pyPeg_12__setstate_cython__(((struct __pyx_obj_8iscecore_pyPeg *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_5pyPeg_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPeg *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyPeg.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "pyPegtrans.pyx":15
 *     cdef bool __owner
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.c_pegtrans = new Pegtrans()
 *         self.__owner = True
 */

#line 15 "pyPegtrans.pyx"


#line 15 "pyPegtrans.pyx"
/* Python wrapper */

#line 15 "pyPegtrans.pyx"
static int __pyx_pw_8iscecore_10pyPegtrans_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 15 "pyPegtrans.pyx"
static int __pyx_pw_8iscecore_10pyPegtrans_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 15 "pyPegtrans.pyx"
  int __pyx_r;

#line 15 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 15 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 15 "pyPegtrans.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 15 "pyPegtrans.pyx"
}

#line 15 "pyPegtrans.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = 
#line 15 "pyPegtrans.pyx"
__pyx_pf_8iscecore_10pyPegtrans___cinit__(((struct __pyx_obj_8iscecore_pyPegtrans *)__pyx_v_self));

#line 15 "pyPegtrans.pyx"


#line 15 "pyPegtrans.pyx"
  /* function exit code */

#line 15 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 15 "pyPegtrans.pyx"
  return __pyx_r;

#line 15 "pyPegtrans.pyx"
}

#line 15 "pyPegtrans.pyx"


#line 15 "pyPegtrans.pyx"
static int __pyx_pf_8iscecore_10pyPegtrans___cinit__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self) {

#line 15 "pyPegtrans.pyx"
  int __pyx_r;

#line 15 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 15 "pyPegtrans.pyx"
  isce::core::Pegtrans *__pyx_t_1;

#line 15 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyPegtrans.pyx":16
 * 
 *     def __cinit__(self):
 *         self.c_pegtrans = new Pegtrans()             # <<<<<<<<<<<<<<
 *         self.__owner = True
 *     def __dealloc__(self):
 */

#line 16 "pyPegtrans.pyx"
  try {

#line 16 "pyPegtrans.pyx"
    __pyx_t_1 = new isce::core::Pegtrans();

#line 16 "pyPegtrans.pyx"
  } catch(...) {

#line 16 "pyPegtrans.pyx"
    __Pyx_CppExn2PyErr();

#line 16 "pyPegtrans.pyx"
    __PYX_ERR(6, 16, __pyx_L1_error)

#line 16 "pyPegtrans.pyx"
  }

#line 16 "pyPegtrans.pyx"
  __pyx_v_self->c_pegtrans = __pyx_t_1;

  /* "pyPegtrans.pyx":17
 *     def __cinit__(self):
 *         self.c_pegtrans = new Pegtrans()
 *         self.__owner = True             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.__owner:
 */

#line 17 "pyPegtrans.pyx"
  __pyx_v_self->__pyx___owner = 1;

  /* "pyPegtrans.pyx":15
 *     cdef bool __owner
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.c_pegtrans = new Pegtrans()
 *         self.__owner = True
 */

#line 15 "pyPegtrans.pyx"


#line 15 "pyPegtrans.pyx"
  /* function exit code */

#line 15 "pyPegtrans.pyx"
  __pyx_r = 0;

#line 15 "pyPegtrans.pyx"
  goto __pyx_L0;

#line 15 "pyPegtrans.pyx"
  __pyx_L1_error:;

#line 15 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 15 "pyPegtrans.pyx"
  __pyx_r = -1;

#line 15 "pyPegtrans.pyx"
  __pyx_L0:;

#line 15 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 15 "pyPegtrans.pyx"
  return __pyx_r;

#line 15 "pyPegtrans.pyx"
}

/* "pyPegtrans.pyx":18
 *         self.c_pegtrans = new Pegtrans()
 *         self.__owner = True
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_pegtrans
 */

#line 18 "pyPegtrans.pyx"


#line 18 "pyPegtrans.pyx"
/* Python wrapper */

#line 18 "pyPegtrans.pyx"
static void __pyx_pw_8iscecore_10pyPegtrans_3__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 18 "pyPegtrans.pyx"
static void __pyx_pw_8iscecore_10pyPegtrans_3__dealloc__(PyObject *__pyx_v_self) {

#line 18 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 18 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 18 "pyPegtrans.pyx"
  __pyx_pf_8iscecore_10pyPegtrans_2__dealloc__(((struct __pyx_obj_8iscecore_pyPegtrans *)__pyx_v_self));

#line 18 "pyPegtrans.pyx"


#line 18 "pyPegtrans.pyx"
  /* function exit code */

#line 18 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 18 "pyPegtrans.pyx"
}

#line 18 "pyPegtrans.pyx"


#line 18 "pyPegtrans.pyx"
static void __pyx_pf_8iscecore_10pyPegtrans_2__dealloc__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self) {

#line 18 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 18 "pyPegtrans.pyx"
  int __pyx_t_1;

#line 18 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyPegtrans.pyx":19
 *         self.__owner = True
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_pegtrans
 *     @staticmethod
 */

#line 19 "pyPegtrans.pyx"
  __pyx_t_1 = (__pyx_v_self->__pyx___owner != 0);

#line 19 "pyPegtrans.pyx"
  if (__pyx_t_1) {

    /* "pyPegtrans.pyx":20
 *     def __dealloc__(self):
 *         if self.__owner:
 *             del self.c_pegtrans             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     def bind(pyPegtrans pgt):
 */

#line 20 "pyPegtrans.pyx"
    delete __pyx_v_self->c_pegtrans;

    /* "pyPegtrans.pyx":19
 *         self.__owner = True
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_pegtrans
 *     @staticmethod
 */

#line 19 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":18
 *         self.c_pegtrans = new Pegtrans()
 *         self.__owner = True
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_pegtrans
 */

#line 18 "pyPegtrans.pyx"


#line 18 "pyPegtrans.pyx"
  /* function exit code */

#line 18 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 18 "pyPegtrans.pyx"
}

/* "pyPegtrans.pyx":22
 *             del self.c_pegtrans
 *     @staticmethod
 *     def bind(pyPegtrans pgt):             # <<<<<<<<<<<<<<
 *         new_pgt = pyPegtrans()
 *         del new_pgt.c_pegtrans
 */

#line 22 "pyPegtrans.pyx"


#line 22 "pyPegtrans.pyx"
/* Python wrapper */

#line 22 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_5bind(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8iscecore_10pyPegtrans_5bind = 
#line 22 "pyPegtrans.pyx"
{"bind", (PyCFunction)__pyx_pw_8iscecore_10pyPegtrans_5bind, METH_VARARGS|METH_KEYWORDS, 0};

#line 22 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_5bind(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_pgt = 0
#line 22 "pyPegtrans.pyx"
;

#line 22 "pyPegtrans.pyx"
  PyObject *__pyx_r = 0;

#line 22 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 22 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("bind (wrapper)", 0);

#line 22 "pyPegtrans.pyx"
  {

#line 22 "pyPegtrans.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pgt,0};

#line 22 "pyPegtrans.pyx"
    PyObject* values[1] = {0};

#line 22 "pyPegtrans.pyx"
    if (unlikely(__pyx_kwds)) {

#line 22 "pyPegtrans.pyx"
      Py_ssize_t kw_args;

#line 22 "pyPegtrans.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 22 "pyPegtrans.pyx"
      switch (pos_args) {
        case  1: 
#line 22 "pyPegtrans.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 22 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;

#line 22 "pyPegtrans.pyx"
        case  0: break;
        default: 
#line 22 "pyPegtrans.pyx"
goto __pyx_L5_argtuple_error;

#line 22 "pyPegtrans.pyx"
      }

#line 22 "pyPegtrans.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 22 "pyPegtrans.pyx"
      switch (pos_args) {

#line 22 "pyPegtrans.pyx"
        case  0:

#line 22 "pyPegtrans.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pgt)) != 0)) kw_args--;
        else 
#line 22 "pyPegtrans.pyx"
goto __pyx_L5_argtuple_error;

#line 22 "pyPegtrans.pyx"
      }

#line 22 "pyPegtrans.pyx"
      if (unlikely(kw_args > 0)) {

#line 22 "pyPegtrans.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "bind") < 0)) __PYX_ERR(6, 22, __pyx_L3_error)

#line 22 "pyPegtrans.pyx"
      }

#line 22 "pyPegtrans.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {

#line 22 "pyPegtrans.pyx"
      goto __pyx_L5_argtuple_error;

#line 22 "pyPegtrans.pyx"
    } else {

#line 22 "pyPegtrans.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 22 "pyPegtrans.pyx"
    }

#line 22 "pyPegtrans.pyx"
    __pyx_v_pgt = ((struct __pyx_obj_8iscecore_pyPegtrans *)values[0]);

#line 22 "pyPegtrans.pyx"
  }

#line 22 "pyPegtrans.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 22 "pyPegtrans.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bind", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 22 "pyPegtrans.pyx"
__PYX_ERR(6, 22, __pyx_L3_error)

#line 22 "pyPegtrans.pyx"
  __pyx_L3_error:;

#line 22 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.bind", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 22 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 22 "pyPegtrans.pyx"
  return NULL;

#line 22 "pyPegtrans.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 22 "pyPegtrans.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pgt), __pyx_ptype_8iscecore_pyPegtrans, 1, "pgt", 0))) __PYX_ERR(6, 22, __pyx_L1_error)
  __pyx_r = 
#line 22 "pyPegtrans.pyx"
__pyx_pf_8iscecore_10pyPegtrans_4bind(__pyx_v_pgt);

#line 22 "pyPegtrans.pyx"


#line 22 "pyPegtrans.pyx"
  /* function exit code */

#line 22 "pyPegtrans.pyx"
  goto __pyx_L0;

#line 22 "pyPegtrans.pyx"
  __pyx_L1_error:;

#line 22 "pyPegtrans.pyx"
  __pyx_r = NULL;

#line 22 "pyPegtrans.pyx"
  __pyx_L0:;

#line 22 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 22 "pyPegtrans.pyx"
  return __pyx_r;

#line 22 "pyPegtrans.pyx"
}

#line 22 "pyPegtrans.pyx"


#line 22 "pyPegtrans.pyx"
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_4bind(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_pgt) {
  struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_new_pgt = NULL
#line 22 "pyPegtrans.pyx"
;

#line 22 "pyPegtrans.pyx"
  PyObject *__pyx_r = NULL;

#line 22 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 22 "pyPegtrans.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 22 "pyPegtrans.pyx"
  isce::core::Pegtrans *__pyx_t_2;

#line 22 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("bind", 0);

  /* "pyPegtrans.pyx":23
 *     @staticmethod
 *     def bind(pyPegtrans pgt):
 *         new_pgt = pyPegtrans()             # <<<<<<<<<<<<<<
 *         del new_pgt.c_pegtrans
 *         new_pgt.c_pegtrans = pgt.c_pegtrans
 */

#line 23 "pyPegtrans.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8iscecore_pyPegtrans), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 23, __pyx_L1_error)

#line 23 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 23 "pyPegtrans.pyx"
  __pyx_v_new_pgt = ((struct __pyx_obj_8iscecore_pyPegtrans *)__pyx_t_1);

#line 23 "pyPegtrans.pyx"
  __pyx_t_1 = 0;

  /* "pyPegtrans.pyx":24
 *     def bind(pyPegtrans pgt):
 *         new_pgt = pyPegtrans()
 *         del new_pgt.c_pegtrans             # <<<<<<<<<<<<<<
 *         new_pgt.c_pegtrans = pgt.c_pegtrans
 *         new_pgt.__owner = False
 */

#line 24 "pyPegtrans.pyx"
  delete __pyx_v_new_pgt->c_pegtrans;

  /* "pyPegtrans.pyx":25
 *         new_pgt = pyPegtrans()
 *         del new_pgt.c_pegtrans
 *         new_pgt.c_pegtrans = pgt.c_pegtrans             # <<<<<<<<<<<<<<
 *         new_pgt.__owner = False
 *         return new_pgt
 */

#line 25 "pyPegtrans.pyx"
  __pyx_t_2 = __pyx_v_pgt->c_pegtrans;

#line 25 "pyPegtrans.pyx"
  __pyx_v_new_pgt->c_pegtrans = __pyx_t_2;

  /* "pyPegtrans.pyx":26
 *         del new_pgt.c_pegtrans
 *         new_pgt.c_pegtrans = pgt.c_pegtrans
 *         new_pgt.__owner = False             # <<<<<<<<<<<<<<
 *         return new_pgt
 * 
 */

#line 26 "pyPegtrans.pyx"
  __pyx_v_new_pgt->__pyx___owner = 0;

  /* "pyPegtrans.pyx":27
 *         new_pgt.c_pegtrans = pgt.c_pegtrans
 *         new_pgt.__owner = False
 *         return new_pgt             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 27 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 27 "pyPegtrans.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_new_pgt));

#line 27 "pyPegtrans.pyx"
  __pyx_r = ((PyObject *)__pyx_v_new_pgt);

#line 27 "pyPegtrans.pyx"
  goto __pyx_L0;

  /* "pyPegtrans.pyx":22
 *             del self.c_pegtrans
 *     @staticmethod
 *     def bind(pyPegtrans pgt):             # <<<<<<<<<<<<<<
 *         new_pgt = pyPegtrans()
 *         del new_pgt.c_pegtrans
 */

#line 22 "pyPegtrans.pyx"


#line 22 "pyPegtrans.pyx"
  /* function exit code */

#line 22 "pyPegtrans.pyx"
  __pyx_L1_error:;

#line 22 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 22 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.bind", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 22 "pyPegtrans.pyx"
  __pyx_r = NULL;

#line 22 "pyPegtrans.pyx"
  __pyx_L0:;

#line 22 "pyPegtrans.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_new_pgt);

#line 22 "pyPegtrans.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 22 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 22 "pyPegtrans.pyx"
  return __pyx_r;

#line 22 "pyPegtrans.pyx"
}

/* "pyPegtrans.pyx":30
 * 
 *     @property
 *     def mat(self):             # <<<<<<<<<<<<<<
 *         a = [[0.,0.,0.],[0.,0.,0.],[0.,0.,0.]]
 *         for i in range(3):
 */

#line 30 "pyPegtrans.pyx"


#line 30 "pyPegtrans.pyx"
/* Python wrapper */

#line 30 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_3mat_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 30 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_3mat_1__get__(PyObject *__pyx_v_self) {

#line 30 "pyPegtrans.pyx"
  PyObject *__pyx_r = 0;

#line 30 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 30 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 30 "pyPegtrans.pyx"
__pyx_pf_8iscecore_10pyPegtrans_3mat___get__(((struct __pyx_obj_8iscecore_pyPegtrans *)__pyx_v_self));

#line 30 "pyPegtrans.pyx"


#line 30 "pyPegtrans.pyx"
  /* function exit code */

#line 30 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 30 "pyPegtrans.pyx"
  return __pyx_r;

#line 30 "pyPegtrans.pyx"
}

#line 30 "pyPegtrans.pyx"


#line 30 "pyPegtrans.pyx"
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_3mat___get__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self) {
  PyObject *__pyx_v_a = NULL
#line 30 "pyPegtrans.pyx"
;
  long __pyx_v_i
#line 30 "pyPegtrans.pyx"
;
  long __pyx_v_j
#line 30 "pyPegtrans.pyx"
;

#line 30 "pyPegtrans.pyx"
  PyObject *__pyx_r = NULL;

#line 30 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 30 "pyPegtrans.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 30 "pyPegtrans.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 30 "pyPegtrans.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 30 "pyPegtrans.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 30 "pyPegtrans.pyx"
  long __pyx_t_5;

#line 30 "pyPegtrans.pyx"
  long __pyx_t_6;

#line 30 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPegtrans.pyx":31
 *     @property
 *     def mat(self):
 *         a = [[0.,0.,0.],[0.,0.,0.],[0.,0.,0.]]             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             for j in range(3):
 */

#line 31 "pyPegtrans.pyx"
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 31, __pyx_L1_error)

#line 31 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 31 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 31, __pyx_L1_error)

#line 31 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 31 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 31, __pyx_L1_error)

#line 31 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 31 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_float_0_);

#line 31 "pyPegtrans.pyx"
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 31, __pyx_L1_error)

#line 31 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 31 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 31 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);

#line 31 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 31 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);

#line 31 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_t_3);

#line 31 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);

#line 31 "pyPegtrans.pyx"
  __pyx_t_1 = 0;

#line 31 "pyPegtrans.pyx"
  __pyx_t_2 = 0;

#line 31 "pyPegtrans.pyx"
  __pyx_t_3 = 0;

#line 31 "pyPegtrans.pyx"
  __pyx_v_a = ((PyObject*)__pyx_t_4);

#line 31 "pyPegtrans.pyx"
  __pyx_t_4 = 0;

  /* "pyPegtrans.pyx":32
 *     def mat(self):
 *         a = [[0.,0.,0.],[0.,0.,0.],[0.,0.,0.]]
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 a[i][j] = self.c_pegtrans.mat[i][j]
 */

#line 32 "pyPegtrans.pyx"
  for (__pyx_t_5 = 0; __pyx_t_5 < 3; __pyx_t_5+=1) {

#line 32 "pyPegtrans.pyx"
    __pyx_v_i = __pyx_t_5;

    /* "pyPegtrans.pyx":33
 *         a = [[0.,0.,0.],[0.,0.,0.],[0.,0.,0.]]
 *         for i in range(3):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 a[i][j] = self.c_pegtrans.mat[i][j]
 *         return a
 */

#line 33 "pyPegtrans.pyx"
    for (__pyx_t_6 = 0; __pyx_t_6 < 3; __pyx_t_6+=1) {

#line 33 "pyPegtrans.pyx"
      __pyx_v_j = __pyx_t_6;

      /* "pyPegtrans.pyx":34
 *         for i in range(3):
 *             for j in range(3):
 *                 a[i][j] = self.c_pegtrans.mat[i][j]             # <<<<<<<<<<<<<<
 *         return a
 *     @mat.setter
 */

#line 34 "pyPegtrans.pyx"
      __pyx_t_4 = PyFloat_FromDouble(((__pyx_v_self->c_pegtrans->mat[__pyx_v_i])[__pyx_v_j])); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 34, __pyx_L1_error)

#line 34 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 34 "pyPegtrans.pyx"
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 34, __pyx_L1_error)

#line 34 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 34 "pyPegtrans.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_j, __pyx_t_4, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(6, 34, __pyx_L1_error)

#line 34 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 34 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 34 "pyPegtrans.pyx"
    }

#line 34 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":35
 *             for j in range(3):
 *                 a[i][j] = self.c_pegtrans.mat[i][j]
 *         return a             # <<<<<<<<<<<<<<
 *     @mat.setter
 *     def mat(self, a):
 */

#line 35 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 35 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_v_a);

#line 35 "pyPegtrans.pyx"
  __pyx_r = __pyx_v_a;

#line 35 "pyPegtrans.pyx"
  goto __pyx_L0;

  /* "pyPegtrans.pyx":30
 * 
 *     @property
 *     def mat(self):             # <<<<<<<<<<<<<<
 *         a = [[0.,0.,0.],[0.,0.,0.],[0.,0.,0.]]
 *         for i in range(3):
 */

#line 30 "pyPegtrans.pyx"


#line 30 "pyPegtrans.pyx"
  /* function exit code */

#line 30 "pyPegtrans.pyx"
  __pyx_L1_error:;

#line 30 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 30 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 30 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 30 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 30 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.mat.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 30 "pyPegtrans.pyx"
  __pyx_r = NULL;

#line 30 "pyPegtrans.pyx"
  __pyx_L0:;

#line 30 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_v_a);

#line 30 "pyPegtrans.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 30 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 30 "pyPegtrans.pyx"
  return __pyx_r;

#line 30 "pyPegtrans.pyx"
}

/* "pyPegtrans.pyx":37
 *         return a
 *     @mat.setter
 *     def mat(self, a):             # <<<<<<<<<<<<<<
 *         if ((len(a) != 3) or (len(a[0]) != 3)):
 *             print("Error: Invalid input size.")
 */

#line 37 "pyPegtrans.pyx"


#line 37 "pyPegtrans.pyx"
/* Python wrapper */

#line 37 "pyPegtrans.pyx"
static int __pyx_pw_8iscecore_10pyPegtrans_3mat_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a); /*proto*/

#line 37 "pyPegtrans.pyx"
static int __pyx_pw_8iscecore_10pyPegtrans_3mat_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a) {

#line 37 "pyPegtrans.pyx"
  int __pyx_r;

#line 37 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 37 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = 
#line 37 "pyPegtrans.pyx"
__pyx_pf_8iscecore_10pyPegtrans_3mat_2__set__(((struct __pyx_obj_8iscecore_pyPegtrans *)__pyx_v_self), ((PyObject *)__pyx_v_a));

#line 37 "pyPegtrans.pyx"


#line 37 "pyPegtrans.pyx"
  /* function exit code */

#line 37 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 37 "pyPegtrans.pyx"
  return __pyx_r;

#line 37 "pyPegtrans.pyx"
}

#line 37 "pyPegtrans.pyx"


#line 37 "pyPegtrans.pyx"
static int __pyx_pf_8iscecore_10pyPegtrans_3mat_2__set__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, PyObject *__pyx_v_a) {
  long __pyx_v_i
#line 37 "pyPegtrans.pyx"
;
  long __pyx_v_j
#line 37 "pyPegtrans.pyx"
;

#line 37 "pyPegtrans.pyx"
  int __pyx_r;

#line 37 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 37 "pyPegtrans.pyx"
  int __pyx_t_1;

#line 37 "pyPegtrans.pyx"
  Py_ssize_t __pyx_t_2;

#line 37 "pyPegtrans.pyx"
  int __pyx_t_3;

#line 37 "pyPegtrans.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 37 "pyPegtrans.pyx"
  long __pyx_t_5;

#line 37 "pyPegtrans.pyx"
  long __pyx_t_6;

#line 37 "pyPegtrans.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 37 "pyPegtrans.pyx"
  double __pyx_t_8;

#line 37 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPegtrans.pyx":38
 *     @mat.setter
 *     def mat(self, a):
 *         if ((len(a) != 3) or (len(a[0]) != 3)):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size.")
 *             return
 */

#line 38 "pyPegtrans.pyx"
  __pyx_t_2 = PyObject_Length(__pyx_v_a); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(6, 38, __pyx_L1_error)

#line 38 "pyPegtrans.pyx"
  __pyx_t_3 = ((__pyx_t_2 != 3) != 0);

#line 38 "pyPegtrans.pyx"
  if (!__pyx_t_3) {

#line 38 "pyPegtrans.pyx"
  } else {

#line 38 "pyPegtrans.pyx"
    __pyx_t_1 = __pyx_t_3;

#line 38 "pyPegtrans.pyx"
    goto __pyx_L4_bool_binop_done;

#line 38 "pyPegtrans.pyx"
  }

#line 38 "pyPegtrans.pyx"
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_a, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 38, __pyx_L1_error)

#line 38 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 38 "pyPegtrans.pyx"
  __pyx_t_2 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(6, 38, __pyx_L1_error)

#line 38 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 38 "pyPegtrans.pyx"
  __pyx_t_3 = ((__pyx_t_2 != 3) != 0);

#line 38 "pyPegtrans.pyx"
  __pyx_t_1 = __pyx_t_3;

#line 38 "pyPegtrans.pyx"
  __pyx_L4_bool_binop_done:;

#line 38 "pyPegtrans.pyx"
  if (__pyx_t_1) {

    /* "pyPegtrans.pyx":39
 *     def mat(self, a):
 *         if ((len(a) != 3) or (len(a[0]) != 3)):
 *             print("Error: Invalid input size.")             # <<<<<<<<<<<<<<
 *             return
 *         for i in range(3):
 */

#line 39 "pyPegtrans.pyx"
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 39, __pyx_L1_error)

#line 39 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 39 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyPegtrans.pyx":40
 *         if ((len(a) != 3) or (len(a[0]) != 3)):
 *             print("Error: Invalid input size.")
 *             return             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             for j in range(3):
 */

#line 40 "pyPegtrans.pyx"
    __pyx_r = 0;

#line 40 "pyPegtrans.pyx"
    goto __pyx_L0;

    /* "pyPegtrans.pyx":38
 *     @mat.setter
 *     def mat(self, a):
 *         if ((len(a) != 3) or (len(a[0]) != 3)):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size.")
 *             return
 */

#line 38 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":41
 *             print("Error: Invalid input size.")
 *             return
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 self.c_pegtrans.mat[i][j] = a[i][j]
 */

#line 41 "pyPegtrans.pyx"
  for (__pyx_t_5 = 0; __pyx_t_5 < 3; __pyx_t_5+=1) {

#line 41 "pyPegtrans.pyx"
    __pyx_v_i = __pyx_t_5;

    /* "pyPegtrans.pyx":42
 *             return
 *         for i in range(3):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 self.c_pegtrans.mat[i][j] = a[i][j]
 *     @property
 */

#line 42 "pyPegtrans.pyx"
    for (__pyx_t_6 = 0; __pyx_t_6 < 3; __pyx_t_6+=1) {

#line 42 "pyPegtrans.pyx"
      __pyx_v_j = __pyx_t_6;

      /* "pyPegtrans.pyx":43
 *         for i in range(3):
 *             for j in range(3):
 *                 self.c_pegtrans.mat[i][j] = a[i][j]             # <<<<<<<<<<<<<<
 *     @property
 *     def matinv(self):
 */

#line 43 "pyPegtrans.pyx"
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 43, __pyx_L1_error)

#line 43 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 43 "pyPegtrans.pyx"
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_j, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 43, __pyx_L1_error)

#line 43 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 43 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 43 "pyPegtrans.pyx"
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 43, __pyx_L1_error)

#line 43 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 43 "pyPegtrans.pyx"
      ((__pyx_v_self->c_pegtrans->mat[__pyx_v_i])[__pyx_v_j]) = __pyx_t_8;

#line 43 "pyPegtrans.pyx"
    }

#line 43 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":37
 *         return a
 *     @mat.setter
 *     def mat(self, a):             # <<<<<<<<<<<<<<
 *         if ((len(a) != 3) or (len(a[0]) != 3)):
 *             print("Error: Invalid input size.")
 */

#line 37 "pyPegtrans.pyx"


#line 37 "pyPegtrans.pyx"
  /* function exit code */

#line 37 "pyPegtrans.pyx"
  __pyx_r = 0;

#line 37 "pyPegtrans.pyx"
  goto __pyx_L0;

#line 37 "pyPegtrans.pyx"
  __pyx_L1_error:;

#line 37 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 37 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 37 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.mat.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 37 "pyPegtrans.pyx"
  __pyx_r = -1;

#line 37 "pyPegtrans.pyx"
  __pyx_L0:;

#line 37 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 37 "pyPegtrans.pyx"
  return __pyx_r;

#line 37 "pyPegtrans.pyx"
}

/* "pyPegtrans.pyx":45
 *                 self.c_pegtrans.mat[i][j] = a[i][j]
 *     @property
 *     def matinv(self):             # <<<<<<<<<<<<<<
 *         a = [[0.,0.,0.],[0.,0.,0.],[0.,0.,0.]]
 *         for i in range(3):
 */

#line 45 "pyPegtrans.pyx"


#line 45 "pyPegtrans.pyx"
/* Python wrapper */

#line 45 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_6matinv_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 45 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_6matinv_1__get__(PyObject *__pyx_v_self) {

#line 45 "pyPegtrans.pyx"
  PyObject *__pyx_r = 0;

#line 45 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 45 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 45 "pyPegtrans.pyx"
__pyx_pf_8iscecore_10pyPegtrans_6matinv___get__(((struct __pyx_obj_8iscecore_pyPegtrans *)__pyx_v_self));

#line 45 "pyPegtrans.pyx"


#line 45 "pyPegtrans.pyx"
  /* function exit code */

#line 45 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 45 "pyPegtrans.pyx"
  return __pyx_r;

#line 45 "pyPegtrans.pyx"
}

#line 45 "pyPegtrans.pyx"


#line 45 "pyPegtrans.pyx"
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_6matinv___get__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self) {
  PyObject *__pyx_v_a = NULL
#line 45 "pyPegtrans.pyx"
;
  long __pyx_v_i
#line 45 "pyPegtrans.pyx"
;
  long __pyx_v_j
#line 45 "pyPegtrans.pyx"
;

#line 45 "pyPegtrans.pyx"
  PyObject *__pyx_r = NULL;

#line 45 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 45 "pyPegtrans.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 45 "pyPegtrans.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 45 "pyPegtrans.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 45 "pyPegtrans.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 45 "pyPegtrans.pyx"
  long __pyx_t_5;

#line 45 "pyPegtrans.pyx"
  long __pyx_t_6;

#line 45 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPegtrans.pyx":46
 *     @property
 *     def matinv(self):
 *         a = [[0.,0.,0.],[0.,0.,0.],[0.,0.,0.]]             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             for j in range(3):
 */

#line 46 "pyPegtrans.pyx"
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 46, __pyx_L1_error)

#line 46 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 46 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 46, __pyx_L1_error)

#line 46 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 46 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 46, __pyx_L1_error)

#line 46 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 46 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_float_0_);

#line 46 "pyPegtrans.pyx"
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 46, __pyx_L1_error)

#line 46 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 46 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 46 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);

#line 46 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 46 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);

#line 46 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_t_3);

#line 46 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);

#line 46 "pyPegtrans.pyx"
  __pyx_t_1 = 0;

#line 46 "pyPegtrans.pyx"
  __pyx_t_2 = 0;

#line 46 "pyPegtrans.pyx"
  __pyx_t_3 = 0;

#line 46 "pyPegtrans.pyx"
  __pyx_v_a = ((PyObject*)__pyx_t_4);

#line 46 "pyPegtrans.pyx"
  __pyx_t_4 = 0;

  /* "pyPegtrans.pyx":47
 *     def matinv(self):
 *         a = [[0.,0.,0.],[0.,0.,0.],[0.,0.,0.]]
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 a[i][j] = self.c_pegtrans.matinv[i][j]
 */

#line 47 "pyPegtrans.pyx"
  for (__pyx_t_5 = 0; __pyx_t_5 < 3; __pyx_t_5+=1) {

#line 47 "pyPegtrans.pyx"
    __pyx_v_i = __pyx_t_5;

    /* "pyPegtrans.pyx":48
 *         a = [[0.,0.,0.],[0.,0.,0.],[0.,0.,0.]]
 *         for i in range(3):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 a[i][j] = self.c_pegtrans.matinv[i][j]
 *         return a
 */

#line 48 "pyPegtrans.pyx"
    for (__pyx_t_6 = 0; __pyx_t_6 < 3; __pyx_t_6+=1) {

#line 48 "pyPegtrans.pyx"
      __pyx_v_j = __pyx_t_6;

      /* "pyPegtrans.pyx":49
 *         for i in range(3):
 *             for j in range(3):
 *                 a[i][j] = self.c_pegtrans.matinv[i][j]             # <<<<<<<<<<<<<<
 *         return a
 *     @matinv.setter
 */

#line 49 "pyPegtrans.pyx"
      __pyx_t_4 = PyFloat_FromDouble(((__pyx_v_self->c_pegtrans->matinv[__pyx_v_i])[__pyx_v_j])); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 49, __pyx_L1_error)

#line 49 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 49 "pyPegtrans.pyx"
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 49, __pyx_L1_error)

#line 49 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 49 "pyPegtrans.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_j, __pyx_t_4, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(6, 49, __pyx_L1_error)

#line 49 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 49 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 49 "pyPegtrans.pyx"
    }

#line 49 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":50
 *             for j in range(3):
 *                 a[i][j] = self.c_pegtrans.matinv[i][j]
 *         return a             # <<<<<<<<<<<<<<
 *     @matinv.setter
 *     def matinv(self, a):
 */

#line 50 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 50 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_v_a);

#line 50 "pyPegtrans.pyx"
  __pyx_r = __pyx_v_a;

#line 50 "pyPegtrans.pyx"
  goto __pyx_L0;

  /* "pyPegtrans.pyx":45
 *                 self.c_pegtrans.mat[i][j] = a[i][j]
 *     @property
 *     def matinv(self):             # <<<<<<<<<<<<<<
 *         a = [[0.,0.,0.],[0.,0.,0.],[0.,0.,0.]]
 *         for i in range(3):
 */

#line 45 "pyPegtrans.pyx"


#line 45 "pyPegtrans.pyx"
  /* function exit code */

#line 45 "pyPegtrans.pyx"
  __pyx_L1_error:;

#line 45 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 45 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 45 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 45 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 45 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.matinv.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 45 "pyPegtrans.pyx"
  __pyx_r = NULL;

#line 45 "pyPegtrans.pyx"
  __pyx_L0:;

#line 45 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_v_a);

#line 45 "pyPegtrans.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 45 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 45 "pyPegtrans.pyx"
  return __pyx_r;

#line 45 "pyPegtrans.pyx"
}

/* "pyPegtrans.pyx":52
 *         return a
 *     @matinv.setter
 *     def matinv(self, a):             # <<<<<<<<<<<<<<
 *         if ((len(a) != 3) or (len(a[0]) != 3)):
 *             print("Error: Invalid input size.")
 */

#line 52 "pyPegtrans.pyx"


#line 52 "pyPegtrans.pyx"
/* Python wrapper */

#line 52 "pyPegtrans.pyx"
static int __pyx_pw_8iscecore_10pyPegtrans_6matinv_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a); /*proto*/

#line 52 "pyPegtrans.pyx"
static int __pyx_pw_8iscecore_10pyPegtrans_6matinv_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a) {

#line 52 "pyPegtrans.pyx"
  int __pyx_r;

#line 52 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 52 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = 
#line 52 "pyPegtrans.pyx"
__pyx_pf_8iscecore_10pyPegtrans_6matinv_2__set__(((struct __pyx_obj_8iscecore_pyPegtrans *)__pyx_v_self), ((PyObject *)__pyx_v_a));

#line 52 "pyPegtrans.pyx"


#line 52 "pyPegtrans.pyx"
  /* function exit code */

#line 52 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 52 "pyPegtrans.pyx"
  return __pyx_r;

#line 52 "pyPegtrans.pyx"
}

#line 52 "pyPegtrans.pyx"


#line 52 "pyPegtrans.pyx"
static int __pyx_pf_8iscecore_10pyPegtrans_6matinv_2__set__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, PyObject *__pyx_v_a) {
  long __pyx_v_i
#line 52 "pyPegtrans.pyx"
;
  long __pyx_v_j
#line 52 "pyPegtrans.pyx"
;

#line 52 "pyPegtrans.pyx"
  int __pyx_r;

#line 52 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 52 "pyPegtrans.pyx"
  int __pyx_t_1;

#line 52 "pyPegtrans.pyx"
  Py_ssize_t __pyx_t_2;

#line 52 "pyPegtrans.pyx"
  int __pyx_t_3;

#line 52 "pyPegtrans.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 52 "pyPegtrans.pyx"
  long __pyx_t_5;

#line 52 "pyPegtrans.pyx"
  long __pyx_t_6;

#line 52 "pyPegtrans.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 52 "pyPegtrans.pyx"
  double __pyx_t_8;

#line 52 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPegtrans.pyx":53
 *     @matinv.setter
 *     def matinv(self, a):
 *         if ((len(a) != 3) or (len(a[0]) != 3)):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size.")
 *             return
 */

#line 53 "pyPegtrans.pyx"
  __pyx_t_2 = PyObject_Length(__pyx_v_a); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(6, 53, __pyx_L1_error)

#line 53 "pyPegtrans.pyx"
  __pyx_t_3 = ((__pyx_t_2 != 3) != 0);

#line 53 "pyPegtrans.pyx"
  if (!__pyx_t_3) {

#line 53 "pyPegtrans.pyx"
  } else {

#line 53 "pyPegtrans.pyx"
    __pyx_t_1 = __pyx_t_3;

#line 53 "pyPegtrans.pyx"
    goto __pyx_L4_bool_binop_done;

#line 53 "pyPegtrans.pyx"
  }

#line 53 "pyPegtrans.pyx"
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_a, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 53, __pyx_L1_error)

#line 53 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 53 "pyPegtrans.pyx"
  __pyx_t_2 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(6, 53, __pyx_L1_error)

#line 53 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 53 "pyPegtrans.pyx"
  __pyx_t_3 = ((__pyx_t_2 != 3) != 0);

#line 53 "pyPegtrans.pyx"
  __pyx_t_1 = __pyx_t_3;

#line 53 "pyPegtrans.pyx"
  __pyx_L4_bool_binop_done:;

#line 53 "pyPegtrans.pyx"
  if (__pyx_t_1) {

    /* "pyPegtrans.pyx":54
 *     def matinv(self, a):
 *         if ((len(a) != 3) or (len(a[0]) != 3)):
 *             print("Error: Invalid input size.")             # <<<<<<<<<<<<<<
 *             return
 *         for i in range(3):
 */

#line 54 "pyPegtrans.pyx"
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 54, __pyx_L1_error)

#line 54 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 54 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyPegtrans.pyx":55
 *         if ((len(a) != 3) or (len(a[0]) != 3)):
 *             print("Error: Invalid input size.")
 *             return             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             for j in range(3):
 */

#line 55 "pyPegtrans.pyx"
    __pyx_r = 0;

#line 55 "pyPegtrans.pyx"
    goto __pyx_L0;

    /* "pyPegtrans.pyx":53
 *     @matinv.setter
 *     def matinv(self, a):
 *         if ((len(a) != 3) or (len(a[0]) != 3)):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size.")
 *             return
 */

#line 53 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":56
 *             print("Error: Invalid input size.")
 *             return
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 self.c_pegtrans.matinv[i][j] = a[i][j]
 */

#line 56 "pyPegtrans.pyx"
  for (__pyx_t_5 = 0; __pyx_t_5 < 3; __pyx_t_5+=1) {

#line 56 "pyPegtrans.pyx"
    __pyx_v_i = __pyx_t_5;

    /* "pyPegtrans.pyx":57
 *             return
 *         for i in range(3):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 self.c_pegtrans.matinv[i][j] = a[i][j]
 *     @property
 */

#line 57 "pyPegtrans.pyx"
    for (__pyx_t_6 = 0; __pyx_t_6 < 3; __pyx_t_6+=1) {

#line 57 "pyPegtrans.pyx"
      __pyx_v_j = __pyx_t_6;

      /* "pyPegtrans.pyx":58
 *         for i in range(3):
 *             for j in range(3):
 *                 self.c_pegtrans.matinv[i][j] = a[i][j]             # <<<<<<<<<<<<<<
 *     @property
 *     def ov(self):
 */

#line 58 "pyPegtrans.pyx"
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 58, __pyx_L1_error)

#line 58 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 58 "pyPegtrans.pyx"
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_j, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 58, __pyx_L1_error)

#line 58 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 58 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 58 "pyPegtrans.pyx"
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 58, __pyx_L1_error)

#line 58 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 58 "pyPegtrans.pyx"
      ((__pyx_v_self->c_pegtrans->matinv[__pyx_v_i])[__pyx_v_j]) = __pyx_t_8;

#line 58 "pyPegtrans.pyx"
    }

#line 58 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":52
 *         return a
 *     @matinv.setter
 *     def matinv(self, a):             # <<<<<<<<<<<<<<
 *         if ((len(a) != 3) or (len(a[0]) != 3)):
 *             print("Error: Invalid input size.")
 */

#line 52 "pyPegtrans.pyx"


#line 52 "pyPegtrans.pyx"
  /* function exit code */

#line 52 "pyPegtrans.pyx"
  __pyx_r = 0;

#line 52 "pyPegtrans.pyx"
  goto __pyx_L0;

#line 52 "pyPegtrans.pyx"
  __pyx_L1_error:;

#line 52 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 52 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 52 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.matinv.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 52 "pyPegtrans.pyx"
  __pyx_r = -1;

#line 52 "pyPegtrans.pyx"
  __pyx_L0:;

#line 52 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 52 "pyPegtrans.pyx"
  return __pyx_r;

#line 52 "pyPegtrans.pyx"
}

/* "pyPegtrans.pyx":60
 *                 self.c_pegtrans.matinv[i][j] = a[i][j]
 *     @property
 *     def ov(self):             # <<<<<<<<<<<<<<
 *         a = [0.,0.,0.]
 *         for i in range(3):
 */

#line 60 "pyPegtrans.pyx"


#line 60 "pyPegtrans.pyx"
/* Python wrapper */

#line 60 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_2ov_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 60 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_2ov_1__get__(PyObject *__pyx_v_self) {

#line 60 "pyPegtrans.pyx"
  PyObject *__pyx_r = 0;

#line 60 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 60 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 60 "pyPegtrans.pyx"
__pyx_pf_8iscecore_10pyPegtrans_2ov___get__(((struct __pyx_obj_8iscecore_pyPegtrans *)__pyx_v_self));

#line 60 "pyPegtrans.pyx"


#line 60 "pyPegtrans.pyx"
  /* function exit code */

#line 60 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 60 "pyPegtrans.pyx"
  return __pyx_r;

#line 60 "pyPegtrans.pyx"
}

#line 60 "pyPegtrans.pyx"


#line 60 "pyPegtrans.pyx"
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_2ov___get__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self) {
  PyObject *__pyx_v_a = NULL
#line 60 "pyPegtrans.pyx"
;
  long __pyx_v_i
#line 60 "pyPegtrans.pyx"
;

#line 60 "pyPegtrans.pyx"
  PyObject *__pyx_r = NULL;

#line 60 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 60 "pyPegtrans.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 60 "pyPegtrans.pyx"
  long __pyx_t_2;

#line 60 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPegtrans.pyx":61
 *     @property
 *     def ov(self):
 *         a = [0.,0.,0.]             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             a[i] = self.c_pegtrans.ov[i]
 */

#line 61 "pyPegtrans.pyx"
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 61, __pyx_L1_error)

#line 61 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 61 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 61 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 61 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_0_);

#line 61 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 61 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 61 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_0_);

#line 61 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 61 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 61 "pyPegtrans.pyx"
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_float_0_);

#line 61 "pyPegtrans.pyx"
  __pyx_v_a = ((PyObject*)__pyx_t_1);

#line 61 "pyPegtrans.pyx"
  __pyx_t_1 = 0;

  /* "pyPegtrans.pyx":62
 *     def ov(self):
 *         a = [0.,0.,0.]
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             a[i] = self.c_pegtrans.ov[i]
 *         return a
 */

#line 62 "pyPegtrans.pyx"
  for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {

#line 62 "pyPegtrans.pyx"
    __pyx_v_i = __pyx_t_2;

    /* "pyPegtrans.pyx":63
 *         a = [0.,0.,0.]
 *         for i in range(3):
 *             a[i] = self.c_pegtrans.ov[i]             # <<<<<<<<<<<<<<
 *         return a
 *     @ov.setter
 */

#line 63 "pyPegtrans.pyx"
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->c_pegtrans->ov[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 63, __pyx_L1_error)

#line 63 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 63 "pyPegtrans.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_a, __pyx_v_i, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(6, 63, __pyx_L1_error)

#line 63 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 63 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":64
 *         for i in range(3):
 *             a[i] = self.c_pegtrans.ov[i]
 *         return a             # <<<<<<<<<<<<<<
 *     @ov.setter
 *     def ov(self, a):
 */

#line 64 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 64 "pyPegtrans.pyx"
  __Pyx_INCREF(__pyx_v_a);

#line 64 "pyPegtrans.pyx"
  __pyx_r = __pyx_v_a;

#line 64 "pyPegtrans.pyx"
  goto __pyx_L0;

  /* "pyPegtrans.pyx":60
 *                 self.c_pegtrans.matinv[i][j] = a[i][j]
 *     @property
 *     def ov(self):             # <<<<<<<<<<<<<<
 *         a = [0.,0.,0.]
 *         for i in range(3):
 */

#line 60 "pyPegtrans.pyx"


#line 60 "pyPegtrans.pyx"
  /* function exit code */

#line 60 "pyPegtrans.pyx"
  __pyx_L1_error:;

#line 60 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 60 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.ov.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 60 "pyPegtrans.pyx"
  __pyx_r = NULL;

#line 60 "pyPegtrans.pyx"
  __pyx_L0:;

#line 60 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_v_a);

#line 60 "pyPegtrans.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 60 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 60 "pyPegtrans.pyx"
  return __pyx_r;

#line 60 "pyPegtrans.pyx"
}

/* "pyPegtrans.pyx":66
 *         return a
 *     @ov.setter
 *     def ov(self, a):             # <<<<<<<<<<<<<<
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")
 */

#line 66 "pyPegtrans.pyx"


#line 66 "pyPegtrans.pyx"
/* Python wrapper */

#line 66 "pyPegtrans.pyx"
static int __pyx_pw_8iscecore_10pyPegtrans_2ov_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a); /*proto*/

#line 66 "pyPegtrans.pyx"
static int __pyx_pw_8iscecore_10pyPegtrans_2ov_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a) {

#line 66 "pyPegtrans.pyx"
  int __pyx_r;

#line 66 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 66 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = 
#line 66 "pyPegtrans.pyx"
__pyx_pf_8iscecore_10pyPegtrans_2ov_2__set__(((struct __pyx_obj_8iscecore_pyPegtrans *)__pyx_v_self), ((PyObject *)__pyx_v_a));

#line 66 "pyPegtrans.pyx"


#line 66 "pyPegtrans.pyx"
  /* function exit code */

#line 66 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 66 "pyPegtrans.pyx"
  return __pyx_r;

#line 66 "pyPegtrans.pyx"
}

#line 66 "pyPegtrans.pyx"


#line 66 "pyPegtrans.pyx"
static int __pyx_pf_8iscecore_10pyPegtrans_2ov_2__set__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, PyObject *__pyx_v_a) {
  long __pyx_v_i
#line 66 "pyPegtrans.pyx"
;

#line 66 "pyPegtrans.pyx"
  int __pyx_r;

#line 66 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 66 "pyPegtrans.pyx"
  Py_ssize_t __pyx_t_1;

#line 66 "pyPegtrans.pyx"
  int __pyx_t_2;

#line 66 "pyPegtrans.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 66 "pyPegtrans.pyx"
  long __pyx_t_4;

#line 66 "pyPegtrans.pyx"
  double __pyx_t_5;

#line 66 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPegtrans.pyx":67
 *     @ov.setter
 *     def ov(self, a):
 *         if (len(a) != 3):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size.")
 *             return
 */

#line 67 "pyPegtrans.pyx"
  __pyx_t_1 = PyObject_Length(__pyx_v_a); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(6, 67, __pyx_L1_error)

#line 67 "pyPegtrans.pyx"
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);

#line 67 "pyPegtrans.pyx"
  if (__pyx_t_2) {

    /* "pyPegtrans.pyx":68
 *     def ov(self, a):
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")             # <<<<<<<<<<<<<<
 *             return
 *         for i in range(3):
 */

#line 68 "pyPegtrans.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 68, __pyx_L1_error)

#line 68 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 68 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyPegtrans.pyx":69
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")
 *             return             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             self.c_pegtrans.ov[i] = a[i]
 */

#line 69 "pyPegtrans.pyx"
    __pyx_r = 0;

#line 69 "pyPegtrans.pyx"
    goto __pyx_L0;

    /* "pyPegtrans.pyx":67
 *     @ov.setter
 *     def ov(self, a):
 *         if (len(a) != 3):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size.")
 *             return
 */

#line 67 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":70
 *             print("Error: Invalid input size.")
 *             return
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             self.c_pegtrans.ov[i] = a[i]
 *     @property
 */

#line 70 "pyPegtrans.pyx"
  for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {

#line 70 "pyPegtrans.pyx"
    __pyx_v_i = __pyx_t_4;

    /* "pyPegtrans.pyx":71
 *             return
 *         for i in range(3):
 *             self.c_pegtrans.ov[i] = a[i]             # <<<<<<<<<<<<<<
 *     @property
 *     def radcur(self):
 */

#line 71 "pyPegtrans.pyx"
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 71, __pyx_L1_error)

#line 71 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 71 "pyPegtrans.pyx"
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 71, __pyx_L1_error)

#line 71 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 71 "pyPegtrans.pyx"
    (__pyx_v_self->c_pegtrans->ov[__pyx_v_i]) = __pyx_t_5;

#line 71 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":66
 *         return a
 *     @ov.setter
 *     def ov(self, a):             # <<<<<<<<<<<<<<
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")
 */

#line 66 "pyPegtrans.pyx"


#line 66 "pyPegtrans.pyx"
  /* function exit code */

#line 66 "pyPegtrans.pyx"
  __pyx_r = 0;

#line 66 "pyPegtrans.pyx"
  goto __pyx_L0;

#line 66 "pyPegtrans.pyx"
  __pyx_L1_error:;

#line 66 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 66 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.ov.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 66 "pyPegtrans.pyx"
  __pyx_r = -1;

#line 66 "pyPegtrans.pyx"
  __pyx_L0:;

#line 66 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 66 "pyPegtrans.pyx"
  return __pyx_r;

#line 66 "pyPegtrans.pyx"
}

/* "pyPegtrans.pyx":73
 *             self.c_pegtrans.ov[i] = a[i]
 *     @property
 *     def radcur(self):             # <<<<<<<<<<<<<<
 *         return self.c_pegtrans.radcur
 *     @radcur.setter
 */

#line 73 "pyPegtrans.pyx"


#line 73 "pyPegtrans.pyx"
/* Python wrapper */

#line 73 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_6radcur_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 73 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_6radcur_1__get__(PyObject *__pyx_v_self) {

#line 73 "pyPegtrans.pyx"
  PyObject *__pyx_r = 0;

#line 73 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 73 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 73 "pyPegtrans.pyx"
__pyx_pf_8iscecore_10pyPegtrans_6radcur___get__(((struct __pyx_obj_8iscecore_pyPegtrans *)__pyx_v_self));

#line 73 "pyPegtrans.pyx"


#line 73 "pyPegtrans.pyx"
  /* function exit code */

#line 73 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 73 "pyPegtrans.pyx"
  return __pyx_r;

#line 73 "pyPegtrans.pyx"
}

#line 73 "pyPegtrans.pyx"


#line 73 "pyPegtrans.pyx"
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_6radcur___get__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self) {

#line 73 "pyPegtrans.pyx"
  PyObject *__pyx_r = NULL;

#line 73 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 73 "pyPegtrans.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 73 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPegtrans.pyx":74
 *     @property
 *     def radcur(self):
 *         return self.c_pegtrans.radcur             # <<<<<<<<<<<<<<
 *     @radcur.setter
 *     def radcur(self, double a):
 */

#line 74 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 74 "pyPegtrans.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_pegtrans->radcur); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 74, __pyx_L1_error)

#line 74 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 74 "pyPegtrans.pyx"
  __pyx_r = __pyx_t_1;

#line 74 "pyPegtrans.pyx"
  __pyx_t_1 = 0;

#line 74 "pyPegtrans.pyx"
  goto __pyx_L0;

  /* "pyPegtrans.pyx":73
 *             self.c_pegtrans.ov[i] = a[i]
 *     @property
 *     def radcur(self):             # <<<<<<<<<<<<<<
 *         return self.c_pegtrans.radcur
 *     @radcur.setter
 */

#line 73 "pyPegtrans.pyx"


#line 73 "pyPegtrans.pyx"
  /* function exit code */

#line 73 "pyPegtrans.pyx"
  __pyx_L1_error:;

#line 73 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 73 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.radcur.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 73 "pyPegtrans.pyx"
  __pyx_r = NULL;

#line 73 "pyPegtrans.pyx"
  __pyx_L0:;

#line 73 "pyPegtrans.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 73 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 73 "pyPegtrans.pyx"
  return __pyx_r;

#line 73 "pyPegtrans.pyx"
}

/* "pyPegtrans.pyx":76
 *         return self.c_pegtrans.radcur
 *     @radcur.setter
 *     def radcur(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_pegtrans.radcur = a
 *     def dPrint(self):
 */

#line 76 "pyPegtrans.pyx"


#line 76 "pyPegtrans.pyx"
/* Python wrapper */

#line 76 "pyPegtrans.pyx"
static int __pyx_pw_8iscecore_10pyPegtrans_6radcur_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 76 "pyPegtrans.pyx"
static int __pyx_pw_8iscecore_10pyPegtrans_6radcur_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a
#line 76 "pyPegtrans.pyx"
;

#line 76 "pyPegtrans.pyx"
  int __pyx_r;

#line 76 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 76 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);

#line 76 "pyPegtrans.pyx"
  assert(__pyx_arg_a); {

#line 76 "pyPegtrans.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 76, __pyx_L3_error)

#line 76 "pyPegtrans.pyx"
  }

#line 76 "pyPegtrans.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 76 "pyPegtrans.pyx"
  __pyx_L3_error:;

#line 76 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.radcur.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 76 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 76 "pyPegtrans.pyx"
  return -1;

#line 76 "pyPegtrans.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 76 "pyPegtrans.pyx"
__pyx_pf_8iscecore_10pyPegtrans_6radcur_2__set__(((struct __pyx_obj_8iscecore_pyPegtrans *)__pyx_v_self), ((double)__pyx_v_a));

#line 76 "pyPegtrans.pyx"


#line 76 "pyPegtrans.pyx"
  /* function exit code */

#line 76 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 76 "pyPegtrans.pyx"
  return __pyx_r;

#line 76 "pyPegtrans.pyx"
}

#line 76 "pyPegtrans.pyx"


#line 76 "pyPegtrans.pyx"
static int __pyx_pf_8iscecore_10pyPegtrans_6radcur_2__set__(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, double __pyx_v_a) {

#line 76 "pyPegtrans.pyx"
  int __pyx_r;

#line 76 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 76 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPegtrans.pyx":77
 *     @radcur.setter
 *     def radcur(self, double a):
 *         self.c_pegtrans.radcur = a             # <<<<<<<<<<<<<<
 *     def dPrint(self):
 *         print("Mat = "+str(self.mat)+", matinv = "+str(self.matinv)+", ov = "+str(self.ov)+
 */

#line 77 "pyPegtrans.pyx"
  __pyx_v_self->c_pegtrans->radcur = __pyx_v_a;

  /* "pyPegtrans.pyx":76
 *         return self.c_pegtrans.radcur
 *     @radcur.setter
 *     def radcur(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_pegtrans.radcur = a
 *     def dPrint(self):
 */

#line 76 "pyPegtrans.pyx"


#line 76 "pyPegtrans.pyx"
  /* function exit code */

#line 76 "pyPegtrans.pyx"
  __pyx_r = 0;

#line 76 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 76 "pyPegtrans.pyx"
  return __pyx_r;

#line 76 "pyPegtrans.pyx"
}

/* "pyPegtrans.pyx":78
 *     def radcur(self, double a):
 *         self.c_pegtrans.radcur = a
 *     def dPrint(self):             # <<<<<<<<<<<<<<
 *         print("Mat = "+str(self.mat)+", matinv = "+str(self.matinv)+", ov = "+str(self.ov)+
 *               ", radcur = "+str(self.radcur))
 */

#line 78 "pyPegtrans.pyx"


#line 78 "pyPegtrans.pyx"
/* Python wrapper */

#line 78 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_7dPrint(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 78 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_7dPrint(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 78 "pyPegtrans.pyx"
  PyObject *__pyx_r = 0;

#line 78 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 78 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("dPrint (wrapper)", 0);
  __pyx_r = 
#line 78 "pyPegtrans.pyx"
__pyx_pf_8iscecore_10pyPegtrans_6dPrint(((struct __pyx_obj_8iscecore_pyPegtrans *)__pyx_v_self));

#line 78 "pyPegtrans.pyx"


#line 78 "pyPegtrans.pyx"
  /* function exit code */

#line 78 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 78 "pyPegtrans.pyx"
  return __pyx_r;

#line 78 "pyPegtrans.pyx"
}

#line 78 "pyPegtrans.pyx"


#line 78 "pyPegtrans.pyx"
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_6dPrint(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self) {

#line 78 "pyPegtrans.pyx"
  PyObject *__pyx_r = NULL;

#line 78 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 78 "pyPegtrans.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 78 "pyPegtrans.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 78 "pyPegtrans.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 78 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("dPrint", 0);

  /* "pyPegtrans.pyx":79
 *         self.c_pegtrans.radcur = a
 *     def dPrint(self):
 *         print("Mat = "+str(self.mat)+", matinv = "+str(self.matinv)+", ov = "+str(self.ov)+             # <<<<<<<<<<<<<<
 *               ", radcur = "+str(self.radcur))
 *     def copy(self, pt):
 */

#line 79 "pyPegtrans.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_mat); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 79, __pyx_L1_error)

#line 79 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 79 "pyPegtrans.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 79, __pyx_L1_error)

#line 79 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 79 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 79 "pyPegtrans.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 79 "pyPegtrans.pyx"
  __pyx_t_1 = 0;

#line 79 "pyPegtrans.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 79, __pyx_L1_error)

#line 79 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 79 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 79 "pyPegtrans.pyx"
  __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Mat, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 79, __pyx_L1_error)

#line 79 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 79 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 79 "pyPegtrans.pyx"
  __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_t_2, __pyx_kp_u_matinv); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 79, __pyx_L1_error)

#line 79 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 79 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 79 "pyPegtrans.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_matinv_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 79, __pyx_L1_error)

#line 79 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 79 "pyPegtrans.pyx"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 79, __pyx_L1_error)

#line 79 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 79 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 79 "pyPegtrans.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 79 "pyPegtrans.pyx"
  __pyx_t_2 = 0;

#line 79 "pyPegtrans.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 79, __pyx_L1_error)

#line 79 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 79 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 79 "pyPegtrans.pyx"
  __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 79, __pyx_L1_error)

#line 79 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 79 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 79 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 79 "pyPegtrans.pyx"
  __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_t_3, __pyx_kp_u_ov); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 79, __pyx_L1_error)

#line 79 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 79 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 79 "pyPegtrans.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ov_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 79, __pyx_L1_error)

#line 79 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 79 "pyPegtrans.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 79, __pyx_L1_error)

#line 79 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 79 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_t_3);

#line 79 "pyPegtrans.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);

#line 79 "pyPegtrans.pyx"
  __pyx_t_3 = 0;

#line 79 "pyPegtrans.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 79, __pyx_L1_error)

#line 79 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 79 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 79 "pyPegtrans.pyx"
  __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 79, __pyx_L1_error)

#line 79 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 79 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 79 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 79 "pyPegtrans.pyx"
  __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_kp_u_radcur); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 79, __pyx_L1_error)

#line 79 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 79 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyPegtrans.pyx":80
 *     def dPrint(self):
 *         print("Mat = "+str(self.mat)+", matinv = "+str(self.matinv)+", ov = "+str(self.ov)+
 *               ", radcur = "+str(self.radcur))             # <<<<<<<<<<<<<<
 *     def copy(self, pt):
 *         try:
 */

#line 80 "pyPegtrans.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_radcur_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 80, __pyx_L1_error)

#line 80 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 80 "pyPegtrans.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 80, __pyx_L1_error)

#line 80 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 80 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 80 "pyPegtrans.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 80 "pyPegtrans.pyx"
  __pyx_t_1 = 0;

#line 80 "pyPegtrans.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 80, __pyx_L1_error)

#line 80 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 80 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 80 "pyPegtrans.pyx"
  __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 80, __pyx_L1_error)

#line 80 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 80 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 80 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyPegtrans.pyx":79
 *         self.c_pegtrans.radcur = a
 *     def dPrint(self):
 *         print("Mat = "+str(self.mat)+", matinv = "+str(self.matinv)+", ov = "+str(self.ov)+             # <<<<<<<<<<<<<<
 *               ", radcur = "+str(self.radcur))
 *     def copy(self, pt):
 */

#line 79 "pyPegtrans.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 79, __pyx_L1_error)

#line 79 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 79 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 79 "pyPegtrans.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);

#line 79 "pyPegtrans.pyx"
  __pyx_t_2 = 0;

#line 79 "pyPegtrans.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 79, __pyx_L1_error)

#line 79 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 79 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 79 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyPegtrans.pyx":78
 *     def radcur(self, double a):
 *         self.c_pegtrans.radcur = a
 *     def dPrint(self):             # <<<<<<<<<<<<<<
 *         print("Mat = "+str(self.mat)+", matinv = "+str(self.matinv)+", ov = "+str(self.ov)+
 *               ", radcur = "+str(self.radcur))
 */

#line 78 "pyPegtrans.pyx"


#line 78 "pyPegtrans.pyx"
  /* function exit code */

#line 78 "pyPegtrans.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 78 "pyPegtrans.pyx"
  goto __pyx_L0;

#line 78 "pyPegtrans.pyx"
  __pyx_L1_error:;

#line 78 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 78 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 78 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 78 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.dPrint", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 78 "pyPegtrans.pyx"
  __pyx_r = NULL;

#line 78 "pyPegtrans.pyx"
  __pyx_L0:;

#line 78 "pyPegtrans.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 78 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 78 "pyPegtrans.pyx"
  return __pyx_r;

#line 78 "pyPegtrans.pyx"
}

/* "pyPegtrans.pyx":81
 *         print("Mat = "+str(self.mat)+", matinv = "+str(self.matinv)+", ov = "+str(self.ov)+
 *               ", radcur = "+str(self.radcur))
 *     def copy(self, pt):             # <<<<<<<<<<<<<<
 *         try:
 *             self.mat = pt.mat
 */

#line 81 "pyPegtrans.pyx"


#line 81 "pyPegtrans.pyx"
/* Python wrapper */

#line 81 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_9copy(PyObject *__pyx_v_self, PyObject *__pyx_v_pt); /*proto*/

#line 81 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_9copy(PyObject *__pyx_v_self, PyObject *__pyx_v_pt) {

#line 81 "pyPegtrans.pyx"
  PyObject *__pyx_r = 0;

#line 81 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 81 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = 
#line 81 "pyPegtrans.pyx"
__pyx_pf_8iscecore_10pyPegtrans_8copy(((struct __pyx_obj_8iscecore_pyPegtrans *)__pyx_v_self), ((PyObject *)__pyx_v_pt));

#line 81 "pyPegtrans.pyx"


#line 81 "pyPegtrans.pyx"
  /* function exit code */

#line 81 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 81 "pyPegtrans.pyx"
  return __pyx_r;

#line 81 "pyPegtrans.pyx"
}

#line 81 "pyPegtrans.pyx"


#line 81 "pyPegtrans.pyx"
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_8copy(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, PyObject *__pyx_v_pt) {

#line 81 "pyPegtrans.pyx"
  PyObject *__pyx_r = NULL;

#line 81 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 81 "pyPegtrans.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 81 "pyPegtrans.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 81 "pyPegtrans.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 81 "pyPegtrans.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 81 "pyPegtrans.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 81 "pyPegtrans.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 81 "pyPegtrans.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 81 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("copy", 0);

  /* "pyPegtrans.pyx":82
 *               ", radcur = "+str(self.radcur))
 *     def copy(self, pt):
 *         try:             # <<<<<<<<<<<<<<
 *             self.mat = pt.mat
 *             self.matinv = pt.matinv
 */

#line 82 "pyPegtrans.pyx"
  {

#line 82 "pyPegtrans.pyx"
    __Pyx_PyThreadState_declare

#line 82 "pyPegtrans.pyx"
    __Pyx_PyThreadState_assign

#line 82 "pyPegtrans.pyx"
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);

#line 82 "pyPegtrans.pyx"
    __Pyx_XGOTREF(__pyx_t_1);

#line 82 "pyPegtrans.pyx"
    __Pyx_XGOTREF(__pyx_t_2);

#line 82 "pyPegtrans.pyx"
    __Pyx_XGOTREF(__pyx_t_3);

#line 82 "pyPegtrans.pyx"
    /*try:*/ {

      /* "pyPegtrans.pyx":83
 *     def copy(self, pt):
 *         try:
 *             self.mat = pt.mat             # <<<<<<<<<<<<<<
 *             self.matinv = pt.matinv
 *             self.ov = pt.ov
 */

#line 83 "pyPegtrans.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_pt, __pyx_n_s_mat); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 83, __pyx_L3_error)

#line 83 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 83 "pyPegtrans.pyx"
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_mat, __pyx_t_4) < 0) __PYX_ERR(6, 83, __pyx_L3_error)

#line 83 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyPegtrans.pyx":84
 *         try:
 *             self.mat = pt.mat
 *             self.matinv = pt.matinv             # <<<<<<<<<<<<<<
 *             self.ov = pt.ov
 *             self.radcur = pt.radcur
 */

#line 84 "pyPegtrans.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_pt, __pyx_n_s_matinv_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 84, __pyx_L3_error)

#line 84 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 84 "pyPegtrans.pyx"
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_matinv_2, __pyx_t_4) < 0) __PYX_ERR(6, 84, __pyx_L3_error)

#line 84 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyPegtrans.pyx":85
 *             self.mat = pt.mat
 *             self.matinv = pt.matinv
 *             self.ov = pt.ov             # <<<<<<<<<<<<<<
 *             self.radcur = pt.radcur
 *         except:
 */

#line 85 "pyPegtrans.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_pt, __pyx_n_s_ov_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 85, __pyx_L3_error)

#line 85 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 85 "pyPegtrans.pyx"
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ov_2, __pyx_t_4) < 0) __PYX_ERR(6, 85, __pyx_L3_error)

#line 85 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyPegtrans.pyx":86
 *             self.matinv = pt.matinv
 *             self.ov = pt.ov
 *             self.radcur = pt.radcur             # <<<<<<<<<<<<<<
 *         except:
 *             print("Error: Object passed in is incompatible with object of type pyPegtrans.")
 */

#line 86 "pyPegtrans.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_pt, __pyx_n_s_radcur_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 86, __pyx_L3_error)

#line 86 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 86 "pyPegtrans.pyx"
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_radcur_2, __pyx_t_4) < 0) __PYX_ERR(6, 86, __pyx_L3_error)

#line 86 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyPegtrans.pyx":82
 *               ", radcur = "+str(self.radcur))
 *     def copy(self, pt):
 *         try:             # <<<<<<<<<<<<<<
 *             self.mat = pt.mat
 *             self.matinv = pt.matinv
 */

#line 82 "pyPegtrans.pyx"
    }

#line 82 "pyPegtrans.pyx"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 82 "pyPegtrans.pyx"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 82 "pyPegtrans.pyx"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 82 "pyPegtrans.pyx"
    goto __pyx_L8_try_end;

#line 82 "pyPegtrans.pyx"
    __pyx_L3_error:;

#line 82 "pyPegtrans.pyx"
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyPegtrans.pyx":87
 *             self.ov = pt.ov
 *             self.radcur = pt.radcur
 *         except:             # <<<<<<<<<<<<<<
 *             print("Error: Object passed in is incompatible with object of type pyPegtrans.")
 * 
 */

#line 87 "pyPegtrans.pyx"
    /*except:*/ {

#line 87 "pyPegtrans.pyx"
      __Pyx_AddTraceback("iscecore.pyPegtrans.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 87 "pyPegtrans.pyx"
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(6, 87, __pyx_L5_except_error)

#line 87 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 87 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 87 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_6);

      /* "pyPegtrans.pyx":88
 *             self.radcur = pt.radcur
 *         except:
 *             print("Error: Object passed in is incompatible with object of type pyPegtrans.")             # <<<<<<<<<<<<<<
 * 
 *     def radarToXYZ(self, pyEllipsoid a, pyPeg b):
 */

#line 88 "pyPegtrans.pyx"
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 88, __pyx_L5_except_error)

#line 88 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 88 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 88 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 88 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 88 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 88 "pyPegtrans.pyx"
      goto __pyx_L4_exception_handled;

#line 88 "pyPegtrans.pyx"
    }

#line 88 "pyPegtrans.pyx"
    __pyx_L5_except_error:;

    /* "pyPegtrans.pyx":82
 *               ", radcur = "+str(self.radcur))
 *     def copy(self, pt):
 *         try:             # <<<<<<<<<<<<<<
 *             self.mat = pt.mat
 *             self.matinv = pt.matinv
 */

#line 82 "pyPegtrans.pyx"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 82 "pyPegtrans.pyx"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 82 "pyPegtrans.pyx"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 82 "pyPegtrans.pyx"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 82 "pyPegtrans.pyx"
    goto __pyx_L1_error;

#line 82 "pyPegtrans.pyx"
    __pyx_L4_exception_handled:;

#line 82 "pyPegtrans.pyx"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 82 "pyPegtrans.pyx"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 82 "pyPegtrans.pyx"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 82 "pyPegtrans.pyx"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 82 "pyPegtrans.pyx"
    __pyx_L8_try_end:;

#line 82 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":81
 *         print("Mat = "+str(self.mat)+", matinv = "+str(self.matinv)+", ov = "+str(self.ov)+
 *               ", radcur = "+str(self.radcur))
 *     def copy(self, pt):             # <<<<<<<<<<<<<<
 *         try:
 *             self.mat = pt.mat
 */

#line 81 "pyPegtrans.pyx"


#line 81 "pyPegtrans.pyx"
  /* function exit code */

#line 81 "pyPegtrans.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 81 "pyPegtrans.pyx"
  goto __pyx_L0;

#line 81 "pyPegtrans.pyx"
  __pyx_L1_error:;

#line 81 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 81 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 81 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 81 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 81 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 81 "pyPegtrans.pyx"
  __pyx_r = NULL;

#line 81 "pyPegtrans.pyx"
  __pyx_L0:;

#line 81 "pyPegtrans.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 81 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 81 "pyPegtrans.pyx"
  return __pyx_r;

#line 81 "pyPegtrans.pyx"
}

/* "pyPegtrans.pyx":90
 *             print("Error: Object passed in is incompatible with object of type pyPegtrans.")
 * 
 *     def radarToXYZ(self, pyEllipsoid a, pyPeg b):             # <<<<<<<<<<<<<<
 *         self.c_pegtrans.radarToXYZ(deref(a.c_ellipsoid),deref(b.c_peg))
 *     def convertSCHtoXYZ(self, list a, list b, int c):
 */

#line 90 "pyPegtrans.pyx"


#line 90 "pyPegtrans.pyx"
/* Python wrapper */

#line 90 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_11radarToXYZ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 90 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_11radarToXYZ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_a = 0
#line 90 "pyPegtrans.pyx"
;
  struct __pyx_obj_8iscecore_pyPeg *__pyx_v_b = 0
#line 90 "pyPegtrans.pyx"
;

#line 90 "pyPegtrans.pyx"
  PyObject *__pyx_r = 0;

#line 90 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 90 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("radarToXYZ (wrapper)", 0);

#line 90 "pyPegtrans.pyx"
  {

#line 90 "pyPegtrans.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};

#line 90 "pyPegtrans.pyx"
    PyObject* values[2] = {0,0};

#line 90 "pyPegtrans.pyx"
    if (unlikely(__pyx_kwds)) {

#line 90 "pyPegtrans.pyx"
      Py_ssize_t kw_args;

#line 90 "pyPegtrans.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 90 "pyPegtrans.pyx"
      switch (pos_args) {
        case  2: 
#line 90 "pyPegtrans.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 90 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 90 "pyPegtrans.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 90 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;

#line 90 "pyPegtrans.pyx"
        case  0: break;
        default: 
#line 90 "pyPegtrans.pyx"
goto __pyx_L5_argtuple_error;

#line 90 "pyPegtrans.pyx"
      }

#line 90 "pyPegtrans.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 90 "pyPegtrans.pyx"
      switch (pos_args) {

#line 90 "pyPegtrans.pyx"
        case  0:

#line 90 "pyPegtrans.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 90 "pyPegtrans.pyx"
goto __pyx_L5_argtuple_error;

#line 90 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;

#line 90 "pyPegtrans.pyx"
        case  1:

#line 90 "pyPegtrans.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 90 "pyPegtrans.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("radarToXYZ", 1, 2, 2, 1); 
#line 90 "pyPegtrans.pyx"
__PYX_ERR(6, 90, __pyx_L3_error)

#line 90 "pyPegtrans.pyx"
        }

#line 90 "pyPegtrans.pyx"
      }

#line 90 "pyPegtrans.pyx"
      if (unlikely(kw_args > 0)) {

#line 90 "pyPegtrans.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "radarToXYZ") < 0)) __PYX_ERR(6, 90, __pyx_L3_error)

#line 90 "pyPegtrans.pyx"
      }

#line 90 "pyPegtrans.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 90 "pyPegtrans.pyx"
      goto __pyx_L5_argtuple_error;

#line 90 "pyPegtrans.pyx"
    } else {

#line 90 "pyPegtrans.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 90 "pyPegtrans.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 90 "pyPegtrans.pyx"
    }

#line 90 "pyPegtrans.pyx"
    __pyx_v_a = ((struct __pyx_obj_8iscecore_pyEllipsoid *)values[0]);

#line 90 "pyPegtrans.pyx"
    __pyx_v_b = ((struct __pyx_obj_8iscecore_pyPeg *)values[1]);

#line 90 "pyPegtrans.pyx"
  }

#line 90 "pyPegtrans.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 90 "pyPegtrans.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("radarToXYZ", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 90 "pyPegtrans.pyx"
__PYX_ERR(6, 90, __pyx_L3_error)

#line 90 "pyPegtrans.pyx"
  __pyx_L3_error:;

#line 90 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.radarToXYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 90 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 90 "pyPegtrans.pyx"
  return NULL;

#line 90 "pyPegtrans.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 90 "pyPegtrans.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_8iscecore_pyEllipsoid, 1, "a", 0))) __PYX_ERR(6, 90, __pyx_L1_error)

#line 90 "pyPegtrans.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_8iscecore_pyPeg, 1, "b", 0))) __PYX_ERR(6, 90, __pyx_L1_error)
  __pyx_r = 
#line 90 "pyPegtrans.pyx"
__pyx_pf_8iscecore_10pyPegtrans_10radarToXYZ(((struct __pyx_obj_8iscecore_pyPegtrans *)__pyx_v_self), __pyx_v_a, __pyx_v_b);

#line 90 "pyPegtrans.pyx"


#line 90 "pyPegtrans.pyx"
  /* function exit code */

#line 90 "pyPegtrans.pyx"
  goto __pyx_L0;

#line 90 "pyPegtrans.pyx"
  __pyx_L1_error:;

#line 90 "pyPegtrans.pyx"
  __pyx_r = NULL;

#line 90 "pyPegtrans.pyx"
  __pyx_L0:;

#line 90 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 90 "pyPegtrans.pyx"
  return __pyx_r;

#line 90 "pyPegtrans.pyx"
}

#line 90 "pyPegtrans.pyx"


#line 90 "pyPegtrans.pyx"
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_10radarToXYZ(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, struct __pyx_obj_8iscecore_pyEllipsoid *__pyx_v_a, struct __pyx_obj_8iscecore_pyPeg *__pyx_v_b) {

#line 90 "pyPegtrans.pyx"
  PyObject *__pyx_r = NULL;

#line 90 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 90 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("radarToXYZ", 0);

  /* "pyPegtrans.pyx":91
 * 
 *     def radarToXYZ(self, pyEllipsoid a, pyPeg b):
 *         self.c_pegtrans.radarToXYZ(deref(a.c_ellipsoid),deref(b.c_peg))             # <<<<<<<<<<<<<<
 *     def convertSCHtoXYZ(self, list a, list b, int c):
 *         cdef vector[double] _a
 */

#line 91 "pyPegtrans.pyx"
  __pyx_v_self->c_pegtrans->radarToXYZ((*__pyx_v_a->c_ellipsoid), (*__pyx_v_b->c_peg));

  /* "pyPegtrans.pyx":90
 *             print("Error: Object passed in is incompatible with object of type pyPegtrans.")
 * 
 *     def radarToXYZ(self, pyEllipsoid a, pyPeg b):             # <<<<<<<<<<<<<<
 *         self.c_pegtrans.radarToXYZ(deref(a.c_ellipsoid),deref(b.c_peg))
 *     def convertSCHtoXYZ(self, list a, list b, int c):
 */

#line 90 "pyPegtrans.pyx"


#line 90 "pyPegtrans.pyx"
  /* function exit code */

#line 90 "pyPegtrans.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 90 "pyPegtrans.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 90 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 90 "pyPegtrans.pyx"
  return __pyx_r;

#line 90 "pyPegtrans.pyx"
}

/* "pyPegtrans.pyx":92
 *     def radarToXYZ(self, pyEllipsoid a, pyPeg b):
 *         self.c_pegtrans.radarToXYZ(deref(a.c_ellipsoid),deref(b.c_peg))
 *     def convertSCHtoXYZ(self, list a, list b, int c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 92 "pyPegtrans.pyx"


#line 92 "pyPegtrans.pyx"
/* Python wrapper */

#line 92 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_13convertSCHtoXYZ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 92 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_13convertSCHtoXYZ(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0
#line 92 "pyPegtrans.pyx"
;
  PyObject *__pyx_v_b = 0
#line 92 "pyPegtrans.pyx"
;
  int __pyx_v_c
#line 92 "pyPegtrans.pyx"
;

#line 92 "pyPegtrans.pyx"
  PyObject *__pyx_r = 0;

#line 92 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 92 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("convertSCHtoXYZ (wrapper)", 0);

#line 92 "pyPegtrans.pyx"
  {

#line 92 "pyPegtrans.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,0};

#line 92 "pyPegtrans.pyx"
    PyObject* values[3] = {0,0,0};

#line 92 "pyPegtrans.pyx"
    if (unlikely(__pyx_kwds)) {

#line 92 "pyPegtrans.pyx"
      Py_ssize_t kw_args;

#line 92 "pyPegtrans.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 92 "pyPegtrans.pyx"
      switch (pos_args) {
        case  3: 
#line 92 "pyPegtrans.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 92 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 92 "pyPegtrans.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 92 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 92 "pyPegtrans.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 92 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;

#line 92 "pyPegtrans.pyx"
        case  0: break;
        default: 
#line 92 "pyPegtrans.pyx"
goto __pyx_L5_argtuple_error;

#line 92 "pyPegtrans.pyx"
      }

#line 92 "pyPegtrans.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 92 "pyPegtrans.pyx"
      switch (pos_args) {

#line 92 "pyPegtrans.pyx"
        case  0:

#line 92 "pyPegtrans.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 92 "pyPegtrans.pyx"
goto __pyx_L5_argtuple_error;

#line 92 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;

#line 92 "pyPegtrans.pyx"
        case  1:

#line 92 "pyPegtrans.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 92 "pyPegtrans.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("convertSCHtoXYZ", 1, 3, 3, 1); 
#line 92 "pyPegtrans.pyx"
__PYX_ERR(6, 92, __pyx_L3_error)

#line 92 "pyPegtrans.pyx"
        }

#line 92 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;

#line 92 "pyPegtrans.pyx"
        case  2:

#line 92 "pyPegtrans.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 92 "pyPegtrans.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("convertSCHtoXYZ", 1, 3, 3, 2); 
#line 92 "pyPegtrans.pyx"
__PYX_ERR(6, 92, __pyx_L3_error)

#line 92 "pyPegtrans.pyx"
        }

#line 92 "pyPegtrans.pyx"
      }

#line 92 "pyPegtrans.pyx"
      if (unlikely(kw_args > 0)) {

#line 92 "pyPegtrans.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "convertSCHtoXYZ") < 0)) __PYX_ERR(6, 92, __pyx_L3_error)

#line 92 "pyPegtrans.pyx"
      }

#line 92 "pyPegtrans.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 92 "pyPegtrans.pyx"
      goto __pyx_L5_argtuple_error;

#line 92 "pyPegtrans.pyx"
    } else {

#line 92 "pyPegtrans.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 92 "pyPegtrans.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 92 "pyPegtrans.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 92 "pyPegtrans.pyx"
    }

#line 92 "pyPegtrans.pyx"
    __pyx_v_a = ((PyObject*)values[0]);

#line 92 "pyPegtrans.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 92 "pyPegtrans.pyx"
    __pyx_v_c = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_c == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 92, __pyx_L3_error)

#line 92 "pyPegtrans.pyx"
  }

#line 92 "pyPegtrans.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 92 "pyPegtrans.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("convertSCHtoXYZ", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 92 "pyPegtrans.pyx"
__PYX_ERR(6, 92, __pyx_L3_error)

#line 92 "pyPegtrans.pyx"
  __pyx_L3_error:;

#line 92 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.convertSCHtoXYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 92 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 92 "pyPegtrans.pyx"
  return NULL;

#line 92 "pyPegtrans.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 92 "pyPegtrans.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), (&PyList_Type), 1, "a", 1))) __PYX_ERR(6, 92, __pyx_L1_error)

#line 92 "pyPegtrans.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(6, 92, __pyx_L1_error)
  __pyx_r = 
#line 92 "pyPegtrans.pyx"
__pyx_pf_8iscecore_10pyPegtrans_12convertSCHtoXYZ(((struct __pyx_obj_8iscecore_pyPegtrans *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c);

#line 92 "pyPegtrans.pyx"


#line 92 "pyPegtrans.pyx"
  /* function exit code */

#line 92 "pyPegtrans.pyx"
  goto __pyx_L0;

#line 92 "pyPegtrans.pyx"
  __pyx_L1_error:;

#line 92 "pyPegtrans.pyx"
  __pyx_r = NULL;

#line 92 "pyPegtrans.pyx"
  __pyx_L0:;

#line 92 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 92 "pyPegtrans.pyx"
  return __pyx_r;

#line 92 "pyPegtrans.pyx"
}

#line 92 "pyPegtrans.pyx"


#line 92 "pyPegtrans.pyx"
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_12convertSCHtoXYZ(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, int __pyx_v_c) {
  std::vector<double>  __pyx_v__a
#line 92 "pyPegtrans.pyx"
;
  std::vector<double>  __pyx_v__b
#line 92 "pyPegtrans.pyx"
;
  enum isce::core::orbitConvMethod __pyx_v__c
#line 92 "pyPegtrans.pyx"
;
  long __pyx_v_i
#line 92 "pyPegtrans.pyx"
;

#line 92 "pyPegtrans.pyx"
  PyObject *__pyx_r = NULL;

#line 92 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 92 "pyPegtrans.pyx"
  long __pyx_t_1;

#line 92 "pyPegtrans.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 92 "pyPegtrans.pyx"
  double __pyx_t_3;

#line 92 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("convertSCHtoXYZ", 0);

  /* "pyPegtrans.pyx":96
 *         cdef vector[double] _b
 *         cdef orbitConvMethod _c
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])
 */

#line 96 "pyPegtrans.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 96 "pyPegtrans.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyPegtrans.pyx":97
 *         cdef orbitConvMethod _c
 *         for i in range(3):
 *             _a.push_back(a[i])             # <<<<<<<<<<<<<<
 *             _b.push_back(b[i])
 *         if (c == orbitConvMethod.SCH_2_XYZ):
 */

#line 97 "pyPegtrans.pyx"
    if (unlikely(__pyx_v_a == Py_None)) {

#line 97 "pyPegtrans.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 97 "pyPegtrans.pyx"
      __PYX_ERR(6, 97, __pyx_L1_error)

#line 97 "pyPegtrans.pyx"
    }

#line 97 "pyPegtrans.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 97, __pyx_L1_error)

#line 97 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 97 "pyPegtrans.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 97, __pyx_L1_error)

#line 97 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 97 "pyPegtrans.pyx"
    try {

#line 97 "pyPegtrans.pyx"
      __pyx_v__a.push_back(__pyx_t_3);

#line 97 "pyPegtrans.pyx"
    } catch(...) {

#line 97 "pyPegtrans.pyx"
      __Pyx_CppExn2PyErr();

#line 97 "pyPegtrans.pyx"
      __PYX_ERR(6, 97, __pyx_L1_error)

#line 97 "pyPegtrans.pyx"
    }

    /* "pyPegtrans.pyx":98
 *         for i in range(3):
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])             # <<<<<<<<<<<<<<
 *         if (c == orbitConvMethod.SCH_2_XYZ):
 *             _c = orbitConvMethod.SCH_2_XYZ
 */

#line 98 "pyPegtrans.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 98 "pyPegtrans.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 98 "pyPegtrans.pyx"
      __PYX_ERR(6, 98, __pyx_L1_error)

#line 98 "pyPegtrans.pyx"
    }

#line 98 "pyPegtrans.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 98, __pyx_L1_error)

#line 98 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 98 "pyPegtrans.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 98, __pyx_L1_error)

#line 98 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 98 "pyPegtrans.pyx"
    try {

#line 98 "pyPegtrans.pyx"
      __pyx_v__b.push_back(__pyx_t_3);

#line 98 "pyPegtrans.pyx"
    } catch(...) {

#line 98 "pyPegtrans.pyx"
      __Pyx_CppExn2PyErr();

#line 98 "pyPegtrans.pyx"
      __PYX_ERR(6, 98, __pyx_L1_error)

#line 98 "pyPegtrans.pyx"
    }

#line 98 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":99
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])
 *         if (c == orbitConvMethod.SCH_2_XYZ):             # <<<<<<<<<<<<<<
 *             _c = orbitConvMethod.SCH_2_XYZ
 *         elif (c == orbitConvMethod.XYZ_2_SCH):
 */

#line 99 "pyPegtrans.pyx"
  switch (__pyx_v_c) {

#line 99 "pyPegtrans.pyx"
    case isce::core::SCH_2_XYZ:

    /* "pyPegtrans.pyx":100
 *             _b.push_back(b[i])
 *         if (c == orbitConvMethod.SCH_2_XYZ):
 *             _c = orbitConvMethod.SCH_2_XYZ             # <<<<<<<<<<<<<<
 *         elif (c == orbitConvMethod.XYZ_2_SCH):
 *             _c = orbitConvMethod.XYZ_2_SCH
 */

#line 100 "pyPegtrans.pyx"
    __pyx_v__c = isce::core::SCH_2_XYZ;

    /* "pyPegtrans.pyx":99
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])
 *         if (c == orbitConvMethod.SCH_2_XYZ):             # <<<<<<<<<<<<<<
 *             _c = orbitConvMethod.SCH_2_XYZ
 *         elif (c == orbitConvMethod.XYZ_2_SCH):
 */

#line 99 "pyPegtrans.pyx"
    break;

    /* "pyPegtrans.pyx":101
 *         if (c == orbitConvMethod.SCH_2_XYZ):
 *             _c = orbitConvMethod.SCH_2_XYZ
 *         elif (c == orbitConvMethod.XYZ_2_SCH):             # <<<<<<<<<<<<<<
 *             _c = orbitConvMethod.XYZ_2_SCH
 *         else:
 */

#line 101 "pyPegtrans.pyx"
    case isce::core::XYZ_2_SCH:

    /* "pyPegtrans.pyx":102
 *             _c = orbitConvMethod.SCH_2_XYZ
 *         elif (c == orbitConvMethod.XYZ_2_SCH):
 *             _c = orbitConvMethod.XYZ_2_SCH             # <<<<<<<<<<<<<<
 *         else:
 *             print("Error: Unknown orbit conversion method.")
 */

#line 102 "pyPegtrans.pyx"
    __pyx_v__c = isce::core::XYZ_2_SCH;

    /* "pyPegtrans.pyx":101
 *         if (c == orbitConvMethod.SCH_2_XYZ):
 *             _c = orbitConvMethod.SCH_2_XYZ
 *         elif (c == orbitConvMethod.XYZ_2_SCH):             # <<<<<<<<<<<<<<
 *             _c = orbitConvMethod.XYZ_2_SCH
 *         else:
 */

#line 101 "pyPegtrans.pyx"
    break;

#line 101 "pyPegtrans.pyx"
    default:

    /* "pyPegtrans.pyx":104
 *             _c = orbitConvMethod.XYZ_2_SCH
 *         else:
 *             print("Error: Unknown orbit conversion method.")             # <<<<<<<<<<<<<<
 *             return
 *         self.c_pegtrans.convertSCHtoXYZ(_a,_b,_c)
 */

#line 104 "pyPegtrans.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 104, __pyx_L1_error)

#line 104 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 104 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyPegtrans.pyx":105
 *         else:
 *             print("Error: Unknown orbit conversion method.")
 *             return             # <<<<<<<<<<<<<<
 *         self.c_pegtrans.convertSCHtoXYZ(_a,_b,_c)
 *         for i in range(3):
 */

#line 105 "pyPegtrans.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 105 "pyPegtrans.pyx"
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 105 "pyPegtrans.pyx"
    goto __pyx_L0;

#line 105 "pyPegtrans.pyx"
    break;

#line 105 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":106
 *             print("Error: Unknown orbit conversion method.")
 *             return
 *         self.c_pegtrans.convertSCHtoXYZ(_a,_b,_c)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             a[i] = _a[i]
 */

#line 106 "pyPegtrans.pyx"
  __pyx_v_self->c_pegtrans->convertSCHtoXYZ(__pyx_v__a, __pyx_v__b, __pyx_v__c);

  /* "pyPegtrans.pyx":107
 *             return
 *         self.c_pegtrans.convertSCHtoXYZ(_a,_b,_c)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             a[i] = _a[i]
 *             b[i] = _b[i]
 */

#line 107 "pyPegtrans.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 107 "pyPegtrans.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyPegtrans.pyx":108
 *         self.c_pegtrans.convertSCHtoXYZ(_a,_b,_c)
 *         for i in range(3):
 *             a[i] = _a[i]             # <<<<<<<<<<<<<<
 *             b[i] = _b[i]
 *     def convertSCHdotToXYZdot(self, list a, list b, list c, list d, int e):
 */

#line 108 "pyPegtrans.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__a[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 108, __pyx_L1_error)

#line 108 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 108 "pyPegtrans.pyx"
    if (unlikely(__pyx_v_a == Py_None)) {

#line 108 "pyPegtrans.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 108 "pyPegtrans.pyx"
      __PYX_ERR(6, 108, __pyx_L1_error)

#line 108 "pyPegtrans.pyx"
    }

#line 108 "pyPegtrans.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_a, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(6, 108, __pyx_L1_error)

#line 108 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyPegtrans.pyx":109
 *         for i in range(3):
 *             a[i] = _a[i]
 *             b[i] = _b[i]             # <<<<<<<<<<<<<<
 *     def convertSCHdotToXYZdot(self, list a, list b, list c, list d, int e):
 *         cdef vector[double] _a
 */

#line 109 "pyPegtrans.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__b[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 109, __pyx_L1_error)

#line 109 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 109 "pyPegtrans.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 109 "pyPegtrans.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 109 "pyPegtrans.pyx"
      __PYX_ERR(6, 109, __pyx_L1_error)

#line 109 "pyPegtrans.pyx"
    }

#line 109 "pyPegtrans.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_b, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(6, 109, __pyx_L1_error)

#line 109 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 109 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":92
 *     def radarToXYZ(self, pyEllipsoid a, pyPeg b):
 *         self.c_pegtrans.radarToXYZ(deref(a.c_ellipsoid),deref(b.c_peg))
 *     def convertSCHtoXYZ(self, list a, list b, int c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 92 "pyPegtrans.pyx"


#line 92 "pyPegtrans.pyx"
  /* function exit code */

#line 92 "pyPegtrans.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 92 "pyPegtrans.pyx"
  goto __pyx_L0;

#line 92 "pyPegtrans.pyx"
  __pyx_L1_error:;

#line 92 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 92 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.convertSCHtoXYZ", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 92 "pyPegtrans.pyx"
  __pyx_r = NULL;

#line 92 "pyPegtrans.pyx"
  __pyx_L0:;

#line 92 "pyPegtrans.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 92 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 92 "pyPegtrans.pyx"
  return __pyx_r;

#line 92 "pyPegtrans.pyx"
}

/* "pyPegtrans.pyx":110
 *             a[i] = _a[i]
 *             b[i] = _b[i]
 *     def convertSCHdotToXYZdot(self, list a, list b, list c, list d, int e):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 110 "pyPegtrans.pyx"


#line 110 "pyPegtrans.pyx"
/* Python wrapper */

#line 110 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_15convertSCHdotToXYZdot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 110 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_15convertSCHdotToXYZdot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0
#line 110 "pyPegtrans.pyx"
;
  PyObject *__pyx_v_b = 0
#line 110 "pyPegtrans.pyx"
;
  PyObject *__pyx_v_c = 0
#line 110 "pyPegtrans.pyx"
;
  PyObject *__pyx_v_d = 0
#line 110 "pyPegtrans.pyx"
;
  int __pyx_v_e
#line 110 "pyPegtrans.pyx"
;

#line 110 "pyPegtrans.pyx"
  PyObject *__pyx_r = 0;

#line 110 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 110 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("convertSCHdotToXYZdot (wrapper)", 0);

#line 110 "pyPegtrans.pyx"
  {

#line 110 "pyPegtrans.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,&__pyx_n_s_d,&__pyx_n_s_e,0};

#line 110 "pyPegtrans.pyx"
    PyObject* values[5] = {0,0,0,0,0};

#line 110 "pyPegtrans.pyx"
    if (unlikely(__pyx_kwds)) {

#line 110 "pyPegtrans.pyx"
      Py_ssize_t kw_args;

#line 110 "pyPegtrans.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 110 "pyPegtrans.pyx"
      switch (pos_args) {
        case  5: 
#line 110 "pyPegtrans.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 110 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 110 "pyPegtrans.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 110 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 110 "pyPegtrans.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 110 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 110 "pyPegtrans.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 110 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 110 "pyPegtrans.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 110 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;

#line 110 "pyPegtrans.pyx"
        case  0: break;
        default: 
#line 110 "pyPegtrans.pyx"
goto __pyx_L5_argtuple_error;

#line 110 "pyPegtrans.pyx"
      }

#line 110 "pyPegtrans.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 110 "pyPegtrans.pyx"
      switch (pos_args) {

#line 110 "pyPegtrans.pyx"
        case  0:

#line 110 "pyPegtrans.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 110 "pyPegtrans.pyx"
goto __pyx_L5_argtuple_error;

#line 110 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;

#line 110 "pyPegtrans.pyx"
        case  1:

#line 110 "pyPegtrans.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 110 "pyPegtrans.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("convertSCHdotToXYZdot", 1, 5, 5, 1); 
#line 110 "pyPegtrans.pyx"
__PYX_ERR(6, 110, __pyx_L3_error)

#line 110 "pyPegtrans.pyx"
        }

#line 110 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;

#line 110 "pyPegtrans.pyx"
        case  2:

#line 110 "pyPegtrans.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 110 "pyPegtrans.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("convertSCHdotToXYZdot", 1, 5, 5, 2); 
#line 110 "pyPegtrans.pyx"
__PYX_ERR(6, 110, __pyx_L3_error)

#line 110 "pyPegtrans.pyx"
        }

#line 110 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;

#line 110 "pyPegtrans.pyx"
        case  3:

#line 110 "pyPegtrans.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;

#line 110 "pyPegtrans.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("convertSCHdotToXYZdot", 1, 5, 5, 3); 
#line 110 "pyPegtrans.pyx"
__PYX_ERR(6, 110, __pyx_L3_error)

#line 110 "pyPegtrans.pyx"
        }

#line 110 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;

#line 110 "pyPegtrans.pyx"
        case  4:

#line 110 "pyPegtrans.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_e)) != 0)) kw_args--;

#line 110 "pyPegtrans.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("convertSCHdotToXYZdot", 1, 5, 5, 4); 
#line 110 "pyPegtrans.pyx"
__PYX_ERR(6, 110, __pyx_L3_error)

#line 110 "pyPegtrans.pyx"
        }

#line 110 "pyPegtrans.pyx"
      }

#line 110 "pyPegtrans.pyx"
      if (unlikely(kw_args > 0)) {

#line 110 "pyPegtrans.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "convertSCHdotToXYZdot") < 0)) __PYX_ERR(6, 110, __pyx_L3_error)

#line 110 "pyPegtrans.pyx"
      }

#line 110 "pyPegtrans.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {

#line 110 "pyPegtrans.pyx"
      goto __pyx_L5_argtuple_error;

#line 110 "pyPegtrans.pyx"
    } else {

#line 110 "pyPegtrans.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 110 "pyPegtrans.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 110 "pyPegtrans.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 110 "pyPegtrans.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 110 "pyPegtrans.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 110 "pyPegtrans.pyx"
    }

#line 110 "pyPegtrans.pyx"
    __pyx_v_a = ((PyObject*)values[0]);

#line 110 "pyPegtrans.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 110 "pyPegtrans.pyx"
    __pyx_v_c = ((PyObject*)values[2]);

#line 110 "pyPegtrans.pyx"
    __pyx_v_d = ((PyObject*)values[3]);

#line 110 "pyPegtrans.pyx"
    __pyx_v_e = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_e == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 110, __pyx_L3_error)

#line 110 "pyPegtrans.pyx"
  }

#line 110 "pyPegtrans.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 110 "pyPegtrans.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("convertSCHdotToXYZdot", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); 
#line 110 "pyPegtrans.pyx"
__PYX_ERR(6, 110, __pyx_L3_error)

#line 110 "pyPegtrans.pyx"
  __pyx_L3_error:;

#line 110 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.convertSCHdotToXYZdot", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 110 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 110 "pyPegtrans.pyx"
  return NULL;

#line 110 "pyPegtrans.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 110 "pyPegtrans.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), (&PyList_Type), 1, "a", 1))) __PYX_ERR(6, 110, __pyx_L1_error)

#line 110 "pyPegtrans.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(6, 110, __pyx_L1_error)

#line 110 "pyPegtrans.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), (&PyList_Type), 1, "c", 1))) __PYX_ERR(6, 110, __pyx_L1_error)

#line 110 "pyPegtrans.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_d), (&PyList_Type), 1, "d", 1))) __PYX_ERR(6, 110, __pyx_L1_error)
  __pyx_r = 
#line 110 "pyPegtrans.pyx"
__pyx_pf_8iscecore_10pyPegtrans_14convertSCHdotToXYZdot(((struct __pyx_obj_8iscecore_pyPegtrans *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c, __pyx_v_d, __pyx_v_e);

#line 110 "pyPegtrans.pyx"


#line 110 "pyPegtrans.pyx"
  /* function exit code */

#line 110 "pyPegtrans.pyx"
  goto __pyx_L0;

#line 110 "pyPegtrans.pyx"
  __pyx_L1_error:;

#line 110 "pyPegtrans.pyx"
  __pyx_r = NULL;

#line 110 "pyPegtrans.pyx"
  __pyx_L0:;

#line 110 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 110 "pyPegtrans.pyx"
  return __pyx_r;

#line 110 "pyPegtrans.pyx"
}

#line 110 "pyPegtrans.pyx"


#line 110 "pyPegtrans.pyx"
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_14convertSCHdotToXYZdot(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, int __pyx_v_e) {
  std::vector<double>  __pyx_v__a
#line 110 "pyPegtrans.pyx"
;
  std::vector<double>  __pyx_v__b
#line 110 "pyPegtrans.pyx"
;
  std::vector<double>  __pyx_v__c
#line 110 "pyPegtrans.pyx"
;
  std::vector<double>  __pyx_v__d
#line 110 "pyPegtrans.pyx"
;
  enum isce::core::orbitConvMethod __pyx_v__e
#line 110 "pyPegtrans.pyx"
;
  long __pyx_v_i
#line 110 "pyPegtrans.pyx"
;

#line 110 "pyPegtrans.pyx"
  PyObject *__pyx_r = NULL;

#line 110 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 110 "pyPegtrans.pyx"
  long __pyx_t_1;

#line 110 "pyPegtrans.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 110 "pyPegtrans.pyx"
  double __pyx_t_3;

#line 110 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("convertSCHdotToXYZdot", 0);

  /* "pyPegtrans.pyx":116
 *         cdef vector[double] _d
 *         cdef orbitConvMethod _e
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])
 */

#line 116 "pyPegtrans.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 116 "pyPegtrans.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyPegtrans.pyx":117
 *         cdef orbitConvMethod _e
 *         for i in range(3):
 *             _a.push_back(a[i])             # <<<<<<<<<<<<<<
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 */

#line 117 "pyPegtrans.pyx"
    if (unlikely(__pyx_v_a == Py_None)) {

#line 117 "pyPegtrans.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 117 "pyPegtrans.pyx"
      __PYX_ERR(6, 117, __pyx_L1_error)

#line 117 "pyPegtrans.pyx"
    }

#line 117 "pyPegtrans.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 117, __pyx_L1_error)

#line 117 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 117 "pyPegtrans.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 117, __pyx_L1_error)

#line 117 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 117 "pyPegtrans.pyx"
    try {

#line 117 "pyPegtrans.pyx"
      __pyx_v__a.push_back(__pyx_t_3);

#line 117 "pyPegtrans.pyx"
    } catch(...) {

#line 117 "pyPegtrans.pyx"
      __Pyx_CppExn2PyErr();

#line 117 "pyPegtrans.pyx"
      __PYX_ERR(6, 117, __pyx_L1_error)

#line 117 "pyPegtrans.pyx"
    }

    /* "pyPegtrans.pyx":118
 *         for i in range(3):
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])             # <<<<<<<<<<<<<<
 *             _c.push_back(c[i])
 *             _d.push_back(d[i])
 */

#line 118 "pyPegtrans.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 118 "pyPegtrans.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 118 "pyPegtrans.pyx"
      __PYX_ERR(6, 118, __pyx_L1_error)

#line 118 "pyPegtrans.pyx"
    }

#line 118 "pyPegtrans.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 118, __pyx_L1_error)

#line 118 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 118 "pyPegtrans.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 118, __pyx_L1_error)

#line 118 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 118 "pyPegtrans.pyx"
    try {

#line 118 "pyPegtrans.pyx"
      __pyx_v__b.push_back(__pyx_t_3);

#line 118 "pyPegtrans.pyx"
    } catch(...) {

#line 118 "pyPegtrans.pyx"
      __Pyx_CppExn2PyErr();

#line 118 "pyPegtrans.pyx"
      __PYX_ERR(6, 118, __pyx_L1_error)

#line 118 "pyPegtrans.pyx"
    }

    /* "pyPegtrans.pyx":119
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])             # <<<<<<<<<<<<<<
 *             _d.push_back(d[i])
 *         if (e == orbitConvMethod.SCH_2_XYZ):
 */

#line 119 "pyPegtrans.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 119 "pyPegtrans.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 119 "pyPegtrans.pyx"
      __PYX_ERR(6, 119, __pyx_L1_error)

#line 119 "pyPegtrans.pyx"
    }

#line 119 "pyPegtrans.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 119, __pyx_L1_error)

#line 119 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 119 "pyPegtrans.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 119, __pyx_L1_error)

#line 119 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 119 "pyPegtrans.pyx"
    try {

#line 119 "pyPegtrans.pyx"
      __pyx_v__c.push_back(__pyx_t_3);

#line 119 "pyPegtrans.pyx"
    } catch(...) {

#line 119 "pyPegtrans.pyx"
      __Pyx_CppExn2PyErr();

#line 119 "pyPegtrans.pyx"
      __PYX_ERR(6, 119, __pyx_L1_error)

#line 119 "pyPegtrans.pyx"
    }

    /* "pyPegtrans.pyx":120
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 *             _d.push_back(d[i])             # <<<<<<<<<<<<<<
 *         if (e == orbitConvMethod.SCH_2_XYZ):
 *             _e = orbitConvMethod.SCH_2_XYZ
 */

#line 120 "pyPegtrans.pyx"
    if (unlikely(__pyx_v_d == Py_None)) {

#line 120 "pyPegtrans.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 120 "pyPegtrans.pyx"
      __PYX_ERR(6, 120, __pyx_L1_error)

#line 120 "pyPegtrans.pyx"
    }

#line 120 "pyPegtrans.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_d, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 120, __pyx_L1_error)

#line 120 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 120 "pyPegtrans.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 120, __pyx_L1_error)

#line 120 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 120 "pyPegtrans.pyx"
    try {

#line 120 "pyPegtrans.pyx"
      __pyx_v__d.push_back(__pyx_t_3);

#line 120 "pyPegtrans.pyx"
    } catch(...) {

#line 120 "pyPegtrans.pyx"
      __Pyx_CppExn2PyErr();

#line 120 "pyPegtrans.pyx"
      __PYX_ERR(6, 120, __pyx_L1_error)

#line 120 "pyPegtrans.pyx"
    }

#line 120 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":121
 *             _c.push_back(c[i])
 *             _d.push_back(d[i])
 *         if (e == orbitConvMethod.SCH_2_XYZ):             # <<<<<<<<<<<<<<
 *             _e = orbitConvMethod.SCH_2_XYZ
 *         elif (e == orbitConvMethod.XYZ_2_SCH):
 */

#line 121 "pyPegtrans.pyx"
  switch (__pyx_v_e) {

#line 121 "pyPegtrans.pyx"
    case isce::core::SCH_2_XYZ:

    /* "pyPegtrans.pyx":122
 *             _d.push_back(d[i])
 *         if (e == orbitConvMethod.SCH_2_XYZ):
 *             _e = orbitConvMethod.SCH_2_XYZ             # <<<<<<<<<<<<<<
 *         elif (e == orbitConvMethod.XYZ_2_SCH):
 *             _e = orbitConvMethod.XYZ_2_SCH
 */

#line 122 "pyPegtrans.pyx"
    __pyx_v__e = isce::core::SCH_2_XYZ;

    /* "pyPegtrans.pyx":121
 *             _c.push_back(c[i])
 *             _d.push_back(d[i])
 *         if (e == orbitConvMethod.SCH_2_XYZ):             # <<<<<<<<<<<<<<
 *             _e = orbitConvMethod.SCH_2_XYZ
 *         elif (e == orbitConvMethod.XYZ_2_SCH):
 */

#line 121 "pyPegtrans.pyx"
    break;

    /* "pyPegtrans.pyx":123
 *         if (e == orbitConvMethod.SCH_2_XYZ):
 *             _e = orbitConvMethod.SCH_2_XYZ
 *         elif (e == orbitConvMethod.XYZ_2_SCH):             # <<<<<<<<<<<<<<
 *             _e = orbitConvMethod.XYZ_2_SCH
 *         else:
 */

#line 123 "pyPegtrans.pyx"
    case isce::core::XYZ_2_SCH:

    /* "pyPegtrans.pyx":124
 *             _e = orbitConvMethod.SCH_2_XYZ
 *         elif (e == orbitConvMethod.XYZ_2_SCH):
 *             _e = orbitConvMethod.XYZ_2_SCH             # <<<<<<<<<<<<<<
 *         else:
 *             print("Error: Unknown orbit conversion method.")
 */

#line 124 "pyPegtrans.pyx"
    __pyx_v__e = isce::core::XYZ_2_SCH;

    /* "pyPegtrans.pyx":123
 *         if (e == orbitConvMethod.SCH_2_XYZ):
 *             _e = orbitConvMethod.SCH_2_XYZ
 *         elif (e == orbitConvMethod.XYZ_2_SCH):             # <<<<<<<<<<<<<<
 *             _e = orbitConvMethod.XYZ_2_SCH
 *         else:
 */

#line 123 "pyPegtrans.pyx"
    break;

#line 123 "pyPegtrans.pyx"
    default:

    /* "pyPegtrans.pyx":126
 *             _e = orbitConvMethod.XYZ_2_SCH
 *         else:
 *             print("Error: Unknown orbit conversion method.")             # <<<<<<<<<<<<<<
 *             return
 *         self.c_pegtrans.convertSCHdotToXYZdot(_a,_b,_c,_d,_e)
 */

#line 126 "pyPegtrans.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 126, __pyx_L1_error)

#line 126 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 126 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyPegtrans.pyx":127
 *         else:
 *             print("Error: Unknown orbit conversion method.")
 *             return             # <<<<<<<<<<<<<<
 *         self.c_pegtrans.convertSCHdotToXYZdot(_a,_b,_c,_d,_e)
 *         for i in range(3):
 */

#line 127 "pyPegtrans.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 127 "pyPegtrans.pyx"
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 127 "pyPegtrans.pyx"
    goto __pyx_L0;

#line 127 "pyPegtrans.pyx"
    break;

#line 127 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":128
 *             print("Error: Unknown orbit conversion method.")
 *             return
 *         self.c_pegtrans.convertSCHdotToXYZdot(_a,_b,_c,_d,_e)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             a[i] = _a[i]
 */

#line 128 "pyPegtrans.pyx"
  __pyx_v_self->c_pegtrans->convertSCHdotToXYZdot(__pyx_v__a, __pyx_v__b, __pyx_v__c, __pyx_v__d, __pyx_v__e);

  /* "pyPegtrans.pyx":129
 *             return
 *         self.c_pegtrans.convertSCHdotToXYZdot(_a,_b,_c,_d,_e)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             a[i] = _a[i]
 *             b[i] = _b[i]
 */

#line 129 "pyPegtrans.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 129 "pyPegtrans.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyPegtrans.pyx":130
 *         self.c_pegtrans.convertSCHdotToXYZdot(_a,_b,_c,_d,_e)
 *         for i in range(3):
 *             a[i] = _a[i]             # <<<<<<<<<<<<<<
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 */

#line 130 "pyPegtrans.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__a[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 130, __pyx_L1_error)

#line 130 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 130 "pyPegtrans.pyx"
    if (unlikely(__pyx_v_a == Py_None)) {

#line 130 "pyPegtrans.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 130 "pyPegtrans.pyx"
      __PYX_ERR(6, 130, __pyx_L1_error)

#line 130 "pyPegtrans.pyx"
    }

#line 130 "pyPegtrans.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_a, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(6, 130, __pyx_L1_error)

#line 130 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyPegtrans.pyx":131
 *         for i in range(3):
 *             a[i] = _a[i]
 *             b[i] = _b[i]             # <<<<<<<<<<<<<<
 *             c[i] = _c[i]
 *             d[i] = _d[i]
 */

#line 131 "pyPegtrans.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__b[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 131, __pyx_L1_error)

#line 131 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 131 "pyPegtrans.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 131 "pyPegtrans.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 131 "pyPegtrans.pyx"
      __PYX_ERR(6, 131, __pyx_L1_error)

#line 131 "pyPegtrans.pyx"
    }

#line 131 "pyPegtrans.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_b, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(6, 131, __pyx_L1_error)

#line 131 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyPegtrans.pyx":132
 *             a[i] = _a[i]
 *             b[i] = _b[i]
 *             c[i] = _c[i]             # <<<<<<<<<<<<<<
 *             d[i] = _d[i]
 *     def SCHbasis(self, list a, list b, list c):
 */

#line 132 "pyPegtrans.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__c[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 132, __pyx_L1_error)

#line 132 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 132 "pyPegtrans.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 132 "pyPegtrans.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 132 "pyPegtrans.pyx"
      __PYX_ERR(6, 132, __pyx_L1_error)

#line 132 "pyPegtrans.pyx"
    }

#line 132 "pyPegtrans.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_c, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(6, 132, __pyx_L1_error)

#line 132 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyPegtrans.pyx":133
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 *             d[i] = _d[i]             # <<<<<<<<<<<<<<
 *     def SCHbasis(self, list a, list b, list c):
 *         cdef vector[double] _a
 */

#line 133 "pyPegtrans.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__d[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 133, __pyx_L1_error)

#line 133 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 133 "pyPegtrans.pyx"
    if (unlikely(__pyx_v_d == Py_None)) {

#line 133 "pyPegtrans.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 133 "pyPegtrans.pyx"
      __PYX_ERR(6, 133, __pyx_L1_error)

#line 133 "pyPegtrans.pyx"
    }

#line 133 "pyPegtrans.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_d, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(6, 133, __pyx_L1_error)

#line 133 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 133 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":110
 *             a[i] = _a[i]
 *             b[i] = _b[i]
 *     def convertSCHdotToXYZdot(self, list a, list b, list c, list d, int e):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 110 "pyPegtrans.pyx"


#line 110 "pyPegtrans.pyx"
  /* function exit code */

#line 110 "pyPegtrans.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 110 "pyPegtrans.pyx"
  goto __pyx_L0;

#line 110 "pyPegtrans.pyx"
  __pyx_L1_error:;

#line 110 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 110 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.convertSCHdotToXYZdot", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 110 "pyPegtrans.pyx"
  __pyx_r = NULL;

#line 110 "pyPegtrans.pyx"
  __pyx_L0:;

#line 110 "pyPegtrans.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 110 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 110 "pyPegtrans.pyx"
  return __pyx_r;

#line 110 "pyPegtrans.pyx"
}

/* "pyPegtrans.pyx":134
 *             c[i] = _c[i]
 *             d[i] = _d[i]
 *     def SCHbasis(self, list a, list b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _temp_b
 */

#line 134 "pyPegtrans.pyx"


#line 134 "pyPegtrans.pyx"
/* Python wrapper */

#line 134 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_17SCHbasis(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 134 "pyPegtrans.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_17SCHbasis(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0
#line 134 "pyPegtrans.pyx"
;
  PyObject *__pyx_v_b = 0
#line 134 "pyPegtrans.pyx"
;
  PyObject *__pyx_v_c = 0
#line 134 "pyPegtrans.pyx"
;

#line 134 "pyPegtrans.pyx"
  PyObject *__pyx_r = 0;

#line 134 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 134 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("SCHbasis (wrapper)", 0);

#line 134 "pyPegtrans.pyx"
  {

#line 134 "pyPegtrans.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,0};

#line 134 "pyPegtrans.pyx"
    PyObject* values[3] = {0,0,0};

#line 134 "pyPegtrans.pyx"
    if (unlikely(__pyx_kwds)) {

#line 134 "pyPegtrans.pyx"
      Py_ssize_t kw_args;

#line 134 "pyPegtrans.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 134 "pyPegtrans.pyx"
      switch (pos_args) {
        case  3: 
#line 134 "pyPegtrans.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 134 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 134 "pyPegtrans.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 134 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 134 "pyPegtrans.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 134 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;

#line 134 "pyPegtrans.pyx"
        case  0: break;
        default: 
#line 134 "pyPegtrans.pyx"
goto __pyx_L5_argtuple_error;

#line 134 "pyPegtrans.pyx"
      }

#line 134 "pyPegtrans.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 134 "pyPegtrans.pyx"
      switch (pos_args) {

#line 134 "pyPegtrans.pyx"
        case  0:

#line 134 "pyPegtrans.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 134 "pyPegtrans.pyx"
goto __pyx_L5_argtuple_error;

#line 134 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;

#line 134 "pyPegtrans.pyx"
        case  1:

#line 134 "pyPegtrans.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 134 "pyPegtrans.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("SCHbasis", 1, 3, 3, 1); 
#line 134 "pyPegtrans.pyx"
__PYX_ERR(6, 134, __pyx_L3_error)

#line 134 "pyPegtrans.pyx"
        }

#line 134 "pyPegtrans.pyx"
        CYTHON_FALLTHROUGH;

#line 134 "pyPegtrans.pyx"
        case  2:

#line 134 "pyPegtrans.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 134 "pyPegtrans.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("SCHbasis", 1, 3, 3, 2); 
#line 134 "pyPegtrans.pyx"
__PYX_ERR(6, 134, __pyx_L3_error)

#line 134 "pyPegtrans.pyx"
        }

#line 134 "pyPegtrans.pyx"
      }

#line 134 "pyPegtrans.pyx"
      if (unlikely(kw_args > 0)) {

#line 134 "pyPegtrans.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "SCHbasis") < 0)) __PYX_ERR(6, 134, __pyx_L3_error)

#line 134 "pyPegtrans.pyx"
      }

#line 134 "pyPegtrans.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 134 "pyPegtrans.pyx"
      goto __pyx_L5_argtuple_error;

#line 134 "pyPegtrans.pyx"
    } else {

#line 134 "pyPegtrans.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 134 "pyPegtrans.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 134 "pyPegtrans.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 134 "pyPegtrans.pyx"
    }

#line 134 "pyPegtrans.pyx"
    __pyx_v_a = ((PyObject*)values[0]);

#line 134 "pyPegtrans.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 134 "pyPegtrans.pyx"
    __pyx_v_c = ((PyObject*)values[2]);

#line 134 "pyPegtrans.pyx"
  }

#line 134 "pyPegtrans.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 134 "pyPegtrans.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SCHbasis", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 134 "pyPegtrans.pyx"
__PYX_ERR(6, 134, __pyx_L3_error)

#line 134 "pyPegtrans.pyx"
  __pyx_L3_error:;

#line 134 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.SCHbasis", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 134 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 134 "pyPegtrans.pyx"
  return NULL;

#line 134 "pyPegtrans.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 134 "pyPegtrans.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), (&PyList_Type), 1, "a", 1))) __PYX_ERR(6, 134, __pyx_L1_error)

#line 134 "pyPegtrans.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(6, 134, __pyx_L1_error)

#line 134 "pyPegtrans.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), (&PyList_Type), 1, "c", 1))) __PYX_ERR(6, 134, __pyx_L1_error)
  __pyx_r = 
#line 134 "pyPegtrans.pyx"
__pyx_pf_8iscecore_10pyPegtrans_16SCHbasis(((struct __pyx_obj_8iscecore_pyPegtrans *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c);

#line 134 "pyPegtrans.pyx"


#line 134 "pyPegtrans.pyx"
  /* function exit code */

#line 134 "pyPegtrans.pyx"
  goto __pyx_L0;

#line 134 "pyPegtrans.pyx"
  __pyx_L1_error:;

#line 134 "pyPegtrans.pyx"
  __pyx_r = NULL;

#line 134 "pyPegtrans.pyx"
  __pyx_L0:;

#line 134 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 134 "pyPegtrans.pyx"
  return __pyx_r;

#line 134 "pyPegtrans.pyx"
}

#line 134 "pyPegtrans.pyx"


#line 134 "pyPegtrans.pyx"
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_16SCHbasis(struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  std::vector<double>  __pyx_v__a
#line 134 "pyPegtrans.pyx"
;
  std::vector<double>  __pyx_v__temp_b
#line 134 "pyPegtrans.pyx"
;
  std::vector<double>  __pyx_v__temp_c
#line 134 "pyPegtrans.pyx"
;
  std::vector<std::vector<double> >  __pyx_v__b
#line 134 "pyPegtrans.pyx"
;
  std::vector<std::vector<double> >  __pyx_v__c
#line 134 "pyPegtrans.pyx"
;
  long __pyx_v_i
#line 134 "pyPegtrans.pyx"
;
  long __pyx_v_j
#line 134 "pyPegtrans.pyx"
;

#line 134 "pyPegtrans.pyx"
  PyObject *__pyx_r = NULL;

#line 134 "pyPegtrans.pyx"
  __Pyx_RefNannyDeclarations

#line 134 "pyPegtrans.pyx"
  long __pyx_t_1;

#line 134 "pyPegtrans.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 134 "pyPegtrans.pyx"
  double __pyx_t_3;

#line 134 "pyPegtrans.pyx"
  long __pyx_t_4;

#line 134 "pyPegtrans.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 134 "pyPegtrans.pyx"
  __Pyx_RefNannySetupContext("SCHbasis", 0);

  /* "pyPegtrans.pyx":140
 *         cdef vector[vector[double]] _b
 *         cdef vector[vector[double]] _c
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _a.push_back(a[i])
 *             _temp_b.push_back(0.)
 */

#line 140 "pyPegtrans.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 140 "pyPegtrans.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyPegtrans.pyx":141
 *         cdef vector[vector[double]] _c
 *         for i in range(3):
 *             _a.push_back(a[i])             # <<<<<<<<<<<<<<
 *             _temp_b.push_back(0.)
 *             _temp_c.push_back(0.)
 */

#line 141 "pyPegtrans.pyx"
    if (unlikely(__pyx_v_a == Py_None)) {

#line 141 "pyPegtrans.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 141 "pyPegtrans.pyx"
      __PYX_ERR(6, 141, __pyx_L1_error)

#line 141 "pyPegtrans.pyx"
    }

#line 141 "pyPegtrans.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 141, __pyx_L1_error)

#line 141 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 141 "pyPegtrans.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 141, __pyx_L1_error)

#line 141 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 141 "pyPegtrans.pyx"
    try {

#line 141 "pyPegtrans.pyx"
      __pyx_v__a.push_back(__pyx_t_3);

#line 141 "pyPegtrans.pyx"
    } catch(...) {

#line 141 "pyPegtrans.pyx"
      __Pyx_CppExn2PyErr();

#line 141 "pyPegtrans.pyx"
      __PYX_ERR(6, 141, __pyx_L1_error)

#line 141 "pyPegtrans.pyx"
    }

    /* "pyPegtrans.pyx":142
 *         for i in range(3):
 *             _a.push_back(a[i])
 *             _temp_b.push_back(0.)             # <<<<<<<<<<<<<<
 *             _temp_c.push_back(0.)
 *         for i in range(3):
 */

#line 142 "pyPegtrans.pyx"
    try {

#line 142 "pyPegtrans.pyx"
      __pyx_v__temp_b.push_back(0.);

#line 142 "pyPegtrans.pyx"
    } catch(...) {

#line 142 "pyPegtrans.pyx"
      __Pyx_CppExn2PyErr();

#line 142 "pyPegtrans.pyx"
      __PYX_ERR(6, 142, __pyx_L1_error)

#line 142 "pyPegtrans.pyx"
    }

    /* "pyPegtrans.pyx":143
 *             _a.push_back(a[i])
 *             _temp_b.push_back(0.)
 *             _temp_c.push_back(0.)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             for j in range(3):
 */

#line 143 "pyPegtrans.pyx"
    try {

#line 143 "pyPegtrans.pyx"
      __pyx_v__temp_c.push_back(0.);

#line 143 "pyPegtrans.pyx"
    } catch(...) {

#line 143 "pyPegtrans.pyx"
      __Pyx_CppExn2PyErr();

#line 143 "pyPegtrans.pyx"
      __PYX_ERR(6, 143, __pyx_L1_error)

#line 143 "pyPegtrans.pyx"
    }

#line 143 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":144
 *             _temp_b.push_back(0.)
 *             _temp_c.push_back(0.)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 _temp_b[j] = b[i][j]
 */

#line 144 "pyPegtrans.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 144 "pyPegtrans.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyPegtrans.pyx":145
 *             _temp_c.push_back(0.)
 *         for i in range(3):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 _temp_b[j] = b[i][j]
 *                 _temp_c[j] = c[i][j]
 */

#line 145 "pyPegtrans.pyx"
    for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {

#line 145 "pyPegtrans.pyx"
      __pyx_v_j = __pyx_t_4;

      /* "pyPegtrans.pyx":146
 *         for i in range(3):
 *             for j in range(3):
 *                 _temp_b[j] = b[i][j]             # <<<<<<<<<<<<<<
 *                 _temp_c[j] = c[i][j]
 *             _b.push_back(_temp_b)
 */

#line 146 "pyPegtrans.pyx"
      if (unlikely(__pyx_v_b == Py_None)) {

#line 146 "pyPegtrans.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 146 "pyPegtrans.pyx"
        __PYX_ERR(6, 146, __pyx_L1_error)

#line 146 "pyPegtrans.pyx"
      }

#line 146 "pyPegtrans.pyx"
      __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 146, __pyx_L1_error)

#line 146 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 146 "pyPegtrans.pyx"
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_j, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 146, __pyx_L1_error)

#line 146 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 146 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 146 "pyPegtrans.pyx"
      __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 146, __pyx_L1_error)

#line 146 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 146 "pyPegtrans.pyx"
      (__pyx_v__temp_b[__pyx_v_j]) = __pyx_t_3;

      /* "pyPegtrans.pyx":147
 *             for j in range(3):
 *                 _temp_b[j] = b[i][j]
 *                 _temp_c[j] = c[i][j]             # <<<<<<<<<<<<<<
 *             _b.push_back(_temp_b)
 *             _c.push_back(_temp_c)
 */

#line 147 "pyPegtrans.pyx"
      if (unlikely(__pyx_v_c == Py_None)) {

#line 147 "pyPegtrans.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 147 "pyPegtrans.pyx"
        __PYX_ERR(6, 147, __pyx_L1_error)

#line 147 "pyPegtrans.pyx"
      }

#line 147 "pyPegtrans.pyx"
      __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 147, __pyx_L1_error)

#line 147 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 147 "pyPegtrans.pyx"
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_5, __pyx_v_j, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 147, __pyx_L1_error)

#line 147 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 147 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 147 "pyPegtrans.pyx"
      __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 147, __pyx_L1_error)

#line 147 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 147 "pyPegtrans.pyx"
      (__pyx_v__temp_c[__pyx_v_j]) = __pyx_t_3;

#line 147 "pyPegtrans.pyx"
    }

    /* "pyPegtrans.pyx":148
 *                 _temp_b[j] = b[i][j]
 *                 _temp_c[j] = c[i][j]
 *             _b.push_back(_temp_b)             # <<<<<<<<<<<<<<
 *             _c.push_back(_temp_c)
 *         self.c_pegtrans.SCHbasis(_a,_b,_c)
 */

#line 148 "pyPegtrans.pyx"
    try {

#line 148 "pyPegtrans.pyx"
      __pyx_v__b.push_back(__pyx_v__temp_b);

#line 148 "pyPegtrans.pyx"
    } catch(...) {

#line 148 "pyPegtrans.pyx"
      __Pyx_CppExn2PyErr();

#line 148 "pyPegtrans.pyx"
      __PYX_ERR(6, 148, __pyx_L1_error)

#line 148 "pyPegtrans.pyx"
    }

    /* "pyPegtrans.pyx":149
 *                 _temp_c[j] = c[i][j]
 *             _b.push_back(_temp_b)
 *             _c.push_back(_temp_c)             # <<<<<<<<<<<<<<
 *         self.c_pegtrans.SCHbasis(_a,_b,_c)
 *         for i in range(3):
 */

#line 149 "pyPegtrans.pyx"
    try {

#line 149 "pyPegtrans.pyx"
      __pyx_v__c.push_back(__pyx_v__temp_c);

#line 149 "pyPegtrans.pyx"
    } catch(...) {

#line 149 "pyPegtrans.pyx"
      __Pyx_CppExn2PyErr();

#line 149 "pyPegtrans.pyx"
      __PYX_ERR(6, 149, __pyx_L1_error)

#line 149 "pyPegtrans.pyx"
    }

#line 149 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":150
 *             _b.push_back(_temp_b)
 *             _c.push_back(_temp_c)
 *         self.c_pegtrans.SCHbasis(_a,_b,_c)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             a[i] = _a[i]
 */

#line 150 "pyPegtrans.pyx"
  __pyx_v_self->c_pegtrans->SCHbasis(__pyx_v__a, __pyx_v__b, __pyx_v__c);

  /* "pyPegtrans.pyx":151
 *             _c.push_back(_temp_c)
 *         self.c_pegtrans.SCHbasis(_a,_b,_c)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             a[i] = _a[i]
 *             for j in range(3):
 */

#line 151 "pyPegtrans.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 151 "pyPegtrans.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyPegtrans.pyx":152
 *         self.c_pegtrans.SCHbasis(_a,_b,_c)
 *         for i in range(3):
 *             a[i] = _a[i]             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 b[i][j] = _b[i][j]
 */

#line 152 "pyPegtrans.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__a[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 152, __pyx_L1_error)

#line 152 "pyPegtrans.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 152 "pyPegtrans.pyx"
    if (unlikely(__pyx_v_a == Py_None)) {

#line 152 "pyPegtrans.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 152 "pyPegtrans.pyx"
      __PYX_ERR(6, 152, __pyx_L1_error)

#line 152 "pyPegtrans.pyx"
    }

#line 152 "pyPegtrans.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_a, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(6, 152, __pyx_L1_error)

#line 152 "pyPegtrans.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyPegtrans.pyx":153
 *         for i in range(3):
 *             a[i] = _a[i]
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 b[i][j] = _b[i][j]
 *                 c[i][j] = _c[i][j]
 */

#line 153 "pyPegtrans.pyx"
    for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {

#line 153 "pyPegtrans.pyx"
      __pyx_v_j = __pyx_t_4;

      /* "pyPegtrans.pyx":154
 *             a[i] = _a[i]
 *             for j in range(3):
 *                 b[i][j] = _b[i][j]             # <<<<<<<<<<<<<<
 *                 c[i][j] = _c[i][j]
 * 
 */

#line 154 "pyPegtrans.pyx"
      __pyx_t_2 = PyFloat_FromDouble(((__pyx_v__b[__pyx_v_i])[__pyx_v_j])); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 154, __pyx_L1_error)

#line 154 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 154 "pyPegtrans.pyx"
      if (unlikely(__pyx_v_b == Py_None)) {

#line 154 "pyPegtrans.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 154 "pyPegtrans.pyx"
        __PYX_ERR(6, 154, __pyx_L1_error)

#line 154 "pyPegtrans.pyx"
      }

#line 154 "pyPegtrans.pyx"
      __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 154, __pyx_L1_error)

#line 154 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 154 "pyPegtrans.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_t_5, __pyx_v_j, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(6, 154, __pyx_L1_error)

#line 154 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 154 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyPegtrans.pyx":155
 *             for j in range(3):
 *                 b[i][j] = _b[i][j]
 *                 c[i][j] = _c[i][j]             # <<<<<<<<<<<<<<
 * 
 */

#line 155 "pyPegtrans.pyx"
      __pyx_t_2 = PyFloat_FromDouble(((__pyx_v__c[__pyx_v_i])[__pyx_v_j])); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 155, __pyx_L1_error)

#line 155 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 155 "pyPegtrans.pyx"
      if (unlikely(__pyx_v_c == Py_None)) {

#line 155 "pyPegtrans.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 155 "pyPegtrans.pyx"
        __PYX_ERR(6, 155, __pyx_L1_error)

#line 155 "pyPegtrans.pyx"
      }

#line 155 "pyPegtrans.pyx"
      __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 155, __pyx_L1_error)

#line 155 "pyPegtrans.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 155 "pyPegtrans.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_t_5, __pyx_v_j, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(6, 155, __pyx_L1_error)

#line 155 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 155 "pyPegtrans.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 155 "pyPegtrans.pyx"
    }

#line 155 "pyPegtrans.pyx"
  }

  /* "pyPegtrans.pyx":134
 *             c[i] = _c[i]
 *             d[i] = _d[i]
 *     def SCHbasis(self, list a, list b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _temp_b
 */

#line 134 "pyPegtrans.pyx"


#line 134 "pyPegtrans.pyx"
  /* function exit code */

#line 134 "pyPegtrans.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 134 "pyPegtrans.pyx"
  goto __pyx_L0;

#line 134 "pyPegtrans.pyx"
  __pyx_L1_error:;

#line 134 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 134 "pyPegtrans.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 134 "pyPegtrans.pyx"
  __Pyx_AddTraceback("iscecore.pyPegtrans.SCHbasis", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 134 "pyPegtrans.pyx"
  __pyx_r = NULL;

#line 134 "pyPegtrans.pyx"
  __pyx_L0:;

#line 134 "pyPegtrans.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 134 "pyPegtrans.pyx"
  __Pyx_RefNannyFinishContext();

#line 134 "pyPegtrans.pyx"
  return __pyx_r;

#line 134 "pyPegtrans.pyx"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_8iscecore_10pyPegtrans_18__reduce_cython__(((struct __pyx_obj_8iscecore_pyPegtrans *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyPegtrans.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_10pyPegtrans_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf_8iscecore_10pyPegtrans_20__setstate_cython__(((struct __pyx_obj_8iscecore_pyPegtrans *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_10pyPegtrans_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPegtrans *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyPegtrans.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "pyPosition.pyx":15
 *     cdef bool __owner
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.c_position = new Position()
 *         self.__owner = True
 */

#line 15 "pyPosition.pyx"


#line 15 "pyPosition.pyx"
/* Python wrapper */

#line 15 "pyPosition.pyx"
static int __pyx_pw_8iscecore_10pyPosition_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 15 "pyPosition.pyx"
static int __pyx_pw_8iscecore_10pyPosition_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 15 "pyPosition.pyx"
  int __pyx_r;

#line 15 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 15 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 15 "pyPosition.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 15 "pyPosition.pyx"
}

#line 15 "pyPosition.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = 
#line 15 "pyPosition.pyx"
__pyx_pf_8iscecore_10pyPosition___cinit__(((struct __pyx_obj_8iscecore_pyPosition *)__pyx_v_self));

#line 15 "pyPosition.pyx"


#line 15 "pyPosition.pyx"
  /* function exit code */

#line 15 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 15 "pyPosition.pyx"
  return __pyx_r;

#line 15 "pyPosition.pyx"
}

#line 15 "pyPosition.pyx"


#line 15 "pyPosition.pyx"
static int __pyx_pf_8iscecore_10pyPosition___cinit__(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self) {

#line 15 "pyPosition.pyx"
  int __pyx_r;

#line 15 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 15 "pyPosition.pyx"
  isce::core::Position *__pyx_t_1;

#line 15 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyPosition.pyx":16
 * 
 *     def __cinit__(self):
 *         self.c_position = new Position()             # <<<<<<<<<<<<<<
 *         self.__owner = True
 *     def __dealloc__(self):
 */

#line 16 "pyPosition.pyx"
  try {

#line 16 "pyPosition.pyx"
    __pyx_t_1 = new isce::core::Position();

#line 16 "pyPosition.pyx"
  } catch(...) {

#line 16 "pyPosition.pyx"
    __Pyx_CppExn2PyErr();

#line 16 "pyPosition.pyx"
    __PYX_ERR(7, 16, __pyx_L1_error)

#line 16 "pyPosition.pyx"
  }

#line 16 "pyPosition.pyx"
  __pyx_v_self->c_position = __pyx_t_1;

  /* "pyPosition.pyx":17
 *     def __cinit__(self):
 *         self.c_position = new Position()
 *         self.__owner = True             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.__owner:
 */

#line 17 "pyPosition.pyx"
  __pyx_v_self->__pyx___owner = 1;

  /* "pyPosition.pyx":15
 *     cdef bool __owner
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.c_position = new Position()
 *         self.__owner = True
 */

#line 15 "pyPosition.pyx"


#line 15 "pyPosition.pyx"
  /* function exit code */

#line 15 "pyPosition.pyx"
  __pyx_r = 0;

#line 15 "pyPosition.pyx"
  goto __pyx_L0;

#line 15 "pyPosition.pyx"
  __pyx_L1_error:;

#line 15 "pyPosition.pyx"
  __Pyx_AddTraceback("iscecore.pyPosition.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 15 "pyPosition.pyx"
  __pyx_r = -1;

#line 15 "pyPosition.pyx"
  __pyx_L0:;

#line 15 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 15 "pyPosition.pyx"
  return __pyx_r;

#line 15 "pyPosition.pyx"
}

/* "pyPosition.pyx":18
 *         self.c_position = new Position()
 *         self.__owner = True
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_position
 */

#line 18 "pyPosition.pyx"


#line 18 "pyPosition.pyx"
/* Python wrapper */

#line 18 "pyPosition.pyx"
static void __pyx_pw_8iscecore_10pyPosition_3__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 18 "pyPosition.pyx"
static void __pyx_pw_8iscecore_10pyPosition_3__dealloc__(PyObject *__pyx_v_self) {

#line 18 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 18 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 18 "pyPosition.pyx"
  __pyx_pf_8iscecore_10pyPosition_2__dealloc__(((struct __pyx_obj_8iscecore_pyPosition *)__pyx_v_self));

#line 18 "pyPosition.pyx"


#line 18 "pyPosition.pyx"
  /* function exit code */

#line 18 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 18 "pyPosition.pyx"
}

#line 18 "pyPosition.pyx"


#line 18 "pyPosition.pyx"
static void __pyx_pf_8iscecore_10pyPosition_2__dealloc__(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self) {

#line 18 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 18 "pyPosition.pyx"
  int __pyx_t_1;

#line 18 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyPosition.pyx":19
 *         self.__owner = True
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_position
 *     @staticmethod
 */

#line 19 "pyPosition.pyx"
  __pyx_t_1 = (__pyx_v_self->__pyx___owner != 0);

#line 19 "pyPosition.pyx"
  if (__pyx_t_1) {

    /* "pyPosition.pyx":20
 *     def __dealloc__(self):
 *         if self.__owner:
 *             del self.c_position             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     def bind(pyPosition pos):
 */

#line 20 "pyPosition.pyx"
    delete __pyx_v_self->c_position;

    /* "pyPosition.pyx":19
 *         self.__owner = True
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_position
 *     @staticmethod
 */

#line 19 "pyPosition.pyx"
  }

  /* "pyPosition.pyx":18
 *         self.c_position = new Position()
 *         self.__owner = True
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_position
 */

#line 18 "pyPosition.pyx"


#line 18 "pyPosition.pyx"
  /* function exit code */

#line 18 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 18 "pyPosition.pyx"
}

/* "pyPosition.pyx":22
 *             del self.c_position
 *     @staticmethod
 *     def bind(pyPosition pos):             # <<<<<<<<<<<<<<
 *         new_pos = pyPosition()
 *         del new_pos.c_position
 */

#line 22 "pyPosition.pyx"


#line 22 "pyPosition.pyx"
/* Python wrapper */

#line 22 "pyPosition.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPosition_5bind(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8iscecore_10pyPosition_5bind = 
#line 22 "pyPosition.pyx"
{"bind", (PyCFunction)__pyx_pw_8iscecore_10pyPosition_5bind, METH_VARARGS|METH_KEYWORDS, 0};

#line 22 "pyPosition.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPosition_5bind(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8iscecore_pyPosition *__pyx_v_pos = 0
#line 22 "pyPosition.pyx"
;

#line 22 "pyPosition.pyx"
  PyObject *__pyx_r = 0;

#line 22 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 22 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("bind (wrapper)", 0);

#line 22 "pyPosition.pyx"
  {

#line 22 "pyPosition.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pos,0};

#line 22 "pyPosition.pyx"
    PyObject* values[1] = {0};

#line 22 "pyPosition.pyx"
    if (unlikely(__pyx_kwds)) {

#line 22 "pyPosition.pyx"
      Py_ssize_t kw_args;

#line 22 "pyPosition.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 22 "pyPosition.pyx"
      switch (pos_args) {
        case  1: 
#line 22 "pyPosition.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 22 "pyPosition.pyx"
        CYTHON_FALLTHROUGH;

#line 22 "pyPosition.pyx"
        case  0: break;
        default: 
#line 22 "pyPosition.pyx"
goto __pyx_L5_argtuple_error;

#line 22 "pyPosition.pyx"
      }

#line 22 "pyPosition.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 22 "pyPosition.pyx"
      switch (pos_args) {

#line 22 "pyPosition.pyx"
        case  0:

#line 22 "pyPosition.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pos)) != 0)) kw_args--;
        else 
#line 22 "pyPosition.pyx"
goto __pyx_L5_argtuple_error;

#line 22 "pyPosition.pyx"
      }

#line 22 "pyPosition.pyx"
      if (unlikely(kw_args > 0)) {

#line 22 "pyPosition.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "bind") < 0)) __PYX_ERR(7, 22, __pyx_L3_error)

#line 22 "pyPosition.pyx"
      }

#line 22 "pyPosition.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {

#line 22 "pyPosition.pyx"
      goto __pyx_L5_argtuple_error;

#line 22 "pyPosition.pyx"
    } else {

#line 22 "pyPosition.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 22 "pyPosition.pyx"
    }

#line 22 "pyPosition.pyx"
    __pyx_v_pos = ((struct __pyx_obj_8iscecore_pyPosition *)values[0]);

#line 22 "pyPosition.pyx"
  }

#line 22 "pyPosition.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 22 "pyPosition.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bind", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 22 "pyPosition.pyx"
__PYX_ERR(7, 22, __pyx_L3_error)

#line 22 "pyPosition.pyx"
  __pyx_L3_error:;

#line 22 "pyPosition.pyx"
  __Pyx_AddTraceback("iscecore.pyPosition.bind", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 22 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 22 "pyPosition.pyx"
  return NULL;

#line 22 "pyPosition.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 22 "pyPosition.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pos), __pyx_ptype_8iscecore_pyPosition, 1, "pos", 0))) __PYX_ERR(7, 22, __pyx_L1_error)
  __pyx_r = 
#line 22 "pyPosition.pyx"
__pyx_pf_8iscecore_10pyPosition_4bind(__pyx_v_pos);

#line 22 "pyPosition.pyx"


#line 22 "pyPosition.pyx"
  /* function exit code */

#line 22 "pyPosition.pyx"
  goto __pyx_L0;

#line 22 "pyPosition.pyx"
  __pyx_L1_error:;

#line 22 "pyPosition.pyx"
  __pyx_r = NULL;

#line 22 "pyPosition.pyx"
  __pyx_L0:;

#line 22 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 22 "pyPosition.pyx"
  return __pyx_r;

#line 22 "pyPosition.pyx"
}

#line 22 "pyPosition.pyx"


#line 22 "pyPosition.pyx"
static PyObject *__pyx_pf_8iscecore_10pyPosition_4bind(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_pos) {
  struct __pyx_obj_8iscecore_pyPosition *__pyx_v_new_pos = NULL
#line 22 "pyPosition.pyx"
;

#line 22 "pyPosition.pyx"
  PyObject *__pyx_r = NULL;

#line 22 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 22 "pyPosition.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 22 "pyPosition.pyx"
  isce::core::Position *__pyx_t_2;

#line 22 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("bind", 0);

  /* "pyPosition.pyx":23
 *     @staticmethod
 *     def bind(pyPosition pos):
 *         new_pos = pyPosition()             # <<<<<<<<<<<<<<
 *         del new_pos.c_position
 *         new_pos.c_position = pos.c_position
 */

#line 23 "pyPosition.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8iscecore_pyPosition), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 23, __pyx_L1_error)

#line 23 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 23 "pyPosition.pyx"
  __pyx_v_new_pos = ((struct __pyx_obj_8iscecore_pyPosition *)__pyx_t_1);

#line 23 "pyPosition.pyx"
  __pyx_t_1 = 0;

  /* "pyPosition.pyx":24
 *     def bind(pyPosition pos):
 *         new_pos = pyPosition()
 *         del new_pos.c_position             # <<<<<<<<<<<<<<
 *         new_pos.c_position = pos.c_position
 *         new_pos.__owner = True
 */

#line 24 "pyPosition.pyx"
  delete __pyx_v_new_pos->c_position;

  /* "pyPosition.pyx":25
 *         new_pos = pyPosition()
 *         del new_pos.c_position
 *         new_pos.c_position = pos.c_position             # <<<<<<<<<<<<<<
 *         new_pos.__owner = True
 *         return new_pos
 */

#line 25 "pyPosition.pyx"
  __pyx_t_2 = __pyx_v_pos->c_position;

#line 25 "pyPosition.pyx"
  __pyx_v_new_pos->c_position = __pyx_t_2;

  /* "pyPosition.pyx":26
 *         del new_pos.c_position
 *         new_pos.c_position = pos.c_position
 *         new_pos.__owner = True             # <<<<<<<<<<<<<<
 *         return new_pos
 * 
 */

#line 26 "pyPosition.pyx"
  __pyx_v_new_pos->__pyx___owner = 1;

  /* "pyPosition.pyx":27
 *         new_pos.c_position = pos.c_position
 *         new_pos.__owner = True
 *         return new_pos             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 27 "pyPosition.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 27 "pyPosition.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_new_pos));

#line 27 "pyPosition.pyx"
  __pyx_r = ((PyObject *)__pyx_v_new_pos);

#line 27 "pyPosition.pyx"
  goto __pyx_L0;

  /* "pyPosition.pyx":22
 *             del self.c_position
 *     @staticmethod
 *     def bind(pyPosition pos):             # <<<<<<<<<<<<<<
 *         new_pos = pyPosition()
 *         del new_pos.c_position
 */

#line 22 "pyPosition.pyx"


#line 22 "pyPosition.pyx"
  /* function exit code */

#line 22 "pyPosition.pyx"
  __pyx_L1_error:;

#line 22 "pyPosition.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 22 "pyPosition.pyx"
  __Pyx_AddTraceback("iscecore.pyPosition.bind", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 22 "pyPosition.pyx"
  __pyx_r = NULL;

#line 22 "pyPosition.pyx"
  __pyx_L0:;

#line 22 "pyPosition.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_new_pos);

#line 22 "pyPosition.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 22 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 22 "pyPosition.pyx"
  return __pyx_r;

#line 22 "pyPosition.pyx"
}

/* "pyPosition.pyx":30
 * 
 *     @property
 *     def j(self):             # <<<<<<<<<<<<<<
 *         a = [0.,0.,0.]
 *         for i in range(3):
 */

#line 30 "pyPosition.pyx"


#line 30 "pyPosition.pyx"
/* Python wrapper */

#line 30 "pyPosition.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPosition_1j_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 30 "pyPosition.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPosition_1j_1__get__(PyObject *__pyx_v_self) {

#line 30 "pyPosition.pyx"
  PyObject *__pyx_r = 0;

#line 30 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 30 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 30 "pyPosition.pyx"
__pyx_pf_8iscecore_10pyPosition_1j___get__(((struct __pyx_obj_8iscecore_pyPosition *)__pyx_v_self));

#line 30 "pyPosition.pyx"


#line 30 "pyPosition.pyx"
  /* function exit code */

#line 30 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 30 "pyPosition.pyx"
  return __pyx_r;

#line 30 "pyPosition.pyx"
}

#line 30 "pyPosition.pyx"


#line 30 "pyPosition.pyx"
static PyObject *__pyx_pf_8iscecore_10pyPosition_1j___get__(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self) {
  PyObject *__pyx_v_a = NULL
#line 30 "pyPosition.pyx"
;
  long __pyx_v_i
#line 30 "pyPosition.pyx"
;

#line 30 "pyPosition.pyx"
  PyObject *__pyx_r = NULL;

#line 30 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 30 "pyPosition.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 30 "pyPosition.pyx"
  long __pyx_t_2;

#line 30 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPosition.pyx":31
 *     @property
 *     def j(self):
 *         a = [0.,0.,0.]             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             a[i] = self.c_position.j[i]
 */

#line 31 "pyPosition.pyx"
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 31, __pyx_L1_error)

#line 31 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 31 "pyPosition.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 31 "pyPosition.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 31 "pyPosition.pyx"
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_0_);

#line 31 "pyPosition.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 31 "pyPosition.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 31 "pyPosition.pyx"
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_0_);

#line 31 "pyPosition.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 31 "pyPosition.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 31 "pyPosition.pyx"
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_float_0_);

#line 31 "pyPosition.pyx"
  __pyx_v_a = ((PyObject*)__pyx_t_1);

#line 31 "pyPosition.pyx"
  __pyx_t_1 = 0;

  /* "pyPosition.pyx":32
 *     def j(self):
 *         a = [0.,0.,0.]
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             a[i] = self.c_position.j[i]
 *         return a
 */

#line 32 "pyPosition.pyx"
  for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {

#line 32 "pyPosition.pyx"
    __pyx_v_i = __pyx_t_2;

    /* "pyPosition.pyx":33
 *         a = [0.,0.,0.]
 *         for i in range(3):
 *             a[i] = self.c_position.j[i]             # <<<<<<<<<<<<<<
 *         return a
 *     @j.setter
 */

#line 33 "pyPosition.pyx"
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->c_position->j[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 33, __pyx_L1_error)

#line 33 "pyPosition.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 33 "pyPosition.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_a, __pyx_v_i, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(7, 33, __pyx_L1_error)

#line 33 "pyPosition.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 33 "pyPosition.pyx"
  }

  /* "pyPosition.pyx":34
 *         for i in range(3):
 *             a[i] = self.c_position.j[i]
 *         return a             # <<<<<<<<<<<<<<
 *     @j.setter
 *     def j(self, a):
 */

#line 34 "pyPosition.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 34 "pyPosition.pyx"
  __Pyx_INCREF(__pyx_v_a);

#line 34 "pyPosition.pyx"
  __pyx_r = __pyx_v_a;

#line 34 "pyPosition.pyx"
  goto __pyx_L0;

  /* "pyPosition.pyx":30
 * 
 *     @property
 *     def j(self):             # <<<<<<<<<<<<<<
 *         a = [0.,0.,0.]
 *         for i in range(3):
 */

#line 30 "pyPosition.pyx"


#line 30 "pyPosition.pyx"
  /* function exit code */

#line 30 "pyPosition.pyx"
  __pyx_L1_error:;

#line 30 "pyPosition.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 30 "pyPosition.pyx"
  __Pyx_AddTraceback("iscecore.pyPosition.j.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 30 "pyPosition.pyx"
  __pyx_r = NULL;

#line 30 "pyPosition.pyx"
  __pyx_L0:;

#line 30 "pyPosition.pyx"
  __Pyx_XDECREF(__pyx_v_a);

#line 30 "pyPosition.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 30 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 30 "pyPosition.pyx"
  return __pyx_r;

#line 30 "pyPosition.pyx"
}

/* "pyPosition.pyx":36
 *         return a
 *     @j.setter
 *     def j(self, a):             # <<<<<<<<<<<<<<
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")
 */

#line 36 "pyPosition.pyx"


#line 36 "pyPosition.pyx"
/* Python wrapper */

#line 36 "pyPosition.pyx"
static int __pyx_pw_8iscecore_10pyPosition_1j_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a); /*proto*/

#line 36 "pyPosition.pyx"
static int __pyx_pw_8iscecore_10pyPosition_1j_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a) {

#line 36 "pyPosition.pyx"
  int __pyx_r;

#line 36 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 36 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = 
#line 36 "pyPosition.pyx"
__pyx_pf_8iscecore_10pyPosition_1j_2__set__(((struct __pyx_obj_8iscecore_pyPosition *)__pyx_v_self), ((PyObject *)__pyx_v_a));

#line 36 "pyPosition.pyx"


#line 36 "pyPosition.pyx"
  /* function exit code */

#line 36 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 36 "pyPosition.pyx"
  return __pyx_r;

#line 36 "pyPosition.pyx"
}

#line 36 "pyPosition.pyx"


#line 36 "pyPosition.pyx"
static int __pyx_pf_8iscecore_10pyPosition_1j_2__set__(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self, PyObject *__pyx_v_a) {
  long __pyx_v_i
#line 36 "pyPosition.pyx"
;

#line 36 "pyPosition.pyx"
  int __pyx_r;

#line 36 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 36 "pyPosition.pyx"
  Py_ssize_t __pyx_t_1;

#line 36 "pyPosition.pyx"
  int __pyx_t_2;

#line 36 "pyPosition.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 36 "pyPosition.pyx"
  long __pyx_t_4;

#line 36 "pyPosition.pyx"
  double __pyx_t_5;

#line 36 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPosition.pyx":37
 *     @j.setter
 *     def j(self, a):
 *         if (len(a) != 3):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size.")
 *             return
 */

#line 37 "pyPosition.pyx"
  __pyx_t_1 = PyObject_Length(__pyx_v_a); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(7, 37, __pyx_L1_error)

#line 37 "pyPosition.pyx"
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);

#line 37 "pyPosition.pyx"
  if (__pyx_t_2) {

    /* "pyPosition.pyx":38
 *     def j(self, a):
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")             # <<<<<<<<<<<<<<
 *             return
 *         for i in range(3):
 */

#line 38 "pyPosition.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 38, __pyx_L1_error)

#line 38 "pyPosition.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 38 "pyPosition.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyPosition.pyx":39
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")
 *             return             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             self.c_position.j[i] = a[i]
 */

#line 39 "pyPosition.pyx"
    __pyx_r = 0;

#line 39 "pyPosition.pyx"
    goto __pyx_L0;

    /* "pyPosition.pyx":37
 *     @j.setter
 *     def j(self, a):
 *         if (len(a) != 3):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size.")
 *             return
 */

#line 37 "pyPosition.pyx"
  }

  /* "pyPosition.pyx":40
 *             print("Error: Invalid input size.")
 *             return
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             self.c_position.j[i] = a[i]
 *     @property
 */

#line 40 "pyPosition.pyx"
  for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {

#line 40 "pyPosition.pyx"
    __pyx_v_i = __pyx_t_4;

    /* "pyPosition.pyx":41
 *             return
 *         for i in range(3):
 *             self.c_position.j[i] = a[i]             # <<<<<<<<<<<<<<
 *     @property
 *     def jdot(self):
 */

#line 41 "pyPosition.pyx"
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 41, __pyx_L1_error)

#line 41 "pyPosition.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 41 "pyPosition.pyx"
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 41, __pyx_L1_error)

#line 41 "pyPosition.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 41 "pyPosition.pyx"
    (__pyx_v_self->c_position->j[__pyx_v_i]) = __pyx_t_5;

#line 41 "pyPosition.pyx"
  }

  /* "pyPosition.pyx":36
 *         return a
 *     @j.setter
 *     def j(self, a):             # <<<<<<<<<<<<<<
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")
 */

#line 36 "pyPosition.pyx"


#line 36 "pyPosition.pyx"
  /* function exit code */

#line 36 "pyPosition.pyx"
  __pyx_r = 0;

#line 36 "pyPosition.pyx"
  goto __pyx_L0;

#line 36 "pyPosition.pyx"
  __pyx_L1_error:;

#line 36 "pyPosition.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 36 "pyPosition.pyx"
  __Pyx_AddTraceback("iscecore.pyPosition.j.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 36 "pyPosition.pyx"
  __pyx_r = -1;

#line 36 "pyPosition.pyx"
  __pyx_L0:;

#line 36 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 36 "pyPosition.pyx"
  return __pyx_r;

#line 36 "pyPosition.pyx"
}

/* "pyPosition.pyx":43
 *             self.c_position.j[i] = a[i]
 *     @property
 *     def jdot(self):             # <<<<<<<<<<<<<<
 *         a = [0.,0.,0.]
 *         for i in range(3):
 */

#line 43 "pyPosition.pyx"


#line 43 "pyPosition.pyx"
/* Python wrapper */

#line 43 "pyPosition.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPosition_4jdot_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 43 "pyPosition.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPosition_4jdot_1__get__(PyObject *__pyx_v_self) {

#line 43 "pyPosition.pyx"
  PyObject *__pyx_r = 0;

#line 43 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 43 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 43 "pyPosition.pyx"
__pyx_pf_8iscecore_10pyPosition_4jdot___get__(((struct __pyx_obj_8iscecore_pyPosition *)__pyx_v_self));

#line 43 "pyPosition.pyx"


#line 43 "pyPosition.pyx"
  /* function exit code */

#line 43 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 43 "pyPosition.pyx"
  return __pyx_r;

#line 43 "pyPosition.pyx"
}

#line 43 "pyPosition.pyx"


#line 43 "pyPosition.pyx"
static PyObject *__pyx_pf_8iscecore_10pyPosition_4jdot___get__(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self) {
  PyObject *__pyx_v_a = NULL
#line 43 "pyPosition.pyx"
;
  long __pyx_v_i
#line 43 "pyPosition.pyx"
;

#line 43 "pyPosition.pyx"
  PyObject *__pyx_r = NULL;

#line 43 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 43 "pyPosition.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 43 "pyPosition.pyx"
  long __pyx_t_2;

#line 43 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPosition.pyx":44
 *     @property
 *     def jdot(self):
 *         a = [0.,0.,0.]             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             a[i] = self.c_position.jdot[i]
 */

#line 44 "pyPosition.pyx"
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 44, __pyx_L1_error)

#line 44 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 44 "pyPosition.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 44 "pyPosition.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 44 "pyPosition.pyx"
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_0_);

#line 44 "pyPosition.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 44 "pyPosition.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 44 "pyPosition.pyx"
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_0_);

#line 44 "pyPosition.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 44 "pyPosition.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 44 "pyPosition.pyx"
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_float_0_);

#line 44 "pyPosition.pyx"
  __pyx_v_a = ((PyObject*)__pyx_t_1);

#line 44 "pyPosition.pyx"
  __pyx_t_1 = 0;

  /* "pyPosition.pyx":45
 *     def jdot(self):
 *         a = [0.,0.,0.]
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             a[i] = self.c_position.jdot[i]
 *         return a
 */

#line 45 "pyPosition.pyx"
  for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {

#line 45 "pyPosition.pyx"
    __pyx_v_i = __pyx_t_2;

    /* "pyPosition.pyx":46
 *         a = [0.,0.,0.]
 *         for i in range(3):
 *             a[i] = self.c_position.jdot[i]             # <<<<<<<<<<<<<<
 *         return a
 *     @jdot.setter
 */

#line 46 "pyPosition.pyx"
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->c_position->jdot[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 46, __pyx_L1_error)

#line 46 "pyPosition.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 46 "pyPosition.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_a, __pyx_v_i, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(7, 46, __pyx_L1_error)

#line 46 "pyPosition.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 46 "pyPosition.pyx"
  }

  /* "pyPosition.pyx":47
 *         for i in range(3):
 *             a[i] = self.c_position.jdot[i]
 *         return a             # <<<<<<<<<<<<<<
 *     @jdot.setter
 *     def jdot(self, a):
 */

#line 47 "pyPosition.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 47 "pyPosition.pyx"
  __Pyx_INCREF(__pyx_v_a);

#line 47 "pyPosition.pyx"
  __pyx_r = __pyx_v_a;

#line 47 "pyPosition.pyx"
  goto __pyx_L0;

  /* "pyPosition.pyx":43
 *             self.c_position.j[i] = a[i]
 *     @property
 *     def jdot(self):             # <<<<<<<<<<<<<<
 *         a = [0.,0.,0.]
 *         for i in range(3):
 */

#line 43 "pyPosition.pyx"


#line 43 "pyPosition.pyx"
  /* function exit code */

#line 43 "pyPosition.pyx"
  __pyx_L1_error:;

#line 43 "pyPosition.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 43 "pyPosition.pyx"
  __Pyx_AddTraceback("iscecore.pyPosition.jdot.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 43 "pyPosition.pyx"
  __pyx_r = NULL;

#line 43 "pyPosition.pyx"
  __pyx_L0:;

#line 43 "pyPosition.pyx"
  __Pyx_XDECREF(__pyx_v_a);

#line 43 "pyPosition.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 43 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 43 "pyPosition.pyx"
  return __pyx_r;

#line 43 "pyPosition.pyx"
}

/* "pyPosition.pyx":49
 *         return a
 *     @jdot.setter
 *     def jdot(self, a):             # <<<<<<<<<<<<<<
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")
 */

#line 49 "pyPosition.pyx"


#line 49 "pyPosition.pyx"
/* Python wrapper */

#line 49 "pyPosition.pyx"
static int __pyx_pw_8iscecore_10pyPosition_4jdot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a); /*proto*/

#line 49 "pyPosition.pyx"
static int __pyx_pw_8iscecore_10pyPosition_4jdot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a) {

#line 49 "pyPosition.pyx"
  int __pyx_r;

#line 49 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 49 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = 
#line 49 "pyPosition.pyx"
__pyx_pf_8iscecore_10pyPosition_4jdot_2__set__(((struct __pyx_obj_8iscecore_pyPosition *)__pyx_v_self), ((PyObject *)__pyx_v_a));

#line 49 "pyPosition.pyx"


#line 49 "pyPosition.pyx"
  /* function exit code */

#line 49 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 49 "pyPosition.pyx"
  return __pyx_r;

#line 49 "pyPosition.pyx"
}

#line 49 "pyPosition.pyx"


#line 49 "pyPosition.pyx"
static int __pyx_pf_8iscecore_10pyPosition_4jdot_2__set__(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self, PyObject *__pyx_v_a) {
  long __pyx_v_i
#line 49 "pyPosition.pyx"
;

#line 49 "pyPosition.pyx"
  int __pyx_r;

#line 49 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 49 "pyPosition.pyx"
  Py_ssize_t __pyx_t_1;

#line 49 "pyPosition.pyx"
  int __pyx_t_2;

#line 49 "pyPosition.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 49 "pyPosition.pyx"
  long __pyx_t_4;

#line 49 "pyPosition.pyx"
  double __pyx_t_5;

#line 49 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPosition.pyx":50
 *     @jdot.setter
 *     def jdot(self, a):
 *         if (len(a) != 3):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size.")
 *             return
 */

#line 50 "pyPosition.pyx"
  __pyx_t_1 = PyObject_Length(__pyx_v_a); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(7, 50, __pyx_L1_error)

#line 50 "pyPosition.pyx"
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);

#line 50 "pyPosition.pyx"
  if (__pyx_t_2) {

    /* "pyPosition.pyx":51
 *     def jdot(self, a):
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")             # <<<<<<<<<<<<<<
 *             return
 *         for i in range(3):
 */

#line 51 "pyPosition.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 51, __pyx_L1_error)

#line 51 "pyPosition.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 51 "pyPosition.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyPosition.pyx":52
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")
 *             return             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             self.c_position.jdot[i] = a[i]
 */

#line 52 "pyPosition.pyx"
    __pyx_r = 0;

#line 52 "pyPosition.pyx"
    goto __pyx_L0;

    /* "pyPosition.pyx":50
 *     @jdot.setter
 *     def jdot(self, a):
 *         if (len(a) != 3):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size.")
 *             return
 */

#line 50 "pyPosition.pyx"
  }

  /* "pyPosition.pyx":53
 *             print("Error: Invalid input size.")
 *             return
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             self.c_position.jdot[i] = a[i]
 *     @property
 */

#line 53 "pyPosition.pyx"
  for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {

#line 53 "pyPosition.pyx"
    __pyx_v_i = __pyx_t_4;

    /* "pyPosition.pyx":54
 *             return
 *         for i in range(3):
 *             self.c_position.jdot[i] = a[i]             # <<<<<<<<<<<<<<
 *     @property
 *     def jddt(self):
 */

#line 54 "pyPosition.pyx"
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 54, __pyx_L1_error)

#line 54 "pyPosition.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 54 "pyPosition.pyx"
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 54, __pyx_L1_error)

#line 54 "pyPosition.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 54 "pyPosition.pyx"
    (__pyx_v_self->c_position->jdot[__pyx_v_i]) = __pyx_t_5;

#line 54 "pyPosition.pyx"
  }

  /* "pyPosition.pyx":49
 *         return a
 *     @jdot.setter
 *     def jdot(self, a):             # <<<<<<<<<<<<<<
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")
 */

#line 49 "pyPosition.pyx"


#line 49 "pyPosition.pyx"
  /* function exit code */

#line 49 "pyPosition.pyx"
  __pyx_r = 0;

#line 49 "pyPosition.pyx"
  goto __pyx_L0;

#line 49 "pyPosition.pyx"
  __pyx_L1_error:;

#line 49 "pyPosition.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 49 "pyPosition.pyx"
  __Pyx_AddTraceback("iscecore.pyPosition.jdot.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 49 "pyPosition.pyx"
  __pyx_r = -1;

#line 49 "pyPosition.pyx"
  __pyx_L0:;

#line 49 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 49 "pyPosition.pyx"
  return __pyx_r;

#line 49 "pyPosition.pyx"
}

/* "pyPosition.pyx":56
 *             self.c_position.jdot[i] = a[i]
 *     @property
 *     def jddt(self):             # <<<<<<<<<<<<<<
 *         a = [0.,0.,0.]
 *         for i in range(3):
 */

#line 56 "pyPosition.pyx"


#line 56 "pyPosition.pyx"
/* Python wrapper */

#line 56 "pyPosition.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPosition_4jddt_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 56 "pyPosition.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPosition_4jddt_1__get__(PyObject *__pyx_v_self) {

#line 56 "pyPosition.pyx"
  PyObject *__pyx_r = 0;

#line 56 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 56 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 56 "pyPosition.pyx"
__pyx_pf_8iscecore_10pyPosition_4jddt___get__(((struct __pyx_obj_8iscecore_pyPosition *)__pyx_v_self));

#line 56 "pyPosition.pyx"


#line 56 "pyPosition.pyx"
  /* function exit code */

#line 56 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 56 "pyPosition.pyx"
  return __pyx_r;

#line 56 "pyPosition.pyx"
}

#line 56 "pyPosition.pyx"


#line 56 "pyPosition.pyx"
static PyObject *__pyx_pf_8iscecore_10pyPosition_4jddt___get__(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self) {
  PyObject *__pyx_v_a = NULL
#line 56 "pyPosition.pyx"
;
  long __pyx_v_i
#line 56 "pyPosition.pyx"
;

#line 56 "pyPosition.pyx"
  PyObject *__pyx_r = NULL;

#line 56 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 56 "pyPosition.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 56 "pyPosition.pyx"
  long __pyx_t_2;

#line 56 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPosition.pyx":57
 *     @property
 *     def jddt(self):
 *         a = [0.,0.,0.]             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             a[i] = self.c_position.jddt[i]
 */

#line 57 "pyPosition.pyx"
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 57, __pyx_L1_error)

#line 57 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 57 "pyPosition.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 57 "pyPosition.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 57 "pyPosition.pyx"
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_0_);

#line 57 "pyPosition.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 57 "pyPosition.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 57 "pyPosition.pyx"
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_0_);

#line 57 "pyPosition.pyx"
  __Pyx_INCREF(__pyx_float_0_);

#line 57 "pyPosition.pyx"
  __Pyx_GIVEREF(__pyx_float_0_);

#line 57 "pyPosition.pyx"
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_float_0_);

#line 57 "pyPosition.pyx"
  __pyx_v_a = ((PyObject*)__pyx_t_1);

#line 57 "pyPosition.pyx"
  __pyx_t_1 = 0;

  /* "pyPosition.pyx":58
 *     def jddt(self):
 *         a = [0.,0.,0.]
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             a[i] = self.c_position.jddt[i]
 *         return a
 */

#line 58 "pyPosition.pyx"
  for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {

#line 58 "pyPosition.pyx"
    __pyx_v_i = __pyx_t_2;

    /* "pyPosition.pyx":59
 *         a = [0.,0.,0.]
 *         for i in range(3):
 *             a[i] = self.c_position.jddt[i]             # <<<<<<<<<<<<<<
 *         return a
 *     @jddt.setter
 */

#line 59 "pyPosition.pyx"
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->c_position->jddt[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 59, __pyx_L1_error)

#line 59 "pyPosition.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 59 "pyPosition.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_a, __pyx_v_i, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(7, 59, __pyx_L1_error)

#line 59 "pyPosition.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 59 "pyPosition.pyx"
  }

  /* "pyPosition.pyx":60
 *         for i in range(3):
 *             a[i] = self.c_position.jddt[i]
 *         return a             # <<<<<<<<<<<<<<
 *     @jddt.setter
 *     def jddt(self, a):
 */

#line 60 "pyPosition.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 60 "pyPosition.pyx"
  __Pyx_INCREF(__pyx_v_a);

#line 60 "pyPosition.pyx"
  __pyx_r = __pyx_v_a;

#line 60 "pyPosition.pyx"
  goto __pyx_L0;

  /* "pyPosition.pyx":56
 *             self.c_position.jdot[i] = a[i]
 *     @property
 *     def jddt(self):             # <<<<<<<<<<<<<<
 *         a = [0.,0.,0.]
 *         for i in range(3):
 */

#line 56 "pyPosition.pyx"


#line 56 "pyPosition.pyx"
  /* function exit code */

#line 56 "pyPosition.pyx"
  __pyx_L1_error:;

#line 56 "pyPosition.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 56 "pyPosition.pyx"
  __Pyx_AddTraceback("iscecore.pyPosition.jddt.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 56 "pyPosition.pyx"
  __pyx_r = NULL;

#line 56 "pyPosition.pyx"
  __pyx_L0:;

#line 56 "pyPosition.pyx"
  __Pyx_XDECREF(__pyx_v_a);

#line 56 "pyPosition.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 56 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 56 "pyPosition.pyx"
  return __pyx_r;

#line 56 "pyPosition.pyx"
}

/* "pyPosition.pyx":62
 *         return a
 *     @jddt.setter
 *     def jddt(self, a):             # <<<<<<<<<<<<<<
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")
 */

#line 62 "pyPosition.pyx"


#line 62 "pyPosition.pyx"
/* Python wrapper */

#line 62 "pyPosition.pyx"
static int __pyx_pw_8iscecore_10pyPosition_4jddt_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a); /*proto*/

#line 62 "pyPosition.pyx"
static int __pyx_pw_8iscecore_10pyPosition_4jddt_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a) {

#line 62 "pyPosition.pyx"
  int __pyx_r;

#line 62 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 62 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = 
#line 62 "pyPosition.pyx"
__pyx_pf_8iscecore_10pyPosition_4jddt_2__set__(((struct __pyx_obj_8iscecore_pyPosition *)__pyx_v_self), ((PyObject *)__pyx_v_a));

#line 62 "pyPosition.pyx"


#line 62 "pyPosition.pyx"
  /* function exit code */

#line 62 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 62 "pyPosition.pyx"
  return __pyx_r;

#line 62 "pyPosition.pyx"
}

#line 62 "pyPosition.pyx"


#line 62 "pyPosition.pyx"
static int __pyx_pf_8iscecore_10pyPosition_4jddt_2__set__(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self, PyObject *__pyx_v_a) {
  long __pyx_v_i
#line 62 "pyPosition.pyx"
;

#line 62 "pyPosition.pyx"
  int __pyx_r;

#line 62 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 62 "pyPosition.pyx"
  Py_ssize_t __pyx_t_1;

#line 62 "pyPosition.pyx"
  int __pyx_t_2;

#line 62 "pyPosition.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 62 "pyPosition.pyx"
  long __pyx_t_4;

#line 62 "pyPosition.pyx"
  double __pyx_t_5;

#line 62 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPosition.pyx":63
 *     @jddt.setter
 *     def jddt(self, a):
 *         if (len(a) != 3):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size.")
 *             return
 */

#line 63 "pyPosition.pyx"
  __pyx_t_1 = PyObject_Length(__pyx_v_a); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(7, 63, __pyx_L1_error)

#line 63 "pyPosition.pyx"
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);

#line 63 "pyPosition.pyx"
  if (__pyx_t_2) {

    /* "pyPosition.pyx":64
 *     def jddt(self, a):
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")             # <<<<<<<<<<<<<<
 *             return
 *         for i in range(3):
 */

#line 64 "pyPosition.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 64, __pyx_L1_error)

#line 64 "pyPosition.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 64 "pyPosition.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyPosition.pyx":65
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")
 *             return             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             self.c_position.jddt[i] = a[i]
 */

#line 65 "pyPosition.pyx"
    __pyx_r = 0;

#line 65 "pyPosition.pyx"
    goto __pyx_L0;

    /* "pyPosition.pyx":63
 *     @jddt.setter
 *     def jddt(self, a):
 *         if (len(a) != 3):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size.")
 *             return
 */

#line 63 "pyPosition.pyx"
  }

  /* "pyPosition.pyx":66
 *             print("Error: Invalid input size.")
 *             return
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             self.c_position.jddt[i] = a[i]
 *     def dPrint(self):
 */

#line 66 "pyPosition.pyx"
  for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {

#line 66 "pyPosition.pyx"
    __pyx_v_i = __pyx_t_4;

    /* "pyPosition.pyx":67
 *             return
 *         for i in range(3):
 *             self.c_position.jddt[i] = a[i]             # <<<<<<<<<<<<<<
 *     def dPrint(self):
 *         print("J = "+str(self.j)+", jdot = "+str(self.jdot)+", jddt = "+str(self.jddt))
 */

#line 67 "pyPosition.pyx"
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 67, __pyx_L1_error)

#line 67 "pyPosition.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 67 "pyPosition.pyx"
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 67, __pyx_L1_error)

#line 67 "pyPosition.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 67 "pyPosition.pyx"
    (__pyx_v_self->c_position->jddt[__pyx_v_i]) = __pyx_t_5;

#line 67 "pyPosition.pyx"
  }

  /* "pyPosition.pyx":62
 *         return a
 *     @jddt.setter
 *     def jddt(self, a):             # <<<<<<<<<<<<<<
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")
 */

#line 62 "pyPosition.pyx"


#line 62 "pyPosition.pyx"
  /* function exit code */

#line 62 "pyPosition.pyx"
  __pyx_r = 0;

#line 62 "pyPosition.pyx"
  goto __pyx_L0;

#line 62 "pyPosition.pyx"
  __pyx_L1_error:;

#line 62 "pyPosition.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 62 "pyPosition.pyx"
  __Pyx_AddTraceback("iscecore.pyPosition.jddt.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 62 "pyPosition.pyx"
  __pyx_r = -1;

#line 62 "pyPosition.pyx"
  __pyx_L0:;

#line 62 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 62 "pyPosition.pyx"
  return __pyx_r;

#line 62 "pyPosition.pyx"
}

/* "pyPosition.pyx":68
 *         for i in range(3):
 *             self.c_position.jddt[i] = a[i]
 *     def dPrint(self):             # <<<<<<<<<<<<<<
 *         print("J = "+str(self.j)+", jdot = "+str(self.jdot)+", jddt = "+str(self.jddt))
 *     def copy(self, ps):
 */

#line 68 "pyPosition.pyx"


#line 68 "pyPosition.pyx"
/* Python wrapper */

#line 68 "pyPosition.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPosition_7dPrint(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 68 "pyPosition.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPosition_7dPrint(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 68 "pyPosition.pyx"
  PyObject *__pyx_r = 0;

#line 68 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 68 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("dPrint (wrapper)", 0);
  __pyx_r = 
#line 68 "pyPosition.pyx"
__pyx_pf_8iscecore_10pyPosition_6dPrint(((struct __pyx_obj_8iscecore_pyPosition *)__pyx_v_self));

#line 68 "pyPosition.pyx"


#line 68 "pyPosition.pyx"
  /* function exit code */

#line 68 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 68 "pyPosition.pyx"
  return __pyx_r;

#line 68 "pyPosition.pyx"
}

#line 68 "pyPosition.pyx"


#line 68 "pyPosition.pyx"
static PyObject *__pyx_pf_8iscecore_10pyPosition_6dPrint(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self) {

#line 68 "pyPosition.pyx"
  PyObject *__pyx_r = NULL;

#line 68 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 68 "pyPosition.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 68 "pyPosition.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 68 "pyPosition.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 68 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("dPrint", 0);

  /* "pyPosition.pyx":69
 *             self.c_position.jddt[i] = a[i]
 *     def dPrint(self):
 *         print("J = "+str(self.j)+", jdot = "+str(self.jdot)+", jddt = "+str(self.jddt))             # <<<<<<<<<<<<<<
 *     def copy(self, ps):
 *         self.j = ps.j
 */

#line 69 "pyPosition.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_j); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 69, __pyx_L1_error)

#line 69 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 69 "pyPosition.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 69, __pyx_L1_error)

#line 69 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 69 "pyPosition.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 69 "pyPosition.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 69 "pyPosition.pyx"
  __pyx_t_1 = 0;

#line 69 "pyPosition.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 69, __pyx_L1_error)

#line 69 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 69 "pyPosition.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 69 "pyPosition.pyx"
  __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_J, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 69, __pyx_L1_error)

#line 69 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 69 "pyPosition.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 69 "pyPosition.pyx"
  __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_t_2, __pyx_kp_u_jdot); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 69, __pyx_L1_error)

#line 69 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 69 "pyPosition.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 69 "pyPosition.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_jdot_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 69, __pyx_L1_error)

#line 69 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 69 "pyPosition.pyx"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 69, __pyx_L1_error)

#line 69 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 69 "pyPosition.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 69 "pyPosition.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 69 "pyPosition.pyx"
  __pyx_t_2 = 0;

#line 69 "pyPosition.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 69, __pyx_L1_error)

#line 69 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 69 "pyPosition.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 69 "pyPosition.pyx"
  __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 69, __pyx_L1_error)

#line 69 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 69 "pyPosition.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 69 "pyPosition.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 69 "pyPosition.pyx"
  __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_t_3, __pyx_kp_u_jddt); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 69, __pyx_L1_error)

#line 69 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 69 "pyPosition.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 69 "pyPosition.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_jddt_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 69, __pyx_L1_error)

#line 69 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 69 "pyPosition.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 69, __pyx_L1_error)

#line 69 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 69 "pyPosition.pyx"
  __Pyx_GIVEREF(__pyx_t_3);

#line 69 "pyPosition.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);

#line 69 "pyPosition.pyx"
  __pyx_t_3 = 0;

#line 69 "pyPosition.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 69, __pyx_L1_error)

#line 69 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 69 "pyPosition.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 69 "pyPosition.pyx"
  __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 69, __pyx_L1_error)

#line 69 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 69 "pyPosition.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 69 "pyPosition.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 69 "pyPosition.pyx"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 69, __pyx_L1_error)

#line 69 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 69 "pyPosition.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 69 "pyPosition.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);

#line 69 "pyPosition.pyx"
  __pyx_t_1 = 0;

#line 69 "pyPosition.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 69, __pyx_L1_error)

#line 69 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 69 "pyPosition.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 69 "pyPosition.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyPosition.pyx":68
 *         for i in range(3):
 *             self.c_position.jddt[i] = a[i]
 *     def dPrint(self):             # <<<<<<<<<<<<<<
 *         print("J = "+str(self.j)+", jdot = "+str(self.jdot)+", jddt = "+str(self.jddt))
 *     def copy(self, ps):
 */

#line 68 "pyPosition.pyx"


#line 68 "pyPosition.pyx"
  /* function exit code */

#line 68 "pyPosition.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 68 "pyPosition.pyx"
  goto __pyx_L0;

#line 68 "pyPosition.pyx"
  __pyx_L1_error:;

#line 68 "pyPosition.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 68 "pyPosition.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 68 "pyPosition.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 68 "pyPosition.pyx"
  __Pyx_AddTraceback("iscecore.pyPosition.dPrint", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 68 "pyPosition.pyx"
  __pyx_r = NULL;

#line 68 "pyPosition.pyx"
  __pyx_L0:;

#line 68 "pyPosition.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 68 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 68 "pyPosition.pyx"
  return __pyx_r;

#line 68 "pyPosition.pyx"
}

/* "pyPosition.pyx":70
 *     def dPrint(self):
 *         print("J = "+str(self.j)+", jdot = "+str(self.jdot)+", jddt = "+str(self.jddt))
 *     def copy(self, ps):             # <<<<<<<<<<<<<<
 *         self.j = ps.j
 *         self.jdot = ps.jdot
 */

#line 70 "pyPosition.pyx"


#line 70 "pyPosition.pyx"
/* Python wrapper */

#line 70 "pyPosition.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPosition_9copy(PyObject *__pyx_v_self, PyObject *__pyx_v_ps); /*proto*/

#line 70 "pyPosition.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPosition_9copy(PyObject *__pyx_v_self, PyObject *__pyx_v_ps) {

#line 70 "pyPosition.pyx"
  PyObject *__pyx_r = 0;

#line 70 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 70 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = 
#line 70 "pyPosition.pyx"
__pyx_pf_8iscecore_10pyPosition_8copy(((struct __pyx_obj_8iscecore_pyPosition *)__pyx_v_self), ((PyObject *)__pyx_v_ps));

#line 70 "pyPosition.pyx"


#line 70 "pyPosition.pyx"
  /* function exit code */

#line 70 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 70 "pyPosition.pyx"
  return __pyx_r;

#line 70 "pyPosition.pyx"
}

#line 70 "pyPosition.pyx"


#line 70 "pyPosition.pyx"
static PyObject *__pyx_pf_8iscecore_10pyPosition_8copy(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self, PyObject *__pyx_v_ps) {

#line 70 "pyPosition.pyx"
  PyObject *__pyx_r = NULL;

#line 70 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 70 "pyPosition.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 70 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("copy", 0);

  /* "pyPosition.pyx":71
 *         print("J = "+str(self.j)+", jdot = "+str(self.jdot)+", jddt = "+str(self.jddt))
 *     def copy(self, ps):
 *         self.j = ps.j             # <<<<<<<<<<<<<<
 *         self.jdot = ps.jdot
 *         self.jddt = ps.jddt
 */

#line 71 "pyPosition.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ps, __pyx_n_s_j); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 71, __pyx_L1_error)

#line 71 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 71 "pyPosition.pyx"
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_j, __pyx_t_1) < 0) __PYX_ERR(7, 71, __pyx_L1_error)

#line 71 "pyPosition.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyPosition.pyx":72
 *     def copy(self, ps):
 *         self.j = ps.j
 *         self.jdot = ps.jdot             # <<<<<<<<<<<<<<
 *         self.jddt = ps.jddt
 * 
 */

#line 72 "pyPosition.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ps, __pyx_n_s_jdot_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 72, __pyx_L1_error)

#line 72 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 72 "pyPosition.pyx"
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_jdot_2, __pyx_t_1) < 0) __PYX_ERR(7, 72, __pyx_L1_error)

#line 72 "pyPosition.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyPosition.pyx":73
 *         self.j = ps.j
 *         self.jdot = ps.jdot
 *         self.jddt = ps.jddt             # <<<<<<<<<<<<<<
 * 
 *     def lookVec(self, double a, double b, list c):
 */

#line 73 "pyPosition.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ps, __pyx_n_s_jddt_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 73, __pyx_L1_error)

#line 73 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 73 "pyPosition.pyx"
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_jddt_2, __pyx_t_1) < 0) __PYX_ERR(7, 73, __pyx_L1_error)

#line 73 "pyPosition.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyPosition.pyx":70
 *     def dPrint(self):
 *         print("J = "+str(self.j)+", jdot = "+str(self.jdot)+", jddt = "+str(self.jddt))
 *     def copy(self, ps):             # <<<<<<<<<<<<<<
 *         self.j = ps.j
 *         self.jdot = ps.jdot
 */

#line 70 "pyPosition.pyx"


#line 70 "pyPosition.pyx"
  /* function exit code */

#line 70 "pyPosition.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 70 "pyPosition.pyx"
  goto __pyx_L0;

#line 70 "pyPosition.pyx"
  __pyx_L1_error:;

#line 70 "pyPosition.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 70 "pyPosition.pyx"
  __Pyx_AddTraceback("iscecore.pyPosition.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 70 "pyPosition.pyx"
  __pyx_r = NULL;

#line 70 "pyPosition.pyx"
  __pyx_L0:;

#line 70 "pyPosition.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 70 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 70 "pyPosition.pyx"
  return __pyx_r;

#line 70 "pyPosition.pyx"
}

/* "pyPosition.pyx":75
 *         self.jddt = ps.jddt
 * 
 *     def lookVec(self, double a, double b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _c
 *         for i in range(3):
 */

#line 75 "pyPosition.pyx"


#line 75 "pyPosition.pyx"
/* Python wrapper */

#line 75 "pyPosition.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPosition_11lookVec(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 75 "pyPosition.pyx"
static PyObject *__pyx_pw_8iscecore_10pyPosition_11lookVec(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a
#line 75 "pyPosition.pyx"
;
  double __pyx_v_b
#line 75 "pyPosition.pyx"
;
  PyObject *__pyx_v_c = 0
#line 75 "pyPosition.pyx"
;

#line 75 "pyPosition.pyx"
  PyObject *__pyx_r = 0;

#line 75 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 75 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("lookVec (wrapper)", 0);

#line 75 "pyPosition.pyx"
  {

#line 75 "pyPosition.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,0};

#line 75 "pyPosition.pyx"
    PyObject* values[3] = {0,0,0};

#line 75 "pyPosition.pyx"
    if (unlikely(__pyx_kwds)) {

#line 75 "pyPosition.pyx"
      Py_ssize_t kw_args;

#line 75 "pyPosition.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 75 "pyPosition.pyx"
      switch (pos_args) {
        case  3: 
#line 75 "pyPosition.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 75 "pyPosition.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 75 "pyPosition.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 75 "pyPosition.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 75 "pyPosition.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 75 "pyPosition.pyx"
        CYTHON_FALLTHROUGH;

#line 75 "pyPosition.pyx"
        case  0: break;
        default: 
#line 75 "pyPosition.pyx"
goto __pyx_L5_argtuple_error;

#line 75 "pyPosition.pyx"
      }

#line 75 "pyPosition.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 75 "pyPosition.pyx"
      switch (pos_args) {

#line 75 "pyPosition.pyx"
        case  0:

#line 75 "pyPosition.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 75 "pyPosition.pyx"
goto __pyx_L5_argtuple_error;

#line 75 "pyPosition.pyx"
        CYTHON_FALLTHROUGH;

#line 75 "pyPosition.pyx"
        case  1:

#line 75 "pyPosition.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 75 "pyPosition.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("lookVec", 1, 3, 3, 1); 
#line 75 "pyPosition.pyx"
__PYX_ERR(7, 75, __pyx_L3_error)

#line 75 "pyPosition.pyx"
        }

#line 75 "pyPosition.pyx"
        CYTHON_FALLTHROUGH;

#line 75 "pyPosition.pyx"
        case  2:

#line 75 "pyPosition.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 75 "pyPosition.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("lookVec", 1, 3, 3, 2); 
#line 75 "pyPosition.pyx"
__PYX_ERR(7, 75, __pyx_L3_error)

#line 75 "pyPosition.pyx"
        }

#line 75 "pyPosition.pyx"
      }

#line 75 "pyPosition.pyx"
      if (unlikely(kw_args > 0)) {

#line 75 "pyPosition.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "lookVec") < 0)) __PYX_ERR(7, 75, __pyx_L3_error)

#line 75 "pyPosition.pyx"
      }

#line 75 "pyPosition.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 75 "pyPosition.pyx"
      goto __pyx_L5_argtuple_error;

#line 75 "pyPosition.pyx"
    } else {

#line 75 "pyPosition.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 75 "pyPosition.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 75 "pyPosition.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 75 "pyPosition.pyx"
    }

#line 75 "pyPosition.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 75, __pyx_L3_error)

#line 75 "pyPosition.pyx"
    __pyx_v_b = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 75, __pyx_L3_error)

#line 75 "pyPosition.pyx"
    __pyx_v_c = ((PyObject*)values[2]);

#line 75 "pyPosition.pyx"
  }

#line 75 "pyPosition.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 75 "pyPosition.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lookVec", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 75 "pyPosition.pyx"
__PYX_ERR(7, 75, __pyx_L3_error)

#line 75 "pyPosition.pyx"
  __pyx_L3_error:;

#line 75 "pyPosition.pyx"
  __Pyx_AddTraceback("iscecore.pyPosition.lookVec", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 75 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 75 "pyPosition.pyx"
  return NULL;

#line 75 "pyPosition.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 75 "pyPosition.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), (&PyList_Type), 1, "c", 1))) __PYX_ERR(7, 75, __pyx_L1_error)
  __pyx_r = 
#line 75 "pyPosition.pyx"
__pyx_pf_8iscecore_10pyPosition_10lookVec(((struct __pyx_obj_8iscecore_pyPosition *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c);

#line 75 "pyPosition.pyx"


#line 75 "pyPosition.pyx"
  /* function exit code */

#line 75 "pyPosition.pyx"
  goto __pyx_L0;

#line 75 "pyPosition.pyx"
  __pyx_L1_error:;

#line 75 "pyPosition.pyx"
  __pyx_r = NULL;

#line 75 "pyPosition.pyx"
  __pyx_L0:;

#line 75 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 75 "pyPosition.pyx"
  return __pyx_r;

#line 75 "pyPosition.pyx"
}

#line 75 "pyPosition.pyx"


#line 75 "pyPosition.pyx"
static PyObject *__pyx_pf_8iscecore_10pyPosition_10lookVec(struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self, double __pyx_v_a, double __pyx_v_b, PyObject *__pyx_v_c) {
  std::vector<double>  __pyx_v__c
#line 75 "pyPosition.pyx"
;
  long __pyx_v_i
#line 75 "pyPosition.pyx"
;

#line 75 "pyPosition.pyx"
  PyObject *__pyx_r = NULL;

#line 75 "pyPosition.pyx"
  __Pyx_RefNannyDeclarations

#line 75 "pyPosition.pyx"
  long __pyx_t_1;

#line 75 "pyPosition.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 75 "pyPosition.pyx"
  double __pyx_t_3;

#line 75 "pyPosition.pyx"
  __Pyx_RefNannySetupContext("lookVec", 0);

  /* "pyPosition.pyx":77
 *     def lookVec(self, double a, double b, list c):
 *         cdef vector[double] _c
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _c.push_back(c[i])
 *         self.c_position.lookVec(a,b,_c)
 */

#line 77 "pyPosition.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 77 "pyPosition.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyPosition.pyx":78
 *         cdef vector[double] _c
 *         for i in range(3):
 *             _c.push_back(c[i])             # <<<<<<<<<<<<<<
 *         self.c_position.lookVec(a,b,_c)
 *         for i in range(3):
 */

#line 78 "pyPosition.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 78 "pyPosition.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 78 "pyPosition.pyx"
      __PYX_ERR(7, 78, __pyx_L1_error)

#line 78 "pyPosition.pyx"
    }

#line 78 "pyPosition.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 78, __pyx_L1_error)

#line 78 "pyPosition.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 78 "pyPosition.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 78, __pyx_L1_error)

#line 78 "pyPosition.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 78 "pyPosition.pyx"
    try {

#line 78 "pyPosition.pyx"
      __pyx_v__c.push_back(__pyx_t_3);

#line 78 "pyPosition.pyx"
    } catch(...) {

#line 78 "pyPosition.pyx"
      __Pyx_CppExn2PyErr();

#line 78 "pyPosition.pyx"
      __PYX_ERR(7, 78, __pyx_L1_error)

#line 78 "pyPosition.pyx"
    }

#line 78 "pyPosition.pyx"
  }

  /* "pyPosition.pyx":79
 *         for i in range(3):
 *             _c.push_back(c[i])
 *         self.c_position.lookVec(a,b,_c)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             c[i] = _c[i]
 */

#line 79 "pyPosition.pyx"
  __pyx_v_self->c_position->lookVec(__pyx_v_a, __pyx_v_b, __pyx_v__c);

  /* "pyPosition.pyx":80
 *             _c.push_back(c[i])
 *         self.c_position.lookVec(a,b,_c)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             c[i] = _c[i]
 * 
 */

#line 80 "pyPosition.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 80 "pyPosition.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyPosition.pyx":81
 *         self.c_position.lookVec(a,b,_c)
 *         for i in range(3):
 *             c[i] = _c[i]             # <<<<<<<<<<<<<<
 * 
 */

#line 81 "pyPosition.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__c[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 81, __pyx_L1_error)

#line 81 "pyPosition.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 81 "pyPosition.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 81 "pyPosition.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 81 "pyPosition.pyx"
      __PYX_ERR(7, 81, __pyx_L1_error)

#line 81 "pyPosition.pyx"
    }

#line 81 "pyPosition.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_c, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(7, 81, __pyx_L1_error)

#line 81 "pyPosition.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 81 "pyPosition.pyx"
  }

  /* "pyPosition.pyx":75
 *         self.jddt = ps.jddt
 * 
 *     def lookVec(self, double a, double b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _c
 *         for i in range(3):
 */

#line 75 "pyPosition.pyx"


#line 75 "pyPosition.pyx"
  /* function exit code */

#line 75 "pyPosition.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 75 "pyPosition.pyx"
  goto __pyx_L0;

#line 75 "pyPosition.pyx"
  __pyx_L1_error:;

#line 75 "pyPosition.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 75 "pyPosition.pyx"
  __Pyx_AddTraceback("iscecore.pyPosition.lookVec", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 75 "pyPosition.pyx"
  __pyx_r = NULL;

#line 75 "pyPosition.pyx"
  __pyx_L0:;

#line 75 "pyPosition.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 75 "pyPosition.pyx"
  __Pyx_RefNannyFinishContext();

#line 75 "pyPosition.pyx"
  return __pyx_r;

#line 75 "pyPosition.pyx"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_10pyPosition_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_10pyPosition_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_8iscecore_10pyPosition_12__reduce_cython__(((struct __pyx_obj_8iscecore_pyPosition *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_10pyPosition_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyPosition.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_10pyPosition_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_10pyPosition_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf_8iscecore_10pyPosition_14__setstate_cython__(((struct __pyx_obj_8iscecore_pyPosition *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_10pyPosition_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPosition *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyPosition.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "pyLinAlg.pyx":15
 *     cdef bool __owner
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.c_linAlg = new LinAlg()
 *         self.__owner = True
 */

#line 15 "pyLinAlg.pyx"


#line 15 "pyLinAlg.pyx"
/* Python wrapper */

#line 15 "pyLinAlg.pyx"
static int __pyx_pw_8iscecore_8pyLinAlg_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 15 "pyLinAlg.pyx"
static int __pyx_pw_8iscecore_8pyLinAlg_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 15 "pyLinAlg.pyx"
  int __pyx_r;

#line 15 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 15 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 15 "pyLinAlg.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 15 "pyLinAlg.pyx"
}

#line 15 "pyLinAlg.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = 
#line 15 "pyLinAlg.pyx"
__pyx_pf_8iscecore_8pyLinAlg___cinit__(((struct __pyx_obj_8iscecore_pyLinAlg *)__pyx_v_self));

#line 15 "pyLinAlg.pyx"


#line 15 "pyLinAlg.pyx"
  /* function exit code */

#line 15 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 15 "pyLinAlg.pyx"
  return __pyx_r;

#line 15 "pyLinAlg.pyx"
}

#line 15 "pyLinAlg.pyx"


#line 15 "pyLinAlg.pyx"
static int __pyx_pf_8iscecore_8pyLinAlg___cinit__(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self) {

#line 15 "pyLinAlg.pyx"
  int __pyx_r;

#line 15 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 15 "pyLinAlg.pyx"
  isce::core::LinAlg *__pyx_t_1;

#line 15 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyLinAlg.pyx":16
 * 
 *     def __cinit__(self):
 *         self.c_linAlg = new LinAlg()             # <<<<<<<<<<<<<<
 *         self.__owner = True
 *     def __dealloc__(self):
 */

#line 16 "pyLinAlg.pyx"
  try {

#line 16 "pyLinAlg.pyx"
    __pyx_t_1 = new isce::core::LinAlg();

#line 16 "pyLinAlg.pyx"
  } catch(...) {

#line 16 "pyLinAlg.pyx"
    __Pyx_CppExn2PyErr();

#line 16 "pyLinAlg.pyx"
    __PYX_ERR(8, 16, __pyx_L1_error)

#line 16 "pyLinAlg.pyx"
  }

#line 16 "pyLinAlg.pyx"
  __pyx_v_self->c_linAlg = __pyx_t_1;

  /* "pyLinAlg.pyx":17
 *     def __cinit__(self):
 *         self.c_linAlg = new LinAlg()
 *         self.__owner = True             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.__owner:
 */

#line 17 "pyLinAlg.pyx"
  __pyx_v_self->__pyx___owner = 1;

  /* "pyLinAlg.pyx":15
 *     cdef bool __owner
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.c_linAlg = new LinAlg()
 *         self.__owner = True
 */

#line 15 "pyLinAlg.pyx"


#line 15 "pyLinAlg.pyx"
  /* function exit code */

#line 15 "pyLinAlg.pyx"
  __pyx_r = 0;

#line 15 "pyLinAlg.pyx"
  goto __pyx_L0;

#line 15 "pyLinAlg.pyx"
  __pyx_L1_error:;

#line 15 "pyLinAlg.pyx"
  __Pyx_AddTraceback("iscecore.pyLinAlg.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 15 "pyLinAlg.pyx"
  __pyx_r = -1;

#line 15 "pyLinAlg.pyx"
  __pyx_L0:;

#line 15 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 15 "pyLinAlg.pyx"
  return __pyx_r;

#line 15 "pyLinAlg.pyx"
}

/* "pyLinAlg.pyx":18
 *         self.c_linAlg = new LinAlg()
 *         self.__owner = True
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_linAlg
 */

#line 18 "pyLinAlg.pyx"


#line 18 "pyLinAlg.pyx"
/* Python wrapper */

#line 18 "pyLinAlg.pyx"
static void __pyx_pw_8iscecore_8pyLinAlg_3__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 18 "pyLinAlg.pyx"
static void __pyx_pw_8iscecore_8pyLinAlg_3__dealloc__(PyObject *__pyx_v_self) {

#line 18 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 18 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 18 "pyLinAlg.pyx"
  __pyx_pf_8iscecore_8pyLinAlg_2__dealloc__(((struct __pyx_obj_8iscecore_pyLinAlg *)__pyx_v_self));

#line 18 "pyLinAlg.pyx"


#line 18 "pyLinAlg.pyx"
  /* function exit code */

#line 18 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 18 "pyLinAlg.pyx"
}

#line 18 "pyLinAlg.pyx"


#line 18 "pyLinAlg.pyx"
static void __pyx_pf_8iscecore_8pyLinAlg_2__dealloc__(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self) {

#line 18 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 18 "pyLinAlg.pyx"
  int __pyx_t_1;

#line 18 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyLinAlg.pyx":19
 *         self.__owner = True
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_linAlg
 *     # Note no static binder since we'll never need to pass any particular LinAlg object
 */

#line 19 "pyLinAlg.pyx"
  __pyx_t_1 = (__pyx_v_self->__pyx___owner != 0);

#line 19 "pyLinAlg.pyx"
  if (__pyx_t_1) {

    /* "pyLinAlg.pyx":20
 *     def __dealloc__(self):
 *         if self.__owner:
 *             del self.c_linAlg             # <<<<<<<<<<<<<<
 *     # Note no static binder since we'll never need to pass any particular LinAlg object
 *     # around...
 */

#line 20 "pyLinAlg.pyx"
    delete __pyx_v_self->c_linAlg;

    /* "pyLinAlg.pyx":19
 *         self.__owner = True
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_linAlg
 *     # Note no static binder since we'll never need to pass any particular LinAlg object
 */

#line 19 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":18
 *         self.c_linAlg = new LinAlg()
 *         self.__owner = True
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_linAlg
 */

#line 18 "pyLinAlg.pyx"


#line 18 "pyLinAlg.pyx"
  /* function exit code */

#line 18 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 18 "pyLinAlg.pyx"
}

/* "pyLinAlg.pyx":24
 *     # around...
 * 
 *     def cross(self, list a, list b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 24 "pyLinAlg.pyx"


#line 24 "pyLinAlg.pyx"
/* Python wrapper */

#line 24 "pyLinAlg.pyx"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_5cross(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 24 "pyLinAlg.pyx"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_5cross(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0
#line 24 "pyLinAlg.pyx"
;
  PyObject *__pyx_v_b = 0
#line 24 "pyLinAlg.pyx"
;
  PyObject *__pyx_v_c = 0
#line 24 "pyLinAlg.pyx"
;

#line 24 "pyLinAlg.pyx"
  PyObject *__pyx_r = 0;

#line 24 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 24 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("cross (wrapper)", 0);

#line 24 "pyLinAlg.pyx"
  {

#line 24 "pyLinAlg.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,0};

#line 24 "pyLinAlg.pyx"
    PyObject* values[3] = {0,0,0};

#line 24 "pyLinAlg.pyx"
    if (unlikely(__pyx_kwds)) {

#line 24 "pyLinAlg.pyx"
      Py_ssize_t kw_args;

#line 24 "pyLinAlg.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 24 "pyLinAlg.pyx"
      switch (pos_args) {
        case  3: 
#line 24 "pyLinAlg.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 24 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 24 "pyLinAlg.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 24 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 24 "pyLinAlg.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 24 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 24 "pyLinAlg.pyx"
        case  0: break;
        default: 
#line 24 "pyLinAlg.pyx"
goto __pyx_L5_argtuple_error;

#line 24 "pyLinAlg.pyx"
      }

#line 24 "pyLinAlg.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 24 "pyLinAlg.pyx"
      switch (pos_args) {

#line 24 "pyLinAlg.pyx"
        case  0:

#line 24 "pyLinAlg.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 24 "pyLinAlg.pyx"
goto __pyx_L5_argtuple_error;

#line 24 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 24 "pyLinAlg.pyx"
        case  1:

#line 24 "pyLinAlg.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 24 "pyLinAlg.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("cross", 1, 3, 3, 1); 
#line 24 "pyLinAlg.pyx"
__PYX_ERR(8, 24, __pyx_L3_error)

#line 24 "pyLinAlg.pyx"
        }

#line 24 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 24 "pyLinAlg.pyx"
        case  2:

#line 24 "pyLinAlg.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 24 "pyLinAlg.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("cross", 1, 3, 3, 2); 
#line 24 "pyLinAlg.pyx"
__PYX_ERR(8, 24, __pyx_L3_error)

#line 24 "pyLinAlg.pyx"
        }

#line 24 "pyLinAlg.pyx"
      }

#line 24 "pyLinAlg.pyx"
      if (unlikely(kw_args > 0)) {

#line 24 "pyLinAlg.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cross") < 0)) __PYX_ERR(8, 24, __pyx_L3_error)

#line 24 "pyLinAlg.pyx"
      }

#line 24 "pyLinAlg.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 24 "pyLinAlg.pyx"
      goto __pyx_L5_argtuple_error;

#line 24 "pyLinAlg.pyx"
    } else {

#line 24 "pyLinAlg.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 24 "pyLinAlg.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 24 "pyLinAlg.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 24 "pyLinAlg.pyx"
    }

#line 24 "pyLinAlg.pyx"
    __pyx_v_a = ((PyObject*)values[0]);

#line 24 "pyLinAlg.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 24 "pyLinAlg.pyx"
    __pyx_v_c = ((PyObject*)values[2]);

#line 24 "pyLinAlg.pyx"
  }

#line 24 "pyLinAlg.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 24 "pyLinAlg.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cross", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 24 "pyLinAlg.pyx"
__PYX_ERR(8, 24, __pyx_L3_error)

#line 24 "pyLinAlg.pyx"
  __pyx_L3_error:;

#line 24 "pyLinAlg.pyx"
  __Pyx_AddTraceback("iscecore.pyLinAlg.cross", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 24 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 24 "pyLinAlg.pyx"
  return NULL;

#line 24 "pyLinAlg.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 24 "pyLinAlg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), (&PyList_Type), 1, "a", 1))) __PYX_ERR(8, 24, __pyx_L1_error)

#line 24 "pyLinAlg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(8, 24, __pyx_L1_error)

#line 24 "pyLinAlg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), (&PyList_Type), 1, "c", 1))) __PYX_ERR(8, 24, __pyx_L1_error)
  __pyx_r = 
#line 24 "pyLinAlg.pyx"
__pyx_pf_8iscecore_8pyLinAlg_4cross(((struct __pyx_obj_8iscecore_pyLinAlg *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c);

#line 24 "pyLinAlg.pyx"


#line 24 "pyLinAlg.pyx"
  /* function exit code */

#line 24 "pyLinAlg.pyx"
  goto __pyx_L0;

#line 24 "pyLinAlg.pyx"
  __pyx_L1_error:;

#line 24 "pyLinAlg.pyx"
  __pyx_r = NULL;

#line 24 "pyLinAlg.pyx"
  __pyx_L0:;

#line 24 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 24 "pyLinAlg.pyx"
  return __pyx_r;

#line 24 "pyLinAlg.pyx"
}

#line 24 "pyLinAlg.pyx"


#line 24 "pyLinAlg.pyx"
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_4cross(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  std::vector<double>  __pyx_v__a
#line 24 "pyLinAlg.pyx"
;
  std::vector<double>  __pyx_v__b
#line 24 "pyLinAlg.pyx"
;
  std::vector<double>  __pyx_v__c
#line 24 "pyLinAlg.pyx"
;
  long __pyx_v_i
#line 24 "pyLinAlg.pyx"
;

#line 24 "pyLinAlg.pyx"
  PyObject *__pyx_r = NULL;

#line 24 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 24 "pyLinAlg.pyx"
  long __pyx_t_1;

#line 24 "pyLinAlg.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 24 "pyLinAlg.pyx"
  double __pyx_t_3;

#line 24 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("cross", 0);

  /* "pyLinAlg.pyx":28
 *         cdef vector[double] _b
 *         cdef vector[double] _c
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])
 */

#line 28 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 28 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":29
 *         cdef vector[double] _c
 *         for i in range(3):
 *             _a.push_back(a[i])             # <<<<<<<<<<<<<<
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 */

#line 29 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_a == Py_None)) {

#line 29 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 29 "pyLinAlg.pyx"
      __PYX_ERR(8, 29, __pyx_L1_error)

#line 29 "pyLinAlg.pyx"
    }

#line 29 "pyLinAlg.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 29, __pyx_L1_error)

#line 29 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 29 "pyLinAlg.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 29, __pyx_L1_error)

#line 29 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 29 "pyLinAlg.pyx"
    try {

#line 29 "pyLinAlg.pyx"
      __pyx_v__a.push_back(__pyx_t_3);

#line 29 "pyLinAlg.pyx"
    } catch(...) {

#line 29 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 29 "pyLinAlg.pyx"
      __PYX_ERR(8, 29, __pyx_L1_error)

#line 29 "pyLinAlg.pyx"
    }

    /* "pyLinAlg.pyx":30
 *         for i in range(3):
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])             # <<<<<<<<<<<<<<
 *             _c.push_back(c[i])
 *         self.c_linAlg.cross(_a,_b,_c)
 */

#line 30 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 30 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 30 "pyLinAlg.pyx"
      __PYX_ERR(8, 30, __pyx_L1_error)

#line 30 "pyLinAlg.pyx"
    }

#line 30 "pyLinAlg.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 30, __pyx_L1_error)

#line 30 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 30 "pyLinAlg.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 30, __pyx_L1_error)

#line 30 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 30 "pyLinAlg.pyx"
    try {

#line 30 "pyLinAlg.pyx"
      __pyx_v__b.push_back(__pyx_t_3);

#line 30 "pyLinAlg.pyx"
    } catch(...) {

#line 30 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 30 "pyLinAlg.pyx"
      __PYX_ERR(8, 30, __pyx_L1_error)

#line 30 "pyLinAlg.pyx"
    }

    /* "pyLinAlg.pyx":31
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])             # <<<<<<<<<<<<<<
 *         self.c_linAlg.cross(_a,_b,_c)
 *         for i in range(3):
 */

#line 31 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 31 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 31 "pyLinAlg.pyx"
      __PYX_ERR(8, 31, __pyx_L1_error)

#line 31 "pyLinAlg.pyx"
    }

#line 31 "pyLinAlg.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 31, __pyx_L1_error)

#line 31 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 31 "pyLinAlg.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 31, __pyx_L1_error)

#line 31 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 31 "pyLinAlg.pyx"
    try {

#line 31 "pyLinAlg.pyx"
      __pyx_v__c.push_back(__pyx_t_3);

#line 31 "pyLinAlg.pyx"
    } catch(...) {

#line 31 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 31 "pyLinAlg.pyx"
      __PYX_ERR(8, 31, __pyx_L1_error)

#line 31 "pyLinAlg.pyx"
    }

#line 31 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":32
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 *         self.c_linAlg.cross(_a,_b,_c)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             a[i] = _a[i]
 */

#line 32 "pyLinAlg.pyx"
  __pyx_v_self->c_linAlg->cross(__pyx_v__a, __pyx_v__b, __pyx_v__c);

  /* "pyLinAlg.pyx":33
 *             _c.push_back(c[i])
 *         self.c_linAlg.cross(_a,_b,_c)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             a[i] = _a[i]
 *             b[i] = _b[i]
 */

#line 33 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 33 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":34
 *         self.c_linAlg.cross(_a,_b,_c)
 *         for i in range(3):
 *             a[i] = _a[i]             # <<<<<<<<<<<<<<
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 */

#line 34 "pyLinAlg.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__a[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 34, __pyx_L1_error)

#line 34 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 34 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_a == Py_None)) {

#line 34 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 34 "pyLinAlg.pyx"
      __PYX_ERR(8, 34, __pyx_L1_error)

#line 34 "pyLinAlg.pyx"
    }

#line 34 "pyLinAlg.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_a, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(8, 34, __pyx_L1_error)

#line 34 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyLinAlg.pyx":35
 *         for i in range(3):
 *             a[i] = _a[i]
 *             b[i] = _b[i]             # <<<<<<<<<<<<<<
 *             c[i] = _c[i]
 *     def dot(self, list a, list b):
 */

#line 35 "pyLinAlg.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__b[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 35, __pyx_L1_error)

#line 35 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 35 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 35 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 35 "pyLinAlg.pyx"
      __PYX_ERR(8, 35, __pyx_L1_error)

#line 35 "pyLinAlg.pyx"
    }

#line 35 "pyLinAlg.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_b, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(8, 35, __pyx_L1_error)

#line 35 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyLinAlg.pyx":36
 *             a[i] = _a[i]
 *             b[i] = _b[i]
 *             c[i] = _c[i]             # <<<<<<<<<<<<<<
 *     def dot(self, list a, list b):
 *         cdef vector[double] _a
 */

#line 36 "pyLinAlg.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__c[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 36, __pyx_L1_error)

#line 36 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 36 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 36 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 36 "pyLinAlg.pyx"
      __PYX_ERR(8, 36, __pyx_L1_error)

#line 36 "pyLinAlg.pyx"
    }

#line 36 "pyLinAlg.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_c, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(8, 36, __pyx_L1_error)

#line 36 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 36 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":24
 *     # around...
 * 
 *     def cross(self, list a, list b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 24 "pyLinAlg.pyx"


#line 24 "pyLinAlg.pyx"
  /* function exit code */

#line 24 "pyLinAlg.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 24 "pyLinAlg.pyx"
  goto __pyx_L0;

#line 24 "pyLinAlg.pyx"
  __pyx_L1_error:;

#line 24 "pyLinAlg.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 24 "pyLinAlg.pyx"
  __Pyx_AddTraceback("iscecore.pyLinAlg.cross", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 24 "pyLinAlg.pyx"
  __pyx_r = NULL;

#line 24 "pyLinAlg.pyx"
  __pyx_L0:;

#line 24 "pyLinAlg.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 24 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 24 "pyLinAlg.pyx"
  return __pyx_r;

#line 24 "pyLinAlg.pyx"
}

/* "pyLinAlg.pyx":37
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 *     def dot(self, list a, list b):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 37 "pyLinAlg.pyx"


#line 37 "pyLinAlg.pyx"
/* Python wrapper */

#line 37 "pyLinAlg.pyx"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_7dot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 37 "pyLinAlg.pyx"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_7dot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0
#line 37 "pyLinAlg.pyx"
;
  PyObject *__pyx_v_b = 0
#line 37 "pyLinAlg.pyx"
;

#line 37 "pyLinAlg.pyx"
  PyObject *__pyx_r = 0;

#line 37 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 37 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);

#line 37 "pyLinAlg.pyx"
  {

#line 37 "pyLinAlg.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};

#line 37 "pyLinAlg.pyx"
    PyObject* values[2] = {0,0};

#line 37 "pyLinAlg.pyx"
    if (unlikely(__pyx_kwds)) {

#line 37 "pyLinAlg.pyx"
      Py_ssize_t kw_args;

#line 37 "pyLinAlg.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 37 "pyLinAlg.pyx"
      switch (pos_args) {
        case  2: 
#line 37 "pyLinAlg.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 37 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 37 "pyLinAlg.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 37 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 37 "pyLinAlg.pyx"
        case  0: break;
        default: 
#line 37 "pyLinAlg.pyx"
goto __pyx_L5_argtuple_error;

#line 37 "pyLinAlg.pyx"
      }

#line 37 "pyLinAlg.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 37 "pyLinAlg.pyx"
      switch (pos_args) {

#line 37 "pyLinAlg.pyx"
        case  0:

#line 37 "pyLinAlg.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 37 "pyLinAlg.pyx"
goto __pyx_L5_argtuple_error;

#line 37 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 37 "pyLinAlg.pyx"
        case  1:

#line 37 "pyLinAlg.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 37 "pyLinAlg.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("dot", 1, 2, 2, 1); 
#line 37 "pyLinAlg.pyx"
__PYX_ERR(8, 37, __pyx_L3_error)

#line 37 "pyLinAlg.pyx"
        }

#line 37 "pyLinAlg.pyx"
      }

#line 37 "pyLinAlg.pyx"
      if (unlikely(kw_args > 0)) {

#line 37 "pyLinAlg.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dot") < 0)) __PYX_ERR(8, 37, __pyx_L3_error)

#line 37 "pyLinAlg.pyx"
      }

#line 37 "pyLinAlg.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 37 "pyLinAlg.pyx"
      goto __pyx_L5_argtuple_error;

#line 37 "pyLinAlg.pyx"
    } else {

#line 37 "pyLinAlg.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 37 "pyLinAlg.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 37 "pyLinAlg.pyx"
    }

#line 37 "pyLinAlg.pyx"
    __pyx_v_a = ((PyObject*)values[0]);

#line 37 "pyLinAlg.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 37 "pyLinAlg.pyx"
  }

#line 37 "pyLinAlg.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 37 "pyLinAlg.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dot", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 37 "pyLinAlg.pyx"
__PYX_ERR(8, 37, __pyx_L3_error)

#line 37 "pyLinAlg.pyx"
  __pyx_L3_error:;

#line 37 "pyLinAlg.pyx"
  __Pyx_AddTraceback("iscecore.pyLinAlg.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 37 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 37 "pyLinAlg.pyx"
  return NULL;

#line 37 "pyLinAlg.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 37 "pyLinAlg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), (&PyList_Type), 1, "a", 1))) __PYX_ERR(8, 37, __pyx_L1_error)

#line 37 "pyLinAlg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(8, 37, __pyx_L1_error)
  __pyx_r = 
#line 37 "pyLinAlg.pyx"
__pyx_pf_8iscecore_8pyLinAlg_6dot(((struct __pyx_obj_8iscecore_pyLinAlg *)__pyx_v_self), __pyx_v_a, __pyx_v_b);

#line 37 "pyLinAlg.pyx"


#line 37 "pyLinAlg.pyx"
  /* function exit code */

#line 37 "pyLinAlg.pyx"
  goto __pyx_L0;

#line 37 "pyLinAlg.pyx"
  __pyx_L1_error:;

#line 37 "pyLinAlg.pyx"
  __pyx_r = NULL;

#line 37 "pyLinAlg.pyx"
  __pyx_L0:;

#line 37 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 37 "pyLinAlg.pyx"
  return __pyx_r;

#line 37 "pyLinAlg.pyx"
}

#line 37 "pyLinAlg.pyx"


#line 37 "pyLinAlg.pyx"
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_6dot(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  std::vector<double>  __pyx_v__a
#line 37 "pyLinAlg.pyx"
;
  std::vector<double>  __pyx_v__b
#line 37 "pyLinAlg.pyx"
;
  long __pyx_v_i
#line 37 "pyLinAlg.pyx"
;

#line 37 "pyLinAlg.pyx"
  PyObject *__pyx_r = NULL;

#line 37 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 37 "pyLinAlg.pyx"
  long __pyx_t_1;

#line 37 "pyLinAlg.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 37 "pyLinAlg.pyx"
  double __pyx_t_3;

#line 37 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pyLinAlg.pyx":40
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])
 */

#line 40 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 40 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":41
 *         cdef vector[double] _b
 *         for i in range(3):
 *             _a.push_back(a[i])             # <<<<<<<<<<<<<<
 *             _b.push_back(b[i])
 *         return self.c_linAlg.dot(_a,_b)
 */

#line 41 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_a == Py_None)) {

#line 41 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 41 "pyLinAlg.pyx"
      __PYX_ERR(8, 41, __pyx_L1_error)

#line 41 "pyLinAlg.pyx"
    }

#line 41 "pyLinAlg.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 41, __pyx_L1_error)

#line 41 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 41 "pyLinAlg.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 41, __pyx_L1_error)

#line 41 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 41 "pyLinAlg.pyx"
    try {

#line 41 "pyLinAlg.pyx"
      __pyx_v__a.push_back(__pyx_t_3);

#line 41 "pyLinAlg.pyx"
    } catch(...) {

#line 41 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 41 "pyLinAlg.pyx"
      __PYX_ERR(8, 41, __pyx_L1_error)

#line 41 "pyLinAlg.pyx"
    }

    /* "pyLinAlg.pyx":42
 *         for i in range(3):
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])             # <<<<<<<<<<<<<<
 *         return self.c_linAlg.dot(_a,_b)
 *     def linComb(self, double a, list b, double c, list d, list e):
 */

#line 42 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 42 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 42 "pyLinAlg.pyx"
      __PYX_ERR(8, 42, __pyx_L1_error)

#line 42 "pyLinAlg.pyx"
    }

#line 42 "pyLinAlg.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 42, __pyx_L1_error)

#line 42 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 42 "pyLinAlg.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 42, __pyx_L1_error)

#line 42 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 42 "pyLinAlg.pyx"
    try {

#line 42 "pyLinAlg.pyx"
      __pyx_v__b.push_back(__pyx_t_3);

#line 42 "pyLinAlg.pyx"
    } catch(...) {

#line 42 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 42 "pyLinAlg.pyx"
      __PYX_ERR(8, 42, __pyx_L1_error)

#line 42 "pyLinAlg.pyx"
    }

#line 42 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":43
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])
 *         return self.c_linAlg.dot(_a,_b)             # <<<<<<<<<<<<<<
 *     def linComb(self, double a, list b, double c, list d, list e):
 *         cdef vector[double] _b
 */

#line 43 "pyLinAlg.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 43 "pyLinAlg.pyx"
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->c_linAlg->dot(__pyx_v__a, __pyx_v__b)); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 43, __pyx_L1_error)

#line 43 "pyLinAlg.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 43 "pyLinAlg.pyx"
  __pyx_r = __pyx_t_2;

#line 43 "pyLinAlg.pyx"
  __pyx_t_2 = 0;

#line 43 "pyLinAlg.pyx"
  goto __pyx_L0;

  /* "pyLinAlg.pyx":37
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 *     def dot(self, list a, list b):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 37 "pyLinAlg.pyx"


#line 37 "pyLinAlg.pyx"
  /* function exit code */

#line 37 "pyLinAlg.pyx"
  __pyx_L1_error:;

#line 37 "pyLinAlg.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 37 "pyLinAlg.pyx"
  __Pyx_AddTraceback("iscecore.pyLinAlg.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 37 "pyLinAlg.pyx"
  __pyx_r = NULL;

#line 37 "pyLinAlg.pyx"
  __pyx_L0:;

#line 37 "pyLinAlg.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 37 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 37 "pyLinAlg.pyx"
  return __pyx_r;

#line 37 "pyLinAlg.pyx"
}

/* "pyLinAlg.pyx":44
 *             _b.push_back(b[i])
 *         return self.c_linAlg.dot(_a,_b)
 *     def linComb(self, double a, list b, double c, list d, list e):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _b
 *         cdef vector[double] _d
 */

#line 44 "pyLinAlg.pyx"


#line 44 "pyLinAlg.pyx"
/* Python wrapper */

#line 44 "pyLinAlg.pyx"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_9linComb(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 44 "pyLinAlg.pyx"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_9linComb(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a
#line 44 "pyLinAlg.pyx"
;
  PyObject *__pyx_v_b = 0
#line 44 "pyLinAlg.pyx"
;
  double __pyx_v_c
#line 44 "pyLinAlg.pyx"
;
  PyObject *__pyx_v_d = 0
#line 44 "pyLinAlg.pyx"
;
  PyObject *__pyx_v_e = 0
#line 44 "pyLinAlg.pyx"
;

#line 44 "pyLinAlg.pyx"
  PyObject *__pyx_r = 0;

#line 44 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 44 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("linComb (wrapper)", 0);

#line 44 "pyLinAlg.pyx"
  {

#line 44 "pyLinAlg.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,&__pyx_n_s_d,&__pyx_n_s_e,0};

#line 44 "pyLinAlg.pyx"
    PyObject* values[5] = {0,0,0,0,0};

#line 44 "pyLinAlg.pyx"
    if (unlikely(__pyx_kwds)) {

#line 44 "pyLinAlg.pyx"
      Py_ssize_t kw_args;

#line 44 "pyLinAlg.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 44 "pyLinAlg.pyx"
      switch (pos_args) {
        case  5: 
#line 44 "pyLinAlg.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 44 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 44 "pyLinAlg.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 44 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 44 "pyLinAlg.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 44 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 44 "pyLinAlg.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 44 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 44 "pyLinAlg.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 44 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 44 "pyLinAlg.pyx"
        case  0: break;
        default: 
#line 44 "pyLinAlg.pyx"
goto __pyx_L5_argtuple_error;

#line 44 "pyLinAlg.pyx"
      }

#line 44 "pyLinAlg.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 44 "pyLinAlg.pyx"
      switch (pos_args) {

#line 44 "pyLinAlg.pyx"
        case  0:

#line 44 "pyLinAlg.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 44 "pyLinAlg.pyx"
goto __pyx_L5_argtuple_error;

#line 44 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 44 "pyLinAlg.pyx"
        case  1:

#line 44 "pyLinAlg.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 44 "pyLinAlg.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("linComb", 1, 5, 5, 1); 
#line 44 "pyLinAlg.pyx"
__PYX_ERR(8, 44, __pyx_L3_error)

#line 44 "pyLinAlg.pyx"
        }

#line 44 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 44 "pyLinAlg.pyx"
        case  2:

#line 44 "pyLinAlg.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 44 "pyLinAlg.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("linComb", 1, 5, 5, 2); 
#line 44 "pyLinAlg.pyx"
__PYX_ERR(8, 44, __pyx_L3_error)

#line 44 "pyLinAlg.pyx"
        }

#line 44 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 44 "pyLinAlg.pyx"
        case  3:

#line 44 "pyLinAlg.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;

#line 44 "pyLinAlg.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("linComb", 1, 5, 5, 3); 
#line 44 "pyLinAlg.pyx"
__PYX_ERR(8, 44, __pyx_L3_error)

#line 44 "pyLinAlg.pyx"
        }

#line 44 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 44 "pyLinAlg.pyx"
        case  4:

#line 44 "pyLinAlg.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_e)) != 0)) kw_args--;

#line 44 "pyLinAlg.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("linComb", 1, 5, 5, 4); 
#line 44 "pyLinAlg.pyx"
__PYX_ERR(8, 44, __pyx_L3_error)

#line 44 "pyLinAlg.pyx"
        }

#line 44 "pyLinAlg.pyx"
      }

#line 44 "pyLinAlg.pyx"
      if (unlikely(kw_args > 0)) {

#line 44 "pyLinAlg.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "linComb") < 0)) __PYX_ERR(8, 44, __pyx_L3_error)

#line 44 "pyLinAlg.pyx"
      }

#line 44 "pyLinAlg.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {

#line 44 "pyLinAlg.pyx"
      goto __pyx_L5_argtuple_error;

#line 44 "pyLinAlg.pyx"
    } else {

#line 44 "pyLinAlg.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 44 "pyLinAlg.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 44 "pyLinAlg.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 44 "pyLinAlg.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 44 "pyLinAlg.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 44 "pyLinAlg.pyx"
    }

#line 44 "pyLinAlg.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 44, __pyx_L3_error)

#line 44 "pyLinAlg.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 44 "pyLinAlg.pyx"
    __pyx_v_c = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_c == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 44, __pyx_L3_error)

#line 44 "pyLinAlg.pyx"
    __pyx_v_d = ((PyObject*)values[3]);

#line 44 "pyLinAlg.pyx"
    __pyx_v_e = ((PyObject*)values[4]);

#line 44 "pyLinAlg.pyx"
  }

#line 44 "pyLinAlg.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 44 "pyLinAlg.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("linComb", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); 
#line 44 "pyLinAlg.pyx"
__PYX_ERR(8, 44, __pyx_L3_error)

#line 44 "pyLinAlg.pyx"
  __pyx_L3_error:;

#line 44 "pyLinAlg.pyx"
  __Pyx_AddTraceback("iscecore.pyLinAlg.linComb", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 44 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 44 "pyLinAlg.pyx"
  return NULL;

#line 44 "pyLinAlg.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 44 "pyLinAlg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(8, 44, __pyx_L1_error)

#line 44 "pyLinAlg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_d), (&PyList_Type), 1, "d", 1))) __PYX_ERR(8, 44, __pyx_L1_error)

#line 44 "pyLinAlg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_e), (&PyList_Type), 1, "e", 1))) __PYX_ERR(8, 44, __pyx_L1_error)
  __pyx_r = 
#line 44 "pyLinAlg.pyx"
__pyx_pf_8iscecore_8pyLinAlg_8linComb(((struct __pyx_obj_8iscecore_pyLinAlg *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c, __pyx_v_d, __pyx_v_e);

#line 44 "pyLinAlg.pyx"


#line 44 "pyLinAlg.pyx"
  /* function exit code */

#line 44 "pyLinAlg.pyx"
  goto __pyx_L0;

#line 44 "pyLinAlg.pyx"
  __pyx_L1_error:;

#line 44 "pyLinAlg.pyx"
  __pyx_r = NULL;

#line 44 "pyLinAlg.pyx"
  __pyx_L0:;

#line 44 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 44 "pyLinAlg.pyx"
  return __pyx_r;

#line 44 "pyLinAlg.pyx"
}

#line 44 "pyLinAlg.pyx"


#line 44 "pyLinAlg.pyx"
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_8linComb(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, double __pyx_v_a, PyObject *__pyx_v_b, double __pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  std::vector<double>  __pyx_v__b
#line 44 "pyLinAlg.pyx"
;
  std::vector<double>  __pyx_v__d
#line 44 "pyLinAlg.pyx"
;
  std::vector<double>  __pyx_v__e
#line 44 "pyLinAlg.pyx"
;
  long __pyx_v_i
#line 44 "pyLinAlg.pyx"
;

#line 44 "pyLinAlg.pyx"
  PyObject *__pyx_r = NULL;

#line 44 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 44 "pyLinAlg.pyx"
  long __pyx_t_1;

#line 44 "pyLinAlg.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 44 "pyLinAlg.pyx"
  double __pyx_t_3;

#line 44 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("linComb", 0);

  /* "pyLinAlg.pyx":48
 *         cdef vector[double] _d
 *         cdef vector[double] _e
 *         for i in range (3):             # <<<<<<<<<<<<<<
 *             _b.push_back(b[i])
 *             _d.push_back(d[i])
 */

#line 48 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 48 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":49
 *         cdef vector[double] _e
 *         for i in range (3):
 *             _b.push_back(b[i])             # <<<<<<<<<<<<<<
 *             _d.push_back(d[i])
 *             _e.push_back(e[i])
 */

#line 49 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 49 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 49 "pyLinAlg.pyx"
      __PYX_ERR(8, 49, __pyx_L1_error)

#line 49 "pyLinAlg.pyx"
    }

#line 49 "pyLinAlg.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 49, __pyx_L1_error)

#line 49 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 49 "pyLinAlg.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 49, __pyx_L1_error)

#line 49 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 49 "pyLinAlg.pyx"
    try {

#line 49 "pyLinAlg.pyx"
      __pyx_v__b.push_back(__pyx_t_3);

#line 49 "pyLinAlg.pyx"
    } catch(...) {

#line 49 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 49 "pyLinAlg.pyx"
      __PYX_ERR(8, 49, __pyx_L1_error)

#line 49 "pyLinAlg.pyx"
    }

    /* "pyLinAlg.pyx":50
 *         for i in range (3):
 *             _b.push_back(b[i])
 *             _d.push_back(d[i])             # <<<<<<<<<<<<<<
 *             _e.push_back(e[i])
 *         self.c_linAlg.linComb(a,_b,c,_d,_e)
 */

#line 50 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_d == Py_None)) {

#line 50 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 50 "pyLinAlg.pyx"
      __PYX_ERR(8, 50, __pyx_L1_error)

#line 50 "pyLinAlg.pyx"
    }

#line 50 "pyLinAlg.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_d, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 50, __pyx_L1_error)

#line 50 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 50 "pyLinAlg.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 50, __pyx_L1_error)

#line 50 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 50 "pyLinAlg.pyx"
    try {

#line 50 "pyLinAlg.pyx"
      __pyx_v__d.push_back(__pyx_t_3);

#line 50 "pyLinAlg.pyx"
    } catch(...) {

#line 50 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 50 "pyLinAlg.pyx"
      __PYX_ERR(8, 50, __pyx_L1_error)

#line 50 "pyLinAlg.pyx"
    }

    /* "pyLinAlg.pyx":51
 *             _b.push_back(b[i])
 *             _d.push_back(d[i])
 *             _e.push_back(e[i])             # <<<<<<<<<<<<<<
 *         self.c_linAlg.linComb(a,_b,c,_d,_e)
 *         for i in range(3):
 */

#line 51 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_e == Py_None)) {

#line 51 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 51 "pyLinAlg.pyx"
      __PYX_ERR(8, 51, __pyx_L1_error)

#line 51 "pyLinAlg.pyx"
    }

#line 51 "pyLinAlg.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_e, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 51, __pyx_L1_error)

#line 51 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 51 "pyLinAlg.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 51, __pyx_L1_error)

#line 51 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 51 "pyLinAlg.pyx"
    try {

#line 51 "pyLinAlg.pyx"
      __pyx_v__e.push_back(__pyx_t_3);

#line 51 "pyLinAlg.pyx"
    } catch(...) {

#line 51 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 51 "pyLinAlg.pyx"
      __PYX_ERR(8, 51, __pyx_L1_error)

#line 51 "pyLinAlg.pyx"
    }

#line 51 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":52
 *             _d.push_back(d[i])
 *             _e.push_back(e[i])
 *         self.c_linAlg.linComb(a,_b,c,_d,_e)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             b[i] = _b[i]
 */

#line 52 "pyLinAlg.pyx"
  __pyx_v_self->c_linAlg->linComb(__pyx_v_a, __pyx_v__b, __pyx_v_c, __pyx_v__d, __pyx_v__e);

  /* "pyLinAlg.pyx":53
 *             _e.push_back(e[i])
 *         self.c_linAlg.linComb(a,_b,c,_d,_e)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             b[i] = _b[i]
 *             d[i] = _d[i]
 */

#line 53 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 53 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":54
 *         self.c_linAlg.linComb(a,_b,c,_d,_e)
 *         for i in range(3):
 *             b[i] = _b[i]             # <<<<<<<<<<<<<<
 *             d[i] = _d[i]
 *             e[i] = _e[i]
 */

#line 54 "pyLinAlg.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__b[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 54, __pyx_L1_error)

#line 54 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 54 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 54 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 54 "pyLinAlg.pyx"
      __PYX_ERR(8, 54, __pyx_L1_error)

#line 54 "pyLinAlg.pyx"
    }

#line 54 "pyLinAlg.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_b, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(8, 54, __pyx_L1_error)

#line 54 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyLinAlg.pyx":55
 *         for i in range(3):
 *             b[i] = _b[i]
 *             d[i] = _d[i]             # <<<<<<<<<<<<<<
 *             e[i] = _e[i]
 *     def matMat(self, list a, list b, list c):
 */

#line 55 "pyLinAlg.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__d[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 55, __pyx_L1_error)

#line 55 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 55 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_d == Py_None)) {

#line 55 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 55 "pyLinAlg.pyx"
      __PYX_ERR(8, 55, __pyx_L1_error)

#line 55 "pyLinAlg.pyx"
    }

#line 55 "pyLinAlg.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_d, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(8, 55, __pyx_L1_error)

#line 55 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyLinAlg.pyx":56
 *             b[i] = _b[i]
 *             d[i] = _d[i]
 *             e[i] = _e[i]             # <<<<<<<<<<<<<<
 *     def matMat(self, list a, list b, list c):
 *         cdef vector[vector[double]] _a
 */

#line 56 "pyLinAlg.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__e[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 56, __pyx_L1_error)

#line 56 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 56 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_e == Py_None)) {

#line 56 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 56 "pyLinAlg.pyx"
      __PYX_ERR(8, 56, __pyx_L1_error)

#line 56 "pyLinAlg.pyx"
    }

#line 56 "pyLinAlg.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_e, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(8, 56, __pyx_L1_error)

#line 56 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 56 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":44
 *             _b.push_back(b[i])
 *         return self.c_linAlg.dot(_a,_b)
 *     def linComb(self, double a, list b, double c, list d, list e):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _b
 *         cdef vector[double] _d
 */

#line 44 "pyLinAlg.pyx"


#line 44 "pyLinAlg.pyx"
  /* function exit code */

#line 44 "pyLinAlg.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 44 "pyLinAlg.pyx"
  goto __pyx_L0;

#line 44 "pyLinAlg.pyx"
  __pyx_L1_error:;

#line 44 "pyLinAlg.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 44 "pyLinAlg.pyx"
  __Pyx_AddTraceback("iscecore.pyLinAlg.linComb", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 44 "pyLinAlg.pyx"
  __pyx_r = NULL;

#line 44 "pyLinAlg.pyx"
  __pyx_L0:;

#line 44 "pyLinAlg.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 44 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 44 "pyLinAlg.pyx"
  return __pyx_r;

#line 44 "pyLinAlg.pyx"
}

/* "pyLinAlg.pyx":57
 *             d[i] = _d[i]
 *             e[i] = _e[i]
 *     def matMat(self, list a, list b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] _a
 *         cdef vector[vector[double]] _b
 */

#line 57 "pyLinAlg.pyx"


#line 57 "pyLinAlg.pyx"
/* Python wrapper */

#line 57 "pyLinAlg.pyx"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_11matMat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 57 "pyLinAlg.pyx"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_11matMat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0
#line 57 "pyLinAlg.pyx"
;
  PyObject *__pyx_v_b = 0
#line 57 "pyLinAlg.pyx"
;
  PyObject *__pyx_v_c = 0
#line 57 "pyLinAlg.pyx"
;

#line 57 "pyLinAlg.pyx"
  PyObject *__pyx_r = 0;

#line 57 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 57 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("matMat (wrapper)", 0);

#line 57 "pyLinAlg.pyx"
  {

#line 57 "pyLinAlg.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,0};

#line 57 "pyLinAlg.pyx"
    PyObject* values[3] = {0,0,0};

#line 57 "pyLinAlg.pyx"
    if (unlikely(__pyx_kwds)) {

#line 57 "pyLinAlg.pyx"
      Py_ssize_t kw_args;

#line 57 "pyLinAlg.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 57 "pyLinAlg.pyx"
      switch (pos_args) {
        case  3: 
#line 57 "pyLinAlg.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 57 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 57 "pyLinAlg.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 57 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 57 "pyLinAlg.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 57 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 57 "pyLinAlg.pyx"
        case  0: break;
        default: 
#line 57 "pyLinAlg.pyx"
goto __pyx_L5_argtuple_error;

#line 57 "pyLinAlg.pyx"
      }

#line 57 "pyLinAlg.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 57 "pyLinAlg.pyx"
      switch (pos_args) {

#line 57 "pyLinAlg.pyx"
        case  0:

#line 57 "pyLinAlg.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 57 "pyLinAlg.pyx"
goto __pyx_L5_argtuple_error;

#line 57 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 57 "pyLinAlg.pyx"
        case  1:

#line 57 "pyLinAlg.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 57 "pyLinAlg.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("matMat", 1, 3, 3, 1); 
#line 57 "pyLinAlg.pyx"
__PYX_ERR(8, 57, __pyx_L3_error)

#line 57 "pyLinAlg.pyx"
        }

#line 57 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 57 "pyLinAlg.pyx"
        case  2:

#line 57 "pyLinAlg.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 57 "pyLinAlg.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("matMat", 1, 3, 3, 2); 
#line 57 "pyLinAlg.pyx"
__PYX_ERR(8, 57, __pyx_L3_error)

#line 57 "pyLinAlg.pyx"
        }

#line 57 "pyLinAlg.pyx"
      }

#line 57 "pyLinAlg.pyx"
      if (unlikely(kw_args > 0)) {

#line 57 "pyLinAlg.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "matMat") < 0)) __PYX_ERR(8, 57, __pyx_L3_error)

#line 57 "pyLinAlg.pyx"
      }

#line 57 "pyLinAlg.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 57 "pyLinAlg.pyx"
      goto __pyx_L5_argtuple_error;

#line 57 "pyLinAlg.pyx"
    } else {

#line 57 "pyLinAlg.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 57 "pyLinAlg.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 57 "pyLinAlg.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 57 "pyLinAlg.pyx"
    }

#line 57 "pyLinAlg.pyx"
    __pyx_v_a = ((PyObject*)values[0]);

#line 57 "pyLinAlg.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 57 "pyLinAlg.pyx"
    __pyx_v_c = ((PyObject*)values[2]);

#line 57 "pyLinAlg.pyx"
  }

#line 57 "pyLinAlg.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 57 "pyLinAlg.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("matMat", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 57 "pyLinAlg.pyx"
__PYX_ERR(8, 57, __pyx_L3_error)

#line 57 "pyLinAlg.pyx"
  __pyx_L3_error:;

#line 57 "pyLinAlg.pyx"
  __Pyx_AddTraceback("iscecore.pyLinAlg.matMat", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 57 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 57 "pyLinAlg.pyx"
  return NULL;

#line 57 "pyLinAlg.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 57 "pyLinAlg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), (&PyList_Type), 1, "a", 1))) __PYX_ERR(8, 57, __pyx_L1_error)

#line 57 "pyLinAlg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(8, 57, __pyx_L1_error)

#line 57 "pyLinAlg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), (&PyList_Type), 1, "c", 1))) __PYX_ERR(8, 57, __pyx_L1_error)
  __pyx_r = 
#line 57 "pyLinAlg.pyx"
__pyx_pf_8iscecore_8pyLinAlg_10matMat(((struct __pyx_obj_8iscecore_pyLinAlg *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c);

#line 57 "pyLinAlg.pyx"


#line 57 "pyLinAlg.pyx"
  /* function exit code */

#line 57 "pyLinAlg.pyx"
  goto __pyx_L0;

#line 57 "pyLinAlg.pyx"
  __pyx_L1_error:;

#line 57 "pyLinAlg.pyx"
  __pyx_r = NULL;

#line 57 "pyLinAlg.pyx"
  __pyx_L0:;

#line 57 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 57 "pyLinAlg.pyx"
  return __pyx_r;

#line 57 "pyLinAlg.pyx"
}

#line 57 "pyLinAlg.pyx"


#line 57 "pyLinAlg.pyx"
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_10matMat(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  std::vector<std::vector<double> >  __pyx_v__a
#line 57 "pyLinAlg.pyx"
;
  std::vector<std::vector<double> >  __pyx_v__b
#line 57 "pyLinAlg.pyx"
;
  std::vector<std::vector<double> >  __pyx_v__c
#line 57 "pyLinAlg.pyx"
;
  std::vector<double>  __pyx_v_tmp
#line 57 "pyLinAlg.pyx"
;
  long __pyx_v_i
#line 57 "pyLinAlg.pyx"
;
  long __pyx_v_j
#line 57 "pyLinAlg.pyx"
;

#line 57 "pyLinAlg.pyx"
  PyObject *__pyx_r = NULL;

#line 57 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 57 "pyLinAlg.pyx"
  long __pyx_t_1;

#line 57 "pyLinAlg.pyx"
  long __pyx_t_2;

#line 57 "pyLinAlg.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 57 "pyLinAlg.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 57 "pyLinAlg.pyx"
  double __pyx_t_5;

#line 57 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("matMat", 0);

  /* "pyLinAlg.pyx":62
 *         cdef vector[vector[double]] _c
 *         cdef vector[double] tmp
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             tmp.push_back(0.)
 *         for i in range(3):
 */

#line 62 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 62 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":63
 *         cdef vector[double] tmp
 *         for i in range(3):
 *             tmp.push_back(0.)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             _a.push_back(tmp)
 */

#line 63 "pyLinAlg.pyx"
    try {

#line 63 "pyLinAlg.pyx"
      __pyx_v_tmp.push_back(0.);

#line 63 "pyLinAlg.pyx"
    } catch(...) {

#line 63 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 63 "pyLinAlg.pyx"
      __PYX_ERR(8, 63, __pyx_L1_error)

#line 63 "pyLinAlg.pyx"
    }

#line 63 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":64
 *         for i in range(3):
 *             tmp.push_back(0.)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _a.push_back(tmp)
 *             _b.push_back(tmp)
 */

#line 64 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 64 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":65
 *             tmp.push_back(0.)
 *         for i in range(3):
 *             _a.push_back(tmp)             # <<<<<<<<<<<<<<
 *             _b.push_back(tmp)
 *             _c.push_back(tmp)
 */

#line 65 "pyLinAlg.pyx"
    try {

#line 65 "pyLinAlg.pyx"
      __pyx_v__a.push_back(__pyx_v_tmp);

#line 65 "pyLinAlg.pyx"
    } catch(...) {

#line 65 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 65 "pyLinAlg.pyx"
      __PYX_ERR(8, 65, __pyx_L1_error)

#line 65 "pyLinAlg.pyx"
    }

    /* "pyLinAlg.pyx":66
 *         for i in range(3):
 *             _a.push_back(tmp)
 *             _b.push_back(tmp)             # <<<<<<<<<<<<<<
 *             _c.push_back(tmp)
 *         for i in range(3):
 */

#line 66 "pyLinAlg.pyx"
    try {

#line 66 "pyLinAlg.pyx"
      __pyx_v__b.push_back(__pyx_v_tmp);

#line 66 "pyLinAlg.pyx"
    } catch(...) {

#line 66 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 66 "pyLinAlg.pyx"
      __PYX_ERR(8, 66, __pyx_L1_error)

#line 66 "pyLinAlg.pyx"
    }

    /* "pyLinAlg.pyx":67
 *             _a.push_back(tmp)
 *             _b.push_back(tmp)
 *             _c.push_back(tmp)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             for j in range(3):
 */

#line 67 "pyLinAlg.pyx"
    try {

#line 67 "pyLinAlg.pyx"
      __pyx_v__c.push_back(__pyx_v_tmp);

#line 67 "pyLinAlg.pyx"
    } catch(...) {

#line 67 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 67 "pyLinAlg.pyx"
      __PYX_ERR(8, 67, __pyx_L1_error)

#line 67 "pyLinAlg.pyx"
    }

#line 67 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":68
 *             _b.push_back(tmp)
 *             _c.push_back(tmp)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 _a[i][j] = a[i][j]
 */

#line 68 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 68 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":69
 *             _c.push_back(tmp)
 *         for i in range(3):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 _a[i][j] = a[i][j]
 *                 _b[i][j] = b[i][j]
 */

#line 69 "pyLinAlg.pyx"
    for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {

#line 69 "pyLinAlg.pyx"
      __pyx_v_j = __pyx_t_2;

      /* "pyLinAlg.pyx":70
 *         for i in range(3):
 *             for j in range(3):
 *                 _a[i][j] = a[i][j]             # <<<<<<<<<<<<<<
 *                 _b[i][j] = b[i][j]
 *                 _c[i][j] = c[i][j]
 */

#line 70 "pyLinAlg.pyx"
      if (unlikely(__pyx_v_a == Py_None)) {

#line 70 "pyLinAlg.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 70 "pyLinAlg.pyx"
        __PYX_ERR(8, 70, __pyx_L1_error)

#line 70 "pyLinAlg.pyx"
      }

#line 70 "pyLinAlg.pyx"
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 70, __pyx_L1_error)

#line 70 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 70 "pyLinAlg.pyx"
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_j, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 70, __pyx_L1_error)

#line 70 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 70 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 70 "pyLinAlg.pyx"
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 70, __pyx_L1_error)

#line 70 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 70 "pyLinAlg.pyx"
      ((__pyx_v__a[__pyx_v_i])[__pyx_v_j]) = __pyx_t_5;

      /* "pyLinAlg.pyx":71
 *             for j in range(3):
 *                 _a[i][j] = a[i][j]
 *                 _b[i][j] = b[i][j]             # <<<<<<<<<<<<<<
 *                 _c[i][j] = c[i][j]
 *         self.c_linAlg.matMat(_a,_b,_c)
 */

#line 71 "pyLinAlg.pyx"
      if (unlikely(__pyx_v_b == Py_None)) {

#line 71 "pyLinAlg.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 71 "pyLinAlg.pyx"
        __PYX_ERR(8, 71, __pyx_L1_error)

#line 71 "pyLinAlg.pyx"
      }

#line 71 "pyLinAlg.pyx"
      __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 71, __pyx_L1_error)

#line 71 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 71 "pyLinAlg.pyx"
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_j, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 71, __pyx_L1_error)

#line 71 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 71 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 71 "pyLinAlg.pyx"
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 71, __pyx_L1_error)

#line 71 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 71 "pyLinAlg.pyx"
      ((__pyx_v__b[__pyx_v_i])[__pyx_v_j]) = __pyx_t_5;

      /* "pyLinAlg.pyx":72
 *                 _a[i][j] = a[i][j]
 *                 _b[i][j] = b[i][j]
 *                 _c[i][j] = c[i][j]             # <<<<<<<<<<<<<<
 *         self.c_linAlg.matMat(_a,_b,_c)
 *         for i in range(3):
 */

#line 72 "pyLinAlg.pyx"
      if (unlikely(__pyx_v_c == Py_None)) {

#line 72 "pyLinAlg.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 72 "pyLinAlg.pyx"
        __PYX_ERR(8, 72, __pyx_L1_error)

#line 72 "pyLinAlg.pyx"
      }

#line 72 "pyLinAlg.pyx"
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 72, __pyx_L1_error)

#line 72 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 72 "pyLinAlg.pyx"
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_j, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 72, __pyx_L1_error)

#line 72 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 72 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 72 "pyLinAlg.pyx"
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 72, __pyx_L1_error)

#line 72 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 72 "pyLinAlg.pyx"
      ((__pyx_v__c[__pyx_v_i])[__pyx_v_j]) = __pyx_t_5;

#line 72 "pyLinAlg.pyx"
    }

#line 72 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":73
 *                 _b[i][j] = b[i][j]
 *                 _c[i][j] = c[i][j]
 *         self.c_linAlg.matMat(_a,_b,_c)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             for j in range(3):
 */

#line 73 "pyLinAlg.pyx"
  __pyx_v_self->c_linAlg->matMat(__pyx_v__a, __pyx_v__b, __pyx_v__c);

  /* "pyLinAlg.pyx":74
 *                 _c[i][j] = c[i][j]
 *         self.c_linAlg.matMat(_a,_b,_c)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 a[i][j] = _a[i][j]
 */

#line 74 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 74 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":75
 *         self.c_linAlg.matMat(_a,_b,_c)
 *         for i in range(3):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 a[i][j] = _a[i][j]
 *                 b[i][j] = _b[i][j]
 */

#line 75 "pyLinAlg.pyx"
    for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {

#line 75 "pyLinAlg.pyx"
      __pyx_v_j = __pyx_t_2;

      /* "pyLinAlg.pyx":76
 *         for i in range(3):
 *             for j in range(3):
 *                 a[i][j] = _a[i][j]             # <<<<<<<<<<<<<<
 *                 b[i][j] = _b[i][j]
 *                 c[i][j] = _c[i][j]
 */

#line 76 "pyLinAlg.pyx"
      __pyx_t_4 = PyFloat_FromDouble(((__pyx_v__a[__pyx_v_i])[__pyx_v_j])); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 76, __pyx_L1_error)

#line 76 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 76 "pyLinAlg.pyx"
      if (unlikely(__pyx_v_a == Py_None)) {

#line 76 "pyLinAlg.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 76 "pyLinAlg.pyx"
        __PYX_ERR(8, 76, __pyx_L1_error)

#line 76 "pyLinAlg.pyx"
      }

#line 76 "pyLinAlg.pyx"
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 76, __pyx_L1_error)

#line 76 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 76 "pyLinAlg.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_j, __pyx_t_4, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(8, 76, __pyx_L1_error)

#line 76 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 76 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyLinAlg.pyx":77
 *             for j in range(3):
 *                 a[i][j] = _a[i][j]
 *                 b[i][j] = _b[i][j]             # <<<<<<<<<<<<<<
 *                 c[i][j] = _c[i][j]
 *     def matVec(self, list a, list b, list c):
 */

#line 77 "pyLinAlg.pyx"
      __pyx_t_4 = PyFloat_FromDouble(((__pyx_v__b[__pyx_v_i])[__pyx_v_j])); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 77, __pyx_L1_error)

#line 77 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 77 "pyLinAlg.pyx"
      if (unlikely(__pyx_v_b == Py_None)) {

#line 77 "pyLinAlg.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 77 "pyLinAlg.pyx"
        __PYX_ERR(8, 77, __pyx_L1_error)

#line 77 "pyLinAlg.pyx"
      }

#line 77 "pyLinAlg.pyx"
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 77, __pyx_L1_error)

#line 77 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 77 "pyLinAlg.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_j, __pyx_t_4, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(8, 77, __pyx_L1_error)

#line 77 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 77 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyLinAlg.pyx":78
 *                 a[i][j] = _a[i][j]
 *                 b[i][j] = _b[i][j]
 *                 c[i][j] = _c[i][j]             # <<<<<<<<<<<<<<
 *     def matVec(self, list a, list b, list c):
 *         cdef vector[vector[double]] _a
 */

#line 78 "pyLinAlg.pyx"
      __pyx_t_4 = PyFloat_FromDouble(((__pyx_v__c[__pyx_v_i])[__pyx_v_j])); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 78, __pyx_L1_error)

#line 78 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 78 "pyLinAlg.pyx"
      if (unlikely(__pyx_v_c == Py_None)) {

#line 78 "pyLinAlg.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 78 "pyLinAlg.pyx"
        __PYX_ERR(8, 78, __pyx_L1_error)

#line 78 "pyLinAlg.pyx"
      }

#line 78 "pyLinAlg.pyx"
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 78, __pyx_L1_error)

#line 78 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 78 "pyLinAlg.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_j, __pyx_t_4, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(8, 78, __pyx_L1_error)

#line 78 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 78 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 78 "pyLinAlg.pyx"
    }

#line 78 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":57
 *             d[i] = _d[i]
 *             e[i] = _e[i]
 *     def matMat(self, list a, list b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] _a
 *         cdef vector[vector[double]] _b
 */

#line 57 "pyLinAlg.pyx"


#line 57 "pyLinAlg.pyx"
  /* function exit code */

#line 57 "pyLinAlg.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 57 "pyLinAlg.pyx"
  goto __pyx_L0;

#line 57 "pyLinAlg.pyx"
  __pyx_L1_error:;

#line 57 "pyLinAlg.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 57 "pyLinAlg.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 57 "pyLinAlg.pyx"
  __Pyx_AddTraceback("iscecore.pyLinAlg.matMat", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 57 "pyLinAlg.pyx"
  __pyx_r = NULL;

#line 57 "pyLinAlg.pyx"
  __pyx_L0:;

#line 57 "pyLinAlg.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 57 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 57 "pyLinAlg.pyx"
  return __pyx_r;

#line 57 "pyLinAlg.pyx"
}

/* "pyLinAlg.pyx":79
 *                 b[i][j] = _b[i][j]
 *                 c[i][j] = _c[i][j]
 *     def matVec(self, list a, list b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] _a
 *         cdef vector[double] _b
 */

#line 79 "pyLinAlg.pyx"


#line 79 "pyLinAlg.pyx"
/* Python wrapper */

#line 79 "pyLinAlg.pyx"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_13matVec(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 79 "pyLinAlg.pyx"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_13matVec(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0
#line 79 "pyLinAlg.pyx"
;
  PyObject *__pyx_v_b = 0
#line 79 "pyLinAlg.pyx"
;
  PyObject *__pyx_v_c = 0
#line 79 "pyLinAlg.pyx"
;

#line 79 "pyLinAlg.pyx"
  PyObject *__pyx_r = 0;

#line 79 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 79 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("matVec (wrapper)", 0);

#line 79 "pyLinAlg.pyx"
  {

#line 79 "pyLinAlg.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,0};

#line 79 "pyLinAlg.pyx"
    PyObject* values[3] = {0,0,0};

#line 79 "pyLinAlg.pyx"
    if (unlikely(__pyx_kwds)) {

#line 79 "pyLinAlg.pyx"
      Py_ssize_t kw_args;

#line 79 "pyLinAlg.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 79 "pyLinAlg.pyx"
      switch (pos_args) {
        case  3: 
#line 79 "pyLinAlg.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 79 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 79 "pyLinAlg.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 79 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 79 "pyLinAlg.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 79 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 79 "pyLinAlg.pyx"
        case  0: break;
        default: 
#line 79 "pyLinAlg.pyx"
goto __pyx_L5_argtuple_error;

#line 79 "pyLinAlg.pyx"
      }

#line 79 "pyLinAlg.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 79 "pyLinAlg.pyx"
      switch (pos_args) {

#line 79 "pyLinAlg.pyx"
        case  0:

#line 79 "pyLinAlg.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 79 "pyLinAlg.pyx"
goto __pyx_L5_argtuple_error;

#line 79 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 79 "pyLinAlg.pyx"
        case  1:

#line 79 "pyLinAlg.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 79 "pyLinAlg.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("matVec", 1, 3, 3, 1); 
#line 79 "pyLinAlg.pyx"
__PYX_ERR(8, 79, __pyx_L3_error)

#line 79 "pyLinAlg.pyx"
        }

#line 79 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 79 "pyLinAlg.pyx"
        case  2:

#line 79 "pyLinAlg.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 79 "pyLinAlg.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("matVec", 1, 3, 3, 2); 
#line 79 "pyLinAlg.pyx"
__PYX_ERR(8, 79, __pyx_L3_error)

#line 79 "pyLinAlg.pyx"
        }

#line 79 "pyLinAlg.pyx"
      }

#line 79 "pyLinAlg.pyx"
      if (unlikely(kw_args > 0)) {

#line 79 "pyLinAlg.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "matVec") < 0)) __PYX_ERR(8, 79, __pyx_L3_error)

#line 79 "pyLinAlg.pyx"
      }

#line 79 "pyLinAlg.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 79 "pyLinAlg.pyx"
      goto __pyx_L5_argtuple_error;

#line 79 "pyLinAlg.pyx"
    } else {

#line 79 "pyLinAlg.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 79 "pyLinAlg.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 79 "pyLinAlg.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 79 "pyLinAlg.pyx"
    }

#line 79 "pyLinAlg.pyx"
    __pyx_v_a = ((PyObject*)values[0]);

#line 79 "pyLinAlg.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 79 "pyLinAlg.pyx"
    __pyx_v_c = ((PyObject*)values[2]);

#line 79 "pyLinAlg.pyx"
  }

#line 79 "pyLinAlg.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 79 "pyLinAlg.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("matVec", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 79 "pyLinAlg.pyx"
__PYX_ERR(8, 79, __pyx_L3_error)

#line 79 "pyLinAlg.pyx"
  __pyx_L3_error:;

#line 79 "pyLinAlg.pyx"
  __Pyx_AddTraceback("iscecore.pyLinAlg.matVec", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 79 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 79 "pyLinAlg.pyx"
  return NULL;

#line 79 "pyLinAlg.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 79 "pyLinAlg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), (&PyList_Type), 1, "a", 1))) __PYX_ERR(8, 79, __pyx_L1_error)

#line 79 "pyLinAlg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(8, 79, __pyx_L1_error)

#line 79 "pyLinAlg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), (&PyList_Type), 1, "c", 1))) __PYX_ERR(8, 79, __pyx_L1_error)
  __pyx_r = 
#line 79 "pyLinAlg.pyx"
__pyx_pf_8iscecore_8pyLinAlg_12matVec(((struct __pyx_obj_8iscecore_pyLinAlg *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c);

#line 79 "pyLinAlg.pyx"


#line 79 "pyLinAlg.pyx"
  /* function exit code */

#line 79 "pyLinAlg.pyx"
  goto __pyx_L0;

#line 79 "pyLinAlg.pyx"
  __pyx_L1_error:;

#line 79 "pyLinAlg.pyx"
  __pyx_r = NULL;

#line 79 "pyLinAlg.pyx"
  __pyx_L0:;

#line 79 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 79 "pyLinAlg.pyx"
  return __pyx_r;

#line 79 "pyLinAlg.pyx"
}

#line 79 "pyLinAlg.pyx"


#line 79 "pyLinAlg.pyx"
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_12matVec(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  std::vector<std::vector<double> >  __pyx_v__a
#line 79 "pyLinAlg.pyx"
;
  std::vector<double>  __pyx_v__b
#line 79 "pyLinAlg.pyx"
;
  std::vector<double>  __pyx_v__c
#line 79 "pyLinAlg.pyx"
;
  long __pyx_v_i
#line 79 "pyLinAlg.pyx"
;
  long __pyx_v_j
#line 79 "pyLinAlg.pyx"
;

#line 79 "pyLinAlg.pyx"
  PyObject *__pyx_r = NULL;

#line 79 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 79 "pyLinAlg.pyx"
  long __pyx_t_1;

#line 79 "pyLinAlg.pyx"
  long __pyx_t_2;

#line 79 "pyLinAlg.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 79 "pyLinAlg.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 79 "pyLinAlg.pyx"
  double __pyx_t_5;

#line 79 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("matVec", 0);

  /* "pyLinAlg.pyx":83
 *         cdef vector[double] _b
 *         cdef vector[double] _c
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _b.push_back(0.)
 *         for i in range(3):
 */

#line 83 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 83 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":84
 *         cdef vector[double] _c
 *         for i in range(3):
 *             _b.push_back(0.)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             _a.push_back(_b)
 */

#line 84 "pyLinAlg.pyx"
    try {

#line 84 "pyLinAlg.pyx"
      __pyx_v__b.push_back(0.);

#line 84 "pyLinAlg.pyx"
    } catch(...) {

#line 84 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 84 "pyLinAlg.pyx"
      __PYX_ERR(8, 84, __pyx_L1_error)

#line 84 "pyLinAlg.pyx"
    }

#line 84 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":85
 *         for i in range(3):
 *             _b.push_back(0.)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _a.push_back(_b)
 *         for i in range(3):
 */

#line 85 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 85 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":86
 *             _b.push_back(0.)
 *         for i in range(3):
 *             _a.push_back(_b)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             for j in range(3):
 */

#line 86 "pyLinAlg.pyx"
    try {

#line 86 "pyLinAlg.pyx"
      __pyx_v__a.push_back(__pyx_v__b);

#line 86 "pyLinAlg.pyx"
    } catch(...) {

#line 86 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 86 "pyLinAlg.pyx"
      __PYX_ERR(8, 86, __pyx_L1_error)

#line 86 "pyLinAlg.pyx"
    }

#line 86 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":87
 *         for i in range(3):
 *             _a.push_back(_b)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 _a[i][j] = a[i][j]
 */

#line 87 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 87 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":88
 *             _a.push_back(_b)
 *         for i in range(3):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 _a[i][j] = a[i][j]
 *             _b[i] = b[i]
 */

#line 88 "pyLinAlg.pyx"
    for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {

#line 88 "pyLinAlg.pyx"
      __pyx_v_j = __pyx_t_2;

      /* "pyLinAlg.pyx":89
 *         for i in range(3):
 *             for j in range(3):
 *                 _a[i][j] = a[i][j]             # <<<<<<<<<<<<<<
 *             _b[i] = b[i]
 *             _c[i] = c[i]
 */

#line 89 "pyLinAlg.pyx"
      if (unlikely(__pyx_v_a == Py_None)) {

#line 89 "pyLinAlg.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 89 "pyLinAlg.pyx"
        __PYX_ERR(8, 89, __pyx_L1_error)

#line 89 "pyLinAlg.pyx"
      }

#line 89 "pyLinAlg.pyx"
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 89, __pyx_L1_error)

#line 89 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 89 "pyLinAlg.pyx"
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_j, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 89, __pyx_L1_error)

#line 89 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 89 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 89 "pyLinAlg.pyx"
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 89, __pyx_L1_error)

#line 89 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 89 "pyLinAlg.pyx"
      ((__pyx_v__a[__pyx_v_i])[__pyx_v_j]) = __pyx_t_5;

#line 89 "pyLinAlg.pyx"
    }

    /* "pyLinAlg.pyx":90
 *             for j in range(3):
 *                 _a[i][j] = a[i][j]
 *             _b[i] = b[i]             # <<<<<<<<<<<<<<
 *             _c[i] = c[i]
 *         self.c_linAlg.matVec(_a,_b,_c)
 */

#line 90 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 90 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 90 "pyLinAlg.pyx"
      __PYX_ERR(8, 90, __pyx_L1_error)

#line 90 "pyLinAlg.pyx"
    }

#line 90 "pyLinAlg.pyx"
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 90, __pyx_L1_error)

#line 90 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 90 "pyLinAlg.pyx"
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 90, __pyx_L1_error)

#line 90 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 90 "pyLinAlg.pyx"
    (__pyx_v__b[__pyx_v_i]) = __pyx_t_5;

    /* "pyLinAlg.pyx":91
 *                 _a[i][j] = a[i][j]
 *             _b[i] = b[i]
 *             _c[i] = c[i]             # <<<<<<<<<<<<<<
 *         self.c_linAlg.matVec(_a,_b,_c)
 *         for i in range(3):
 */

#line 91 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 91 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 91 "pyLinAlg.pyx"
      __PYX_ERR(8, 91, __pyx_L1_error)

#line 91 "pyLinAlg.pyx"
    }

#line 91 "pyLinAlg.pyx"
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 91, __pyx_L1_error)

#line 91 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 91 "pyLinAlg.pyx"
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 91, __pyx_L1_error)

#line 91 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 91 "pyLinAlg.pyx"
    (__pyx_v__c[__pyx_v_i]) = __pyx_t_5;

#line 91 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":92
 *             _b[i] = b[i]
 *             _c[i] = c[i]
 *         self.c_linAlg.matVec(_a,_b,_c)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             for j in range(3):
 */

#line 92 "pyLinAlg.pyx"
  __pyx_v_self->c_linAlg->matVec(__pyx_v__a, __pyx_v__b, __pyx_v__c);

  /* "pyLinAlg.pyx":93
 *             _c[i] = c[i]
 *         self.c_linAlg.matVec(_a,_b,_c)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 a[i][j] = _a[i][j]
 */

#line 93 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 93 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":94
 *         self.c_linAlg.matVec(_a,_b,_c)
 *         for i in range(3):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 a[i][j] = _a[i][j]
 *             b[i] = _b[i]
 */

#line 94 "pyLinAlg.pyx"
    for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {

#line 94 "pyLinAlg.pyx"
      __pyx_v_j = __pyx_t_2;

      /* "pyLinAlg.pyx":95
 *         for i in range(3):
 *             for j in range(3):
 *                 a[i][j] = _a[i][j]             # <<<<<<<<<<<<<<
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 */

#line 95 "pyLinAlg.pyx"
      __pyx_t_4 = PyFloat_FromDouble(((__pyx_v__a[__pyx_v_i])[__pyx_v_j])); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 95, __pyx_L1_error)

#line 95 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 95 "pyLinAlg.pyx"
      if (unlikely(__pyx_v_a == Py_None)) {

#line 95 "pyLinAlg.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 95 "pyLinAlg.pyx"
        __PYX_ERR(8, 95, __pyx_L1_error)

#line 95 "pyLinAlg.pyx"
      }

#line 95 "pyLinAlg.pyx"
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 95, __pyx_L1_error)

#line 95 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 95 "pyLinAlg.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_j, __pyx_t_4, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(8, 95, __pyx_L1_error)

#line 95 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 95 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 95 "pyLinAlg.pyx"
    }

    /* "pyLinAlg.pyx":96
 *             for j in range(3):
 *                 a[i][j] = _a[i][j]
 *             b[i] = _b[i]             # <<<<<<<<<<<<<<
 *             c[i] = _c[i]
 *     def norm(self, list a):
 */

#line 96 "pyLinAlg.pyx"
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v__b[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 96, __pyx_L1_error)

#line 96 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 96 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 96 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 96 "pyLinAlg.pyx"
      __PYX_ERR(8, 96, __pyx_L1_error)

#line 96 "pyLinAlg.pyx"
    }

#line 96 "pyLinAlg.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_b, __pyx_v_i, __pyx_t_4, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(8, 96, __pyx_L1_error)

#line 96 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyLinAlg.pyx":97
 *                 a[i][j] = _a[i][j]
 *             b[i] = _b[i]
 *             c[i] = _c[i]             # <<<<<<<<<<<<<<
 *     def norm(self, list a):
 *         cdef vector[double] _a
 */

#line 97 "pyLinAlg.pyx"
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v__c[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 97, __pyx_L1_error)

#line 97 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 97 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 97 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 97 "pyLinAlg.pyx"
      __PYX_ERR(8, 97, __pyx_L1_error)

#line 97 "pyLinAlg.pyx"
    }

#line 97 "pyLinAlg.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_c, __pyx_v_i, __pyx_t_4, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(8, 97, __pyx_L1_error)

#line 97 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 97 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":79
 *                 b[i][j] = _b[i][j]
 *                 c[i][j] = _c[i][j]
 *     def matVec(self, list a, list b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] _a
 *         cdef vector[double] _b
 */

#line 79 "pyLinAlg.pyx"


#line 79 "pyLinAlg.pyx"
  /* function exit code */

#line 79 "pyLinAlg.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 79 "pyLinAlg.pyx"
  goto __pyx_L0;

#line 79 "pyLinAlg.pyx"
  __pyx_L1_error:;

#line 79 "pyLinAlg.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 79 "pyLinAlg.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 79 "pyLinAlg.pyx"
  __Pyx_AddTraceback("iscecore.pyLinAlg.matVec", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 79 "pyLinAlg.pyx"
  __pyx_r = NULL;

#line 79 "pyLinAlg.pyx"
  __pyx_L0:;

#line 79 "pyLinAlg.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 79 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 79 "pyLinAlg.pyx"
  return __pyx_r;

#line 79 "pyLinAlg.pyx"
}

/* "pyLinAlg.pyx":98
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 *     def norm(self, list a):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         for i in range(3):
 */

#line 98 "pyLinAlg.pyx"


#line 98 "pyLinAlg.pyx"
/* Python wrapper */

#line 98 "pyLinAlg.pyx"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_15norm(PyObject *__pyx_v_self, PyObject *__pyx_v_a); /*proto*/

#line 98 "pyLinAlg.pyx"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_15norm(PyObject *__pyx_v_self, PyObject *__pyx_v_a) {

#line 98 "pyLinAlg.pyx"
  PyObject *__pyx_r = 0;

#line 98 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 98 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("norm (wrapper)", 0);

#line 98 "pyLinAlg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), (&PyList_Type), 1, "a", 1))) __PYX_ERR(8, 98, __pyx_L1_error)
  __pyx_r = 
#line 98 "pyLinAlg.pyx"
__pyx_pf_8iscecore_8pyLinAlg_14norm(((struct __pyx_obj_8iscecore_pyLinAlg *)__pyx_v_self), ((PyObject*)__pyx_v_a));

#line 98 "pyLinAlg.pyx"


#line 98 "pyLinAlg.pyx"
  /* function exit code */

#line 98 "pyLinAlg.pyx"
  goto __pyx_L0;

#line 98 "pyLinAlg.pyx"
  __pyx_L1_error:;

#line 98 "pyLinAlg.pyx"
  __pyx_r = NULL;

#line 98 "pyLinAlg.pyx"
  __pyx_L0:;

#line 98 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 98 "pyLinAlg.pyx"
  return __pyx_r;

#line 98 "pyLinAlg.pyx"
}

#line 98 "pyLinAlg.pyx"


#line 98 "pyLinAlg.pyx"
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_14norm(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, PyObject *__pyx_v_a) {
  std::vector<double>  __pyx_v__a
#line 98 "pyLinAlg.pyx"
;
  long __pyx_v_i
#line 98 "pyLinAlg.pyx"
;

#line 98 "pyLinAlg.pyx"
  PyObject *__pyx_r = NULL;

#line 98 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 98 "pyLinAlg.pyx"
  long __pyx_t_1;

#line 98 "pyLinAlg.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 98 "pyLinAlg.pyx"
  double __pyx_t_3;

#line 98 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("norm", 0);

  /* "pyLinAlg.pyx":100
 *     def norm(self, list a):
 *         cdef vector[double] _a
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _a.push_back(a[i])
 *         return self.c_linAlg.norm(_a)
 */

#line 100 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 100 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":101
 *         cdef vector[double] _a
 *         for i in range(3):
 *             _a.push_back(a[i])             # <<<<<<<<<<<<<<
 *         return self.c_linAlg.norm(_a)
 *     def tranMat(self, list a, list b):
 */

#line 101 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_a == Py_None)) {

#line 101 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 101 "pyLinAlg.pyx"
      __PYX_ERR(8, 101, __pyx_L1_error)

#line 101 "pyLinAlg.pyx"
    }

#line 101 "pyLinAlg.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 101, __pyx_L1_error)

#line 101 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 101 "pyLinAlg.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 101, __pyx_L1_error)

#line 101 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 101 "pyLinAlg.pyx"
    try {

#line 101 "pyLinAlg.pyx"
      __pyx_v__a.push_back(__pyx_t_3);

#line 101 "pyLinAlg.pyx"
    } catch(...) {

#line 101 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 101 "pyLinAlg.pyx"
      __PYX_ERR(8, 101, __pyx_L1_error)

#line 101 "pyLinAlg.pyx"
    }

#line 101 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":102
 *         for i in range(3):
 *             _a.push_back(a[i])
 *         return self.c_linAlg.norm(_a)             # <<<<<<<<<<<<<<
 *     def tranMat(self, list a, list b):
 *         cdef vector[vector[double]] _a
 */

#line 102 "pyLinAlg.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 102 "pyLinAlg.pyx"
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->c_linAlg->norm(__pyx_v__a)); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 102, __pyx_L1_error)

#line 102 "pyLinAlg.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 102 "pyLinAlg.pyx"
  __pyx_r = __pyx_t_2;

#line 102 "pyLinAlg.pyx"
  __pyx_t_2 = 0;

#line 102 "pyLinAlg.pyx"
  goto __pyx_L0;

  /* "pyLinAlg.pyx":98
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 *     def norm(self, list a):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         for i in range(3):
 */

#line 98 "pyLinAlg.pyx"


#line 98 "pyLinAlg.pyx"
  /* function exit code */

#line 98 "pyLinAlg.pyx"
  __pyx_L1_error:;

#line 98 "pyLinAlg.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 98 "pyLinAlg.pyx"
  __Pyx_AddTraceback("iscecore.pyLinAlg.norm", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 98 "pyLinAlg.pyx"
  __pyx_r = NULL;

#line 98 "pyLinAlg.pyx"
  __pyx_L0:;

#line 98 "pyLinAlg.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 98 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 98 "pyLinAlg.pyx"
  return __pyx_r;

#line 98 "pyLinAlg.pyx"
}

/* "pyLinAlg.pyx":103
 *             _a.push_back(a[i])
 *         return self.c_linAlg.norm(_a)
 *     def tranMat(self, list a, list b):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] _a
 *         cdef vector[vector[double]] _b
 */

#line 103 "pyLinAlg.pyx"


#line 103 "pyLinAlg.pyx"
/* Python wrapper */

#line 103 "pyLinAlg.pyx"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_17tranMat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 103 "pyLinAlg.pyx"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_17tranMat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0
#line 103 "pyLinAlg.pyx"
;
  PyObject *__pyx_v_b = 0
#line 103 "pyLinAlg.pyx"
;

#line 103 "pyLinAlg.pyx"
  PyObject *__pyx_r = 0;

#line 103 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 103 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("tranMat (wrapper)", 0);

#line 103 "pyLinAlg.pyx"
  {

#line 103 "pyLinAlg.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};

#line 103 "pyLinAlg.pyx"
    PyObject* values[2] = {0,0};

#line 103 "pyLinAlg.pyx"
    if (unlikely(__pyx_kwds)) {

#line 103 "pyLinAlg.pyx"
      Py_ssize_t kw_args;

#line 103 "pyLinAlg.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 103 "pyLinAlg.pyx"
      switch (pos_args) {
        case  2: 
#line 103 "pyLinAlg.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 103 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 103 "pyLinAlg.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 103 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 103 "pyLinAlg.pyx"
        case  0: break;
        default: 
#line 103 "pyLinAlg.pyx"
goto __pyx_L5_argtuple_error;

#line 103 "pyLinAlg.pyx"
      }

#line 103 "pyLinAlg.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 103 "pyLinAlg.pyx"
      switch (pos_args) {

#line 103 "pyLinAlg.pyx"
        case  0:

#line 103 "pyLinAlg.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 103 "pyLinAlg.pyx"
goto __pyx_L5_argtuple_error;

#line 103 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 103 "pyLinAlg.pyx"
        case  1:

#line 103 "pyLinAlg.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 103 "pyLinAlg.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("tranMat", 1, 2, 2, 1); 
#line 103 "pyLinAlg.pyx"
__PYX_ERR(8, 103, __pyx_L3_error)

#line 103 "pyLinAlg.pyx"
        }

#line 103 "pyLinAlg.pyx"
      }

#line 103 "pyLinAlg.pyx"
      if (unlikely(kw_args > 0)) {

#line 103 "pyLinAlg.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "tranMat") < 0)) __PYX_ERR(8, 103, __pyx_L3_error)

#line 103 "pyLinAlg.pyx"
      }

#line 103 "pyLinAlg.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 103 "pyLinAlg.pyx"
      goto __pyx_L5_argtuple_error;

#line 103 "pyLinAlg.pyx"
    } else {

#line 103 "pyLinAlg.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 103 "pyLinAlg.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 103 "pyLinAlg.pyx"
    }

#line 103 "pyLinAlg.pyx"
    __pyx_v_a = ((PyObject*)values[0]);

#line 103 "pyLinAlg.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 103 "pyLinAlg.pyx"
  }

#line 103 "pyLinAlg.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 103 "pyLinAlg.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tranMat", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 103 "pyLinAlg.pyx"
__PYX_ERR(8, 103, __pyx_L3_error)

#line 103 "pyLinAlg.pyx"
  __pyx_L3_error:;

#line 103 "pyLinAlg.pyx"
  __Pyx_AddTraceback("iscecore.pyLinAlg.tranMat", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 103 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 103 "pyLinAlg.pyx"
  return NULL;

#line 103 "pyLinAlg.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 103 "pyLinAlg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), (&PyList_Type), 1, "a", 1))) __PYX_ERR(8, 103, __pyx_L1_error)

#line 103 "pyLinAlg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(8, 103, __pyx_L1_error)
  __pyx_r = 
#line 103 "pyLinAlg.pyx"
__pyx_pf_8iscecore_8pyLinAlg_16tranMat(((struct __pyx_obj_8iscecore_pyLinAlg *)__pyx_v_self), __pyx_v_a, __pyx_v_b);

#line 103 "pyLinAlg.pyx"


#line 103 "pyLinAlg.pyx"
  /* function exit code */

#line 103 "pyLinAlg.pyx"
  goto __pyx_L0;

#line 103 "pyLinAlg.pyx"
  __pyx_L1_error:;

#line 103 "pyLinAlg.pyx"
  __pyx_r = NULL;

#line 103 "pyLinAlg.pyx"
  __pyx_L0:;

#line 103 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 103 "pyLinAlg.pyx"
  return __pyx_r;

#line 103 "pyLinAlg.pyx"
}

#line 103 "pyLinAlg.pyx"


#line 103 "pyLinAlg.pyx"
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_16tranMat(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  std::vector<std::vector<double> >  __pyx_v__a
#line 103 "pyLinAlg.pyx"
;
  std::vector<std::vector<double> >  __pyx_v__b
#line 103 "pyLinAlg.pyx"
;
  std::vector<double>  __pyx_v_tmp
#line 103 "pyLinAlg.pyx"
;
  long __pyx_v_i
#line 103 "pyLinAlg.pyx"
;
  long __pyx_v_j
#line 103 "pyLinAlg.pyx"
;

#line 103 "pyLinAlg.pyx"
  PyObject *__pyx_r = NULL;

#line 103 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 103 "pyLinAlg.pyx"
  long __pyx_t_1;

#line 103 "pyLinAlg.pyx"
  long __pyx_t_2;

#line 103 "pyLinAlg.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 103 "pyLinAlg.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 103 "pyLinAlg.pyx"
  double __pyx_t_5;

#line 103 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("tranMat", 0);

  /* "pyLinAlg.pyx":107
 *         cdef vector[vector[double]] _b
 *         cdef vector[double] tmp
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             tmp.push_back(0.)
 *         for i in range(3):
 */

#line 107 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 107 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":108
 *         cdef vector[double] tmp
 *         for i in range(3):
 *             tmp.push_back(0.)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             _a.push_back(tmp)
 */

#line 108 "pyLinAlg.pyx"
    try {

#line 108 "pyLinAlg.pyx"
      __pyx_v_tmp.push_back(0.);

#line 108 "pyLinAlg.pyx"
    } catch(...) {

#line 108 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 108 "pyLinAlg.pyx"
      __PYX_ERR(8, 108, __pyx_L1_error)

#line 108 "pyLinAlg.pyx"
    }

#line 108 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":109
 *         for i in range(3):
 *             tmp.push_back(0.)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _a.push_back(tmp)
 *             _b.push_back(tmp)
 */

#line 109 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 109 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":110
 *             tmp.push_back(0.)
 *         for i in range(3):
 *             _a.push_back(tmp)             # <<<<<<<<<<<<<<
 *             _b.push_back(tmp)
 *         for i in range(3):
 */

#line 110 "pyLinAlg.pyx"
    try {

#line 110 "pyLinAlg.pyx"
      __pyx_v__a.push_back(__pyx_v_tmp);

#line 110 "pyLinAlg.pyx"
    } catch(...) {

#line 110 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 110 "pyLinAlg.pyx"
      __PYX_ERR(8, 110, __pyx_L1_error)

#line 110 "pyLinAlg.pyx"
    }

    /* "pyLinAlg.pyx":111
 *         for i in range(3):
 *             _a.push_back(tmp)
 *             _b.push_back(tmp)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             for j in range(3):
 */

#line 111 "pyLinAlg.pyx"
    try {

#line 111 "pyLinAlg.pyx"
      __pyx_v__b.push_back(__pyx_v_tmp);

#line 111 "pyLinAlg.pyx"
    } catch(...) {

#line 111 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 111 "pyLinAlg.pyx"
      __PYX_ERR(8, 111, __pyx_L1_error)

#line 111 "pyLinAlg.pyx"
    }

#line 111 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":112
 *             _a.push_back(tmp)
 *             _b.push_back(tmp)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 _a[i][j] = a[i][j]
 */

#line 112 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 112 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":113
 *             _b.push_back(tmp)
 *         for i in range(3):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 _a[i][j] = a[i][j]
 *                 _b[i][j] = b[i][j]
 */

#line 113 "pyLinAlg.pyx"
    for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {

#line 113 "pyLinAlg.pyx"
      __pyx_v_j = __pyx_t_2;

      /* "pyLinAlg.pyx":114
 *         for i in range(3):
 *             for j in range(3):
 *                 _a[i][j] = a[i][j]             # <<<<<<<<<<<<<<
 *                 _b[i][j] = b[i][j]
 *         self.c_linAlg.tranMat(_a,_b)
 */

#line 114 "pyLinAlg.pyx"
      if (unlikely(__pyx_v_a == Py_None)) {

#line 114 "pyLinAlg.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 114 "pyLinAlg.pyx"
        __PYX_ERR(8, 114, __pyx_L1_error)

#line 114 "pyLinAlg.pyx"
      }

#line 114 "pyLinAlg.pyx"
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 114, __pyx_L1_error)

#line 114 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 114 "pyLinAlg.pyx"
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_j, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 114, __pyx_L1_error)

#line 114 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 114 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 114 "pyLinAlg.pyx"
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 114, __pyx_L1_error)

#line 114 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 114 "pyLinAlg.pyx"
      ((__pyx_v__a[__pyx_v_i])[__pyx_v_j]) = __pyx_t_5;

      /* "pyLinAlg.pyx":115
 *             for j in range(3):
 *                 _a[i][j] = a[i][j]
 *                 _b[i][j] = b[i][j]             # <<<<<<<<<<<<<<
 *         self.c_linAlg.tranMat(_a,_b)
 *         for i in range(3):
 */

#line 115 "pyLinAlg.pyx"
      if (unlikely(__pyx_v_b == Py_None)) {

#line 115 "pyLinAlg.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 115 "pyLinAlg.pyx"
        __PYX_ERR(8, 115, __pyx_L1_error)

#line 115 "pyLinAlg.pyx"
      }

#line 115 "pyLinAlg.pyx"
      __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 115, __pyx_L1_error)

#line 115 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 115 "pyLinAlg.pyx"
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_j, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 115, __pyx_L1_error)

#line 115 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 115 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 115 "pyLinAlg.pyx"
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 115, __pyx_L1_error)

#line 115 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 115 "pyLinAlg.pyx"
      ((__pyx_v__b[__pyx_v_i])[__pyx_v_j]) = __pyx_t_5;

#line 115 "pyLinAlg.pyx"
    }

#line 115 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":116
 *                 _a[i][j] = a[i][j]
 *                 _b[i][j] = b[i][j]
 *         self.c_linAlg.tranMat(_a,_b)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             for j in range(3):
 */

#line 116 "pyLinAlg.pyx"
  __pyx_v_self->c_linAlg->tranMat(__pyx_v__a, __pyx_v__b);

  /* "pyLinAlg.pyx":117
 *                 _b[i][j] = b[i][j]
 *         self.c_linAlg.tranMat(_a,_b)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 a[i][j] = _a[i][j]
 */

#line 117 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 117 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":118
 *         self.c_linAlg.tranMat(_a,_b)
 *         for i in range(3):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 a[i][j] = _a[i][j]
 *                 b[i][j] = _b[i][j]
 */

#line 118 "pyLinAlg.pyx"
    for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {

#line 118 "pyLinAlg.pyx"
      __pyx_v_j = __pyx_t_2;

      /* "pyLinAlg.pyx":119
 *         for i in range(3):
 *             for j in range(3):
 *                 a[i][j] = _a[i][j]             # <<<<<<<<<<<<<<
 *                 b[i][j] = _b[i][j]
 *     def unitVec(self, list a, list b):
 */

#line 119 "pyLinAlg.pyx"
      __pyx_t_3 = PyFloat_FromDouble(((__pyx_v__a[__pyx_v_i])[__pyx_v_j])); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 119, __pyx_L1_error)

#line 119 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 119 "pyLinAlg.pyx"
      if (unlikely(__pyx_v_a == Py_None)) {

#line 119 "pyLinAlg.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 119 "pyLinAlg.pyx"
        __PYX_ERR(8, 119, __pyx_L1_error)

#line 119 "pyLinAlg.pyx"
      }

#line 119 "pyLinAlg.pyx"
      __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 119, __pyx_L1_error)

#line 119 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 119 "pyLinAlg.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_t_4, __pyx_v_j, __pyx_t_3, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(8, 119, __pyx_L1_error)

#line 119 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 119 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyLinAlg.pyx":120
 *             for j in range(3):
 *                 a[i][j] = _a[i][j]
 *                 b[i][j] = _b[i][j]             # <<<<<<<<<<<<<<
 *     def unitVec(self, list a, list b):
 *         cdef vector[double] _a
 */

#line 120 "pyLinAlg.pyx"
      __pyx_t_3 = PyFloat_FromDouble(((__pyx_v__b[__pyx_v_i])[__pyx_v_j])); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 120, __pyx_L1_error)

#line 120 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 120 "pyLinAlg.pyx"
      if (unlikely(__pyx_v_b == Py_None)) {

#line 120 "pyLinAlg.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 120 "pyLinAlg.pyx"
        __PYX_ERR(8, 120, __pyx_L1_error)

#line 120 "pyLinAlg.pyx"
      }

#line 120 "pyLinAlg.pyx"
      __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 120, __pyx_L1_error)

#line 120 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 120 "pyLinAlg.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_t_4, __pyx_v_j, __pyx_t_3, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(8, 120, __pyx_L1_error)

#line 120 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 120 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 120 "pyLinAlg.pyx"
    }

#line 120 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":103
 *             _a.push_back(a[i])
 *         return self.c_linAlg.norm(_a)
 *     def tranMat(self, list a, list b):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] _a
 *         cdef vector[vector[double]] _b
 */

#line 103 "pyLinAlg.pyx"


#line 103 "pyLinAlg.pyx"
  /* function exit code */

#line 103 "pyLinAlg.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 103 "pyLinAlg.pyx"
  goto __pyx_L0;

#line 103 "pyLinAlg.pyx"
  __pyx_L1_error:;

#line 103 "pyLinAlg.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 103 "pyLinAlg.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 103 "pyLinAlg.pyx"
  __Pyx_AddTraceback("iscecore.pyLinAlg.tranMat", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 103 "pyLinAlg.pyx"
  __pyx_r = NULL;

#line 103 "pyLinAlg.pyx"
  __pyx_L0:;

#line 103 "pyLinAlg.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 103 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 103 "pyLinAlg.pyx"
  return __pyx_r;

#line 103 "pyLinAlg.pyx"
}

/* "pyLinAlg.pyx":121
 *                 a[i][j] = _a[i][j]
 *                 b[i][j] = _b[i][j]
 *     def unitVec(self, list a, list b):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 121 "pyLinAlg.pyx"


#line 121 "pyLinAlg.pyx"
/* Python wrapper */

#line 121 "pyLinAlg.pyx"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_19unitVec(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 121 "pyLinAlg.pyx"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_19unitVec(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0
#line 121 "pyLinAlg.pyx"
;
  PyObject *__pyx_v_b = 0
#line 121 "pyLinAlg.pyx"
;

#line 121 "pyLinAlg.pyx"
  PyObject *__pyx_r = 0;

#line 121 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 121 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("unitVec (wrapper)", 0);

#line 121 "pyLinAlg.pyx"
  {

#line 121 "pyLinAlg.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};

#line 121 "pyLinAlg.pyx"
    PyObject* values[2] = {0,0};

#line 121 "pyLinAlg.pyx"
    if (unlikely(__pyx_kwds)) {

#line 121 "pyLinAlg.pyx"
      Py_ssize_t kw_args;

#line 121 "pyLinAlg.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 121 "pyLinAlg.pyx"
      switch (pos_args) {
        case  2: 
#line 121 "pyLinAlg.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 121 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 121 "pyLinAlg.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 121 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 121 "pyLinAlg.pyx"
        case  0: break;
        default: 
#line 121 "pyLinAlg.pyx"
goto __pyx_L5_argtuple_error;

#line 121 "pyLinAlg.pyx"
      }

#line 121 "pyLinAlg.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 121 "pyLinAlg.pyx"
      switch (pos_args) {

#line 121 "pyLinAlg.pyx"
        case  0:

#line 121 "pyLinAlg.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 121 "pyLinAlg.pyx"
goto __pyx_L5_argtuple_error;

#line 121 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 121 "pyLinAlg.pyx"
        case  1:

#line 121 "pyLinAlg.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 121 "pyLinAlg.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("unitVec", 1, 2, 2, 1); 
#line 121 "pyLinAlg.pyx"
__PYX_ERR(8, 121, __pyx_L3_error)

#line 121 "pyLinAlg.pyx"
        }

#line 121 "pyLinAlg.pyx"
      }

#line 121 "pyLinAlg.pyx"
      if (unlikely(kw_args > 0)) {

#line 121 "pyLinAlg.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "unitVec") < 0)) __PYX_ERR(8, 121, __pyx_L3_error)

#line 121 "pyLinAlg.pyx"
      }

#line 121 "pyLinAlg.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 121 "pyLinAlg.pyx"
      goto __pyx_L5_argtuple_error;

#line 121 "pyLinAlg.pyx"
    } else {

#line 121 "pyLinAlg.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 121 "pyLinAlg.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 121 "pyLinAlg.pyx"
    }

#line 121 "pyLinAlg.pyx"
    __pyx_v_a = ((PyObject*)values[0]);

#line 121 "pyLinAlg.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 121 "pyLinAlg.pyx"
  }

#line 121 "pyLinAlg.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 121 "pyLinAlg.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("unitVec", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 121 "pyLinAlg.pyx"
__PYX_ERR(8, 121, __pyx_L3_error)

#line 121 "pyLinAlg.pyx"
  __pyx_L3_error:;

#line 121 "pyLinAlg.pyx"
  __Pyx_AddTraceback("iscecore.pyLinAlg.unitVec", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 121 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 121 "pyLinAlg.pyx"
  return NULL;

#line 121 "pyLinAlg.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 121 "pyLinAlg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), (&PyList_Type), 1, "a", 1))) __PYX_ERR(8, 121, __pyx_L1_error)

#line 121 "pyLinAlg.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(8, 121, __pyx_L1_error)
  __pyx_r = 
#line 121 "pyLinAlg.pyx"
__pyx_pf_8iscecore_8pyLinAlg_18unitVec(((struct __pyx_obj_8iscecore_pyLinAlg *)__pyx_v_self), __pyx_v_a, __pyx_v_b);

#line 121 "pyLinAlg.pyx"


#line 121 "pyLinAlg.pyx"
  /* function exit code */

#line 121 "pyLinAlg.pyx"
  goto __pyx_L0;

#line 121 "pyLinAlg.pyx"
  __pyx_L1_error:;

#line 121 "pyLinAlg.pyx"
  __pyx_r = NULL;

#line 121 "pyLinAlg.pyx"
  __pyx_L0:;

#line 121 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 121 "pyLinAlg.pyx"
  return __pyx_r;

#line 121 "pyLinAlg.pyx"
}

#line 121 "pyLinAlg.pyx"


#line 121 "pyLinAlg.pyx"
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_18unitVec(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  std::vector<double>  __pyx_v__a
#line 121 "pyLinAlg.pyx"
;
  std::vector<double>  __pyx_v__b
#line 121 "pyLinAlg.pyx"
;
  long __pyx_v_i
#line 121 "pyLinAlg.pyx"
;

#line 121 "pyLinAlg.pyx"
  PyObject *__pyx_r = NULL;

#line 121 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 121 "pyLinAlg.pyx"
  long __pyx_t_1;

#line 121 "pyLinAlg.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 121 "pyLinAlg.pyx"
  double __pyx_t_3;

#line 121 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("unitVec", 0);

  /* "pyLinAlg.pyx":124
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])
 */

#line 124 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 124 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":125
 *         cdef vector[double] _b
 *         for i in range(3):
 *             _a.push_back(a[i])             # <<<<<<<<<<<<<<
 *             _b.push_back(b[i])
 *         self.c_linAlg.unitVec(_a,_b)
 */

#line 125 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_a == Py_None)) {

#line 125 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 125 "pyLinAlg.pyx"
      __PYX_ERR(8, 125, __pyx_L1_error)

#line 125 "pyLinAlg.pyx"
    }

#line 125 "pyLinAlg.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_a, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 125, __pyx_L1_error)

#line 125 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 125 "pyLinAlg.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 125, __pyx_L1_error)

#line 125 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 125 "pyLinAlg.pyx"
    try {

#line 125 "pyLinAlg.pyx"
      __pyx_v__a.push_back(__pyx_t_3);

#line 125 "pyLinAlg.pyx"
    } catch(...) {

#line 125 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 125 "pyLinAlg.pyx"
      __PYX_ERR(8, 125, __pyx_L1_error)

#line 125 "pyLinAlg.pyx"
    }

    /* "pyLinAlg.pyx":126
 *         for i in range(3):
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])             # <<<<<<<<<<<<<<
 *         self.c_linAlg.unitVec(_a,_b)
 *         for i in range(3):
 */

#line 126 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 126 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 126 "pyLinAlg.pyx"
      __PYX_ERR(8, 126, __pyx_L1_error)

#line 126 "pyLinAlg.pyx"
    }

#line 126 "pyLinAlg.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 126, __pyx_L1_error)

#line 126 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 126 "pyLinAlg.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 126, __pyx_L1_error)

#line 126 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 126 "pyLinAlg.pyx"
    try {

#line 126 "pyLinAlg.pyx"
      __pyx_v__b.push_back(__pyx_t_3);

#line 126 "pyLinAlg.pyx"
    } catch(...) {

#line 126 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 126 "pyLinAlg.pyx"
      __PYX_ERR(8, 126, __pyx_L1_error)

#line 126 "pyLinAlg.pyx"
    }

#line 126 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":127
 *             _a.push_back(a[i])
 *             _b.push_back(b[i])
 *         self.c_linAlg.unitVec(_a,_b)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             a[i] = _a[i]
 */

#line 127 "pyLinAlg.pyx"
  __pyx_v_self->c_linAlg->unitVec(__pyx_v__a, __pyx_v__b);

  /* "pyLinAlg.pyx":128
 *             _b.push_back(b[i])
 *         self.c_linAlg.unitVec(_a,_b)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             a[i] = _a[i]
 *             b[i] = _b[i]
 */

#line 128 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 128 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":129
 *         self.c_linAlg.unitVec(_a,_b)
 *         for i in range(3):
 *             a[i] = _a[i]             # <<<<<<<<<<<<<<
 *             b[i] = _b[i]
 *     def enuBasis(self, double a, double b, c):
 */

#line 129 "pyLinAlg.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__a[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 129, __pyx_L1_error)

#line 129 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 129 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_a == Py_None)) {

#line 129 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 129 "pyLinAlg.pyx"
      __PYX_ERR(8, 129, __pyx_L1_error)

#line 129 "pyLinAlg.pyx"
    }

#line 129 "pyLinAlg.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_a, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(8, 129, __pyx_L1_error)

#line 129 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyLinAlg.pyx":130
 *         for i in range(3):
 *             a[i] = _a[i]
 *             b[i] = _b[i]             # <<<<<<<<<<<<<<
 *     def enuBasis(self, double a, double b, c):
 *         cdef vector[vector[double]] _c
 */

#line 130 "pyLinAlg.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__b[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 130, __pyx_L1_error)

#line 130 "pyLinAlg.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 130 "pyLinAlg.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 130 "pyLinAlg.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 130 "pyLinAlg.pyx"
      __PYX_ERR(8, 130, __pyx_L1_error)

#line 130 "pyLinAlg.pyx"
    }

#line 130 "pyLinAlg.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_b, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(8, 130, __pyx_L1_error)

#line 130 "pyLinAlg.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 130 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":121
 *                 a[i][j] = _a[i][j]
 *                 b[i][j] = _b[i][j]
 *     def unitVec(self, list a, list b):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _a
 *         cdef vector[double] _b
 */

#line 121 "pyLinAlg.pyx"


#line 121 "pyLinAlg.pyx"
  /* function exit code */

#line 121 "pyLinAlg.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 121 "pyLinAlg.pyx"
  goto __pyx_L0;

#line 121 "pyLinAlg.pyx"
  __pyx_L1_error:;

#line 121 "pyLinAlg.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 121 "pyLinAlg.pyx"
  __Pyx_AddTraceback("iscecore.pyLinAlg.unitVec", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 121 "pyLinAlg.pyx"
  __pyx_r = NULL;

#line 121 "pyLinAlg.pyx"
  __pyx_L0:;

#line 121 "pyLinAlg.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 121 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 121 "pyLinAlg.pyx"
  return __pyx_r;

#line 121 "pyLinAlg.pyx"
}

/* "pyLinAlg.pyx":131
 *             a[i] = _a[i]
 *             b[i] = _b[i]
 *     def enuBasis(self, double a, double b, c):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] _c
 *         cdef vector[double] _temp
 */

#line 131 "pyLinAlg.pyx"


#line 131 "pyLinAlg.pyx"
/* Python wrapper */

#line 131 "pyLinAlg.pyx"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_21enuBasis(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 131 "pyLinAlg.pyx"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_21enuBasis(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a
#line 131 "pyLinAlg.pyx"
;
  double __pyx_v_b
#line 131 "pyLinAlg.pyx"
;
  PyObject *__pyx_v_c = 0
#line 131 "pyLinAlg.pyx"
;

#line 131 "pyLinAlg.pyx"
  PyObject *__pyx_r = 0;

#line 131 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 131 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("enuBasis (wrapper)", 0);

#line 131 "pyLinAlg.pyx"
  {

#line 131 "pyLinAlg.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,0};

#line 131 "pyLinAlg.pyx"
    PyObject* values[3] = {0,0,0};

#line 131 "pyLinAlg.pyx"
    if (unlikely(__pyx_kwds)) {

#line 131 "pyLinAlg.pyx"
      Py_ssize_t kw_args;

#line 131 "pyLinAlg.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 131 "pyLinAlg.pyx"
      switch (pos_args) {
        case  3: 
#line 131 "pyLinAlg.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 131 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 131 "pyLinAlg.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 131 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 131 "pyLinAlg.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 131 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 131 "pyLinAlg.pyx"
        case  0: break;
        default: 
#line 131 "pyLinAlg.pyx"
goto __pyx_L5_argtuple_error;

#line 131 "pyLinAlg.pyx"
      }

#line 131 "pyLinAlg.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 131 "pyLinAlg.pyx"
      switch (pos_args) {

#line 131 "pyLinAlg.pyx"
        case  0:

#line 131 "pyLinAlg.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 131 "pyLinAlg.pyx"
goto __pyx_L5_argtuple_error;

#line 131 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 131 "pyLinAlg.pyx"
        case  1:

#line 131 "pyLinAlg.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 131 "pyLinAlg.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("enuBasis", 1, 3, 3, 1); 
#line 131 "pyLinAlg.pyx"
__PYX_ERR(8, 131, __pyx_L3_error)

#line 131 "pyLinAlg.pyx"
        }

#line 131 "pyLinAlg.pyx"
        CYTHON_FALLTHROUGH;

#line 131 "pyLinAlg.pyx"
        case  2:

#line 131 "pyLinAlg.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 131 "pyLinAlg.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("enuBasis", 1, 3, 3, 2); 
#line 131 "pyLinAlg.pyx"
__PYX_ERR(8, 131, __pyx_L3_error)

#line 131 "pyLinAlg.pyx"
        }

#line 131 "pyLinAlg.pyx"
      }

#line 131 "pyLinAlg.pyx"
      if (unlikely(kw_args > 0)) {

#line 131 "pyLinAlg.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "enuBasis") < 0)) __PYX_ERR(8, 131, __pyx_L3_error)

#line 131 "pyLinAlg.pyx"
      }

#line 131 "pyLinAlg.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 131 "pyLinAlg.pyx"
      goto __pyx_L5_argtuple_error;

#line 131 "pyLinAlg.pyx"
    } else {

#line 131 "pyLinAlg.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 131 "pyLinAlg.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 131 "pyLinAlg.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 131 "pyLinAlg.pyx"
    }

#line 131 "pyLinAlg.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 131, __pyx_L3_error)

#line 131 "pyLinAlg.pyx"
    __pyx_v_b = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 131, __pyx_L3_error)

#line 131 "pyLinAlg.pyx"
    __pyx_v_c = values[2];

#line 131 "pyLinAlg.pyx"
  }

#line 131 "pyLinAlg.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 131 "pyLinAlg.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("enuBasis", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 131 "pyLinAlg.pyx"
__PYX_ERR(8, 131, __pyx_L3_error)

#line 131 "pyLinAlg.pyx"
  __pyx_L3_error:;

#line 131 "pyLinAlg.pyx"
  __Pyx_AddTraceback("iscecore.pyLinAlg.enuBasis", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 131 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 131 "pyLinAlg.pyx"
  return NULL;

#line 131 "pyLinAlg.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 131 "pyLinAlg.pyx"
__pyx_pf_8iscecore_8pyLinAlg_20enuBasis(((struct __pyx_obj_8iscecore_pyLinAlg *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c);

#line 131 "pyLinAlg.pyx"


#line 131 "pyLinAlg.pyx"
  /* function exit code */

#line 131 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 131 "pyLinAlg.pyx"
  return __pyx_r;

#line 131 "pyLinAlg.pyx"
}

#line 131 "pyLinAlg.pyx"


#line 131 "pyLinAlg.pyx"
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_20enuBasis(struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, double __pyx_v_a, double __pyx_v_b, PyObject *__pyx_v_c) {
  std::vector<std::vector<double> >  __pyx_v__c
#line 131 "pyLinAlg.pyx"
;
  std::vector<double>  __pyx_v__temp
#line 131 "pyLinAlg.pyx"
;
  long __pyx_v_i
#line 131 "pyLinAlg.pyx"
;
  long __pyx_v_j
#line 131 "pyLinAlg.pyx"
;

#line 131 "pyLinAlg.pyx"
  PyObject *__pyx_r = NULL;

#line 131 "pyLinAlg.pyx"
  __Pyx_RefNannyDeclarations

#line 131 "pyLinAlg.pyx"
  long __pyx_t_1;

#line 131 "pyLinAlg.pyx"
  long __pyx_t_2;

#line 131 "pyLinAlg.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 131 "pyLinAlg.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 131 "pyLinAlg.pyx"
  __Pyx_RefNannySetupContext("enuBasis", 0);

  /* "pyLinAlg.pyx":134
 *         cdef vector[vector[double]] _c
 *         cdef vector[double] _temp
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _temp.push_back(0)
 *         for i in range(3):
 */

#line 134 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 134 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":135
 *         cdef vector[double] _temp
 *         for i in range(3):
 *             _temp.push_back(0)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             _c.push_back(_temp)
 */

#line 135 "pyLinAlg.pyx"
    try {

#line 135 "pyLinAlg.pyx"
      __pyx_v__temp.push_back(0.0);

#line 135 "pyLinAlg.pyx"
    } catch(...) {

#line 135 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 135 "pyLinAlg.pyx"
      __PYX_ERR(8, 135, __pyx_L1_error)

#line 135 "pyLinAlg.pyx"
    }

#line 135 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":136
 *         for i in range(3):
 *             _temp.push_back(0)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _c.push_back(_temp)
 *         self.c_linAlg.enuBasis(a,b,_c)
 */

#line 136 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 136 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":137
 *             _temp.push_back(0)
 *         for i in range(3):
 *             _c.push_back(_temp)             # <<<<<<<<<<<<<<
 *         self.c_linAlg.enuBasis(a,b,_c)
 *         for i in range(3):
 */

#line 137 "pyLinAlg.pyx"
    try {

#line 137 "pyLinAlg.pyx"
      __pyx_v__c.push_back(__pyx_v__temp);

#line 137 "pyLinAlg.pyx"
    } catch(...) {

#line 137 "pyLinAlg.pyx"
      __Pyx_CppExn2PyErr();

#line 137 "pyLinAlg.pyx"
      __PYX_ERR(8, 137, __pyx_L1_error)

#line 137 "pyLinAlg.pyx"
    }

#line 137 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":138
 *         for i in range(3):
 *             _c.push_back(_temp)
 *         self.c_linAlg.enuBasis(a,b,_c)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             for j in range(3):
 */

#line 138 "pyLinAlg.pyx"
  __pyx_v_self->c_linAlg->enuBasis(__pyx_v_a, __pyx_v_b, __pyx_v__c);

  /* "pyLinAlg.pyx":139
 *             _c.push_back(_temp)
 *         self.c_linAlg.enuBasis(a,b,_c)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 c[i][j] = _c[i][j]
 */

#line 139 "pyLinAlg.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 139 "pyLinAlg.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyLinAlg.pyx":140
 *         self.c_linAlg.enuBasis(a,b,_c)
 *         for i in range(3):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 c[i][j] = _c[i][j]
 * 
 */

#line 140 "pyLinAlg.pyx"
    for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {

#line 140 "pyLinAlg.pyx"
      __pyx_v_j = __pyx_t_2;

      /* "pyLinAlg.pyx":141
 *         for i in range(3):
 *             for j in range(3):
 *                 c[i][j] = _c[i][j]             # <<<<<<<<<<<<<<
 * 
 */

#line 141 "pyLinAlg.pyx"
      __pyx_t_3 = PyFloat_FromDouble(((__pyx_v__c[__pyx_v_i])[__pyx_v_j])); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 141, __pyx_L1_error)

#line 141 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 141 "pyLinAlg.pyx"
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 141, __pyx_L1_error)

#line 141 "pyLinAlg.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 141 "pyLinAlg.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_t_4, __pyx_v_j, __pyx_t_3, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(8, 141, __pyx_L1_error)

#line 141 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 141 "pyLinAlg.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 141 "pyLinAlg.pyx"
    }

#line 141 "pyLinAlg.pyx"
  }

  /* "pyLinAlg.pyx":131
 *             a[i] = _a[i]
 *             b[i] = _b[i]
 *     def enuBasis(self, double a, double b, c):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] _c
 *         cdef vector[double] _temp
 */

#line 131 "pyLinAlg.pyx"


#line 131 "pyLinAlg.pyx"
  /* function exit code */

#line 131 "pyLinAlg.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 131 "pyLinAlg.pyx"
  goto __pyx_L0;

#line 131 "pyLinAlg.pyx"
  __pyx_L1_error:;

#line 131 "pyLinAlg.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 131 "pyLinAlg.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 131 "pyLinAlg.pyx"
  __Pyx_AddTraceback("iscecore.pyLinAlg.enuBasis", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 131 "pyLinAlg.pyx"
  __pyx_r = NULL;

#line 131 "pyLinAlg.pyx"
  __pyx_L0:;

#line 131 "pyLinAlg.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 131 "pyLinAlg.pyx"
  __Pyx_RefNannyFinishContext();

#line 131 "pyLinAlg.pyx"
  return __pyx_r;

#line 131 "pyLinAlg.pyx"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_8iscecore_8pyLinAlg_22__reduce_cython__(((struct __pyx_obj_8iscecore_pyLinAlg *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyLinAlg.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_8pyLinAlg_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf_8iscecore_8pyLinAlg_24__setstate_cython__(((struct __pyx_obj_8iscecore_pyLinAlg *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_8pyLinAlg_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyLinAlg *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyLinAlg.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "pyOrbit.pyx":15
 *     cdef bool __owner
 * 
 *     def __cinit__(self, basis=1, nVectors=0):             # <<<<<<<<<<<<<<
 *         self.c_orbit = new Orbit(basis,nVectors)
 *         self.__owner = True
 */

#line 15 "pyOrbit.pyx"


#line 15 "pyOrbit.pyx"
/* Python wrapper */

#line 15 "pyOrbit.pyx"
static int __pyx_pw_8iscecore_7pyOrbit_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 15 "pyOrbit.pyx"
static int __pyx_pw_8iscecore_7pyOrbit_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_basis = 0
#line 15 "pyOrbit.pyx"
;
  PyObject *__pyx_v_nVectors = 0
#line 15 "pyOrbit.pyx"
;

#line 15 "pyOrbit.pyx"
  int __pyx_r;

#line 15 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 15 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 15 "pyOrbit.pyx"
  {

#line 15 "pyOrbit.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_basis,&__pyx_n_s_nVectors,0};

#line 15 "pyOrbit.pyx"
    PyObject* values[2] = {0,0};

#line 15 "pyOrbit.pyx"
    values[0] = ((PyObject *)__pyx_int_1);

#line 15 "pyOrbit.pyx"
    values[1] = ((PyObject *)__pyx_int_0);

#line 15 "pyOrbit.pyx"
    if (unlikely(__pyx_kwds)) {

#line 15 "pyOrbit.pyx"
      Py_ssize_t kw_args;

#line 15 "pyOrbit.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 15 "pyOrbit.pyx"
      switch (pos_args) {
        case  2: 
#line 15 "pyOrbit.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 15 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 15 "pyOrbit.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 15 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 15 "pyOrbit.pyx"
        case  0: break;
        default: 
#line 15 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 15 "pyOrbit.pyx"
      }

#line 15 "pyOrbit.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 15 "pyOrbit.pyx"
      switch (pos_args) {

#line 15 "pyOrbit.pyx"
        case  0:

#line 15 "pyOrbit.pyx"
        if (kw_args > 0) {

#line 15 "pyOrbit.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_basis);

#line 15 "pyOrbit.pyx"
          if (value) { values[0] = value; kw_args--; }

#line 15 "pyOrbit.pyx"
        }

#line 15 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 15 "pyOrbit.pyx"
        case  1:

#line 15 "pyOrbit.pyx"
        if (kw_args > 0) {

#line 15 "pyOrbit.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nVectors);

#line 15 "pyOrbit.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 15 "pyOrbit.pyx"
        }

#line 15 "pyOrbit.pyx"
      }

#line 15 "pyOrbit.pyx"
      if (unlikely(kw_args > 0)) {

#line 15 "pyOrbit.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(9, 15, __pyx_L3_error)

#line 15 "pyOrbit.pyx"
      }

#line 15 "pyOrbit.pyx"
    } else {

#line 15 "pyOrbit.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: 
#line 15 "pyOrbit.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 15 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 15 "pyOrbit.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 15 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  0: 
#line 15 "pyOrbit.pyx"
break;
        default: 
#line 15 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 15 "pyOrbit.pyx"
      }

#line 15 "pyOrbit.pyx"
    }

#line 15 "pyOrbit.pyx"
    __pyx_v_basis = values[0];

#line 15 "pyOrbit.pyx"
    __pyx_v_nVectors = values[1];

#line 15 "pyOrbit.pyx"
  }

#line 15 "pyOrbit.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 15 "pyOrbit.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 15 "pyOrbit.pyx"
__PYX_ERR(9, 15, __pyx_L3_error)

#line 15 "pyOrbit.pyx"
  __pyx_L3_error:;

#line 15 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 15 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 15 "pyOrbit.pyx"
  return -1;

#line 15 "pyOrbit.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 15 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit___cinit__(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self), __pyx_v_basis, __pyx_v_nVectors);

#line 15 "pyOrbit.pyx"


#line 15 "pyOrbit.pyx"
  /* function exit code */

#line 15 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 15 "pyOrbit.pyx"
  return __pyx_r;

#line 15 "pyOrbit.pyx"
}

#line 15 "pyOrbit.pyx"


#line 15 "pyOrbit.pyx"
static int __pyx_pf_8iscecore_7pyOrbit___cinit__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, PyObject *__pyx_v_basis, PyObject *__pyx_v_nVectors) {

#line 15 "pyOrbit.pyx"
  int __pyx_r;

#line 15 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 15 "pyOrbit.pyx"
  int __pyx_t_1;

#line 15 "pyOrbit.pyx"
  int __pyx_t_2;

#line 15 "pyOrbit.pyx"
  isce::core::Orbit *__pyx_t_3;

#line 15 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyOrbit.pyx":16
 * 
 *     def __cinit__(self, basis=1, nVectors=0):
 *         self.c_orbit = new Orbit(basis,nVectors)             # <<<<<<<<<<<<<<
 *         self.__owner = True
 *     def __dealloc__(self):
 */

#line 16 "pyOrbit.pyx"
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_basis); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 16, __pyx_L1_error)

#line 16 "pyOrbit.pyx"
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_nVectors); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 16, __pyx_L1_error)

#line 16 "pyOrbit.pyx"
  try {

#line 16 "pyOrbit.pyx"
    __pyx_t_3 = new isce::core::Orbit(__pyx_t_1, __pyx_t_2);

#line 16 "pyOrbit.pyx"
  } catch(...) {

#line 16 "pyOrbit.pyx"
    __Pyx_CppExn2PyErr();

#line 16 "pyOrbit.pyx"
    __PYX_ERR(9, 16, __pyx_L1_error)

#line 16 "pyOrbit.pyx"
  }

#line 16 "pyOrbit.pyx"
  __pyx_v_self->c_orbit = __pyx_t_3;

  /* "pyOrbit.pyx":17
 *     def __cinit__(self, basis=1, nVectors=0):
 *         self.c_orbit = new Orbit(basis,nVectors)
 *         self.__owner = True             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.__owner:
 */

#line 17 "pyOrbit.pyx"
  __pyx_v_self->__pyx___owner = 1;

  /* "pyOrbit.pyx":15
 *     cdef bool __owner
 * 
 *     def __cinit__(self, basis=1, nVectors=0):             # <<<<<<<<<<<<<<
 *         self.c_orbit = new Orbit(basis,nVectors)
 *         self.__owner = True
 */

#line 15 "pyOrbit.pyx"


#line 15 "pyOrbit.pyx"
  /* function exit code */

#line 15 "pyOrbit.pyx"
  __pyx_r = 0;

#line 15 "pyOrbit.pyx"
  goto __pyx_L0;

#line 15 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 15 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 15 "pyOrbit.pyx"
  __pyx_r = -1;

#line 15 "pyOrbit.pyx"
  __pyx_L0:;

#line 15 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 15 "pyOrbit.pyx"
  return __pyx_r;

#line 15 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":18
 *         self.c_orbit = new Orbit(basis,nVectors)
 *         self.__owner = True
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_orbit
 */

#line 18 "pyOrbit.pyx"


#line 18 "pyOrbit.pyx"
/* Python wrapper */

#line 18 "pyOrbit.pyx"
static void __pyx_pw_8iscecore_7pyOrbit_3__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 18 "pyOrbit.pyx"
static void __pyx_pw_8iscecore_7pyOrbit_3__dealloc__(PyObject *__pyx_v_self) {

#line 18 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 18 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 18 "pyOrbit.pyx"
  __pyx_pf_8iscecore_7pyOrbit_2__dealloc__(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self));

#line 18 "pyOrbit.pyx"


#line 18 "pyOrbit.pyx"
  /* function exit code */

#line 18 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 18 "pyOrbit.pyx"
}

#line 18 "pyOrbit.pyx"


#line 18 "pyOrbit.pyx"
static void __pyx_pf_8iscecore_7pyOrbit_2__dealloc__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self) {

#line 18 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 18 "pyOrbit.pyx"
  int __pyx_t_1;

#line 18 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyOrbit.pyx":19
 *         self.__owner = True
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_orbit
 *     @staticmethod
 */

#line 19 "pyOrbit.pyx"
  __pyx_t_1 = (__pyx_v_self->__pyx___owner != 0);

#line 19 "pyOrbit.pyx"
  if (__pyx_t_1) {

    /* "pyOrbit.pyx":20
 *     def __dealloc__(self):
 *         if self.__owner:
 *             del self.c_orbit             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     def bind(pyOrbit orb):
 */

#line 20 "pyOrbit.pyx"
    delete __pyx_v_self->c_orbit;

    /* "pyOrbit.pyx":19
 *         self.__owner = True
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_orbit
 *     @staticmethod
 */

#line 19 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":18
 *         self.c_orbit = new Orbit(basis,nVectors)
 *         self.__owner = True
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_orbit
 */

#line 18 "pyOrbit.pyx"


#line 18 "pyOrbit.pyx"
  /* function exit code */

#line 18 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 18 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":22
 *             del self.c_orbit
 *     @staticmethod
 *     def bind(pyOrbit orb):             # <<<<<<<<<<<<<<
 *         new_orb = pyOrbit()
 *         del new_orb.c_orbit
 */

#line 22 "pyOrbit.pyx"


#line 22 "pyOrbit.pyx"
/* Python wrapper */

#line 22 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_5bind(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8iscecore_7pyOrbit_5bind = 
#line 22 "pyOrbit.pyx"
{"bind", (PyCFunction)__pyx_pw_8iscecore_7pyOrbit_5bind, METH_VARARGS|METH_KEYWORDS, 0};

#line 22 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_5bind(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_orb = 0
#line 22 "pyOrbit.pyx"
;

#line 22 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 22 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 22 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("bind (wrapper)", 0);

#line 22 "pyOrbit.pyx"
  {

#line 22 "pyOrbit.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_orb,0};

#line 22 "pyOrbit.pyx"
    PyObject* values[1] = {0};

#line 22 "pyOrbit.pyx"
    if (unlikely(__pyx_kwds)) {

#line 22 "pyOrbit.pyx"
      Py_ssize_t kw_args;

#line 22 "pyOrbit.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 22 "pyOrbit.pyx"
      switch (pos_args) {
        case  1: 
#line 22 "pyOrbit.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 22 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 22 "pyOrbit.pyx"
        case  0: break;
        default: 
#line 22 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 22 "pyOrbit.pyx"
      }

#line 22 "pyOrbit.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 22 "pyOrbit.pyx"
      switch (pos_args) {

#line 22 "pyOrbit.pyx"
        case  0:

#line 22 "pyOrbit.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_orb)) != 0)) kw_args--;
        else 
#line 22 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 22 "pyOrbit.pyx"
      }

#line 22 "pyOrbit.pyx"
      if (unlikely(kw_args > 0)) {

#line 22 "pyOrbit.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "bind") < 0)) __PYX_ERR(9, 22, __pyx_L3_error)

#line 22 "pyOrbit.pyx"
      }

#line 22 "pyOrbit.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {

#line 22 "pyOrbit.pyx"
      goto __pyx_L5_argtuple_error;

#line 22 "pyOrbit.pyx"
    } else {

#line 22 "pyOrbit.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 22 "pyOrbit.pyx"
    }

#line 22 "pyOrbit.pyx"
    __pyx_v_orb = ((struct __pyx_obj_8iscecore_pyOrbit *)values[0]);

#line 22 "pyOrbit.pyx"
  }

#line 22 "pyOrbit.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 22 "pyOrbit.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bind", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 22 "pyOrbit.pyx"
__PYX_ERR(9, 22, __pyx_L3_error)

#line 22 "pyOrbit.pyx"
  __pyx_L3_error:;

#line 22 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.bind", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 22 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 22 "pyOrbit.pyx"
  return NULL;

#line 22 "pyOrbit.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 22 "pyOrbit.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_orb), __pyx_ptype_8iscecore_pyOrbit, 1, "orb", 0))) __PYX_ERR(9, 22, __pyx_L1_error)
  __pyx_r = 
#line 22 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_4bind(__pyx_v_orb);

#line 22 "pyOrbit.pyx"


#line 22 "pyOrbit.pyx"
  /* function exit code */

#line 22 "pyOrbit.pyx"
  goto __pyx_L0;

#line 22 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 22 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 22 "pyOrbit.pyx"
  __pyx_L0:;

#line 22 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 22 "pyOrbit.pyx"
  return __pyx_r;

#line 22 "pyOrbit.pyx"
}

#line 22 "pyOrbit.pyx"


#line 22 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_4bind(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_orb) {
  struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_new_orb = NULL
#line 22 "pyOrbit.pyx"
;

#line 22 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 22 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 22 "pyOrbit.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 22 "pyOrbit.pyx"
  isce::core::Orbit *__pyx_t_2;

#line 22 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("bind", 0);

  /* "pyOrbit.pyx":23
 *     @staticmethod
 *     def bind(pyOrbit orb):
 *         new_orb = pyOrbit()             # <<<<<<<<<<<<<<
 *         del new_orb.c_orbit
 *         new_orb.c_orbit = orb.c_orbit
 */

#line 23 "pyOrbit.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8iscecore_pyOrbit), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 23, __pyx_L1_error)

#line 23 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 23 "pyOrbit.pyx"
  __pyx_v_new_orb = ((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_t_1);

#line 23 "pyOrbit.pyx"
  __pyx_t_1 = 0;

  /* "pyOrbit.pyx":24
 *     def bind(pyOrbit orb):
 *         new_orb = pyOrbit()
 *         del new_orb.c_orbit             # <<<<<<<<<<<<<<
 *         new_orb.c_orbit = orb.c_orbit
 *         new_orb.__owner = False
 */

#line 24 "pyOrbit.pyx"
  delete __pyx_v_new_orb->c_orbit;

  /* "pyOrbit.pyx":25
 *         new_orb = pyOrbit()
 *         del new_orb.c_orbit
 *         new_orb.c_orbit = orb.c_orbit             # <<<<<<<<<<<<<<
 *         new_orb.__owner = False
 *         return new_orb
 */

#line 25 "pyOrbit.pyx"
  __pyx_t_2 = __pyx_v_orb->c_orbit;

#line 25 "pyOrbit.pyx"
  __pyx_v_new_orb->c_orbit = __pyx_t_2;

  /* "pyOrbit.pyx":26
 *         del new_orb.c_orbit
 *         new_orb.c_orbit = orb.c_orbit
 *         new_orb.__owner = False             # <<<<<<<<<<<<<<
 *         return new_orb
 * 
 */

#line 26 "pyOrbit.pyx"
  __pyx_v_new_orb->__pyx___owner = 0;

  /* "pyOrbit.pyx":27
 *         new_orb.c_orbit = orb.c_orbit
 *         new_orb.__owner = False
 *         return new_orb             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 27 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 27 "pyOrbit.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_new_orb));

#line 27 "pyOrbit.pyx"
  __pyx_r = ((PyObject *)__pyx_v_new_orb);

#line 27 "pyOrbit.pyx"
  goto __pyx_L0;

  /* "pyOrbit.pyx":22
 *             del self.c_orbit
 *     @staticmethod
 *     def bind(pyOrbit orb):             # <<<<<<<<<<<<<<
 *         new_orb = pyOrbit()
 *         del new_orb.c_orbit
 */

#line 22 "pyOrbit.pyx"


#line 22 "pyOrbit.pyx"
  /* function exit code */

#line 22 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 22 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 22 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.bind", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 22 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 22 "pyOrbit.pyx"
  __pyx_L0:;

#line 22 "pyOrbit.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_new_orb);

#line 22 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 22 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 22 "pyOrbit.pyx"
  return __pyx_r;

#line 22 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":30
 * 
 *     @property
 *     def basis(self):             # <<<<<<<<<<<<<<
 *         return self.c_orbit.basis
 *     @basis.setter
 */

#line 30 "pyOrbit.pyx"


#line 30 "pyOrbit.pyx"
/* Python wrapper */

#line 30 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_5basis_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 30 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_5basis_1__get__(PyObject *__pyx_v_self) {

#line 30 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 30 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 30 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 30 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_5basis___get__(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self));

#line 30 "pyOrbit.pyx"


#line 30 "pyOrbit.pyx"
  /* function exit code */

#line 30 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 30 "pyOrbit.pyx"
  return __pyx_r;

#line 30 "pyOrbit.pyx"
}

#line 30 "pyOrbit.pyx"


#line 30 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_5basis___get__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self) {

#line 30 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 30 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 30 "pyOrbit.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 30 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyOrbit.pyx":31
 *     @property
 *     def basis(self):
 *         return self.c_orbit.basis             # <<<<<<<<<<<<<<
 *     @basis.setter
 *     def basis(self, int a):
 */

#line 31 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 31 "pyOrbit.pyx"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c_orbit->basis); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 31, __pyx_L1_error)

#line 31 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 31 "pyOrbit.pyx"
  __pyx_r = __pyx_t_1;

#line 31 "pyOrbit.pyx"
  __pyx_t_1 = 0;

#line 31 "pyOrbit.pyx"
  goto __pyx_L0;

  /* "pyOrbit.pyx":30
 * 
 *     @property
 *     def basis(self):             # <<<<<<<<<<<<<<
 *         return self.c_orbit.basis
 *     @basis.setter
 */

#line 30 "pyOrbit.pyx"


#line 30 "pyOrbit.pyx"
  /* function exit code */

#line 30 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 30 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 30 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.basis.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 30 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 30 "pyOrbit.pyx"
  __pyx_L0:;

#line 30 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 30 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 30 "pyOrbit.pyx"
  return __pyx_r;

#line 30 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":33
 *         return self.c_orbit.basis
 *     @basis.setter
 *     def basis(self, int a):             # <<<<<<<<<<<<<<
 *         self.c_orbit.basis = a
 *     @property
 */

#line 33 "pyOrbit.pyx"


#line 33 "pyOrbit.pyx"
/* Python wrapper */

#line 33 "pyOrbit.pyx"
static int __pyx_pw_8iscecore_7pyOrbit_5basis_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 33 "pyOrbit.pyx"
static int __pyx_pw_8iscecore_7pyOrbit_5basis_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  int __pyx_v_a
#line 33 "pyOrbit.pyx"
;

#line 33 "pyOrbit.pyx"
  int __pyx_r;

#line 33 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 33 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);

#line 33 "pyOrbit.pyx"
  assert(__pyx_arg_a); {

#line 33 "pyOrbit.pyx"
    __pyx_v_a = __Pyx_PyInt_As_int(__pyx_arg_a); if (unlikely((__pyx_v_a == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 33, __pyx_L3_error)

#line 33 "pyOrbit.pyx"
  }

#line 33 "pyOrbit.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 33 "pyOrbit.pyx"
  __pyx_L3_error:;

#line 33 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.basis.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 33 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 33 "pyOrbit.pyx"
  return -1;

#line 33 "pyOrbit.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 33 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_5basis_2__set__(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self), ((int)__pyx_v_a));

#line 33 "pyOrbit.pyx"


#line 33 "pyOrbit.pyx"
  /* function exit code */

#line 33 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 33 "pyOrbit.pyx"
  return __pyx_r;

#line 33 "pyOrbit.pyx"
}

#line 33 "pyOrbit.pyx"


#line 33 "pyOrbit.pyx"
static int __pyx_pf_8iscecore_7pyOrbit_5basis_2__set__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, int __pyx_v_a) {

#line 33 "pyOrbit.pyx"
  int __pyx_r;

#line 33 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 33 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyOrbit.pyx":34
 *     @basis.setter
 *     def basis(self, int a):
 *         self.c_orbit.basis = a             # <<<<<<<<<<<<<<
 *     @property
 *     def nVectors(self):
 */

#line 34 "pyOrbit.pyx"
  __pyx_v_self->c_orbit->basis = __pyx_v_a;

  /* "pyOrbit.pyx":33
 *         return self.c_orbit.basis
 *     @basis.setter
 *     def basis(self, int a):             # <<<<<<<<<<<<<<
 *         self.c_orbit.basis = a
 *     @property
 */

#line 33 "pyOrbit.pyx"


#line 33 "pyOrbit.pyx"
  /* function exit code */

#line 33 "pyOrbit.pyx"
  __pyx_r = 0;

#line 33 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 33 "pyOrbit.pyx"
  return __pyx_r;

#line 33 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":36
 *         self.c_orbit.basis = a
 *     @property
 *     def nVectors(self):             # <<<<<<<<<<<<<<
 *         return self.c_orbit.nVectors
 *     @nVectors.setter
 */

#line 36 "pyOrbit.pyx"


#line 36 "pyOrbit.pyx"
/* Python wrapper */

#line 36 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_8nVectors_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 36 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_8nVectors_1__get__(PyObject *__pyx_v_self) {

#line 36 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 36 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 36 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 36 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_8nVectors___get__(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self));

#line 36 "pyOrbit.pyx"


#line 36 "pyOrbit.pyx"
  /* function exit code */

#line 36 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 36 "pyOrbit.pyx"
  return __pyx_r;

#line 36 "pyOrbit.pyx"
}

#line 36 "pyOrbit.pyx"


#line 36 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_8nVectors___get__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self) {

#line 36 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 36 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 36 "pyOrbit.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 36 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyOrbit.pyx":37
 *     @property
 *     def nVectors(self):
 *         return self.c_orbit.nVectors             # <<<<<<<<<<<<<<
 *     @nVectors.setter
 *     def nVectors(self, int a):
 */

#line 37 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 37 "pyOrbit.pyx"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c_orbit->nVectors); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 37, __pyx_L1_error)

#line 37 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 37 "pyOrbit.pyx"
  __pyx_r = __pyx_t_1;

#line 37 "pyOrbit.pyx"
  __pyx_t_1 = 0;

#line 37 "pyOrbit.pyx"
  goto __pyx_L0;

  /* "pyOrbit.pyx":36
 *         self.c_orbit.basis = a
 *     @property
 *     def nVectors(self):             # <<<<<<<<<<<<<<
 *         return self.c_orbit.nVectors
 *     @nVectors.setter
 */

#line 36 "pyOrbit.pyx"


#line 36 "pyOrbit.pyx"
  /* function exit code */

#line 36 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 36 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 36 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.nVectors.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 36 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 36 "pyOrbit.pyx"
  __pyx_L0:;

#line 36 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 36 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 36 "pyOrbit.pyx"
  return __pyx_r;

#line 36 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":39
 *         return self.c_orbit.nVectors
 *     @nVectors.setter
 *     def nVectors(self, int a):             # <<<<<<<<<<<<<<
 *         if (a < 0):
 *             return
 */

#line 39 "pyOrbit.pyx"


#line 39 "pyOrbit.pyx"
/* Python wrapper */

#line 39 "pyOrbit.pyx"
static int __pyx_pw_8iscecore_7pyOrbit_8nVectors_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 39 "pyOrbit.pyx"
static int __pyx_pw_8iscecore_7pyOrbit_8nVectors_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  int __pyx_v_a
#line 39 "pyOrbit.pyx"
;

#line 39 "pyOrbit.pyx"
  int __pyx_r;

#line 39 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 39 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);

#line 39 "pyOrbit.pyx"
  assert(__pyx_arg_a); {

#line 39 "pyOrbit.pyx"
    __pyx_v_a = __Pyx_PyInt_As_int(__pyx_arg_a); if (unlikely((__pyx_v_a == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 39, __pyx_L3_error)

#line 39 "pyOrbit.pyx"
  }

#line 39 "pyOrbit.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 39 "pyOrbit.pyx"
  __pyx_L3_error:;

#line 39 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.nVectors.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 39 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 39 "pyOrbit.pyx"
  return -1;

#line 39 "pyOrbit.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 39 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_8nVectors_2__set__(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self), ((int)__pyx_v_a));

#line 39 "pyOrbit.pyx"


#line 39 "pyOrbit.pyx"
  /* function exit code */

#line 39 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 39 "pyOrbit.pyx"
  return __pyx_r;

#line 39 "pyOrbit.pyx"
}

#line 39 "pyOrbit.pyx"


#line 39 "pyOrbit.pyx"
static int __pyx_pf_8iscecore_7pyOrbit_8nVectors_2__set__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, int __pyx_v_a) {

#line 39 "pyOrbit.pyx"
  int __pyx_r;

#line 39 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 39 "pyOrbit.pyx"
  int __pyx_t_1;

#line 39 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyOrbit.pyx":40
 *     @nVectors.setter
 *     def nVectors(self, int a):
 *         if (a < 0):             # <<<<<<<<<<<<<<
 *             return
 *         self.c_orbit.nVectors = a
 */

#line 40 "pyOrbit.pyx"
  __pyx_t_1 = ((__pyx_v_a < 0) != 0);

#line 40 "pyOrbit.pyx"
  if (__pyx_t_1) {

    /* "pyOrbit.pyx":41
 *     def nVectors(self, int a):
 *         if (a < 0):
 *             return             # <<<<<<<<<<<<<<
 *         self.c_orbit.nVectors = a
 *         self.c_orbit.UTCtime.resize(a)
 */

#line 41 "pyOrbit.pyx"
    __pyx_r = 0;

#line 41 "pyOrbit.pyx"
    goto __pyx_L0;

    /* "pyOrbit.pyx":40
 *     @nVectors.setter
 *     def nVectors(self, int a):
 *         if (a < 0):             # <<<<<<<<<<<<<<
 *             return
 *         self.c_orbit.nVectors = a
 */

#line 40 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":42
 *         if (a < 0):
 *             return
 *         self.c_orbit.nVectors = a             # <<<<<<<<<<<<<<
 *         self.c_orbit.UTCtime.resize(a)
 *         self.c_orbit.position.resize(3*a)
 */

#line 42 "pyOrbit.pyx"
  __pyx_v_self->c_orbit->nVectors = __pyx_v_a;

  /* "pyOrbit.pyx":43
 *             return
 *         self.c_orbit.nVectors = a
 *         self.c_orbit.UTCtime.resize(a)             # <<<<<<<<<<<<<<
 *         self.c_orbit.position.resize(3*a)
 *         self.c_orbit.velocity.resize(3*a)
 */

#line 43 "pyOrbit.pyx"
  try {

#line 43 "pyOrbit.pyx"
    __pyx_v_self->c_orbit->UTCtime.resize(__pyx_v_a);

#line 43 "pyOrbit.pyx"
  } catch(...) {

#line 43 "pyOrbit.pyx"
    __Pyx_CppExn2PyErr();

#line 43 "pyOrbit.pyx"
    __PYX_ERR(9, 43, __pyx_L1_error)

#line 43 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":44
 *         self.c_orbit.nVectors = a
 *         self.c_orbit.UTCtime.resize(a)
 *         self.c_orbit.position.resize(3*a)             # <<<<<<<<<<<<<<
 *         self.c_orbit.velocity.resize(3*a)
 *     @property
 */

#line 44 "pyOrbit.pyx"
  try {

#line 44 "pyOrbit.pyx"
    __pyx_v_self->c_orbit->position.resize((3 * __pyx_v_a));

#line 44 "pyOrbit.pyx"
  } catch(...) {

#line 44 "pyOrbit.pyx"
    __Pyx_CppExn2PyErr();

#line 44 "pyOrbit.pyx"
    __PYX_ERR(9, 44, __pyx_L1_error)

#line 44 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":45
 *         self.c_orbit.UTCtime.resize(a)
 *         self.c_orbit.position.resize(3*a)
 *         self.c_orbit.velocity.resize(3*a)             # <<<<<<<<<<<<<<
 *     @property
 *     def UTCtime(self):
 */

#line 45 "pyOrbit.pyx"
  try {

#line 45 "pyOrbit.pyx"
    __pyx_v_self->c_orbit->velocity.resize((3 * __pyx_v_a));

#line 45 "pyOrbit.pyx"
  } catch(...) {

#line 45 "pyOrbit.pyx"
    __Pyx_CppExn2PyErr();

#line 45 "pyOrbit.pyx"
    __PYX_ERR(9, 45, __pyx_L1_error)

#line 45 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":39
 *         return self.c_orbit.nVectors
 *     @nVectors.setter
 *     def nVectors(self, int a):             # <<<<<<<<<<<<<<
 *         if (a < 0):
 *             return
 */

#line 39 "pyOrbit.pyx"


#line 39 "pyOrbit.pyx"
  /* function exit code */

#line 39 "pyOrbit.pyx"
  __pyx_r = 0;

#line 39 "pyOrbit.pyx"
  goto __pyx_L0;

#line 39 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 39 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.nVectors.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 39 "pyOrbit.pyx"
  __pyx_r = -1;

#line 39 "pyOrbit.pyx"
  __pyx_L0:;

#line 39 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 39 "pyOrbit.pyx"
  return __pyx_r;

#line 39 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":47
 *         self.c_orbit.velocity.resize(3*a)
 *     @property
 *     def UTCtime(self):             # <<<<<<<<<<<<<<
 *         a = []
 *         for i in range(self.nVectors):
 */

#line 47 "pyOrbit.pyx"


#line 47 "pyOrbit.pyx"
/* Python wrapper */

#line 47 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_7UTCtime_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 47 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_7UTCtime_1__get__(PyObject *__pyx_v_self) {

#line 47 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 47 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 47 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 47 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_7UTCtime___get__(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self));

#line 47 "pyOrbit.pyx"


#line 47 "pyOrbit.pyx"
  /* function exit code */

#line 47 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 47 "pyOrbit.pyx"
  return __pyx_r;

#line 47 "pyOrbit.pyx"
}

#line 47 "pyOrbit.pyx"


#line 47 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_7UTCtime___get__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self) {
  PyObject *__pyx_v_a = NULL
#line 47 "pyOrbit.pyx"
;
  PyObject *__pyx_v_i = NULL
#line 47 "pyOrbit.pyx"
;

#line 47 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 47 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 47 "pyOrbit.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 47 "pyOrbit.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 47 "pyOrbit.pyx"
  Py_ssize_t __pyx_t_3;

#line 47 "pyOrbit.pyx"
  PyObject *(*__pyx_t_4)(PyObject *);

#line 47 "pyOrbit.pyx"
  std::vector<double> ::size_type __pyx_t_5;

#line 47 "pyOrbit.pyx"
  int __pyx_t_6;

#line 47 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyOrbit.pyx":48
 *     @property
 *     def UTCtime(self):
 *         a = []             # <<<<<<<<<<<<<<
 *         for i in range(self.nVectors):
 *             a.append(self.c_orbit.UTCtime[i])
 */

#line 48 "pyOrbit.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 48, __pyx_L1_error)

#line 48 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 48 "pyOrbit.pyx"
  __pyx_v_a = ((PyObject*)__pyx_t_1);

#line 48 "pyOrbit.pyx"
  __pyx_t_1 = 0;

  /* "pyOrbit.pyx":49
 *     def UTCtime(self):
 *         a = []
 *         for i in range(self.nVectors):             # <<<<<<<<<<<<<<
 *             a.append(self.c_orbit.UTCtime[i])
 *         return a
 */

#line 49 "pyOrbit.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nVectors); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 49, __pyx_L1_error)

#line 49 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 49 "pyOrbit.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 49, __pyx_L1_error)

#line 49 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 49 "pyOrbit.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 49 "pyOrbit.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 49 "pyOrbit.pyx"
  __pyx_t_1 = 0;

#line 49 "pyOrbit.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 49, __pyx_L1_error)

#line 49 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 49 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 49 "pyOrbit.pyx"
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {

#line 49 "pyOrbit.pyx"
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;

#line 49 "pyOrbit.pyx"
    __pyx_t_4 = NULL;

#line 49 "pyOrbit.pyx"
  } else {
    __pyx_t_3 = -1; 
#line 49 "pyOrbit.pyx"
__pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 49, __pyx_L1_error)

#line 49 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 49 "pyOrbit.pyx"
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 49, __pyx_L1_error)

#line 49 "pyOrbit.pyx"
  }

#line 49 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 49 "pyOrbit.pyx"
  for (;;) {

#line 49 "pyOrbit.pyx"
    if (likely(!__pyx_t_4)) {

#line 49 "pyOrbit.pyx"
      if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 49 "pyOrbit.pyx"
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 49 "pyOrbit.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 49 "pyOrbit.pyx"
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(9, 49, __pyx_L1_error)

#line 49 "pyOrbit.pyx"
        #else

#line 49 "pyOrbit.pyx"
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 49, __pyx_L1_error)

#line 49 "pyOrbit.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 49 "pyOrbit.pyx"
        #endif

#line 49 "pyOrbit.pyx"
      } else {

#line 49 "pyOrbit.pyx"
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 49 "pyOrbit.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 49 "pyOrbit.pyx"
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(9, 49, __pyx_L1_error)

#line 49 "pyOrbit.pyx"
        #else

#line 49 "pyOrbit.pyx"
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 49, __pyx_L1_error)

#line 49 "pyOrbit.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 49 "pyOrbit.pyx"
        #endif

#line 49 "pyOrbit.pyx"
      }
    } else 
#line 49 "pyOrbit.pyx"
{

#line 49 "pyOrbit.pyx"
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);

#line 49 "pyOrbit.pyx"
      if (unlikely(!__pyx_t_1)) {

#line 49 "pyOrbit.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 49 "pyOrbit.pyx"
        if (exc_type) {

#line 49 "pyOrbit.pyx"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 49 "pyOrbit.pyx"
          else __PYX_ERR(9, 49, __pyx_L1_error)

#line 49 "pyOrbit.pyx"
        }

#line 49 "pyOrbit.pyx"
        break;

#line 49 "pyOrbit.pyx"
      }

#line 49 "pyOrbit.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 49 "pyOrbit.pyx"
    }

#line 49 "pyOrbit.pyx"
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);

#line 49 "pyOrbit.pyx"
    __pyx_t_1 = 0;

    /* "pyOrbit.pyx":50
 *         a = []
 *         for i in range(self.nVectors):
 *             a.append(self.c_orbit.UTCtime[i])             # <<<<<<<<<<<<<<
 *         return a
 *     @UTCtime.setter
 */

#line 50 "pyOrbit.pyx"
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(9, 50, __pyx_L1_error)

#line 50 "pyOrbit.pyx"
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->c_orbit->UTCtime[__pyx_t_5])); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 50, __pyx_L1_error)

#line 50 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 50 "pyOrbit.pyx"
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_a, __pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(9, 50, __pyx_L1_error)

#line 50 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyOrbit.pyx":49
 *     def UTCtime(self):
 *         a = []
 *         for i in range(self.nVectors):             # <<<<<<<<<<<<<<
 *             a.append(self.c_orbit.UTCtime[i])
 *         return a
 */

#line 49 "pyOrbit.pyx"
  }

#line 49 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyOrbit.pyx":51
 *         for i in range(self.nVectors):
 *             a.append(self.c_orbit.UTCtime[i])
 *         return a             # <<<<<<<<<<<<<<
 *     @UTCtime.setter
 *     def UTCtime(self, a):
 */

#line 51 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 51 "pyOrbit.pyx"
  __Pyx_INCREF(__pyx_v_a);

#line 51 "pyOrbit.pyx"
  __pyx_r = __pyx_v_a;

#line 51 "pyOrbit.pyx"
  goto __pyx_L0;

  /* "pyOrbit.pyx":47
 *         self.c_orbit.velocity.resize(3*a)
 *     @property
 *     def UTCtime(self):             # <<<<<<<<<<<<<<
 *         a = []
 *         for i in range(self.nVectors):
 */

#line 47 "pyOrbit.pyx"


#line 47 "pyOrbit.pyx"
  /* function exit code */

#line 47 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 47 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 47 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 47 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.UTCtime.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 47 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 47 "pyOrbit.pyx"
  __pyx_L0:;

#line 47 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_v_a);

#line 47 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 47 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 47 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 47 "pyOrbit.pyx"
  return __pyx_r;

#line 47 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":53
 *         return a
 *     @UTCtime.setter
 *     def UTCtime(self, a):             # <<<<<<<<<<<<<<
 *         if (self.nVectors != len(a)):
 *             print("Error: Invalid input size (expected list of length "+str(self.nVectors)+")")
 */

#line 53 "pyOrbit.pyx"


#line 53 "pyOrbit.pyx"
/* Python wrapper */

#line 53 "pyOrbit.pyx"
static int __pyx_pw_8iscecore_7pyOrbit_7UTCtime_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a); /*proto*/

#line 53 "pyOrbit.pyx"
static int __pyx_pw_8iscecore_7pyOrbit_7UTCtime_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a) {

#line 53 "pyOrbit.pyx"
  int __pyx_r;

#line 53 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 53 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = 
#line 53 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_7UTCtime_2__set__(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self), ((PyObject *)__pyx_v_a));

#line 53 "pyOrbit.pyx"


#line 53 "pyOrbit.pyx"
  /* function exit code */

#line 53 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 53 "pyOrbit.pyx"
  return __pyx_r;

#line 53 "pyOrbit.pyx"
}

#line 53 "pyOrbit.pyx"


#line 53 "pyOrbit.pyx"
static int __pyx_pf_8iscecore_7pyOrbit_7UTCtime_2__set__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, PyObject *__pyx_v_a) {
  PyObject *__pyx_v_i = NULL
#line 53 "pyOrbit.pyx"
;

#line 53 "pyOrbit.pyx"
  int __pyx_r;

#line 53 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 53 "pyOrbit.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 53 "pyOrbit.pyx"
  Py_ssize_t __pyx_t_2;

#line 53 "pyOrbit.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 53 "pyOrbit.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 53 "pyOrbit.pyx"
  int __pyx_t_5;

#line 53 "pyOrbit.pyx"
  PyObject *(*__pyx_t_6)(PyObject *);

#line 53 "pyOrbit.pyx"
  double __pyx_t_7;

#line 53 "pyOrbit.pyx"
  std::vector<double> ::size_type __pyx_t_8;

#line 53 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyOrbit.pyx":54
 *     @UTCtime.setter
 *     def UTCtime(self, a):
 *         if (self.nVectors != len(a)):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size (expected list of length "+str(self.nVectors)+")")
 *             return
 */

#line 54 "pyOrbit.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nVectors); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 54, __pyx_L1_error)

#line 54 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 54 "pyOrbit.pyx"
  __pyx_t_2 = PyObject_Length(__pyx_v_a); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(9, 54, __pyx_L1_error)

#line 54 "pyOrbit.pyx"
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 54, __pyx_L1_error)

#line 54 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 54 "pyOrbit.pyx"
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 54, __pyx_L1_error)

#line 54 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 54 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 54 "pyOrbit.pyx"
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(9, 54, __pyx_L1_error)

#line 54 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 54 "pyOrbit.pyx"
  if (__pyx_t_5) {

    /* "pyOrbit.pyx":55
 *     def UTCtime(self, a):
 *         if (self.nVectors != len(a)):
 *             print("Error: Invalid input size (expected list of length "+str(self.nVectors)+")")             # <<<<<<<<<<<<<<
 *             return
 *         for i in range(self.nVectors):
 */

#line 55 "pyOrbit.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nVectors); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 55, __pyx_L1_error)

#line 55 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 55 "pyOrbit.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 55, __pyx_L1_error)

#line 55 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 55 "pyOrbit.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 55 "pyOrbit.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);

#line 55 "pyOrbit.pyx"
    __pyx_t_4 = 0;

#line 55 "pyOrbit.pyx"
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 55, __pyx_L1_error)

#line 55 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 55 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 55 "pyOrbit.pyx"
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Error_Invalid_input_size_expecte, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 55, __pyx_L1_error)

#line 55 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 55 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 55 "pyOrbit.pyx"
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_t_3, __pyx_kp_u__47); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 55, __pyx_L1_error)

#line 55 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 55 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 55 "pyOrbit.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 55, __pyx_L1_error)

#line 55 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 55 "pyOrbit.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 55 "pyOrbit.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);

#line 55 "pyOrbit.pyx"
    __pyx_t_4 = 0;

#line 55 "pyOrbit.pyx"
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 55, __pyx_L1_error)

#line 55 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 55 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 55 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyOrbit.pyx":56
 *         if (self.nVectors != len(a)):
 *             print("Error: Invalid input size (expected list of length "+str(self.nVectors)+")")
 *             return             # <<<<<<<<<<<<<<
 *         for i in range(self.nVectors):
 *             self.c_orbit.UTCtime[i] = a[i]
 */

#line 56 "pyOrbit.pyx"
    __pyx_r = 0;

#line 56 "pyOrbit.pyx"
    goto __pyx_L0;

    /* "pyOrbit.pyx":54
 *     @UTCtime.setter
 *     def UTCtime(self, a):
 *         if (self.nVectors != len(a)):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size (expected list of length "+str(self.nVectors)+")")
 *             return
 */

#line 54 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":57
 *             print("Error: Invalid input size (expected list of length "+str(self.nVectors)+")")
 *             return
 *         for i in range(self.nVectors):             # <<<<<<<<<<<<<<
 *             self.c_orbit.UTCtime[i] = a[i]
 *     @property
 */

#line 57 "pyOrbit.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nVectors); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 57, __pyx_L1_error)

#line 57 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 57 "pyOrbit.pyx"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 57, __pyx_L1_error)

#line 57 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 57 "pyOrbit.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 57 "pyOrbit.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);

#line 57 "pyOrbit.pyx"
  __pyx_t_4 = 0;

#line 57 "pyOrbit.pyx"
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 57, __pyx_L1_error)

#line 57 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 57 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 57 "pyOrbit.pyx"
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {

#line 57 "pyOrbit.pyx"
    __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_2 = 0;

#line 57 "pyOrbit.pyx"
    __pyx_t_6 = NULL;

#line 57 "pyOrbit.pyx"
  } else {
    __pyx_t_2 = -1; 
#line 57 "pyOrbit.pyx"
__pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 57, __pyx_L1_error)

#line 57 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 57 "pyOrbit.pyx"
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 57, __pyx_L1_error)

#line 57 "pyOrbit.pyx"
  }

#line 57 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 57 "pyOrbit.pyx"
  for (;;) {

#line 57 "pyOrbit.pyx"
    if (likely(!__pyx_t_6)) {

#line 57 "pyOrbit.pyx"
      if (likely(PyList_CheckExact(__pyx_t_3))) {

#line 57 "pyOrbit.pyx"
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 57 "pyOrbit.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 57 "pyOrbit.pyx"
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(9, 57, __pyx_L1_error)

#line 57 "pyOrbit.pyx"
        #else

#line 57 "pyOrbit.pyx"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 57, __pyx_L1_error)

#line 57 "pyOrbit.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 57 "pyOrbit.pyx"
        #endif

#line 57 "pyOrbit.pyx"
      } else {

#line 57 "pyOrbit.pyx"
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 57 "pyOrbit.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 57 "pyOrbit.pyx"
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(9, 57, __pyx_L1_error)

#line 57 "pyOrbit.pyx"
        #else

#line 57 "pyOrbit.pyx"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 57, __pyx_L1_error)

#line 57 "pyOrbit.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 57 "pyOrbit.pyx"
        #endif

#line 57 "pyOrbit.pyx"
      }
    } else 
#line 57 "pyOrbit.pyx"
{

#line 57 "pyOrbit.pyx"
      __pyx_t_4 = __pyx_t_6(__pyx_t_3);

#line 57 "pyOrbit.pyx"
      if (unlikely(!__pyx_t_4)) {

#line 57 "pyOrbit.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 57 "pyOrbit.pyx"
        if (exc_type) {

#line 57 "pyOrbit.pyx"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 57 "pyOrbit.pyx"
          else __PYX_ERR(9, 57, __pyx_L1_error)

#line 57 "pyOrbit.pyx"
        }

#line 57 "pyOrbit.pyx"
        break;

#line 57 "pyOrbit.pyx"
      }

#line 57 "pyOrbit.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 57 "pyOrbit.pyx"
    }

#line 57 "pyOrbit.pyx"
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);

#line 57 "pyOrbit.pyx"
    __pyx_t_4 = 0;

    /* "pyOrbit.pyx":58
 *             return
 *         for i in range(self.nVectors):
 *             self.c_orbit.UTCtime[i] = a[i]             # <<<<<<<<<<<<<<
 *     @property
 *     def position(self):
 */

#line 58 "pyOrbit.pyx"
    __pyx_t_4 = PyObject_GetItem(__pyx_v_a, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 58, __pyx_L1_error)

#line 58 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 58 "pyOrbit.pyx"
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 58, __pyx_L1_error)

#line 58 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 58 "pyOrbit.pyx"
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(9, 58, __pyx_L1_error)

#line 58 "pyOrbit.pyx"
    (__pyx_v_self->c_orbit->UTCtime[__pyx_t_8]) = __pyx_t_7;

    /* "pyOrbit.pyx":57
 *             print("Error: Invalid input size (expected list of length "+str(self.nVectors)+")")
 *             return
 *         for i in range(self.nVectors):             # <<<<<<<<<<<<<<
 *             self.c_orbit.UTCtime[i] = a[i]
 *     @property
 */

#line 57 "pyOrbit.pyx"
  }

#line 57 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyOrbit.pyx":53
 *         return a
 *     @UTCtime.setter
 *     def UTCtime(self, a):             # <<<<<<<<<<<<<<
 *         if (self.nVectors != len(a)):
 *             print("Error: Invalid input size (expected list of length "+str(self.nVectors)+")")
 */

#line 53 "pyOrbit.pyx"


#line 53 "pyOrbit.pyx"
  /* function exit code */

#line 53 "pyOrbit.pyx"
  __pyx_r = 0;

#line 53 "pyOrbit.pyx"
  goto __pyx_L0;

#line 53 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 53 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 53 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 53 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 53 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.UTCtime.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 53 "pyOrbit.pyx"
  __pyx_r = -1;

#line 53 "pyOrbit.pyx"
  __pyx_L0:;

#line 53 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 53 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 53 "pyOrbit.pyx"
  return __pyx_r;

#line 53 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":60
 *             self.c_orbit.UTCtime[i] = a[i]
 *     @property
 *     def position(self):             # <<<<<<<<<<<<<<
 *         a = []
 *         for i in range(3*self.nVectors):
 */

#line 60 "pyOrbit.pyx"


#line 60 "pyOrbit.pyx"
/* Python wrapper */

#line 60 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_8position_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 60 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_8position_1__get__(PyObject *__pyx_v_self) {

#line 60 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 60 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 60 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 60 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_8position___get__(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self));

#line 60 "pyOrbit.pyx"


#line 60 "pyOrbit.pyx"
  /* function exit code */

#line 60 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 60 "pyOrbit.pyx"
  return __pyx_r;

#line 60 "pyOrbit.pyx"
}

#line 60 "pyOrbit.pyx"


#line 60 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_8position___get__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self) {
  PyObject *__pyx_v_a = NULL
#line 60 "pyOrbit.pyx"
;
  PyObject *__pyx_v_i = NULL
#line 60 "pyOrbit.pyx"
;

#line 60 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 60 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 60 "pyOrbit.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 60 "pyOrbit.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 60 "pyOrbit.pyx"
  Py_ssize_t __pyx_t_3;

#line 60 "pyOrbit.pyx"
  PyObject *(*__pyx_t_4)(PyObject *);

#line 60 "pyOrbit.pyx"
  std::vector<double> ::size_type __pyx_t_5;

#line 60 "pyOrbit.pyx"
  int __pyx_t_6;

#line 60 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyOrbit.pyx":61
 *     @property
 *     def position(self):
 *         a = []             # <<<<<<<<<<<<<<
 *         for i in range(3*self.nVectors):
 *             a.append(self.c_orbit.position[i])
 */

#line 61 "pyOrbit.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 61, __pyx_L1_error)

#line 61 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 61 "pyOrbit.pyx"
  __pyx_v_a = ((PyObject*)__pyx_t_1);

#line 61 "pyOrbit.pyx"
  __pyx_t_1 = 0;

  /* "pyOrbit.pyx":62
 *     def position(self):
 *         a = []
 *         for i in range(3*self.nVectors):             # <<<<<<<<<<<<<<
 *             a.append(self.c_orbit.position[i])
 *         return a
 */

#line 62 "pyOrbit.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nVectors); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 62, __pyx_L1_error)

#line 62 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 62 "pyOrbit.pyx"
  __pyx_t_2 = PyNumber_Multiply(__pyx_int_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 62, __pyx_L1_error)

#line 62 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 62 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 62 "pyOrbit.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 62, __pyx_L1_error)

#line 62 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 62 "pyOrbit.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 62 "pyOrbit.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);

#line 62 "pyOrbit.pyx"
  __pyx_t_2 = 0;

#line 62 "pyOrbit.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 62, __pyx_L1_error)

#line 62 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 62 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 62 "pyOrbit.pyx"
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {

#line 62 "pyOrbit.pyx"
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;

#line 62 "pyOrbit.pyx"
    __pyx_t_4 = NULL;

#line 62 "pyOrbit.pyx"
  } else {
    __pyx_t_3 = -1; 
#line 62 "pyOrbit.pyx"
__pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 62, __pyx_L1_error)

#line 62 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 62 "pyOrbit.pyx"
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 62, __pyx_L1_error)

#line 62 "pyOrbit.pyx"
  }

#line 62 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 62 "pyOrbit.pyx"
  for (;;) {

#line 62 "pyOrbit.pyx"
    if (likely(!__pyx_t_4)) {

#line 62 "pyOrbit.pyx"
      if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 62 "pyOrbit.pyx"
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;

#line 62 "pyOrbit.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 62 "pyOrbit.pyx"
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(9, 62, __pyx_L1_error)

#line 62 "pyOrbit.pyx"
        #else

#line 62 "pyOrbit.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 62, __pyx_L1_error)

#line 62 "pyOrbit.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 62 "pyOrbit.pyx"
        #endif

#line 62 "pyOrbit.pyx"
      } else {

#line 62 "pyOrbit.pyx"
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 62 "pyOrbit.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 62 "pyOrbit.pyx"
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(9, 62, __pyx_L1_error)

#line 62 "pyOrbit.pyx"
        #else

#line 62 "pyOrbit.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 62, __pyx_L1_error)

#line 62 "pyOrbit.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 62 "pyOrbit.pyx"
        #endif

#line 62 "pyOrbit.pyx"
      }
    } else 
#line 62 "pyOrbit.pyx"
{

#line 62 "pyOrbit.pyx"
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);

#line 62 "pyOrbit.pyx"
      if (unlikely(!__pyx_t_2)) {

#line 62 "pyOrbit.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 62 "pyOrbit.pyx"
        if (exc_type) {

#line 62 "pyOrbit.pyx"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 62 "pyOrbit.pyx"
          else __PYX_ERR(9, 62, __pyx_L1_error)

#line 62 "pyOrbit.pyx"
        }

#line 62 "pyOrbit.pyx"
        break;

#line 62 "pyOrbit.pyx"
      }

#line 62 "pyOrbit.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 62 "pyOrbit.pyx"
    }

#line 62 "pyOrbit.pyx"
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);

#line 62 "pyOrbit.pyx"
    __pyx_t_2 = 0;

    /* "pyOrbit.pyx":63
 *         a = []
 *         for i in range(3*self.nVectors):
 *             a.append(self.c_orbit.position[i])             # <<<<<<<<<<<<<<
 *         return a
 *     @position.setter
 */

#line 63 "pyOrbit.pyx"
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(9, 63, __pyx_L1_error)

#line 63 "pyOrbit.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_self->c_orbit->position[__pyx_t_5])); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 63, __pyx_L1_error)

#line 63 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 63 "pyOrbit.pyx"
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_a, __pyx_t_2); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(9, 63, __pyx_L1_error)

#line 63 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyOrbit.pyx":62
 *     def position(self):
 *         a = []
 *         for i in range(3*self.nVectors):             # <<<<<<<<<<<<<<
 *             a.append(self.c_orbit.position[i])
 *         return a
 */

#line 62 "pyOrbit.pyx"
  }

#line 62 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyOrbit.pyx":64
 *         for i in range(3*self.nVectors):
 *             a.append(self.c_orbit.position[i])
 *         return a             # <<<<<<<<<<<<<<
 *     @position.setter
 *     def position(self, a):
 */

#line 64 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 64 "pyOrbit.pyx"
  __Pyx_INCREF(__pyx_v_a);

#line 64 "pyOrbit.pyx"
  __pyx_r = __pyx_v_a;

#line 64 "pyOrbit.pyx"
  goto __pyx_L0;

  /* "pyOrbit.pyx":60
 *             self.c_orbit.UTCtime[i] = a[i]
 *     @property
 *     def position(self):             # <<<<<<<<<<<<<<
 *         a = []
 *         for i in range(3*self.nVectors):
 */

#line 60 "pyOrbit.pyx"


#line 60 "pyOrbit.pyx"
  /* function exit code */

#line 60 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 60 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 60 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 60 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.position.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 60 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 60 "pyOrbit.pyx"
  __pyx_L0:;

#line 60 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_v_a);

#line 60 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 60 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 60 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 60 "pyOrbit.pyx"
  return __pyx_r;

#line 60 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":66
 *         return a
 *     @position.setter
 *     def position(self, a):             # <<<<<<<<<<<<<<
 *         if (3*self.nVectors != len(a)):
 *             print("Error: Invalid input size (expected list of length "+str(3*self.nVectors)+")")
 */

#line 66 "pyOrbit.pyx"


#line 66 "pyOrbit.pyx"
/* Python wrapper */

#line 66 "pyOrbit.pyx"
static int __pyx_pw_8iscecore_7pyOrbit_8position_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a); /*proto*/

#line 66 "pyOrbit.pyx"
static int __pyx_pw_8iscecore_7pyOrbit_8position_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a) {

#line 66 "pyOrbit.pyx"
  int __pyx_r;

#line 66 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 66 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = 
#line 66 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_8position_2__set__(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self), ((PyObject *)__pyx_v_a));

#line 66 "pyOrbit.pyx"


#line 66 "pyOrbit.pyx"
  /* function exit code */

#line 66 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 66 "pyOrbit.pyx"
  return __pyx_r;

#line 66 "pyOrbit.pyx"
}

#line 66 "pyOrbit.pyx"


#line 66 "pyOrbit.pyx"
static int __pyx_pf_8iscecore_7pyOrbit_8position_2__set__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, PyObject *__pyx_v_a) {
  PyObject *__pyx_v_i = NULL
#line 66 "pyOrbit.pyx"
;

#line 66 "pyOrbit.pyx"
  int __pyx_r;

#line 66 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 66 "pyOrbit.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 66 "pyOrbit.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 66 "pyOrbit.pyx"
  Py_ssize_t __pyx_t_3;

#line 66 "pyOrbit.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 66 "pyOrbit.pyx"
  int __pyx_t_5;

#line 66 "pyOrbit.pyx"
  PyObject *(*__pyx_t_6)(PyObject *);

#line 66 "pyOrbit.pyx"
  double __pyx_t_7;

#line 66 "pyOrbit.pyx"
  std::vector<double> ::size_type __pyx_t_8;

#line 66 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyOrbit.pyx":67
 *     @position.setter
 *     def position(self, a):
 *         if (3*self.nVectors != len(a)):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size (expected list of length "+str(3*self.nVectors)+")")
 *             return
 */

#line 67 "pyOrbit.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nVectors); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 67, __pyx_L1_error)

#line 67 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 67 "pyOrbit.pyx"
  __pyx_t_2 = PyNumber_Multiply(__pyx_int_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 67, __pyx_L1_error)

#line 67 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 67 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 67 "pyOrbit.pyx"
  __pyx_t_3 = PyObject_Length(__pyx_v_a); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(9, 67, __pyx_L1_error)

#line 67 "pyOrbit.pyx"
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 67, __pyx_L1_error)

#line 67 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 67 "pyOrbit.pyx"
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 67, __pyx_L1_error)

#line 67 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 67 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 67 "pyOrbit.pyx"
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(9, 67, __pyx_L1_error)

#line 67 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 67 "pyOrbit.pyx"
  if (__pyx_t_5) {

    /* "pyOrbit.pyx":68
 *     def position(self, a):
 *         if (3*self.nVectors != len(a)):
 *             print("Error: Invalid input size (expected list of length "+str(3*self.nVectors)+")")             # <<<<<<<<<<<<<<
 *             return
 *         for i in range(3*self.nVectors):
 */

#line 68 "pyOrbit.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nVectors); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 68, __pyx_L1_error)

#line 68 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 68 "pyOrbit.pyx"
    __pyx_t_1 = PyNumber_Multiply(__pyx_int_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 68, __pyx_L1_error)

#line 68 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 68 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 68 "pyOrbit.pyx"
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 68, __pyx_L1_error)

#line 68 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 68 "pyOrbit.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 68 "pyOrbit.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);

#line 68 "pyOrbit.pyx"
    __pyx_t_1 = 0;

#line 68 "pyOrbit.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 68, __pyx_L1_error)

#line 68 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 68 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 68 "pyOrbit.pyx"
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Error_Invalid_input_size_expecte, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 68, __pyx_L1_error)

#line 68 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 68 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 68 "pyOrbit.pyx"
    __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_t_4, __pyx_kp_u__47); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 68, __pyx_L1_error)

#line 68 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 68 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 68 "pyOrbit.pyx"
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 68, __pyx_L1_error)

#line 68 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 68 "pyOrbit.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 68 "pyOrbit.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);

#line 68 "pyOrbit.pyx"
    __pyx_t_1 = 0;

#line 68 "pyOrbit.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 68, __pyx_L1_error)

#line 68 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 68 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 68 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyOrbit.pyx":69
 *         if (3*self.nVectors != len(a)):
 *             print("Error: Invalid input size (expected list of length "+str(3*self.nVectors)+")")
 *             return             # <<<<<<<<<<<<<<
 *         for i in range(3*self.nVectors):
 *             self.c_orbit.position[i] = a[i]
 */

#line 69 "pyOrbit.pyx"
    __pyx_r = 0;

#line 69 "pyOrbit.pyx"
    goto __pyx_L0;

    /* "pyOrbit.pyx":67
 *     @position.setter
 *     def position(self, a):
 *         if (3*self.nVectors != len(a)):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size (expected list of length "+str(3*self.nVectors)+")")
 *             return
 */

#line 67 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":70
 *             print("Error: Invalid input size (expected list of length "+str(3*self.nVectors)+")")
 *             return
 *         for i in range(3*self.nVectors):             # <<<<<<<<<<<<<<
 *             self.c_orbit.position[i] = a[i]
 *     @property
 */

#line 70 "pyOrbit.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nVectors); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 70, __pyx_L1_error)

#line 70 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 70 "pyOrbit.pyx"
  __pyx_t_4 = PyNumber_Multiply(__pyx_int_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 70, __pyx_L1_error)

#line 70 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 70 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 70 "pyOrbit.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 70, __pyx_L1_error)

#line 70 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 70 "pyOrbit.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 70 "pyOrbit.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);

#line 70 "pyOrbit.pyx"
  __pyx_t_4 = 0;

#line 70 "pyOrbit.pyx"
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 70, __pyx_L1_error)

#line 70 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 70 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 70 "pyOrbit.pyx"
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {

#line 70 "pyOrbit.pyx"
    __pyx_t_1 = __pyx_t_4; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;

#line 70 "pyOrbit.pyx"
    __pyx_t_6 = NULL;

#line 70 "pyOrbit.pyx"
  } else {
    __pyx_t_3 = -1; 
#line 70 "pyOrbit.pyx"
__pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 70, __pyx_L1_error)

#line 70 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 70 "pyOrbit.pyx"
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 70, __pyx_L1_error)

#line 70 "pyOrbit.pyx"
  }

#line 70 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 70 "pyOrbit.pyx"
  for (;;) {

#line 70 "pyOrbit.pyx"
    if (likely(!__pyx_t_6)) {

#line 70 "pyOrbit.pyx"
      if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 70 "pyOrbit.pyx"
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;

#line 70 "pyOrbit.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 70 "pyOrbit.pyx"
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(9, 70, __pyx_L1_error)

#line 70 "pyOrbit.pyx"
        #else

#line 70 "pyOrbit.pyx"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 70, __pyx_L1_error)

#line 70 "pyOrbit.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 70 "pyOrbit.pyx"
        #endif

#line 70 "pyOrbit.pyx"
      } else {

#line 70 "pyOrbit.pyx"
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 70 "pyOrbit.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 70 "pyOrbit.pyx"
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(9, 70, __pyx_L1_error)

#line 70 "pyOrbit.pyx"
        #else

#line 70 "pyOrbit.pyx"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 70, __pyx_L1_error)

#line 70 "pyOrbit.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 70 "pyOrbit.pyx"
        #endif

#line 70 "pyOrbit.pyx"
      }
    } else 
#line 70 "pyOrbit.pyx"
{

#line 70 "pyOrbit.pyx"
      __pyx_t_4 = __pyx_t_6(__pyx_t_1);

#line 70 "pyOrbit.pyx"
      if (unlikely(!__pyx_t_4)) {

#line 70 "pyOrbit.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 70 "pyOrbit.pyx"
        if (exc_type) {

#line 70 "pyOrbit.pyx"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 70 "pyOrbit.pyx"
          else __PYX_ERR(9, 70, __pyx_L1_error)

#line 70 "pyOrbit.pyx"
        }

#line 70 "pyOrbit.pyx"
        break;

#line 70 "pyOrbit.pyx"
      }

#line 70 "pyOrbit.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 70 "pyOrbit.pyx"
    }

#line 70 "pyOrbit.pyx"
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);

#line 70 "pyOrbit.pyx"
    __pyx_t_4 = 0;

    /* "pyOrbit.pyx":71
 *             return
 *         for i in range(3*self.nVectors):
 *             self.c_orbit.position[i] = a[i]             # <<<<<<<<<<<<<<
 *     @property
 *     def velocity(self):
 */

#line 71 "pyOrbit.pyx"
    __pyx_t_4 = PyObject_GetItem(__pyx_v_a, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 71, __pyx_L1_error)

#line 71 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 71 "pyOrbit.pyx"
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 71, __pyx_L1_error)

#line 71 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 71 "pyOrbit.pyx"
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(9, 71, __pyx_L1_error)

#line 71 "pyOrbit.pyx"
    (__pyx_v_self->c_orbit->position[__pyx_t_8]) = __pyx_t_7;

    /* "pyOrbit.pyx":70
 *             print("Error: Invalid input size (expected list of length "+str(3*self.nVectors)+")")
 *             return
 *         for i in range(3*self.nVectors):             # <<<<<<<<<<<<<<
 *             self.c_orbit.position[i] = a[i]
 *     @property
 */

#line 70 "pyOrbit.pyx"
  }

#line 70 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyOrbit.pyx":66
 *         return a
 *     @position.setter
 *     def position(self, a):             # <<<<<<<<<<<<<<
 *         if (3*self.nVectors != len(a)):
 *             print("Error: Invalid input size (expected list of length "+str(3*self.nVectors)+")")
 */

#line 66 "pyOrbit.pyx"


#line 66 "pyOrbit.pyx"
  /* function exit code */

#line 66 "pyOrbit.pyx"
  __pyx_r = 0;

#line 66 "pyOrbit.pyx"
  goto __pyx_L0;

#line 66 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 66 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 66 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 66 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 66 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.position.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 66 "pyOrbit.pyx"
  __pyx_r = -1;

#line 66 "pyOrbit.pyx"
  __pyx_L0:;

#line 66 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 66 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 66 "pyOrbit.pyx"
  return __pyx_r;

#line 66 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":73
 *             self.c_orbit.position[i] = a[i]
 *     @property
 *     def velocity(self):             # <<<<<<<<<<<<<<
 *         a = []
 *         for i in range(3*self.nVectors):
 */

#line 73 "pyOrbit.pyx"


#line 73 "pyOrbit.pyx"
/* Python wrapper */

#line 73 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_8velocity_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 73 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_8velocity_1__get__(PyObject *__pyx_v_self) {

#line 73 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 73 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 73 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 73 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_8velocity___get__(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self));

#line 73 "pyOrbit.pyx"


#line 73 "pyOrbit.pyx"
  /* function exit code */

#line 73 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 73 "pyOrbit.pyx"
  return __pyx_r;

#line 73 "pyOrbit.pyx"
}

#line 73 "pyOrbit.pyx"


#line 73 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_8velocity___get__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self) {
  PyObject *__pyx_v_a = NULL
#line 73 "pyOrbit.pyx"
;
  PyObject *__pyx_v_i = NULL
#line 73 "pyOrbit.pyx"
;

#line 73 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 73 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 73 "pyOrbit.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 73 "pyOrbit.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 73 "pyOrbit.pyx"
  Py_ssize_t __pyx_t_3;

#line 73 "pyOrbit.pyx"
  PyObject *(*__pyx_t_4)(PyObject *);

#line 73 "pyOrbit.pyx"
  std::vector<double> ::size_type __pyx_t_5;

#line 73 "pyOrbit.pyx"
  int __pyx_t_6;

#line 73 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyOrbit.pyx":74
 *     @property
 *     def velocity(self):
 *         a = []             # <<<<<<<<<<<<<<
 *         for i in range(3*self.nVectors):
 *             a.append(self.c_orbit.velocity[i])
 */

#line 74 "pyOrbit.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 74, __pyx_L1_error)

#line 74 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 74 "pyOrbit.pyx"
  __pyx_v_a = ((PyObject*)__pyx_t_1);

#line 74 "pyOrbit.pyx"
  __pyx_t_1 = 0;

  /* "pyOrbit.pyx":75
 *     def velocity(self):
 *         a = []
 *         for i in range(3*self.nVectors):             # <<<<<<<<<<<<<<
 *             a.append(self.c_orbit.velocity[i])
 *         return a
 */

#line 75 "pyOrbit.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nVectors); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 75, __pyx_L1_error)

#line 75 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 75 "pyOrbit.pyx"
  __pyx_t_2 = PyNumber_Multiply(__pyx_int_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 75, __pyx_L1_error)

#line 75 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 75 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 75 "pyOrbit.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 75, __pyx_L1_error)

#line 75 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 75 "pyOrbit.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 75 "pyOrbit.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);

#line 75 "pyOrbit.pyx"
  __pyx_t_2 = 0;

#line 75 "pyOrbit.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 75, __pyx_L1_error)

#line 75 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 75 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 75 "pyOrbit.pyx"
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {

#line 75 "pyOrbit.pyx"
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;

#line 75 "pyOrbit.pyx"
    __pyx_t_4 = NULL;

#line 75 "pyOrbit.pyx"
  } else {
    __pyx_t_3 = -1; 
#line 75 "pyOrbit.pyx"
__pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 75, __pyx_L1_error)

#line 75 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 75 "pyOrbit.pyx"
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 75, __pyx_L1_error)

#line 75 "pyOrbit.pyx"
  }

#line 75 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 75 "pyOrbit.pyx"
  for (;;) {

#line 75 "pyOrbit.pyx"
    if (likely(!__pyx_t_4)) {

#line 75 "pyOrbit.pyx"
      if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 75 "pyOrbit.pyx"
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;

#line 75 "pyOrbit.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 75 "pyOrbit.pyx"
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(9, 75, __pyx_L1_error)

#line 75 "pyOrbit.pyx"
        #else

#line 75 "pyOrbit.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 75, __pyx_L1_error)

#line 75 "pyOrbit.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 75 "pyOrbit.pyx"
        #endif

#line 75 "pyOrbit.pyx"
      } else {

#line 75 "pyOrbit.pyx"
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 75 "pyOrbit.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 75 "pyOrbit.pyx"
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(9, 75, __pyx_L1_error)

#line 75 "pyOrbit.pyx"
        #else

#line 75 "pyOrbit.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 75, __pyx_L1_error)

#line 75 "pyOrbit.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 75 "pyOrbit.pyx"
        #endif

#line 75 "pyOrbit.pyx"
      }
    } else 
#line 75 "pyOrbit.pyx"
{

#line 75 "pyOrbit.pyx"
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);

#line 75 "pyOrbit.pyx"
      if (unlikely(!__pyx_t_2)) {

#line 75 "pyOrbit.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 75 "pyOrbit.pyx"
        if (exc_type) {

#line 75 "pyOrbit.pyx"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 75 "pyOrbit.pyx"
          else __PYX_ERR(9, 75, __pyx_L1_error)

#line 75 "pyOrbit.pyx"
        }

#line 75 "pyOrbit.pyx"
        break;

#line 75 "pyOrbit.pyx"
      }

#line 75 "pyOrbit.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 75 "pyOrbit.pyx"
    }

#line 75 "pyOrbit.pyx"
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);

#line 75 "pyOrbit.pyx"
    __pyx_t_2 = 0;

    /* "pyOrbit.pyx":76
 *         a = []
 *         for i in range(3*self.nVectors):
 *             a.append(self.c_orbit.velocity[i])             # <<<<<<<<<<<<<<
 *         return a
 *     @velocity.setter
 */

#line 76 "pyOrbit.pyx"
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(9, 76, __pyx_L1_error)

#line 76 "pyOrbit.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_self->c_orbit->velocity[__pyx_t_5])); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 76, __pyx_L1_error)

#line 76 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 76 "pyOrbit.pyx"
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_a, __pyx_t_2); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(9, 76, __pyx_L1_error)

#line 76 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyOrbit.pyx":75
 *     def velocity(self):
 *         a = []
 *         for i in range(3*self.nVectors):             # <<<<<<<<<<<<<<
 *             a.append(self.c_orbit.velocity[i])
 *         return a
 */

#line 75 "pyOrbit.pyx"
  }

#line 75 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyOrbit.pyx":77
 *         for i in range(3*self.nVectors):
 *             a.append(self.c_orbit.velocity[i])
 *         return a             # <<<<<<<<<<<<<<
 *     @velocity.setter
 *     def velocity(self, a):
 */

#line 77 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 77 "pyOrbit.pyx"
  __Pyx_INCREF(__pyx_v_a);

#line 77 "pyOrbit.pyx"
  __pyx_r = __pyx_v_a;

#line 77 "pyOrbit.pyx"
  goto __pyx_L0;

  /* "pyOrbit.pyx":73
 *             self.c_orbit.position[i] = a[i]
 *     @property
 *     def velocity(self):             # <<<<<<<<<<<<<<
 *         a = []
 *         for i in range(3*self.nVectors):
 */

#line 73 "pyOrbit.pyx"


#line 73 "pyOrbit.pyx"
  /* function exit code */

#line 73 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 73 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 73 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 73 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.velocity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 73 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 73 "pyOrbit.pyx"
  __pyx_L0:;

#line 73 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_v_a);

#line 73 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 73 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 73 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 73 "pyOrbit.pyx"
  return __pyx_r;

#line 73 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":79
 *         return a
 *     @velocity.setter
 *     def velocity(self, a):             # <<<<<<<<<<<<<<
 *         if (3*self.nVectors != len(a)):
 *             print("Error: Invalid input size (expected list of length "+str(3*self.nVectors)+")")
 */

#line 79 "pyOrbit.pyx"


#line 79 "pyOrbit.pyx"
/* Python wrapper */

#line 79 "pyOrbit.pyx"
static int __pyx_pw_8iscecore_7pyOrbit_8velocity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a); /*proto*/

#line 79 "pyOrbit.pyx"
static int __pyx_pw_8iscecore_7pyOrbit_8velocity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a) {

#line 79 "pyOrbit.pyx"
  int __pyx_r;

#line 79 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 79 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = 
#line 79 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_8velocity_2__set__(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self), ((PyObject *)__pyx_v_a));

#line 79 "pyOrbit.pyx"


#line 79 "pyOrbit.pyx"
  /* function exit code */

#line 79 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 79 "pyOrbit.pyx"
  return __pyx_r;

#line 79 "pyOrbit.pyx"
}

#line 79 "pyOrbit.pyx"


#line 79 "pyOrbit.pyx"
static int __pyx_pf_8iscecore_7pyOrbit_8velocity_2__set__(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, PyObject *__pyx_v_a) {
  PyObject *__pyx_v_i = NULL
#line 79 "pyOrbit.pyx"
;

#line 79 "pyOrbit.pyx"
  int __pyx_r;

#line 79 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 79 "pyOrbit.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 79 "pyOrbit.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 79 "pyOrbit.pyx"
  Py_ssize_t __pyx_t_3;

#line 79 "pyOrbit.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 79 "pyOrbit.pyx"
  int __pyx_t_5;

#line 79 "pyOrbit.pyx"
  PyObject *(*__pyx_t_6)(PyObject *);

#line 79 "pyOrbit.pyx"
  double __pyx_t_7;

#line 79 "pyOrbit.pyx"
  std::vector<double> ::size_type __pyx_t_8;

#line 79 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyOrbit.pyx":80
 *     @velocity.setter
 *     def velocity(self, a):
 *         if (3*self.nVectors != len(a)):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size (expected list of length "+str(3*self.nVectors)+")")
 *             return
 */

#line 80 "pyOrbit.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nVectors); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 80, __pyx_L1_error)

#line 80 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 80 "pyOrbit.pyx"
  __pyx_t_2 = PyNumber_Multiply(__pyx_int_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 80, __pyx_L1_error)

#line 80 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 80 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 80 "pyOrbit.pyx"
  __pyx_t_3 = PyObject_Length(__pyx_v_a); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(9, 80, __pyx_L1_error)

#line 80 "pyOrbit.pyx"
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 80, __pyx_L1_error)

#line 80 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 80 "pyOrbit.pyx"
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 80, __pyx_L1_error)

#line 80 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 80 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 80 "pyOrbit.pyx"
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(9, 80, __pyx_L1_error)

#line 80 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 80 "pyOrbit.pyx"
  if (__pyx_t_5) {

    /* "pyOrbit.pyx":81
 *     def velocity(self, a):
 *         if (3*self.nVectors != len(a)):
 *             print("Error: Invalid input size (expected list of length "+str(3*self.nVectors)+")")             # <<<<<<<<<<<<<<
 *             return
 *         for i in range(3*self.nVectors):
 */

#line 81 "pyOrbit.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nVectors); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 81, __pyx_L1_error)

#line 81 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 81 "pyOrbit.pyx"
    __pyx_t_1 = PyNumber_Multiply(__pyx_int_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 81, __pyx_L1_error)

#line 81 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 81 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 81 "pyOrbit.pyx"
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 81, __pyx_L1_error)

#line 81 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 81 "pyOrbit.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 81 "pyOrbit.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);

#line 81 "pyOrbit.pyx"
    __pyx_t_1 = 0;

#line 81 "pyOrbit.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 81, __pyx_L1_error)

#line 81 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 81 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 81 "pyOrbit.pyx"
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Error_Invalid_input_size_expecte, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 81, __pyx_L1_error)

#line 81 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 81 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 81 "pyOrbit.pyx"
    __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_t_4, __pyx_kp_u__47); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 81, __pyx_L1_error)

#line 81 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 81 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 81 "pyOrbit.pyx"
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 81, __pyx_L1_error)

#line 81 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 81 "pyOrbit.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 81 "pyOrbit.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);

#line 81 "pyOrbit.pyx"
    __pyx_t_1 = 0;

#line 81 "pyOrbit.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 81, __pyx_L1_error)

#line 81 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 81 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 81 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyOrbit.pyx":82
 *         if (3*self.nVectors != len(a)):
 *             print("Error: Invalid input size (expected list of length "+str(3*self.nVectors)+")")
 *             return             # <<<<<<<<<<<<<<
 *         for i in range(3*self.nVectors):
 *             self.c_orbit.velocity[i] = a[i]
 */

#line 82 "pyOrbit.pyx"
    __pyx_r = 0;

#line 82 "pyOrbit.pyx"
    goto __pyx_L0;

    /* "pyOrbit.pyx":80
 *     @velocity.setter
 *     def velocity(self, a):
 *         if (3*self.nVectors != len(a)):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size (expected list of length "+str(3*self.nVectors)+")")
 *             return
 */

#line 80 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":83
 *             print("Error: Invalid input size (expected list of length "+str(3*self.nVectors)+")")
 *             return
 *         for i in range(3*self.nVectors):             # <<<<<<<<<<<<<<
 *             self.c_orbit.velocity[i] = a[i]
 *     def copy(self, orb):
 */

#line 83 "pyOrbit.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nVectors); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 83, __pyx_L1_error)

#line 83 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 83 "pyOrbit.pyx"
  __pyx_t_4 = PyNumber_Multiply(__pyx_int_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 83, __pyx_L1_error)

#line 83 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 83 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 83 "pyOrbit.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 83, __pyx_L1_error)

#line 83 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 83 "pyOrbit.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 83 "pyOrbit.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);

#line 83 "pyOrbit.pyx"
  __pyx_t_4 = 0;

#line 83 "pyOrbit.pyx"
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 83, __pyx_L1_error)

#line 83 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 83 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 83 "pyOrbit.pyx"
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {

#line 83 "pyOrbit.pyx"
    __pyx_t_1 = __pyx_t_4; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;

#line 83 "pyOrbit.pyx"
    __pyx_t_6 = NULL;

#line 83 "pyOrbit.pyx"
  } else {
    __pyx_t_3 = -1; 
#line 83 "pyOrbit.pyx"
__pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 83, __pyx_L1_error)

#line 83 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 83 "pyOrbit.pyx"
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 83, __pyx_L1_error)

#line 83 "pyOrbit.pyx"
  }

#line 83 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 83 "pyOrbit.pyx"
  for (;;) {

#line 83 "pyOrbit.pyx"
    if (likely(!__pyx_t_6)) {

#line 83 "pyOrbit.pyx"
      if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 83 "pyOrbit.pyx"
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;

#line 83 "pyOrbit.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 83 "pyOrbit.pyx"
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(9, 83, __pyx_L1_error)

#line 83 "pyOrbit.pyx"
        #else

#line 83 "pyOrbit.pyx"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 83, __pyx_L1_error)

#line 83 "pyOrbit.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 83 "pyOrbit.pyx"
        #endif

#line 83 "pyOrbit.pyx"
      } else {

#line 83 "pyOrbit.pyx"
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 83 "pyOrbit.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 83 "pyOrbit.pyx"
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(9, 83, __pyx_L1_error)

#line 83 "pyOrbit.pyx"
        #else

#line 83 "pyOrbit.pyx"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 83, __pyx_L1_error)

#line 83 "pyOrbit.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 83 "pyOrbit.pyx"
        #endif

#line 83 "pyOrbit.pyx"
      }
    } else 
#line 83 "pyOrbit.pyx"
{

#line 83 "pyOrbit.pyx"
      __pyx_t_4 = __pyx_t_6(__pyx_t_1);

#line 83 "pyOrbit.pyx"
      if (unlikely(!__pyx_t_4)) {

#line 83 "pyOrbit.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 83 "pyOrbit.pyx"
        if (exc_type) {

#line 83 "pyOrbit.pyx"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 83 "pyOrbit.pyx"
          else __PYX_ERR(9, 83, __pyx_L1_error)

#line 83 "pyOrbit.pyx"
        }

#line 83 "pyOrbit.pyx"
        break;

#line 83 "pyOrbit.pyx"
      }

#line 83 "pyOrbit.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 83 "pyOrbit.pyx"
    }

#line 83 "pyOrbit.pyx"
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);

#line 83 "pyOrbit.pyx"
    __pyx_t_4 = 0;

    /* "pyOrbit.pyx":84
 *             return
 *         for i in range(3*self.nVectors):
 *             self.c_orbit.velocity[i] = a[i]             # <<<<<<<<<<<<<<
 *     def copy(self, orb):
 *         try:
 */

#line 84 "pyOrbit.pyx"
    __pyx_t_4 = PyObject_GetItem(__pyx_v_a, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 84, __pyx_L1_error)

#line 84 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 84 "pyOrbit.pyx"
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 84, __pyx_L1_error)

#line 84 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 84 "pyOrbit.pyx"
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(9, 84, __pyx_L1_error)

#line 84 "pyOrbit.pyx"
    (__pyx_v_self->c_orbit->velocity[__pyx_t_8]) = __pyx_t_7;

    /* "pyOrbit.pyx":83
 *             print("Error: Invalid input size (expected list of length "+str(3*self.nVectors)+")")
 *             return
 *         for i in range(3*self.nVectors):             # <<<<<<<<<<<<<<
 *             self.c_orbit.velocity[i] = a[i]
 *     def copy(self, orb):
 */

#line 83 "pyOrbit.pyx"
  }

#line 83 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyOrbit.pyx":79
 *         return a
 *     @velocity.setter
 *     def velocity(self, a):             # <<<<<<<<<<<<<<
 *         if (3*self.nVectors != len(a)):
 *             print("Error: Invalid input size (expected list of length "+str(3*self.nVectors)+")")
 */

#line 79 "pyOrbit.pyx"


#line 79 "pyOrbit.pyx"
  /* function exit code */

#line 79 "pyOrbit.pyx"
  __pyx_r = 0;

#line 79 "pyOrbit.pyx"
  goto __pyx_L0;

#line 79 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 79 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 79 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 79 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 79 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.velocity.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 79 "pyOrbit.pyx"
  __pyx_r = -1;

#line 79 "pyOrbit.pyx"
  __pyx_L0:;

#line 79 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 79 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 79 "pyOrbit.pyx"
  return __pyx_r;

#line 79 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":85
 *         for i in range(3*self.nVectors):
 *             self.c_orbit.velocity[i] = a[i]
 *     def copy(self, orb):             # <<<<<<<<<<<<<<
 *         try:
 *             self.basis = orb.basis
 */

#line 85 "pyOrbit.pyx"


#line 85 "pyOrbit.pyx"
/* Python wrapper */

#line 85 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_7copy(PyObject *__pyx_v_self, PyObject *__pyx_v_orb); /*proto*/

#line 85 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_7copy(PyObject *__pyx_v_self, PyObject *__pyx_v_orb) {

#line 85 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 85 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 85 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = 
#line 85 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_6copy(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self), ((PyObject *)__pyx_v_orb));

#line 85 "pyOrbit.pyx"


#line 85 "pyOrbit.pyx"
  /* function exit code */

#line 85 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 85 "pyOrbit.pyx"
  return __pyx_r;

#line 85 "pyOrbit.pyx"
}

#line 85 "pyOrbit.pyx"


#line 85 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_6copy(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, PyObject *__pyx_v_orb) {

#line 85 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 85 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 85 "pyOrbit.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 85 "pyOrbit.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 85 "pyOrbit.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 85 "pyOrbit.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 85 "pyOrbit.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 85 "pyOrbit.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 85 "pyOrbit.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 85 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("copy", 0);

  /* "pyOrbit.pyx":86
 *             self.c_orbit.velocity[i] = a[i]
 *     def copy(self, orb):
 *         try:             # <<<<<<<<<<<<<<
 *             self.basis = orb.basis
 *             self.nVectors = orb.nVectors
 */

#line 86 "pyOrbit.pyx"
  {

#line 86 "pyOrbit.pyx"
    __Pyx_PyThreadState_declare

#line 86 "pyOrbit.pyx"
    __Pyx_PyThreadState_assign

#line 86 "pyOrbit.pyx"
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);

#line 86 "pyOrbit.pyx"
    __Pyx_XGOTREF(__pyx_t_1);

#line 86 "pyOrbit.pyx"
    __Pyx_XGOTREF(__pyx_t_2);

#line 86 "pyOrbit.pyx"
    __Pyx_XGOTREF(__pyx_t_3);

#line 86 "pyOrbit.pyx"
    /*try:*/ {

      /* "pyOrbit.pyx":87
 *     def copy(self, orb):
 *         try:
 *             self.basis = orb.basis             # <<<<<<<<<<<<<<
 *             self.nVectors = orb.nVectors
 *             self.UTCtime = orb.UTCtime
 */

#line 87 "pyOrbit.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_orb, __pyx_n_s_basis); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 87, __pyx_L3_error)

#line 87 "pyOrbit.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 87 "pyOrbit.pyx"
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_basis, __pyx_t_4) < 0) __PYX_ERR(9, 87, __pyx_L3_error)

#line 87 "pyOrbit.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyOrbit.pyx":88
 *         try:
 *             self.basis = orb.basis
 *             self.nVectors = orb.nVectors             # <<<<<<<<<<<<<<
 *             self.UTCtime = orb.UTCtime
 *             self.position = orb.position
 */

#line 88 "pyOrbit.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_orb, __pyx_n_s_nVectors); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 88, __pyx_L3_error)

#line 88 "pyOrbit.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 88 "pyOrbit.pyx"
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nVectors, __pyx_t_4) < 0) __PYX_ERR(9, 88, __pyx_L3_error)

#line 88 "pyOrbit.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyOrbit.pyx":89
 *             self.basis = orb.basis
 *             self.nVectors = orb.nVectors
 *             self.UTCtime = orb.UTCtime             # <<<<<<<<<<<<<<
 *             self.position = orb.position
 *             self.velocity = orb.velocity
 */

#line 89 "pyOrbit.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_orb, __pyx_n_s_UTCtime); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 89, __pyx_L3_error)

#line 89 "pyOrbit.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 89 "pyOrbit.pyx"
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_UTCtime, __pyx_t_4) < 0) __PYX_ERR(9, 89, __pyx_L3_error)

#line 89 "pyOrbit.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyOrbit.pyx":90
 *             self.nVectors = orb.nVectors
 *             self.UTCtime = orb.UTCtime
 *             self.position = orb.position             # <<<<<<<<<<<<<<
 *             self.velocity = orb.velocity
 *         except:
 */

#line 90 "pyOrbit.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_orb, __pyx_n_s_position); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 90, __pyx_L3_error)

#line 90 "pyOrbit.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 90 "pyOrbit.pyx"
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_position, __pyx_t_4) < 0) __PYX_ERR(9, 90, __pyx_L3_error)

#line 90 "pyOrbit.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyOrbit.pyx":91
 *             self.UTCtime = orb.UTCtime
 *             self.position = orb.position
 *             self.velocity = orb.velocity             # <<<<<<<<<<<<<<
 *         except:
 *             print("Error: Object passed in to copy is incompatible with object of type pyOrbit.")
 */

#line 91 "pyOrbit.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_orb, __pyx_n_s_velocity); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 91, __pyx_L3_error)

#line 91 "pyOrbit.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 91 "pyOrbit.pyx"
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_velocity, __pyx_t_4) < 0) __PYX_ERR(9, 91, __pyx_L3_error)

#line 91 "pyOrbit.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyOrbit.pyx":86
 *             self.c_orbit.velocity[i] = a[i]
 *     def copy(self, orb):
 *         try:             # <<<<<<<<<<<<<<
 *             self.basis = orb.basis
 *             self.nVectors = orb.nVectors
 */

#line 86 "pyOrbit.pyx"
    }

#line 86 "pyOrbit.pyx"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 86 "pyOrbit.pyx"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 86 "pyOrbit.pyx"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 86 "pyOrbit.pyx"
    goto __pyx_L8_try_end;

#line 86 "pyOrbit.pyx"
    __pyx_L3_error:;

#line 86 "pyOrbit.pyx"
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyOrbit.pyx":92
 *             self.position = orb.position
 *             self.velocity = orb.velocity
 *         except:             # <<<<<<<<<<<<<<
 *             print("Error: Object passed in to copy is incompatible with object of type pyOrbit.")
 *     def dPrint(self):
 */

#line 92 "pyOrbit.pyx"
    /*except:*/ {

#line 92 "pyOrbit.pyx"
      __Pyx_AddTraceback("iscecore.pyOrbit.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 92 "pyOrbit.pyx"
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(9, 92, __pyx_L5_except_error)

#line 92 "pyOrbit.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 92 "pyOrbit.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 92 "pyOrbit.pyx"
      __Pyx_GOTREF(__pyx_t_6);

      /* "pyOrbit.pyx":93
 *             self.velocity = orb.velocity
 *         except:
 *             print("Error: Object passed in to copy is incompatible with object of type pyOrbit.")             # <<<<<<<<<<<<<<
 *     def dPrint(self):
 *         self.printOrbit()
 */

#line 93 "pyOrbit.pyx"
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 93, __pyx_L5_except_error)

#line 93 "pyOrbit.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 93 "pyOrbit.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 93 "pyOrbit.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 93 "pyOrbit.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 93 "pyOrbit.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 93 "pyOrbit.pyx"
      goto __pyx_L4_exception_handled;

#line 93 "pyOrbit.pyx"
    }

#line 93 "pyOrbit.pyx"
    __pyx_L5_except_error:;

    /* "pyOrbit.pyx":86
 *             self.c_orbit.velocity[i] = a[i]
 *     def copy(self, orb):
 *         try:             # <<<<<<<<<<<<<<
 *             self.basis = orb.basis
 *             self.nVectors = orb.nVectors
 */

#line 86 "pyOrbit.pyx"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 86 "pyOrbit.pyx"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 86 "pyOrbit.pyx"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 86 "pyOrbit.pyx"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 86 "pyOrbit.pyx"
    goto __pyx_L1_error;

#line 86 "pyOrbit.pyx"
    __pyx_L4_exception_handled:;

#line 86 "pyOrbit.pyx"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 86 "pyOrbit.pyx"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 86 "pyOrbit.pyx"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 86 "pyOrbit.pyx"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 86 "pyOrbit.pyx"
    __pyx_L8_try_end:;

#line 86 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":85
 *         for i in range(3*self.nVectors):
 *             self.c_orbit.velocity[i] = a[i]
 *     def copy(self, orb):             # <<<<<<<<<<<<<<
 *         try:
 *             self.basis = orb.basis
 */

#line 85 "pyOrbit.pyx"


#line 85 "pyOrbit.pyx"
  /* function exit code */

#line 85 "pyOrbit.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 85 "pyOrbit.pyx"
  goto __pyx_L0;

#line 85 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 85 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 85 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 85 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 85 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 85 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 85 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 85 "pyOrbit.pyx"
  __pyx_L0:;

#line 85 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 85 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 85 "pyOrbit.pyx"
  return __pyx_r;

#line 85 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":94
 *         except:
 *             print("Error: Object passed in to copy is incompatible with object of type pyOrbit.")
 *     def dPrint(self):             # <<<<<<<<<<<<<<
 *         self.printOrbit()
 * 
 */

#line 94 "pyOrbit.pyx"


#line 94 "pyOrbit.pyx"
/* Python wrapper */

#line 94 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_9dPrint(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 94 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_9dPrint(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 94 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 94 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 94 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("dPrint (wrapper)", 0);
  __pyx_r = 
#line 94 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_8dPrint(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self));

#line 94 "pyOrbit.pyx"


#line 94 "pyOrbit.pyx"
  /* function exit code */

#line 94 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 94 "pyOrbit.pyx"
  return __pyx_r;

#line 94 "pyOrbit.pyx"
}

#line 94 "pyOrbit.pyx"


#line 94 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_8dPrint(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self) {

#line 94 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 94 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 94 "pyOrbit.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 94 "pyOrbit.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 94 "pyOrbit.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 94 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("dPrint", 0);

  /* "pyOrbit.pyx":95
 *             print("Error: Object passed in to copy is incompatible with object of type pyOrbit.")
 *     def dPrint(self):
 *         self.printOrbit()             # <<<<<<<<<<<<<<
 * 
 *     def getPositionVelocity(self, double a, list b, list c):
 */

#line 95 "pyOrbit.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_printOrbit); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 95 "pyOrbit.pyx"
  __pyx_t_3 = NULL;

#line 95 "pyOrbit.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 95 "pyOrbit.pyx"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 95 "pyOrbit.pyx"
    if (likely(__pyx_t_3)) {

#line 95 "pyOrbit.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 95 "pyOrbit.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 95 "pyOrbit.pyx"
      __Pyx_INCREF(function);

#line 95 "pyOrbit.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 95 "pyOrbit.pyx"
    }

#line 95 "pyOrbit.pyx"
  }

#line 95 "pyOrbit.pyx"
  if (__pyx_t_3) {

#line 95 "pyOrbit.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 95 "pyOrbit.pyx"
  } else {

#line 95 "pyOrbit.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 95, __pyx_L1_error)

#line 95 "pyOrbit.pyx"
  }

#line 95 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 95 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 95 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyOrbit.pyx":94
 *         except:
 *             print("Error: Object passed in to copy is incompatible with object of type pyOrbit.")
 *     def dPrint(self):             # <<<<<<<<<<<<<<
 *         self.printOrbit()
 * 
 */

#line 94 "pyOrbit.pyx"


#line 94 "pyOrbit.pyx"
  /* function exit code */

#line 94 "pyOrbit.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 94 "pyOrbit.pyx"
  goto __pyx_L0;

#line 94 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 94 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 94 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 94 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 94 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.dPrint", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 94 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 94 "pyOrbit.pyx"
  __pyx_L0:;

#line 94 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 94 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 94 "pyOrbit.pyx"
  return __pyx_r;

#line 94 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":97
 *         self.printOrbit()
 * 
 *     def getPositionVelocity(self, double a, list b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _b
 *         cdef vector[double] _c
 */

#line 97 "pyOrbit.pyx"


#line 97 "pyOrbit.pyx"
/* Python wrapper */

#line 97 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_11getPositionVelocity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 97 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_11getPositionVelocity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a
#line 97 "pyOrbit.pyx"
;
  PyObject *__pyx_v_b = 0
#line 97 "pyOrbit.pyx"
;
  PyObject *__pyx_v_c = 0
#line 97 "pyOrbit.pyx"
;

#line 97 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 97 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 97 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("getPositionVelocity (wrapper)", 0);

#line 97 "pyOrbit.pyx"
  {

#line 97 "pyOrbit.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,0};

#line 97 "pyOrbit.pyx"
    PyObject* values[3] = {0,0,0};

#line 97 "pyOrbit.pyx"
    if (unlikely(__pyx_kwds)) {

#line 97 "pyOrbit.pyx"
      Py_ssize_t kw_args;

#line 97 "pyOrbit.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 97 "pyOrbit.pyx"
      switch (pos_args) {
        case  3: 
#line 97 "pyOrbit.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 97 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 97 "pyOrbit.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 97 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 97 "pyOrbit.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 97 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 97 "pyOrbit.pyx"
        case  0: break;
        default: 
#line 97 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 97 "pyOrbit.pyx"
      }

#line 97 "pyOrbit.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 97 "pyOrbit.pyx"
      switch (pos_args) {

#line 97 "pyOrbit.pyx"
        case  0:

#line 97 "pyOrbit.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 97 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 97 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 97 "pyOrbit.pyx"
        case  1:

#line 97 "pyOrbit.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 97 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("getPositionVelocity", 1, 3, 3, 1); 
#line 97 "pyOrbit.pyx"
__PYX_ERR(9, 97, __pyx_L3_error)

#line 97 "pyOrbit.pyx"
        }

#line 97 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 97 "pyOrbit.pyx"
        case  2:

#line 97 "pyOrbit.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 97 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("getPositionVelocity", 1, 3, 3, 2); 
#line 97 "pyOrbit.pyx"
__PYX_ERR(9, 97, __pyx_L3_error)

#line 97 "pyOrbit.pyx"
        }

#line 97 "pyOrbit.pyx"
      }

#line 97 "pyOrbit.pyx"
      if (unlikely(kw_args > 0)) {

#line 97 "pyOrbit.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getPositionVelocity") < 0)) __PYX_ERR(9, 97, __pyx_L3_error)

#line 97 "pyOrbit.pyx"
      }

#line 97 "pyOrbit.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 97 "pyOrbit.pyx"
      goto __pyx_L5_argtuple_error;

#line 97 "pyOrbit.pyx"
    } else {

#line 97 "pyOrbit.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 97 "pyOrbit.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 97 "pyOrbit.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 97 "pyOrbit.pyx"
    }

#line 97 "pyOrbit.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 97, __pyx_L3_error)

#line 97 "pyOrbit.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 97 "pyOrbit.pyx"
    __pyx_v_c = ((PyObject*)values[2]);

#line 97 "pyOrbit.pyx"
  }

#line 97 "pyOrbit.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 97 "pyOrbit.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getPositionVelocity", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 97 "pyOrbit.pyx"
__PYX_ERR(9, 97, __pyx_L3_error)

#line 97 "pyOrbit.pyx"
  __pyx_L3_error:;

#line 97 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.getPositionVelocity", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 97 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 97 "pyOrbit.pyx"
  return NULL;

#line 97 "pyOrbit.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 97 "pyOrbit.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(9, 97, __pyx_L1_error)

#line 97 "pyOrbit.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), (&PyList_Type), 1, "c", 1))) __PYX_ERR(9, 97, __pyx_L1_error)
  __pyx_r = 
#line 97 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_10getPositionVelocity(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c);

#line 97 "pyOrbit.pyx"


#line 97 "pyOrbit.pyx"
  /* function exit code */

#line 97 "pyOrbit.pyx"
  goto __pyx_L0;

#line 97 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 97 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 97 "pyOrbit.pyx"
  __pyx_L0:;

#line 97 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 97 "pyOrbit.pyx"
  return __pyx_r;

#line 97 "pyOrbit.pyx"
}

#line 97 "pyOrbit.pyx"


#line 97 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_10getPositionVelocity(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, double __pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  std::vector<double>  __pyx_v__b
#line 97 "pyOrbit.pyx"
;
  std::vector<double>  __pyx_v__c
#line 97 "pyOrbit.pyx"
;
  long __pyx_v_i
#line 97 "pyOrbit.pyx"
;

#line 97 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 97 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 97 "pyOrbit.pyx"
  long __pyx_t_1;

#line 97 "pyOrbit.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 97 "pyOrbit.pyx"
  double __pyx_t_3;

#line 97 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("getPositionVelocity", 0);

  /* "pyOrbit.pyx":100
 *         cdef vector[double] _b
 *         cdef vector[double] _c
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 */

#line 100 "pyOrbit.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 100 "pyOrbit.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyOrbit.pyx":101
 *         cdef vector[double] _c
 *         for i in range(3):
 *             _b.push_back(b[i])             # <<<<<<<<<<<<<<
 *             _c.push_back(c[i])
 *         self.c_orbit.getPositionVelocity(a,_b,_c)
 */

#line 101 "pyOrbit.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 101 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 101 "pyOrbit.pyx"
      __PYX_ERR(9, 101, __pyx_L1_error)

#line 101 "pyOrbit.pyx"
    }

#line 101 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 101, __pyx_L1_error)

#line 101 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 101 "pyOrbit.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 101, __pyx_L1_error)

#line 101 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 101 "pyOrbit.pyx"
    try {

#line 101 "pyOrbit.pyx"
      __pyx_v__b.push_back(__pyx_t_3);

#line 101 "pyOrbit.pyx"
    } catch(...) {

#line 101 "pyOrbit.pyx"
      __Pyx_CppExn2PyErr();

#line 101 "pyOrbit.pyx"
      __PYX_ERR(9, 101, __pyx_L1_error)

#line 101 "pyOrbit.pyx"
    }

    /* "pyOrbit.pyx":102
 *         for i in range(3):
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])             # <<<<<<<<<<<<<<
 *         self.c_orbit.getPositionVelocity(a,_b,_c)
 *         for i in range(3):
 */

#line 102 "pyOrbit.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 102 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 102 "pyOrbit.pyx"
      __PYX_ERR(9, 102, __pyx_L1_error)

#line 102 "pyOrbit.pyx"
    }

#line 102 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 102, __pyx_L1_error)

#line 102 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 102 "pyOrbit.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 102, __pyx_L1_error)

#line 102 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 102 "pyOrbit.pyx"
    try {

#line 102 "pyOrbit.pyx"
      __pyx_v__c.push_back(__pyx_t_3);

#line 102 "pyOrbit.pyx"
    } catch(...) {

#line 102 "pyOrbit.pyx"
      __Pyx_CppExn2PyErr();

#line 102 "pyOrbit.pyx"
      __PYX_ERR(9, 102, __pyx_L1_error)

#line 102 "pyOrbit.pyx"
    }

#line 102 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":103
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 *         self.c_orbit.getPositionVelocity(a,_b,_c)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             b[i] = _b[i]
 */

#line 103 "pyOrbit.pyx"
  __pyx_v_self->c_orbit->getPositionVelocity(__pyx_v_a, __pyx_v__b, __pyx_v__c);

  /* "pyOrbit.pyx":104
 *             _c.push_back(c[i])
 *         self.c_orbit.getPositionVelocity(a,_b,_c)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 */

#line 104 "pyOrbit.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 104 "pyOrbit.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyOrbit.pyx":105
 *         self.c_orbit.getPositionVelocity(a,_b,_c)
 *         for i in range(3):
 *             b[i] = _b[i]             # <<<<<<<<<<<<<<
 *             c[i] = _c[i]
 *     def getStateVector(self, int a, b, list c, list d):
 */

#line 105 "pyOrbit.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__b[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 105, __pyx_L1_error)

#line 105 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 105 "pyOrbit.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 105 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 105 "pyOrbit.pyx"
      __PYX_ERR(9, 105, __pyx_L1_error)

#line 105 "pyOrbit.pyx"
    }

#line 105 "pyOrbit.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_b, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(9, 105, __pyx_L1_error)

#line 105 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyOrbit.pyx":106
 *         for i in range(3):
 *             b[i] = _b[i]
 *             c[i] = _c[i]             # <<<<<<<<<<<<<<
 *     def getStateVector(self, int a, b, list c, list d):
 *         cdef vector[double] _c
 */

#line 106 "pyOrbit.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__c[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 106, __pyx_L1_error)

#line 106 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 106 "pyOrbit.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 106 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 106 "pyOrbit.pyx"
      __PYX_ERR(9, 106, __pyx_L1_error)

#line 106 "pyOrbit.pyx"
    }

#line 106 "pyOrbit.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_c, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(9, 106, __pyx_L1_error)

#line 106 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 106 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":97
 *         self.printOrbit()
 * 
 *     def getPositionVelocity(self, double a, list b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _b
 *         cdef vector[double] _c
 */

#line 97 "pyOrbit.pyx"


#line 97 "pyOrbit.pyx"
  /* function exit code */

#line 97 "pyOrbit.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 97 "pyOrbit.pyx"
  goto __pyx_L0;

#line 97 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 97 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 97 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.getPositionVelocity", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 97 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 97 "pyOrbit.pyx"
  __pyx_L0:;

#line 97 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 97 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 97 "pyOrbit.pyx"
  return __pyx_r;

#line 97 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":107
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 *     def getStateVector(self, int a, b, list c, list d):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _c
 *         cdef vector[double] _d
 */

#line 107 "pyOrbit.pyx"


#line 107 "pyOrbit.pyx"
/* Python wrapper */

#line 107 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_13getStateVector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 107 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_13getStateVector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_a
#line 107 "pyOrbit.pyx"
;
  PyObject *__pyx_v_b = 0
#line 107 "pyOrbit.pyx"
;
  PyObject *__pyx_v_c = 0
#line 107 "pyOrbit.pyx"
;
  PyObject *__pyx_v_d = 0
#line 107 "pyOrbit.pyx"
;

#line 107 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 107 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 107 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("getStateVector (wrapper)", 0);

#line 107 "pyOrbit.pyx"
  {

#line 107 "pyOrbit.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,&__pyx_n_s_d,0};

#line 107 "pyOrbit.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 107 "pyOrbit.pyx"
    if (unlikely(__pyx_kwds)) {

#line 107 "pyOrbit.pyx"
      Py_ssize_t kw_args;

#line 107 "pyOrbit.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 107 "pyOrbit.pyx"
      switch (pos_args) {
        case  4: 
#line 107 "pyOrbit.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 107 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 107 "pyOrbit.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 107 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 107 "pyOrbit.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 107 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 107 "pyOrbit.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 107 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 107 "pyOrbit.pyx"
        case  0: break;
        default: 
#line 107 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 107 "pyOrbit.pyx"
      }

#line 107 "pyOrbit.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 107 "pyOrbit.pyx"
      switch (pos_args) {

#line 107 "pyOrbit.pyx"
        case  0:

#line 107 "pyOrbit.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 107 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 107 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 107 "pyOrbit.pyx"
        case  1:

#line 107 "pyOrbit.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 107 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("getStateVector", 1, 4, 4, 1); 
#line 107 "pyOrbit.pyx"
__PYX_ERR(9, 107, __pyx_L3_error)

#line 107 "pyOrbit.pyx"
        }

#line 107 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 107 "pyOrbit.pyx"
        case  2:

#line 107 "pyOrbit.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 107 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("getStateVector", 1, 4, 4, 2); 
#line 107 "pyOrbit.pyx"
__PYX_ERR(9, 107, __pyx_L3_error)

#line 107 "pyOrbit.pyx"
        }

#line 107 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 107 "pyOrbit.pyx"
        case  3:

#line 107 "pyOrbit.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;

#line 107 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("getStateVector", 1, 4, 4, 3); 
#line 107 "pyOrbit.pyx"
__PYX_ERR(9, 107, __pyx_L3_error)

#line 107 "pyOrbit.pyx"
        }

#line 107 "pyOrbit.pyx"
      }

#line 107 "pyOrbit.pyx"
      if (unlikely(kw_args > 0)) {

#line 107 "pyOrbit.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getStateVector") < 0)) __PYX_ERR(9, 107, __pyx_L3_error)

#line 107 "pyOrbit.pyx"
      }

#line 107 "pyOrbit.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 107 "pyOrbit.pyx"
      goto __pyx_L5_argtuple_error;

#line 107 "pyOrbit.pyx"
    } else {

#line 107 "pyOrbit.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 107 "pyOrbit.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 107 "pyOrbit.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 107 "pyOrbit.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 107 "pyOrbit.pyx"
    }

#line 107 "pyOrbit.pyx"
    __pyx_v_a = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_a == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 107, __pyx_L3_error)

#line 107 "pyOrbit.pyx"
    __pyx_v_b = values[1];

#line 107 "pyOrbit.pyx"
    __pyx_v_c = ((PyObject*)values[2]);

#line 107 "pyOrbit.pyx"
    __pyx_v_d = ((PyObject*)values[3]);

#line 107 "pyOrbit.pyx"
  }

#line 107 "pyOrbit.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 107 "pyOrbit.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getStateVector", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 107 "pyOrbit.pyx"
__PYX_ERR(9, 107, __pyx_L3_error)

#line 107 "pyOrbit.pyx"
  __pyx_L3_error:;

#line 107 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.getStateVector", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 107 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 107 "pyOrbit.pyx"
  return NULL;

#line 107 "pyOrbit.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 107 "pyOrbit.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), (&PyList_Type), 1, "c", 1))) __PYX_ERR(9, 107, __pyx_L1_error)

#line 107 "pyOrbit.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_d), (&PyList_Type), 1, "d", 1))) __PYX_ERR(9, 107, __pyx_L1_error)
  __pyx_r = 
#line 107 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_12getStateVector(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c, __pyx_v_d);

#line 107 "pyOrbit.pyx"


#line 107 "pyOrbit.pyx"
  /* function exit code */

#line 107 "pyOrbit.pyx"
  goto __pyx_L0;

#line 107 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 107 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 107 "pyOrbit.pyx"
  __pyx_L0:;

#line 107 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 107 "pyOrbit.pyx"
  return __pyx_r;

#line 107 "pyOrbit.pyx"
}

#line 107 "pyOrbit.pyx"


#line 107 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_12getStateVector(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, int __pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  std::vector<double>  __pyx_v__c
#line 107 "pyOrbit.pyx"
;
  std::vector<double>  __pyx_v__d
#line 107 "pyOrbit.pyx"
;
  double __pyx_v__b
#line 107 "pyOrbit.pyx"
;
  long __pyx_v_i
#line 107 "pyOrbit.pyx"
;

#line 107 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 107 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 107 "pyOrbit.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 107 "pyOrbit.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 107 "pyOrbit.pyx"
  int __pyx_t_3;

#line 107 "pyOrbit.pyx"
  long __pyx_t_4;

#line 107 "pyOrbit.pyx"
  double __pyx_t_5;

#line 107 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("getStateVector", 0);

  /* "pyOrbit.pyx":111
 *         cdef vector[double] _d
 *         cdef double _b
 *         if (type(b) != type([])):             # <<<<<<<<<<<<<<
 *             print("Error: Python cannot pass primitives by reference.")
 *             print("To call this function, please pass the function an empty 1-tuple in the")
 */

#line 111 "pyOrbit.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 111, __pyx_L1_error)

#line 111 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 111 "pyOrbit.pyx"
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_b)), ((PyObject *)Py_TYPE(__pyx_t_1)), Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 111, __pyx_L1_error)

#line 111 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 111 "pyOrbit.pyx"
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(9, 111, __pyx_L1_error)

#line 111 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 111 "pyOrbit.pyx"
  if (__pyx_t_3) {

    /* "pyOrbit.pyx":112
 *         cdef double _b
 *         if (type(b) != type([])):
 *             print("Error: Python cannot pass primitives by reference.")             # <<<<<<<<<<<<<<
 *             print("To call this function, please pass the function an empty 1-tuple in the")
 *             print("second argument slot. The function will store the resulting time value")
 */

#line 112 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 112, __pyx_L1_error)

#line 112 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 112 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyOrbit.pyx":113
 *         if (type(b) != type([])):
 *             print("Error: Python cannot pass primitives by reference.")
 *             print("To call this function, please pass the function an empty 1-tuple in the")             # <<<<<<<<<<<<<<
 *             print("second argument slot. The function will store the resulting time value")
 *             print("as the first (and only) element in the 1-tuple.")
 */

#line 113 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 113, __pyx_L1_error)

#line 113 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 113 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyOrbit.pyx":114
 *             print("Error: Python cannot pass primitives by reference.")
 *             print("To call this function, please pass the function an empty 1-tuple in the")
 *             print("second argument slot. The function will store the resulting time value")             # <<<<<<<<<<<<<<
 *             print("as the first (and only) element in the 1-tuple.")
 *         else:
 */

#line 114 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 114, __pyx_L1_error)

#line 114 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 114 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyOrbit.pyx":115
 *             print("To call this function, please pass the function an empty 1-tuple in the")
 *             print("second argument slot. The function will store the resulting time value")
 *             print("as the first (and only) element in the 1-tuple.")             # <<<<<<<<<<<<<<
 *         else:
 *             _b = 0.
 */

#line 115 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 115, __pyx_L1_error)

#line 115 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 115 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyOrbit.pyx":111
 *         cdef vector[double] _d
 *         cdef double _b
 *         if (type(b) != type([])):             # <<<<<<<<<<<<<<
 *             print("Error: Python cannot pass primitives by reference.")
 *             print("To call this function, please pass the function an empty 1-tuple in the")
 */

#line 111 "pyOrbit.pyx"
    goto __pyx_L3;

#line 111 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":117
 *             print("as the first (and only) element in the 1-tuple.")
 *         else:
 *             _b = 0.             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 _c.push_back(c[i])
 */

#line 117 "pyOrbit.pyx"
  /*else*/ {

#line 117 "pyOrbit.pyx"
    __pyx_v__b = 0.;

    /* "pyOrbit.pyx":118
 *         else:
 *             _b = 0.
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 _c.push_back(c[i])
 *                 _d.push_back(d[i])
 */

#line 118 "pyOrbit.pyx"
    for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {

#line 118 "pyOrbit.pyx"
      __pyx_v_i = __pyx_t_4;

      /* "pyOrbit.pyx":119
 *             _b = 0.
 *             for i in range(3):
 *                 _c.push_back(c[i])             # <<<<<<<<<<<<<<
 *                 _d.push_back(d[i])
 *             self.c_orbit.getStateVector(a,_b,_c,_d)
 */

#line 119 "pyOrbit.pyx"
      if (unlikely(__pyx_v_c == Py_None)) {

#line 119 "pyOrbit.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 119 "pyOrbit.pyx"
        __PYX_ERR(9, 119, __pyx_L1_error)

#line 119 "pyOrbit.pyx"
      }

#line 119 "pyOrbit.pyx"
      __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 119, __pyx_L1_error)

#line 119 "pyOrbit.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 119 "pyOrbit.pyx"
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 119, __pyx_L1_error)

#line 119 "pyOrbit.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 119 "pyOrbit.pyx"
      try {

#line 119 "pyOrbit.pyx"
        __pyx_v__c.push_back(__pyx_t_5);

#line 119 "pyOrbit.pyx"
      } catch(...) {

#line 119 "pyOrbit.pyx"
        __Pyx_CppExn2PyErr();

#line 119 "pyOrbit.pyx"
        __PYX_ERR(9, 119, __pyx_L1_error)

#line 119 "pyOrbit.pyx"
      }

      /* "pyOrbit.pyx":120
 *             for i in range(3):
 *                 _c.push_back(c[i])
 *                 _d.push_back(d[i])             # <<<<<<<<<<<<<<
 *             self.c_orbit.getStateVector(a,_b,_c,_d)
 *             for i in range(3):
 */

#line 120 "pyOrbit.pyx"
      if (unlikely(__pyx_v_d == Py_None)) {

#line 120 "pyOrbit.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 120 "pyOrbit.pyx"
        __PYX_ERR(9, 120, __pyx_L1_error)

#line 120 "pyOrbit.pyx"
      }

#line 120 "pyOrbit.pyx"
      __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_d, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 120, __pyx_L1_error)

#line 120 "pyOrbit.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 120 "pyOrbit.pyx"
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 120, __pyx_L1_error)

#line 120 "pyOrbit.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 120 "pyOrbit.pyx"
      try {

#line 120 "pyOrbit.pyx"
        __pyx_v__d.push_back(__pyx_t_5);

#line 120 "pyOrbit.pyx"
      } catch(...) {

#line 120 "pyOrbit.pyx"
        __Pyx_CppExn2PyErr();

#line 120 "pyOrbit.pyx"
        __PYX_ERR(9, 120, __pyx_L1_error)

#line 120 "pyOrbit.pyx"
      }

#line 120 "pyOrbit.pyx"
    }

    /* "pyOrbit.pyx":121
 *                 _c.push_back(c[i])
 *                 _d.push_back(d[i])
 *             self.c_orbit.getStateVector(a,_b,_c,_d)             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 c[i] = _c[i]
 */

#line 121 "pyOrbit.pyx"
    __pyx_v_self->c_orbit->getStateVector(__pyx_v_a, __pyx_v__b, __pyx_v__c, __pyx_v__d);

    /* "pyOrbit.pyx":122
 *                 _d.push_back(d[i])
 *             self.c_orbit.getStateVector(a,_b,_c,_d)
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 c[i] = _c[i]
 *                 d[i] = _d[i]
 */

#line 122 "pyOrbit.pyx"
    for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {

#line 122 "pyOrbit.pyx"
      __pyx_v_i = __pyx_t_4;

      /* "pyOrbit.pyx":123
 *             self.c_orbit.getStateVector(a,_b,_c,_d)
 *             for i in range(3):
 *                 c[i] = _c[i]             # <<<<<<<<<<<<<<
 *                 d[i] = _d[i]
 *             b[0] = _b
 */

#line 123 "pyOrbit.pyx"
      __pyx_t_2 = PyFloat_FromDouble((__pyx_v__c[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 123, __pyx_L1_error)

#line 123 "pyOrbit.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 123 "pyOrbit.pyx"
      if (unlikely(__pyx_v_c == Py_None)) {

#line 123 "pyOrbit.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 123 "pyOrbit.pyx"
        __PYX_ERR(9, 123, __pyx_L1_error)

#line 123 "pyOrbit.pyx"
      }

#line 123 "pyOrbit.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_v_c, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(9, 123, __pyx_L1_error)

#line 123 "pyOrbit.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyOrbit.pyx":124
 *             for i in range(3):
 *                 c[i] = _c[i]
 *                 d[i] = _d[i]             # <<<<<<<<<<<<<<
 *             b[0] = _b
 *     def setStateVector(self, int a, double b, list c, list d):
 */

#line 124 "pyOrbit.pyx"
      __pyx_t_2 = PyFloat_FromDouble((__pyx_v__d[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 124, __pyx_L1_error)

#line 124 "pyOrbit.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 124 "pyOrbit.pyx"
      if (unlikely(__pyx_v_d == Py_None)) {

#line 124 "pyOrbit.pyx"
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 124 "pyOrbit.pyx"
        __PYX_ERR(9, 124, __pyx_L1_error)

#line 124 "pyOrbit.pyx"
      }

#line 124 "pyOrbit.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_v_d, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(9, 124, __pyx_L1_error)

#line 124 "pyOrbit.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 124 "pyOrbit.pyx"
    }

    /* "pyOrbit.pyx":125
 *                 c[i] = _c[i]
 *                 d[i] = _d[i]
 *             b[0] = _b             # <<<<<<<<<<<<<<
 *     def setStateVector(self, int a, double b, list c, list d):
 *         cdef vector[double] _c
 */

#line 125 "pyOrbit.pyx"
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v__b); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 125, __pyx_L1_error)

#line 125 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 125 "pyOrbit.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_b, 0, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) __PYX_ERR(9, 125, __pyx_L1_error)

#line 125 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 125 "pyOrbit.pyx"
  }

#line 125 "pyOrbit.pyx"
  __pyx_L3:;

  /* "pyOrbit.pyx":107
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 *     def getStateVector(self, int a, b, list c, list d):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _c
 *         cdef vector[double] _d
 */

#line 107 "pyOrbit.pyx"


#line 107 "pyOrbit.pyx"
  /* function exit code */

#line 107 "pyOrbit.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 107 "pyOrbit.pyx"
  goto __pyx_L0;

#line 107 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 107 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 107 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 107 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.getStateVector", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 107 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 107 "pyOrbit.pyx"
  __pyx_L0:;

#line 107 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 107 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 107 "pyOrbit.pyx"
  return __pyx_r;

#line 107 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":126
 *                 d[i] = _d[i]
 *             b[0] = _b
 *     def setStateVector(self, int a, double b, list c, list d):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _c
 *         cdef vector[double] _d
 */

#line 126 "pyOrbit.pyx"


#line 126 "pyOrbit.pyx"
/* Python wrapper */

#line 126 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_15setStateVector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 126 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_15setStateVector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_a
#line 126 "pyOrbit.pyx"
;
  double __pyx_v_b
#line 126 "pyOrbit.pyx"
;
  PyObject *__pyx_v_c = 0
#line 126 "pyOrbit.pyx"
;
  PyObject *__pyx_v_d = 0
#line 126 "pyOrbit.pyx"
;

#line 126 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 126 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 126 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("setStateVector (wrapper)", 0);

#line 126 "pyOrbit.pyx"
  {

#line 126 "pyOrbit.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,&__pyx_n_s_d,0};

#line 126 "pyOrbit.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 126 "pyOrbit.pyx"
    if (unlikely(__pyx_kwds)) {

#line 126 "pyOrbit.pyx"
      Py_ssize_t kw_args;

#line 126 "pyOrbit.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 126 "pyOrbit.pyx"
      switch (pos_args) {
        case  4: 
#line 126 "pyOrbit.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 126 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 126 "pyOrbit.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 126 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 126 "pyOrbit.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 126 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 126 "pyOrbit.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 126 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 126 "pyOrbit.pyx"
        case  0: break;
        default: 
#line 126 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 126 "pyOrbit.pyx"
      }

#line 126 "pyOrbit.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 126 "pyOrbit.pyx"
      switch (pos_args) {

#line 126 "pyOrbit.pyx"
        case  0:

#line 126 "pyOrbit.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 126 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 126 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 126 "pyOrbit.pyx"
        case  1:

#line 126 "pyOrbit.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 126 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("setStateVector", 1, 4, 4, 1); 
#line 126 "pyOrbit.pyx"
__PYX_ERR(9, 126, __pyx_L3_error)

#line 126 "pyOrbit.pyx"
        }

#line 126 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 126 "pyOrbit.pyx"
        case  2:

#line 126 "pyOrbit.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 126 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("setStateVector", 1, 4, 4, 2); 
#line 126 "pyOrbit.pyx"
__PYX_ERR(9, 126, __pyx_L3_error)

#line 126 "pyOrbit.pyx"
        }

#line 126 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 126 "pyOrbit.pyx"
        case  3:

#line 126 "pyOrbit.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;

#line 126 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("setStateVector", 1, 4, 4, 3); 
#line 126 "pyOrbit.pyx"
__PYX_ERR(9, 126, __pyx_L3_error)

#line 126 "pyOrbit.pyx"
        }

#line 126 "pyOrbit.pyx"
      }

#line 126 "pyOrbit.pyx"
      if (unlikely(kw_args > 0)) {

#line 126 "pyOrbit.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setStateVector") < 0)) __PYX_ERR(9, 126, __pyx_L3_error)

#line 126 "pyOrbit.pyx"
      }

#line 126 "pyOrbit.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 126 "pyOrbit.pyx"
      goto __pyx_L5_argtuple_error;

#line 126 "pyOrbit.pyx"
    } else {

#line 126 "pyOrbit.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 126 "pyOrbit.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 126 "pyOrbit.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 126 "pyOrbit.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 126 "pyOrbit.pyx"
    }

#line 126 "pyOrbit.pyx"
    __pyx_v_a = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_a == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 126, __pyx_L3_error)

#line 126 "pyOrbit.pyx"
    __pyx_v_b = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 126, __pyx_L3_error)

#line 126 "pyOrbit.pyx"
    __pyx_v_c = ((PyObject*)values[2]);

#line 126 "pyOrbit.pyx"
    __pyx_v_d = ((PyObject*)values[3]);

#line 126 "pyOrbit.pyx"
  }

#line 126 "pyOrbit.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 126 "pyOrbit.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setStateVector", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 126 "pyOrbit.pyx"
__PYX_ERR(9, 126, __pyx_L3_error)

#line 126 "pyOrbit.pyx"
  __pyx_L3_error:;

#line 126 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.setStateVector", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 126 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 126 "pyOrbit.pyx"
  return NULL;

#line 126 "pyOrbit.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 126 "pyOrbit.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), (&PyList_Type), 1, "c", 1))) __PYX_ERR(9, 126, __pyx_L1_error)

#line 126 "pyOrbit.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_d), (&PyList_Type), 1, "d", 1))) __PYX_ERR(9, 126, __pyx_L1_error)
  __pyx_r = 
#line 126 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_14setStateVector(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c, __pyx_v_d);

#line 126 "pyOrbit.pyx"


#line 126 "pyOrbit.pyx"
  /* function exit code */

#line 126 "pyOrbit.pyx"
  goto __pyx_L0;

#line 126 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 126 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 126 "pyOrbit.pyx"
  __pyx_L0:;

#line 126 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 126 "pyOrbit.pyx"
  return __pyx_r;

#line 126 "pyOrbit.pyx"
}

#line 126 "pyOrbit.pyx"


#line 126 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_14setStateVector(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, int __pyx_v_a, double __pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  std::vector<double>  __pyx_v__c
#line 126 "pyOrbit.pyx"
;
  std::vector<double>  __pyx_v__d
#line 126 "pyOrbit.pyx"
;
  long __pyx_v_i
#line 126 "pyOrbit.pyx"
;

#line 126 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 126 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 126 "pyOrbit.pyx"
  long __pyx_t_1;

#line 126 "pyOrbit.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 126 "pyOrbit.pyx"
  double __pyx_t_3;

#line 126 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("setStateVector", 0);

  /* "pyOrbit.pyx":129
 *         cdef vector[double] _c
 *         cdef vector[double] _d
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _c.push_back(c[i])
 *             _d.push_back(d[i])
 */

#line 129 "pyOrbit.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 129 "pyOrbit.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyOrbit.pyx":130
 *         cdef vector[double] _d
 *         for i in range(3):
 *             _c.push_back(c[i])             # <<<<<<<<<<<<<<
 *             _d.push_back(d[i])
 *         self.c_orbit.setStateVector(a,b,_c,_d)
 */

#line 130 "pyOrbit.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 130 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 130 "pyOrbit.pyx"
      __PYX_ERR(9, 130, __pyx_L1_error)

#line 130 "pyOrbit.pyx"
    }

#line 130 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 130, __pyx_L1_error)

#line 130 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 130 "pyOrbit.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 130, __pyx_L1_error)

#line 130 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 130 "pyOrbit.pyx"
    try {

#line 130 "pyOrbit.pyx"
      __pyx_v__c.push_back(__pyx_t_3);

#line 130 "pyOrbit.pyx"
    } catch(...) {

#line 130 "pyOrbit.pyx"
      __Pyx_CppExn2PyErr();

#line 130 "pyOrbit.pyx"
      __PYX_ERR(9, 130, __pyx_L1_error)

#line 130 "pyOrbit.pyx"
    }

    /* "pyOrbit.pyx":131
 *         for i in range(3):
 *             _c.push_back(c[i])
 *             _d.push_back(d[i])             # <<<<<<<<<<<<<<
 *         self.c_orbit.setStateVector(a,b,_c,_d)
 *         for i in range(3):
 */

#line 131 "pyOrbit.pyx"
    if (unlikely(__pyx_v_d == Py_None)) {

#line 131 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 131 "pyOrbit.pyx"
      __PYX_ERR(9, 131, __pyx_L1_error)

#line 131 "pyOrbit.pyx"
    }

#line 131 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_d, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 131, __pyx_L1_error)

#line 131 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 131 "pyOrbit.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 131, __pyx_L1_error)

#line 131 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 131 "pyOrbit.pyx"
    try {

#line 131 "pyOrbit.pyx"
      __pyx_v__d.push_back(__pyx_t_3);

#line 131 "pyOrbit.pyx"
    } catch(...) {

#line 131 "pyOrbit.pyx"
      __Pyx_CppExn2PyErr();

#line 131 "pyOrbit.pyx"
      __PYX_ERR(9, 131, __pyx_L1_error)

#line 131 "pyOrbit.pyx"
    }

#line 131 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":132
 *             _c.push_back(c[i])
 *             _d.push_back(d[i])
 *         self.c_orbit.setStateVector(a,b,_c,_d)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             c[i] = _c[i]
 */

#line 132 "pyOrbit.pyx"
  __pyx_v_self->c_orbit->setStateVector(__pyx_v_a, __pyx_v_b, __pyx_v__c, __pyx_v__d);

  /* "pyOrbit.pyx":133
 *             _d.push_back(d[i])
 *         self.c_orbit.setStateVector(a,b,_c,_d)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             c[i] = _c[i]
 *             d[i] = _d[i]
 */

#line 133 "pyOrbit.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 133 "pyOrbit.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyOrbit.pyx":134
 *         self.c_orbit.setStateVector(a,b,_c,_d)
 *         for i in range(3):
 *             c[i] = _c[i]             # <<<<<<<<<<<<<<
 *             d[i] = _d[i]
 *     def addStateVector(self, double a, list b, list c):
 */

#line 134 "pyOrbit.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__c[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 134, __pyx_L1_error)

#line 134 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 134 "pyOrbit.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 134 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 134 "pyOrbit.pyx"
      __PYX_ERR(9, 134, __pyx_L1_error)

#line 134 "pyOrbit.pyx"
    }

#line 134 "pyOrbit.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_c, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(9, 134, __pyx_L1_error)

#line 134 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyOrbit.pyx":135
 *         for i in range(3):
 *             c[i] = _c[i]
 *             d[i] = _d[i]             # <<<<<<<<<<<<<<
 *     def addStateVector(self, double a, list b, list c):
 *         cdef vector[double] _b
 */

#line 135 "pyOrbit.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__d[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 135, __pyx_L1_error)

#line 135 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 135 "pyOrbit.pyx"
    if (unlikely(__pyx_v_d == Py_None)) {

#line 135 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 135 "pyOrbit.pyx"
      __PYX_ERR(9, 135, __pyx_L1_error)

#line 135 "pyOrbit.pyx"
    }

#line 135 "pyOrbit.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_d, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(9, 135, __pyx_L1_error)

#line 135 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 135 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":126
 *                 d[i] = _d[i]
 *             b[0] = _b
 *     def setStateVector(self, int a, double b, list c, list d):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _c
 *         cdef vector[double] _d
 */

#line 126 "pyOrbit.pyx"


#line 126 "pyOrbit.pyx"
  /* function exit code */

#line 126 "pyOrbit.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 126 "pyOrbit.pyx"
  goto __pyx_L0;

#line 126 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 126 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 126 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.setStateVector", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 126 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 126 "pyOrbit.pyx"
  __pyx_L0:;

#line 126 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 126 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 126 "pyOrbit.pyx"
  return __pyx_r;

#line 126 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":136
 *             c[i] = _c[i]
 *             d[i] = _d[i]
 *     def addStateVector(self, double a, list b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _b
 *         cdef vector[double] _c
 */

#line 136 "pyOrbit.pyx"


#line 136 "pyOrbit.pyx"
/* Python wrapper */

#line 136 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_17addStateVector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 136 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_17addStateVector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a
#line 136 "pyOrbit.pyx"
;
  PyObject *__pyx_v_b = 0
#line 136 "pyOrbit.pyx"
;
  PyObject *__pyx_v_c = 0
#line 136 "pyOrbit.pyx"
;

#line 136 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 136 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 136 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("addStateVector (wrapper)", 0);

#line 136 "pyOrbit.pyx"
  {

#line 136 "pyOrbit.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,0};

#line 136 "pyOrbit.pyx"
    PyObject* values[3] = {0,0,0};

#line 136 "pyOrbit.pyx"
    if (unlikely(__pyx_kwds)) {

#line 136 "pyOrbit.pyx"
      Py_ssize_t kw_args;

#line 136 "pyOrbit.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 136 "pyOrbit.pyx"
      switch (pos_args) {
        case  3: 
#line 136 "pyOrbit.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 136 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 136 "pyOrbit.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 136 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 136 "pyOrbit.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 136 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 136 "pyOrbit.pyx"
        case  0: break;
        default: 
#line 136 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 136 "pyOrbit.pyx"
      }

#line 136 "pyOrbit.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 136 "pyOrbit.pyx"
      switch (pos_args) {

#line 136 "pyOrbit.pyx"
        case  0:

#line 136 "pyOrbit.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 136 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 136 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 136 "pyOrbit.pyx"
        case  1:

#line 136 "pyOrbit.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 136 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("addStateVector", 1, 3, 3, 1); 
#line 136 "pyOrbit.pyx"
__PYX_ERR(9, 136, __pyx_L3_error)

#line 136 "pyOrbit.pyx"
        }

#line 136 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 136 "pyOrbit.pyx"
        case  2:

#line 136 "pyOrbit.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 136 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("addStateVector", 1, 3, 3, 2); 
#line 136 "pyOrbit.pyx"
__PYX_ERR(9, 136, __pyx_L3_error)

#line 136 "pyOrbit.pyx"
        }

#line 136 "pyOrbit.pyx"
      }

#line 136 "pyOrbit.pyx"
      if (unlikely(kw_args > 0)) {

#line 136 "pyOrbit.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addStateVector") < 0)) __PYX_ERR(9, 136, __pyx_L3_error)

#line 136 "pyOrbit.pyx"
      }

#line 136 "pyOrbit.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 136 "pyOrbit.pyx"
      goto __pyx_L5_argtuple_error;

#line 136 "pyOrbit.pyx"
    } else {

#line 136 "pyOrbit.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 136 "pyOrbit.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 136 "pyOrbit.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 136 "pyOrbit.pyx"
    }

#line 136 "pyOrbit.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 136, __pyx_L3_error)

#line 136 "pyOrbit.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 136 "pyOrbit.pyx"
    __pyx_v_c = ((PyObject*)values[2]);

#line 136 "pyOrbit.pyx"
  }

#line 136 "pyOrbit.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 136 "pyOrbit.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addStateVector", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 136 "pyOrbit.pyx"
__PYX_ERR(9, 136, __pyx_L3_error)

#line 136 "pyOrbit.pyx"
  __pyx_L3_error:;

#line 136 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.addStateVector", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 136 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 136 "pyOrbit.pyx"
  return NULL;

#line 136 "pyOrbit.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 136 "pyOrbit.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(9, 136, __pyx_L1_error)

#line 136 "pyOrbit.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), (&PyList_Type), 1, "c", 1))) __PYX_ERR(9, 136, __pyx_L1_error)
  __pyx_r = 
#line 136 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_16addStateVector(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c);

#line 136 "pyOrbit.pyx"


#line 136 "pyOrbit.pyx"
  /* function exit code */

#line 136 "pyOrbit.pyx"
  goto __pyx_L0;

#line 136 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 136 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 136 "pyOrbit.pyx"
  __pyx_L0:;

#line 136 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 136 "pyOrbit.pyx"
  return __pyx_r;

#line 136 "pyOrbit.pyx"
}

#line 136 "pyOrbit.pyx"


#line 136 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_16addStateVector(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, double __pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  std::vector<double>  __pyx_v__b
#line 136 "pyOrbit.pyx"
;
  std::vector<double>  __pyx_v__c
#line 136 "pyOrbit.pyx"
;
  long __pyx_v_i
#line 136 "pyOrbit.pyx"
;

#line 136 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 136 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 136 "pyOrbit.pyx"
  long __pyx_t_1;

#line 136 "pyOrbit.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 136 "pyOrbit.pyx"
  double __pyx_t_3;

#line 136 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("addStateVector", 0);

  /* "pyOrbit.pyx":139
 *         cdef vector[double] _b
 *         cdef vector[double] _c
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 */

#line 139 "pyOrbit.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 139 "pyOrbit.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyOrbit.pyx":140
 *         cdef vector[double] _c
 *         for i in range(3):
 *             _b.push_back(b[i])             # <<<<<<<<<<<<<<
 *             _c.push_back(c[i])
 *         self.c_orbit.addStateVector(a,_b,_c)
 */

#line 140 "pyOrbit.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 140 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 140 "pyOrbit.pyx"
      __PYX_ERR(9, 140, __pyx_L1_error)

#line 140 "pyOrbit.pyx"
    }

#line 140 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 140, __pyx_L1_error)

#line 140 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 140 "pyOrbit.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 140, __pyx_L1_error)

#line 140 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 140 "pyOrbit.pyx"
    try {

#line 140 "pyOrbit.pyx"
      __pyx_v__b.push_back(__pyx_t_3);

#line 140 "pyOrbit.pyx"
    } catch(...) {

#line 140 "pyOrbit.pyx"
      __Pyx_CppExn2PyErr();

#line 140 "pyOrbit.pyx"
      __PYX_ERR(9, 140, __pyx_L1_error)

#line 140 "pyOrbit.pyx"
    }

    /* "pyOrbit.pyx":141
 *         for i in range(3):
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])             # <<<<<<<<<<<<<<
 *         self.c_orbit.addStateVector(a,_b,_c)
 *     def interpolate(self, double a, list b, list c, int d):
 */

#line 141 "pyOrbit.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 141 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 141 "pyOrbit.pyx"
      __PYX_ERR(9, 141, __pyx_L1_error)

#line 141 "pyOrbit.pyx"
    }

#line 141 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 141, __pyx_L1_error)

#line 141 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 141 "pyOrbit.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 141, __pyx_L1_error)

#line 141 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 141 "pyOrbit.pyx"
    try {

#line 141 "pyOrbit.pyx"
      __pyx_v__c.push_back(__pyx_t_3);

#line 141 "pyOrbit.pyx"
    } catch(...) {

#line 141 "pyOrbit.pyx"
      __Pyx_CppExn2PyErr();

#line 141 "pyOrbit.pyx"
      __PYX_ERR(9, 141, __pyx_L1_error)

#line 141 "pyOrbit.pyx"
    }

#line 141 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":142
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 *         self.c_orbit.addStateVector(a,_b,_c)             # <<<<<<<<<<<<<<
 *     def interpolate(self, double a, list b, list c, int d):
 *         cdef vector[double] _b
 */

#line 142 "pyOrbit.pyx"
  __pyx_v_self->c_orbit->addStateVector(__pyx_v_a, __pyx_v__b, __pyx_v__c);

  /* "pyOrbit.pyx":136
 *             c[i] = _c[i]
 *             d[i] = _d[i]
 *     def addStateVector(self, double a, list b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _b
 *         cdef vector[double] _c
 */

#line 136 "pyOrbit.pyx"


#line 136 "pyOrbit.pyx"
  /* function exit code */

#line 136 "pyOrbit.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 136 "pyOrbit.pyx"
  goto __pyx_L0;

#line 136 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 136 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 136 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.addStateVector", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 136 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 136 "pyOrbit.pyx"
  __pyx_L0:;

#line 136 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 136 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 136 "pyOrbit.pyx"
  return __pyx_r;

#line 136 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":143
 *             _c.push_back(c[i])
 *         self.c_orbit.addStateVector(a,_b,_c)
 *     def interpolate(self, double a, list b, list c, int d):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _b
 *         cdef vector[double] _c
 */

#line 143 "pyOrbit.pyx"


#line 143 "pyOrbit.pyx"
/* Python wrapper */

#line 143 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_19interpolate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 143 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_19interpolate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a
#line 143 "pyOrbit.pyx"
;
  PyObject *__pyx_v_b = 0
#line 143 "pyOrbit.pyx"
;
  PyObject *__pyx_v_c = 0
#line 143 "pyOrbit.pyx"
;
  int __pyx_v_d
#line 143 "pyOrbit.pyx"
;

#line 143 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 143 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 143 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("interpolate (wrapper)", 0);

#line 143 "pyOrbit.pyx"
  {

#line 143 "pyOrbit.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,&__pyx_n_s_d,0};

#line 143 "pyOrbit.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 143 "pyOrbit.pyx"
    if (unlikely(__pyx_kwds)) {

#line 143 "pyOrbit.pyx"
      Py_ssize_t kw_args;

#line 143 "pyOrbit.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 143 "pyOrbit.pyx"
      switch (pos_args) {
        case  4: 
#line 143 "pyOrbit.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 143 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 143 "pyOrbit.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 143 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 143 "pyOrbit.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 143 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 143 "pyOrbit.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 143 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 143 "pyOrbit.pyx"
        case  0: break;
        default: 
#line 143 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 143 "pyOrbit.pyx"
      }

#line 143 "pyOrbit.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 143 "pyOrbit.pyx"
      switch (pos_args) {

#line 143 "pyOrbit.pyx"
        case  0:

#line 143 "pyOrbit.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 143 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 143 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 143 "pyOrbit.pyx"
        case  1:

#line 143 "pyOrbit.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 143 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("interpolate", 1, 4, 4, 1); 
#line 143 "pyOrbit.pyx"
__PYX_ERR(9, 143, __pyx_L3_error)

#line 143 "pyOrbit.pyx"
        }

#line 143 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 143 "pyOrbit.pyx"
        case  2:

#line 143 "pyOrbit.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 143 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("interpolate", 1, 4, 4, 2); 
#line 143 "pyOrbit.pyx"
__PYX_ERR(9, 143, __pyx_L3_error)

#line 143 "pyOrbit.pyx"
        }

#line 143 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 143 "pyOrbit.pyx"
        case  3:

#line 143 "pyOrbit.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;

#line 143 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("interpolate", 1, 4, 4, 3); 
#line 143 "pyOrbit.pyx"
__PYX_ERR(9, 143, __pyx_L3_error)

#line 143 "pyOrbit.pyx"
        }

#line 143 "pyOrbit.pyx"
      }

#line 143 "pyOrbit.pyx"
      if (unlikely(kw_args > 0)) {

#line 143 "pyOrbit.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "interpolate") < 0)) __PYX_ERR(9, 143, __pyx_L3_error)

#line 143 "pyOrbit.pyx"
      }

#line 143 "pyOrbit.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 143 "pyOrbit.pyx"
      goto __pyx_L5_argtuple_error;

#line 143 "pyOrbit.pyx"
    } else {

#line 143 "pyOrbit.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 143 "pyOrbit.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 143 "pyOrbit.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 143 "pyOrbit.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 143 "pyOrbit.pyx"
    }

#line 143 "pyOrbit.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 143, __pyx_L3_error)

#line 143 "pyOrbit.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 143 "pyOrbit.pyx"
    __pyx_v_c = ((PyObject*)values[2]);

#line 143 "pyOrbit.pyx"
    __pyx_v_d = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_d == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 143, __pyx_L3_error)

#line 143 "pyOrbit.pyx"
  }

#line 143 "pyOrbit.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 143 "pyOrbit.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("interpolate", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 143 "pyOrbit.pyx"
__PYX_ERR(9, 143, __pyx_L3_error)

#line 143 "pyOrbit.pyx"
  __pyx_L3_error:;

#line 143 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 143 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 143 "pyOrbit.pyx"
  return NULL;

#line 143 "pyOrbit.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 143 "pyOrbit.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(9, 143, __pyx_L1_error)

#line 143 "pyOrbit.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), (&PyList_Type), 1, "c", 1))) __PYX_ERR(9, 143, __pyx_L1_error)
  __pyx_r = 
#line 143 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_18interpolate(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c, __pyx_v_d);

#line 143 "pyOrbit.pyx"


#line 143 "pyOrbit.pyx"
  /* function exit code */

#line 143 "pyOrbit.pyx"
  goto __pyx_L0;

#line 143 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 143 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 143 "pyOrbit.pyx"
  __pyx_L0:;

#line 143 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 143 "pyOrbit.pyx"
  return __pyx_r;

#line 143 "pyOrbit.pyx"
}

#line 143 "pyOrbit.pyx"


#line 143 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_18interpolate(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, double __pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, int __pyx_v_d) {
  std::vector<double>  __pyx_v__b
#line 143 "pyOrbit.pyx"
;
  std::vector<double>  __pyx_v__c
#line 143 "pyOrbit.pyx"
;
  enum isce::core::orbitInterpMethod __pyx_v__d
#line 143 "pyOrbit.pyx"
;
  int __pyx_v_ret
#line 143 "pyOrbit.pyx"
;
  long __pyx_v_i
#line 143 "pyOrbit.pyx"
;

#line 143 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 143 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 143 "pyOrbit.pyx"
  long __pyx_t_1;

#line 143 "pyOrbit.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 143 "pyOrbit.pyx"
  double __pyx_t_3;

#line 143 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("interpolate", 0);

  /* "pyOrbit.pyx":148
 *         cdef orbitInterpMethod _d
 *         cdef int ret
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 */

#line 148 "pyOrbit.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 148 "pyOrbit.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyOrbit.pyx":149
 *         cdef int ret
 *         for i in range(3):
 *             _b.push_back(b[i])             # <<<<<<<<<<<<<<
 *             _c.push_back(c[i])
 *         if (d == orbitInterpMethod.HERMITE_METHOD):
 */

#line 149 "pyOrbit.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 149 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 149 "pyOrbit.pyx"
      __PYX_ERR(9, 149, __pyx_L1_error)

#line 149 "pyOrbit.pyx"
    }

#line 149 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 149, __pyx_L1_error)

#line 149 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 149 "pyOrbit.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 149, __pyx_L1_error)

#line 149 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 149 "pyOrbit.pyx"
    try {

#line 149 "pyOrbit.pyx"
      __pyx_v__b.push_back(__pyx_t_3);

#line 149 "pyOrbit.pyx"
    } catch(...) {

#line 149 "pyOrbit.pyx"
      __Pyx_CppExn2PyErr();

#line 149 "pyOrbit.pyx"
      __PYX_ERR(9, 149, __pyx_L1_error)

#line 149 "pyOrbit.pyx"
    }

    /* "pyOrbit.pyx":150
 *         for i in range(3):
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])             # <<<<<<<<<<<<<<
 *         if (d == orbitInterpMethod.HERMITE_METHOD):
 *             _d = orbitInterpMethod.HERMITE_METHOD
 */

#line 150 "pyOrbit.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 150 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 150 "pyOrbit.pyx"
      __PYX_ERR(9, 150, __pyx_L1_error)

#line 150 "pyOrbit.pyx"
    }

#line 150 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 150, __pyx_L1_error)

#line 150 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 150 "pyOrbit.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 150, __pyx_L1_error)

#line 150 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 150 "pyOrbit.pyx"
    try {

#line 150 "pyOrbit.pyx"
      __pyx_v__c.push_back(__pyx_t_3);

#line 150 "pyOrbit.pyx"
    } catch(...) {

#line 150 "pyOrbit.pyx"
      __Pyx_CppExn2PyErr();

#line 150 "pyOrbit.pyx"
      __PYX_ERR(9, 150, __pyx_L1_error)

#line 150 "pyOrbit.pyx"
    }

#line 150 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":151
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 *         if (d == orbitInterpMethod.HERMITE_METHOD):             # <<<<<<<<<<<<<<
 *             _d = orbitInterpMethod.HERMITE_METHOD
 *         elif (d == orbitInterpMethod.SCH_METHOD):
 */

#line 151 "pyOrbit.pyx"
  switch (__pyx_v_d) {

#line 151 "pyOrbit.pyx"
    case isce::core::HERMITE_METHOD:

    /* "pyOrbit.pyx":152
 *             _c.push_back(c[i])
 *         if (d == orbitInterpMethod.HERMITE_METHOD):
 *             _d = orbitInterpMethod.HERMITE_METHOD             # <<<<<<<<<<<<<<
 *         elif (d == orbitInterpMethod.SCH_METHOD):
 *             _d = orbitInterpMethod.SCH_METHOD
 */

#line 152 "pyOrbit.pyx"
    __pyx_v__d = isce::core::HERMITE_METHOD;

    /* "pyOrbit.pyx":151
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 *         if (d == orbitInterpMethod.HERMITE_METHOD):             # <<<<<<<<<<<<<<
 *             _d = orbitInterpMethod.HERMITE_METHOD
 *         elif (d == orbitInterpMethod.SCH_METHOD):
 */

#line 151 "pyOrbit.pyx"
    break;

    /* "pyOrbit.pyx":153
 *         if (d == orbitInterpMethod.HERMITE_METHOD):
 *             _d = orbitInterpMethod.HERMITE_METHOD
 *         elif (d == orbitInterpMethod.SCH_METHOD):             # <<<<<<<<<<<<<<
 *             _d = orbitInterpMethod.SCH_METHOD
 *         elif (d == orbitInterpMethod.LEGENDRE_METHOD):
 */

#line 153 "pyOrbit.pyx"
    case isce::core::SCH_METHOD:

    /* "pyOrbit.pyx":154
 *             _d = orbitInterpMethod.HERMITE_METHOD
 *         elif (d == orbitInterpMethod.SCH_METHOD):
 *             _d = orbitInterpMethod.SCH_METHOD             # <<<<<<<<<<<<<<
 *         elif (d == orbitInterpMethod.LEGENDRE_METHOD):
 *             _d = orbitInterpMethod.LEGENDRE_METHOD
 */

#line 154 "pyOrbit.pyx"
    __pyx_v__d = isce::core::SCH_METHOD;

    /* "pyOrbit.pyx":153
 *         if (d == orbitInterpMethod.HERMITE_METHOD):
 *             _d = orbitInterpMethod.HERMITE_METHOD
 *         elif (d == orbitInterpMethod.SCH_METHOD):             # <<<<<<<<<<<<<<
 *             _d = orbitInterpMethod.SCH_METHOD
 *         elif (d == orbitInterpMethod.LEGENDRE_METHOD):
 */

#line 153 "pyOrbit.pyx"
    break;

    /* "pyOrbit.pyx":155
 *         elif (d == orbitInterpMethod.SCH_METHOD):
 *             _d = orbitInterpMethod.SCH_METHOD
 *         elif (d == orbitInterpMethod.LEGENDRE_METHOD):             # <<<<<<<<<<<<<<
 *             _d = orbitInterpMethod.LEGENDRE_METHOD
 *         else:
 */

#line 155 "pyOrbit.pyx"
    case isce::core::LEGENDRE_METHOD:

    /* "pyOrbit.pyx":156
 *             _d = orbitInterpMethod.SCH_METHOD
 *         elif (d == orbitInterpMethod.LEGENDRE_METHOD):
 *             _d = orbitInterpMethod.LEGENDRE_METHOD             # <<<<<<<<<<<<<<
 *         else:
 *             print("Error: Unknown orbit interpolation method")
 */

#line 156 "pyOrbit.pyx"
    __pyx_v__d = isce::core::LEGENDRE_METHOD;

    /* "pyOrbit.pyx":155
 *         elif (d == orbitInterpMethod.SCH_METHOD):
 *             _d = orbitInterpMethod.SCH_METHOD
 *         elif (d == orbitInterpMethod.LEGENDRE_METHOD):             # <<<<<<<<<<<<<<
 *             _d = orbitInterpMethod.LEGENDRE_METHOD
 *         else:
 */

#line 155 "pyOrbit.pyx"
    break;

#line 155 "pyOrbit.pyx"
    default:

    /* "pyOrbit.pyx":158
 *             _d = orbitInterpMethod.LEGENDRE_METHOD
 *         else:
 *             print("Error: Unknown orbit interpolation method")             # <<<<<<<<<<<<<<
 *             return
 *         ret = self.c_orbit.interpolate(a,_b,_c,_d)
 */

#line 158 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 158, __pyx_L1_error)

#line 158 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 158 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyOrbit.pyx":159
 *         else:
 *             print("Error: Unknown orbit interpolation method")
 *             return             # <<<<<<<<<<<<<<
 *         ret = self.c_orbit.interpolate(a,_b,_c,_d)
 *         for i in range(3):
 */

#line 159 "pyOrbit.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 159 "pyOrbit.pyx"
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 159 "pyOrbit.pyx"
    goto __pyx_L0;

#line 159 "pyOrbit.pyx"
    break;

#line 159 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":160
 *             print("Error: Unknown orbit interpolation method")
 *             return
 *         ret = self.c_orbit.interpolate(a,_b,_c,_d)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             b[i] = _b[i]
 */

#line 160 "pyOrbit.pyx"
  __pyx_v_ret = __pyx_v_self->c_orbit->interpolate(__pyx_v_a, __pyx_v__b, __pyx_v__c, __pyx_v__d);

  /* "pyOrbit.pyx":161
 *             return
 *         ret = self.c_orbit.interpolate(a,_b,_c,_d)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 */

#line 161 "pyOrbit.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 161 "pyOrbit.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyOrbit.pyx":162
 *         ret = self.c_orbit.interpolate(a,_b,_c,_d)
 *         for i in range(3):
 *             b[i] = _b[i]             # <<<<<<<<<<<<<<
 *             c[i] = _c[i]
 *         return ret
 */

#line 162 "pyOrbit.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__b[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 162, __pyx_L1_error)

#line 162 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 162 "pyOrbit.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 162 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 162 "pyOrbit.pyx"
      __PYX_ERR(9, 162, __pyx_L1_error)

#line 162 "pyOrbit.pyx"
    }

#line 162 "pyOrbit.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_b, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(9, 162, __pyx_L1_error)

#line 162 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyOrbit.pyx":163
 *         for i in range(3):
 *             b[i] = _b[i]
 *             c[i] = _c[i]             # <<<<<<<<<<<<<<
 *         return ret
 *     def interpolateWGS84Orbit(self, double a, list b, list c):
 */

#line 163 "pyOrbit.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__c[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 163, __pyx_L1_error)

#line 163 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 163 "pyOrbit.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 163 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 163 "pyOrbit.pyx"
      __PYX_ERR(9, 163, __pyx_L1_error)

#line 163 "pyOrbit.pyx"
    }

#line 163 "pyOrbit.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_c, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(9, 163, __pyx_L1_error)

#line 163 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 163 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":164
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 *         return ret             # <<<<<<<<<<<<<<
 *     def interpolateWGS84Orbit(self, double a, list b, list c):
 *         cdef vector[double] _b
 */

#line 164 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 164 "pyOrbit.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 164, __pyx_L1_error)

#line 164 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 164 "pyOrbit.pyx"
  __pyx_r = __pyx_t_2;

#line 164 "pyOrbit.pyx"
  __pyx_t_2 = 0;

#line 164 "pyOrbit.pyx"
  goto __pyx_L0;

  /* "pyOrbit.pyx":143
 *             _c.push_back(c[i])
 *         self.c_orbit.addStateVector(a,_b,_c)
 *     def interpolate(self, double a, list b, list c, int d):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _b
 *         cdef vector[double] _c
 */

#line 143 "pyOrbit.pyx"


#line 143 "pyOrbit.pyx"
  /* function exit code */

#line 143 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 143 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 143 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 143 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 143 "pyOrbit.pyx"
  __pyx_L0:;

#line 143 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 143 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 143 "pyOrbit.pyx"
  return __pyx_r;

#line 143 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":165
 *             c[i] = _c[i]
 *         return ret
 *     def interpolateWGS84Orbit(self, double a, list b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _b
 *         cdef vector[double] _c
 */

#line 165 "pyOrbit.pyx"


#line 165 "pyOrbit.pyx"
/* Python wrapper */

#line 165 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_21interpolateWGS84Orbit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 165 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_21interpolateWGS84Orbit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a
#line 165 "pyOrbit.pyx"
;
  PyObject *__pyx_v_b = 0
#line 165 "pyOrbit.pyx"
;
  PyObject *__pyx_v_c = 0
#line 165 "pyOrbit.pyx"
;

#line 165 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 165 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 165 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("interpolateWGS84Orbit (wrapper)", 0);

#line 165 "pyOrbit.pyx"
  {

#line 165 "pyOrbit.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,0};

#line 165 "pyOrbit.pyx"
    PyObject* values[3] = {0,0,0};

#line 165 "pyOrbit.pyx"
    if (unlikely(__pyx_kwds)) {

#line 165 "pyOrbit.pyx"
      Py_ssize_t kw_args;

#line 165 "pyOrbit.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 165 "pyOrbit.pyx"
      switch (pos_args) {
        case  3: 
#line 165 "pyOrbit.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 165 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 165 "pyOrbit.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 165 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 165 "pyOrbit.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 165 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 165 "pyOrbit.pyx"
        case  0: break;
        default: 
#line 165 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 165 "pyOrbit.pyx"
      }

#line 165 "pyOrbit.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 165 "pyOrbit.pyx"
      switch (pos_args) {

#line 165 "pyOrbit.pyx"
        case  0:

#line 165 "pyOrbit.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 165 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 165 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 165 "pyOrbit.pyx"
        case  1:

#line 165 "pyOrbit.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 165 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("interpolateWGS84Orbit", 1, 3, 3, 1); 
#line 165 "pyOrbit.pyx"
__PYX_ERR(9, 165, __pyx_L3_error)

#line 165 "pyOrbit.pyx"
        }

#line 165 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 165 "pyOrbit.pyx"
        case  2:

#line 165 "pyOrbit.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 165 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("interpolateWGS84Orbit", 1, 3, 3, 2); 
#line 165 "pyOrbit.pyx"
__PYX_ERR(9, 165, __pyx_L3_error)

#line 165 "pyOrbit.pyx"
        }

#line 165 "pyOrbit.pyx"
      }

#line 165 "pyOrbit.pyx"
      if (unlikely(kw_args > 0)) {

#line 165 "pyOrbit.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "interpolateWGS84Orbit") < 0)) __PYX_ERR(9, 165, __pyx_L3_error)

#line 165 "pyOrbit.pyx"
      }

#line 165 "pyOrbit.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 165 "pyOrbit.pyx"
      goto __pyx_L5_argtuple_error;

#line 165 "pyOrbit.pyx"
    } else {

#line 165 "pyOrbit.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 165 "pyOrbit.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 165 "pyOrbit.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 165 "pyOrbit.pyx"
    }

#line 165 "pyOrbit.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 165, __pyx_L3_error)

#line 165 "pyOrbit.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 165 "pyOrbit.pyx"
    __pyx_v_c = ((PyObject*)values[2]);

#line 165 "pyOrbit.pyx"
  }

#line 165 "pyOrbit.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 165 "pyOrbit.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("interpolateWGS84Orbit", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 165 "pyOrbit.pyx"
__PYX_ERR(9, 165, __pyx_L3_error)

#line 165 "pyOrbit.pyx"
  __pyx_L3_error:;

#line 165 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.interpolateWGS84Orbit", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 165 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 165 "pyOrbit.pyx"
  return NULL;

#line 165 "pyOrbit.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 165 "pyOrbit.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(9, 165, __pyx_L1_error)

#line 165 "pyOrbit.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), (&PyList_Type), 1, "c", 1))) __PYX_ERR(9, 165, __pyx_L1_error)
  __pyx_r = 
#line 165 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_20interpolateWGS84Orbit(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c);

#line 165 "pyOrbit.pyx"


#line 165 "pyOrbit.pyx"
  /* function exit code */

#line 165 "pyOrbit.pyx"
  goto __pyx_L0;

#line 165 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 165 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 165 "pyOrbit.pyx"
  __pyx_L0:;

#line 165 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 165 "pyOrbit.pyx"
  return __pyx_r;

#line 165 "pyOrbit.pyx"
}

#line 165 "pyOrbit.pyx"


#line 165 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_20interpolateWGS84Orbit(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, double __pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  std::vector<double>  __pyx_v__b
#line 165 "pyOrbit.pyx"
;
  std::vector<double>  __pyx_v__c
#line 165 "pyOrbit.pyx"
;
  int __pyx_v_ret
#line 165 "pyOrbit.pyx"
;
  long __pyx_v_i
#line 165 "pyOrbit.pyx"
;

#line 165 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 165 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 165 "pyOrbit.pyx"
  long __pyx_t_1;

#line 165 "pyOrbit.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 165 "pyOrbit.pyx"
  double __pyx_t_3;

#line 165 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("interpolateWGS84Orbit", 0);

  /* "pyOrbit.pyx":169
 *         cdef vector[double] _c
 *         cdef int ret
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 */

#line 169 "pyOrbit.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 169 "pyOrbit.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyOrbit.pyx":170
 *         cdef int ret
 *         for i in range(3):
 *             _b.push_back(b[i])             # <<<<<<<<<<<<<<
 *             _c.push_back(c[i])
 *         ret = self.c_orbit.interpolateWGS84Orbit(a,_b,_c)
 */

#line 170 "pyOrbit.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 170 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 170 "pyOrbit.pyx"
      __PYX_ERR(9, 170, __pyx_L1_error)

#line 170 "pyOrbit.pyx"
    }

#line 170 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 170, __pyx_L1_error)

#line 170 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 170 "pyOrbit.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 170, __pyx_L1_error)

#line 170 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 170 "pyOrbit.pyx"
    try {

#line 170 "pyOrbit.pyx"
      __pyx_v__b.push_back(__pyx_t_3);

#line 170 "pyOrbit.pyx"
    } catch(...) {

#line 170 "pyOrbit.pyx"
      __Pyx_CppExn2PyErr();

#line 170 "pyOrbit.pyx"
      __PYX_ERR(9, 170, __pyx_L1_error)

#line 170 "pyOrbit.pyx"
    }

    /* "pyOrbit.pyx":171
 *         for i in range(3):
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])             # <<<<<<<<<<<<<<
 *         ret = self.c_orbit.interpolateWGS84Orbit(a,_b,_c)
 *         for i in range(3):
 */

#line 171 "pyOrbit.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 171 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 171 "pyOrbit.pyx"
      __PYX_ERR(9, 171, __pyx_L1_error)

#line 171 "pyOrbit.pyx"
    }

#line 171 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 171, __pyx_L1_error)

#line 171 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 171 "pyOrbit.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 171, __pyx_L1_error)

#line 171 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 171 "pyOrbit.pyx"
    try {

#line 171 "pyOrbit.pyx"
      __pyx_v__c.push_back(__pyx_t_3);

#line 171 "pyOrbit.pyx"
    } catch(...) {

#line 171 "pyOrbit.pyx"
      __Pyx_CppExn2PyErr();

#line 171 "pyOrbit.pyx"
      __PYX_ERR(9, 171, __pyx_L1_error)

#line 171 "pyOrbit.pyx"
    }

#line 171 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":172
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 *         ret = self.c_orbit.interpolateWGS84Orbit(a,_b,_c)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             b[i] = _b[i]
 */

#line 172 "pyOrbit.pyx"
  __pyx_v_ret = __pyx_v_self->c_orbit->interpolateWGS84Orbit(__pyx_v_a, __pyx_v__b, __pyx_v__c);

  /* "pyOrbit.pyx":173
 *             _c.push_back(c[i])
 *         ret = self.c_orbit.interpolateWGS84Orbit(a,_b,_c)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 */

#line 173 "pyOrbit.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 173 "pyOrbit.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyOrbit.pyx":174
 *         ret = self.c_orbit.interpolateWGS84Orbit(a,_b,_c)
 *         for i in range(3):
 *             b[i] = _b[i]             # <<<<<<<<<<<<<<
 *             c[i] = _c[i]
 *         return ret
 */

#line 174 "pyOrbit.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__b[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 174, __pyx_L1_error)

#line 174 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 174 "pyOrbit.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 174 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 174 "pyOrbit.pyx"
      __PYX_ERR(9, 174, __pyx_L1_error)

#line 174 "pyOrbit.pyx"
    }

#line 174 "pyOrbit.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_b, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(9, 174, __pyx_L1_error)

#line 174 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyOrbit.pyx":175
 *         for i in range(3):
 *             b[i] = _b[i]
 *             c[i] = _c[i]             # <<<<<<<<<<<<<<
 *         return ret
 *     def interpolateLegendreOrbit(self, double a, list b, list c):
 */

#line 175 "pyOrbit.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__c[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 175, __pyx_L1_error)

#line 175 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 175 "pyOrbit.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 175 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 175 "pyOrbit.pyx"
      __PYX_ERR(9, 175, __pyx_L1_error)

#line 175 "pyOrbit.pyx"
    }

#line 175 "pyOrbit.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_c, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(9, 175, __pyx_L1_error)

#line 175 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 175 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":176
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 *         return ret             # <<<<<<<<<<<<<<
 *     def interpolateLegendreOrbit(self, double a, list b, list c):
 *         cdef vector[double] _b
 */

#line 176 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 176 "pyOrbit.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 176, __pyx_L1_error)

#line 176 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 176 "pyOrbit.pyx"
  __pyx_r = __pyx_t_2;

#line 176 "pyOrbit.pyx"
  __pyx_t_2 = 0;

#line 176 "pyOrbit.pyx"
  goto __pyx_L0;

  /* "pyOrbit.pyx":165
 *             c[i] = _c[i]
 *         return ret
 *     def interpolateWGS84Orbit(self, double a, list b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _b
 *         cdef vector[double] _c
 */

#line 165 "pyOrbit.pyx"


#line 165 "pyOrbit.pyx"
  /* function exit code */

#line 165 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 165 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 165 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.interpolateWGS84Orbit", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 165 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 165 "pyOrbit.pyx"
  __pyx_L0:;

#line 165 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 165 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 165 "pyOrbit.pyx"
  return __pyx_r;

#line 165 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":177
 *             c[i] = _c[i]
 *         return ret
 *     def interpolateLegendreOrbit(self, double a, list b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _b
 *         cdef vector[double] _c
 */

#line 177 "pyOrbit.pyx"


#line 177 "pyOrbit.pyx"
/* Python wrapper */

#line 177 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_23interpolateLegendreOrbit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 177 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_23interpolateLegendreOrbit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a
#line 177 "pyOrbit.pyx"
;
  PyObject *__pyx_v_b = 0
#line 177 "pyOrbit.pyx"
;
  PyObject *__pyx_v_c = 0
#line 177 "pyOrbit.pyx"
;

#line 177 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 177 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 177 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("interpolateLegendreOrbit (wrapper)", 0);

#line 177 "pyOrbit.pyx"
  {

#line 177 "pyOrbit.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,0};

#line 177 "pyOrbit.pyx"
    PyObject* values[3] = {0,0,0};

#line 177 "pyOrbit.pyx"
    if (unlikely(__pyx_kwds)) {

#line 177 "pyOrbit.pyx"
      Py_ssize_t kw_args;

#line 177 "pyOrbit.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 177 "pyOrbit.pyx"
      switch (pos_args) {
        case  3: 
#line 177 "pyOrbit.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 177 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 177 "pyOrbit.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 177 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 177 "pyOrbit.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 177 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 177 "pyOrbit.pyx"
        case  0: break;
        default: 
#line 177 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 177 "pyOrbit.pyx"
      }

#line 177 "pyOrbit.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 177 "pyOrbit.pyx"
      switch (pos_args) {

#line 177 "pyOrbit.pyx"
        case  0:

#line 177 "pyOrbit.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 177 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 177 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 177 "pyOrbit.pyx"
        case  1:

#line 177 "pyOrbit.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 177 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("interpolateLegendreOrbit", 1, 3, 3, 1); 
#line 177 "pyOrbit.pyx"
__PYX_ERR(9, 177, __pyx_L3_error)

#line 177 "pyOrbit.pyx"
        }

#line 177 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 177 "pyOrbit.pyx"
        case  2:

#line 177 "pyOrbit.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 177 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("interpolateLegendreOrbit", 1, 3, 3, 2); 
#line 177 "pyOrbit.pyx"
__PYX_ERR(9, 177, __pyx_L3_error)

#line 177 "pyOrbit.pyx"
        }

#line 177 "pyOrbit.pyx"
      }

#line 177 "pyOrbit.pyx"
      if (unlikely(kw_args > 0)) {

#line 177 "pyOrbit.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "interpolateLegendreOrbit") < 0)) __PYX_ERR(9, 177, __pyx_L3_error)

#line 177 "pyOrbit.pyx"
      }

#line 177 "pyOrbit.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 177 "pyOrbit.pyx"
      goto __pyx_L5_argtuple_error;

#line 177 "pyOrbit.pyx"
    } else {

#line 177 "pyOrbit.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 177 "pyOrbit.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 177 "pyOrbit.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 177 "pyOrbit.pyx"
    }

#line 177 "pyOrbit.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 177, __pyx_L3_error)

#line 177 "pyOrbit.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 177 "pyOrbit.pyx"
    __pyx_v_c = ((PyObject*)values[2]);

#line 177 "pyOrbit.pyx"
  }

#line 177 "pyOrbit.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 177 "pyOrbit.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("interpolateLegendreOrbit", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 177 "pyOrbit.pyx"
__PYX_ERR(9, 177, __pyx_L3_error)

#line 177 "pyOrbit.pyx"
  __pyx_L3_error:;

#line 177 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.interpolateLegendreOrbit", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 177 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 177 "pyOrbit.pyx"
  return NULL;

#line 177 "pyOrbit.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 177 "pyOrbit.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(9, 177, __pyx_L1_error)

#line 177 "pyOrbit.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), (&PyList_Type), 1, "c", 1))) __PYX_ERR(9, 177, __pyx_L1_error)
  __pyx_r = 
#line 177 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_22interpolateLegendreOrbit(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c);

#line 177 "pyOrbit.pyx"


#line 177 "pyOrbit.pyx"
  /* function exit code */

#line 177 "pyOrbit.pyx"
  goto __pyx_L0;

#line 177 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 177 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 177 "pyOrbit.pyx"
  __pyx_L0:;

#line 177 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 177 "pyOrbit.pyx"
  return __pyx_r;

#line 177 "pyOrbit.pyx"
}

#line 177 "pyOrbit.pyx"


#line 177 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_22interpolateLegendreOrbit(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, double __pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  std::vector<double>  __pyx_v__b
#line 177 "pyOrbit.pyx"
;
  std::vector<double>  __pyx_v__c
#line 177 "pyOrbit.pyx"
;
  int __pyx_v_ret
#line 177 "pyOrbit.pyx"
;
  long __pyx_v_i
#line 177 "pyOrbit.pyx"
;

#line 177 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 177 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 177 "pyOrbit.pyx"
  long __pyx_t_1;

#line 177 "pyOrbit.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 177 "pyOrbit.pyx"
  double __pyx_t_3;

#line 177 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("interpolateLegendreOrbit", 0);

  /* "pyOrbit.pyx":181
 *         cdef vector[double] _c
 *         cdef int ret
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 */

#line 181 "pyOrbit.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 181 "pyOrbit.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyOrbit.pyx":182
 *         cdef int ret
 *         for i in range(3):
 *             _b.push_back(b[i])             # <<<<<<<<<<<<<<
 *             _c.push_back(c[i])
 *         ret = self.c_orbit.interpolateLegendreOrbit(a,_b,_c)
 */

#line 182 "pyOrbit.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 182 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 182 "pyOrbit.pyx"
      __PYX_ERR(9, 182, __pyx_L1_error)

#line 182 "pyOrbit.pyx"
    }

#line 182 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 182, __pyx_L1_error)

#line 182 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 182 "pyOrbit.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 182, __pyx_L1_error)

#line 182 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 182 "pyOrbit.pyx"
    try {

#line 182 "pyOrbit.pyx"
      __pyx_v__b.push_back(__pyx_t_3);

#line 182 "pyOrbit.pyx"
    } catch(...) {

#line 182 "pyOrbit.pyx"
      __Pyx_CppExn2PyErr();

#line 182 "pyOrbit.pyx"
      __PYX_ERR(9, 182, __pyx_L1_error)

#line 182 "pyOrbit.pyx"
    }

    /* "pyOrbit.pyx":183
 *         for i in range(3):
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])             # <<<<<<<<<<<<<<
 *         ret = self.c_orbit.interpolateLegendreOrbit(a,_b,_c)
 *         for i in range(3):
 */

#line 183 "pyOrbit.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 183 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 183 "pyOrbit.pyx"
      __PYX_ERR(9, 183, __pyx_L1_error)

#line 183 "pyOrbit.pyx"
    }

#line 183 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 183, __pyx_L1_error)

#line 183 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 183 "pyOrbit.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 183, __pyx_L1_error)

#line 183 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 183 "pyOrbit.pyx"
    try {

#line 183 "pyOrbit.pyx"
      __pyx_v__c.push_back(__pyx_t_3);

#line 183 "pyOrbit.pyx"
    } catch(...) {

#line 183 "pyOrbit.pyx"
      __Pyx_CppExn2PyErr();

#line 183 "pyOrbit.pyx"
      __PYX_ERR(9, 183, __pyx_L1_error)

#line 183 "pyOrbit.pyx"
    }

#line 183 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":184
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 *         ret = self.c_orbit.interpolateLegendreOrbit(a,_b,_c)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             b[i] = _b[i]
 */

#line 184 "pyOrbit.pyx"
  __pyx_v_ret = __pyx_v_self->c_orbit->interpolateLegendreOrbit(__pyx_v_a, __pyx_v__b, __pyx_v__c);

  /* "pyOrbit.pyx":185
 *             _c.push_back(c[i])
 *         ret = self.c_orbit.interpolateLegendreOrbit(a,_b,_c)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 */

#line 185 "pyOrbit.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 185 "pyOrbit.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyOrbit.pyx":186
 *         ret = self.c_orbit.interpolateLegendreOrbit(a,_b,_c)
 *         for i in range(3):
 *             b[i] = _b[i]             # <<<<<<<<<<<<<<
 *             c[i] = _c[i]
 *         return ret
 */

#line 186 "pyOrbit.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__b[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 186, __pyx_L1_error)

#line 186 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 186 "pyOrbit.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 186 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 186 "pyOrbit.pyx"
      __PYX_ERR(9, 186, __pyx_L1_error)

#line 186 "pyOrbit.pyx"
    }

#line 186 "pyOrbit.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_b, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(9, 186, __pyx_L1_error)

#line 186 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyOrbit.pyx":187
 *         for i in range(3):
 *             b[i] = _b[i]
 *             c[i] = _c[i]             # <<<<<<<<<<<<<<
 *         return ret
 *     def interpolateSCHOrbit(self, double a, list b, list c):
 */

#line 187 "pyOrbit.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__c[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 187, __pyx_L1_error)

#line 187 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 187 "pyOrbit.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 187 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 187 "pyOrbit.pyx"
      __PYX_ERR(9, 187, __pyx_L1_error)

#line 187 "pyOrbit.pyx"
    }

#line 187 "pyOrbit.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_c, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(9, 187, __pyx_L1_error)

#line 187 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 187 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":188
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 *         return ret             # <<<<<<<<<<<<<<
 *     def interpolateSCHOrbit(self, double a, list b, list c):
 *         cdef vector[double] _b
 */

#line 188 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 188 "pyOrbit.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 188, __pyx_L1_error)

#line 188 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 188 "pyOrbit.pyx"
  __pyx_r = __pyx_t_2;

#line 188 "pyOrbit.pyx"
  __pyx_t_2 = 0;

#line 188 "pyOrbit.pyx"
  goto __pyx_L0;

  /* "pyOrbit.pyx":177
 *             c[i] = _c[i]
 *         return ret
 *     def interpolateLegendreOrbit(self, double a, list b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _b
 *         cdef vector[double] _c
 */

#line 177 "pyOrbit.pyx"


#line 177 "pyOrbit.pyx"
  /* function exit code */

#line 177 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 177 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 177 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.interpolateLegendreOrbit", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 177 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 177 "pyOrbit.pyx"
  __pyx_L0:;

#line 177 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 177 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 177 "pyOrbit.pyx"
  return __pyx_r;

#line 177 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":189
 *             c[i] = _c[i]
 *         return ret
 *     def interpolateSCHOrbit(self, double a, list b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _b
 *         cdef vector[double] _c
 */

#line 189 "pyOrbit.pyx"


#line 189 "pyOrbit.pyx"
/* Python wrapper */

#line 189 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_25interpolateSCHOrbit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 189 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_25interpolateSCHOrbit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a
#line 189 "pyOrbit.pyx"
;
  PyObject *__pyx_v_b = 0
#line 189 "pyOrbit.pyx"
;
  PyObject *__pyx_v_c = 0
#line 189 "pyOrbit.pyx"
;

#line 189 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 189 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 189 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("interpolateSCHOrbit (wrapper)", 0);

#line 189 "pyOrbit.pyx"
  {

#line 189 "pyOrbit.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,0};

#line 189 "pyOrbit.pyx"
    PyObject* values[3] = {0,0,0};

#line 189 "pyOrbit.pyx"
    if (unlikely(__pyx_kwds)) {

#line 189 "pyOrbit.pyx"
      Py_ssize_t kw_args;

#line 189 "pyOrbit.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 189 "pyOrbit.pyx"
      switch (pos_args) {
        case  3: 
#line 189 "pyOrbit.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 189 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 189 "pyOrbit.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 189 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 189 "pyOrbit.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 189 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 189 "pyOrbit.pyx"
        case  0: break;
        default: 
#line 189 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 189 "pyOrbit.pyx"
      }

#line 189 "pyOrbit.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 189 "pyOrbit.pyx"
      switch (pos_args) {

#line 189 "pyOrbit.pyx"
        case  0:

#line 189 "pyOrbit.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 189 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 189 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 189 "pyOrbit.pyx"
        case  1:

#line 189 "pyOrbit.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 189 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("interpolateSCHOrbit", 1, 3, 3, 1); 
#line 189 "pyOrbit.pyx"
__PYX_ERR(9, 189, __pyx_L3_error)

#line 189 "pyOrbit.pyx"
        }

#line 189 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 189 "pyOrbit.pyx"
        case  2:

#line 189 "pyOrbit.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 189 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("interpolateSCHOrbit", 1, 3, 3, 2); 
#line 189 "pyOrbit.pyx"
__PYX_ERR(9, 189, __pyx_L3_error)

#line 189 "pyOrbit.pyx"
        }

#line 189 "pyOrbit.pyx"
      }

#line 189 "pyOrbit.pyx"
      if (unlikely(kw_args > 0)) {

#line 189 "pyOrbit.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "interpolateSCHOrbit") < 0)) __PYX_ERR(9, 189, __pyx_L3_error)

#line 189 "pyOrbit.pyx"
      }

#line 189 "pyOrbit.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 189 "pyOrbit.pyx"
      goto __pyx_L5_argtuple_error;

#line 189 "pyOrbit.pyx"
    } else {

#line 189 "pyOrbit.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 189 "pyOrbit.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 189 "pyOrbit.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 189 "pyOrbit.pyx"
    }

#line 189 "pyOrbit.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 189, __pyx_L3_error)

#line 189 "pyOrbit.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 189 "pyOrbit.pyx"
    __pyx_v_c = ((PyObject*)values[2]);

#line 189 "pyOrbit.pyx"
  }

#line 189 "pyOrbit.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 189 "pyOrbit.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("interpolateSCHOrbit", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 189 "pyOrbit.pyx"
__PYX_ERR(9, 189, __pyx_L3_error)

#line 189 "pyOrbit.pyx"
  __pyx_L3_error:;

#line 189 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.interpolateSCHOrbit", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 189 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 189 "pyOrbit.pyx"
  return NULL;

#line 189 "pyOrbit.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 189 "pyOrbit.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(9, 189, __pyx_L1_error)

#line 189 "pyOrbit.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), (&PyList_Type), 1, "c", 1))) __PYX_ERR(9, 189, __pyx_L1_error)
  __pyx_r = 
#line 189 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_24interpolateSCHOrbit(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c);

#line 189 "pyOrbit.pyx"


#line 189 "pyOrbit.pyx"
  /* function exit code */

#line 189 "pyOrbit.pyx"
  goto __pyx_L0;

#line 189 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 189 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 189 "pyOrbit.pyx"
  __pyx_L0:;

#line 189 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 189 "pyOrbit.pyx"
  return __pyx_r;

#line 189 "pyOrbit.pyx"
}

#line 189 "pyOrbit.pyx"


#line 189 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_24interpolateSCHOrbit(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, double __pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  std::vector<double>  __pyx_v__b
#line 189 "pyOrbit.pyx"
;
  std::vector<double>  __pyx_v__c
#line 189 "pyOrbit.pyx"
;
  int __pyx_v_ret
#line 189 "pyOrbit.pyx"
;
  long __pyx_v_i
#line 189 "pyOrbit.pyx"
;

#line 189 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 189 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 189 "pyOrbit.pyx"
  long __pyx_t_1;

#line 189 "pyOrbit.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 189 "pyOrbit.pyx"
  double __pyx_t_3;

#line 189 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("interpolateSCHOrbit", 0);

  /* "pyOrbit.pyx":193
 *         cdef vector[double] _c
 *         cdef int ret
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 */

#line 193 "pyOrbit.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 193 "pyOrbit.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyOrbit.pyx":194
 *         cdef int ret
 *         for i in range(3):
 *             _b.push_back(b[i])             # <<<<<<<<<<<<<<
 *             _c.push_back(c[i])
 *         ret = self.c_orbit.interpolateSCHOrbit(a,_b,_c)
 */

#line 194 "pyOrbit.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 194 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 194 "pyOrbit.pyx"
      __PYX_ERR(9, 194, __pyx_L1_error)

#line 194 "pyOrbit.pyx"
    }

#line 194 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 194, __pyx_L1_error)

#line 194 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 194 "pyOrbit.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 194, __pyx_L1_error)

#line 194 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 194 "pyOrbit.pyx"
    try {

#line 194 "pyOrbit.pyx"
      __pyx_v__b.push_back(__pyx_t_3);

#line 194 "pyOrbit.pyx"
    } catch(...) {

#line 194 "pyOrbit.pyx"
      __Pyx_CppExn2PyErr();

#line 194 "pyOrbit.pyx"
      __PYX_ERR(9, 194, __pyx_L1_error)

#line 194 "pyOrbit.pyx"
    }

    /* "pyOrbit.pyx":195
 *         for i in range(3):
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])             # <<<<<<<<<<<<<<
 *         ret = self.c_orbit.interpolateSCHOrbit(a,_b,_c)
 *         for i in range(3):
 */

#line 195 "pyOrbit.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 195 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 195 "pyOrbit.pyx"
      __PYX_ERR(9, 195, __pyx_L1_error)

#line 195 "pyOrbit.pyx"
    }

#line 195 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_c, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 195, __pyx_L1_error)

#line 195 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 195 "pyOrbit.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 195, __pyx_L1_error)

#line 195 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 195 "pyOrbit.pyx"
    try {

#line 195 "pyOrbit.pyx"
      __pyx_v__c.push_back(__pyx_t_3);

#line 195 "pyOrbit.pyx"
    } catch(...) {

#line 195 "pyOrbit.pyx"
      __Pyx_CppExn2PyErr();

#line 195 "pyOrbit.pyx"
      __PYX_ERR(9, 195, __pyx_L1_error)

#line 195 "pyOrbit.pyx"
    }

#line 195 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":196
 *             _b.push_back(b[i])
 *             _c.push_back(c[i])
 *         ret = self.c_orbit.interpolateSCHOrbit(a,_b,_c)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             b[i] = _b[i]
 */

#line 196 "pyOrbit.pyx"
  __pyx_v_ret = __pyx_v_self->c_orbit->interpolateSCHOrbit(__pyx_v_a, __pyx_v__b, __pyx_v__c);

  /* "pyOrbit.pyx":197
 *             _c.push_back(c[i])
 *         ret = self.c_orbit.interpolateSCHOrbit(a,_b,_c)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 */

#line 197 "pyOrbit.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 197 "pyOrbit.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyOrbit.pyx":198
 *         ret = self.c_orbit.interpolateSCHOrbit(a,_b,_c)
 *         for i in range(3):
 *             b[i] = _b[i]             # <<<<<<<<<<<<<<
 *             c[i] = _c[i]
 *         return ret
 */

#line 198 "pyOrbit.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__b[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 198, __pyx_L1_error)

#line 198 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 198 "pyOrbit.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 198 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 198 "pyOrbit.pyx"
      __PYX_ERR(9, 198, __pyx_L1_error)

#line 198 "pyOrbit.pyx"
    }

#line 198 "pyOrbit.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_b, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(9, 198, __pyx_L1_error)

#line 198 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyOrbit.pyx":199
 *         for i in range(3):
 *             b[i] = _b[i]
 *             c[i] = _c[i]             # <<<<<<<<<<<<<<
 *         return ret
 *     def computeAcceleration(self, double a, list b):
 */

#line 199 "pyOrbit.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__c[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 199, __pyx_L1_error)

#line 199 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 199 "pyOrbit.pyx"
    if (unlikely(__pyx_v_c == Py_None)) {

#line 199 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 199 "pyOrbit.pyx"
      __PYX_ERR(9, 199, __pyx_L1_error)

#line 199 "pyOrbit.pyx"
    }

#line 199 "pyOrbit.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_c, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(9, 199, __pyx_L1_error)

#line 199 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 199 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":200
 *             b[i] = _b[i]
 *             c[i] = _c[i]
 *         return ret             # <<<<<<<<<<<<<<
 *     def computeAcceleration(self, double a, list b):
 *         cdef vector[double] _b
 */

#line 200 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 200 "pyOrbit.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 200, __pyx_L1_error)

#line 200 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 200 "pyOrbit.pyx"
  __pyx_r = __pyx_t_2;

#line 200 "pyOrbit.pyx"
  __pyx_t_2 = 0;

#line 200 "pyOrbit.pyx"
  goto __pyx_L0;

  /* "pyOrbit.pyx":189
 *             c[i] = _c[i]
 *         return ret
 *     def interpolateSCHOrbit(self, double a, list b, list c):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _b
 *         cdef vector[double] _c
 */

#line 189 "pyOrbit.pyx"


#line 189 "pyOrbit.pyx"
  /* function exit code */

#line 189 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 189 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 189 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.interpolateSCHOrbit", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 189 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 189 "pyOrbit.pyx"
  __pyx_L0:;

#line 189 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 189 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 189 "pyOrbit.pyx"
  return __pyx_r;

#line 189 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":201
 *             c[i] = _c[i]
 *         return ret
 *     def computeAcceleration(self, double a, list b):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _b
 *         cdef int ret
 */

#line 201 "pyOrbit.pyx"


#line 201 "pyOrbit.pyx"
/* Python wrapper */

#line 201 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_27computeAcceleration(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 201 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_27computeAcceleration(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a
#line 201 "pyOrbit.pyx"
;
  PyObject *__pyx_v_b = 0
#line 201 "pyOrbit.pyx"
;

#line 201 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 201 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 201 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("computeAcceleration (wrapper)", 0);

#line 201 "pyOrbit.pyx"
  {

#line 201 "pyOrbit.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};

#line 201 "pyOrbit.pyx"
    PyObject* values[2] = {0,0};

#line 201 "pyOrbit.pyx"
    if (unlikely(__pyx_kwds)) {

#line 201 "pyOrbit.pyx"
      Py_ssize_t kw_args;

#line 201 "pyOrbit.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 201 "pyOrbit.pyx"
      switch (pos_args) {
        case  2: 
#line 201 "pyOrbit.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 201 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 201 "pyOrbit.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 201 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 201 "pyOrbit.pyx"
        case  0: break;
        default: 
#line 201 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 201 "pyOrbit.pyx"
      }

#line 201 "pyOrbit.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 201 "pyOrbit.pyx"
      switch (pos_args) {

#line 201 "pyOrbit.pyx"
        case  0:

#line 201 "pyOrbit.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 201 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 201 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 201 "pyOrbit.pyx"
        case  1:

#line 201 "pyOrbit.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 201 "pyOrbit.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("computeAcceleration", 1, 2, 2, 1); 
#line 201 "pyOrbit.pyx"
__PYX_ERR(9, 201, __pyx_L3_error)

#line 201 "pyOrbit.pyx"
        }

#line 201 "pyOrbit.pyx"
      }

#line 201 "pyOrbit.pyx"
      if (unlikely(kw_args > 0)) {

#line 201 "pyOrbit.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "computeAcceleration") < 0)) __PYX_ERR(9, 201, __pyx_L3_error)

#line 201 "pyOrbit.pyx"
      }

#line 201 "pyOrbit.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 201 "pyOrbit.pyx"
      goto __pyx_L5_argtuple_error;

#line 201 "pyOrbit.pyx"
    } else {

#line 201 "pyOrbit.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 201 "pyOrbit.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 201 "pyOrbit.pyx"
    }

#line 201 "pyOrbit.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 201, __pyx_L3_error)

#line 201 "pyOrbit.pyx"
    __pyx_v_b = ((PyObject*)values[1]);

#line 201 "pyOrbit.pyx"
  }

#line 201 "pyOrbit.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 201 "pyOrbit.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeAcceleration", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 201 "pyOrbit.pyx"
__PYX_ERR(9, 201, __pyx_L3_error)

#line 201 "pyOrbit.pyx"
  __pyx_L3_error:;

#line 201 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.computeAcceleration", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 201 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 201 "pyOrbit.pyx"
  return NULL;

#line 201 "pyOrbit.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 201 "pyOrbit.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), (&PyList_Type), 1, "b", 1))) __PYX_ERR(9, 201, __pyx_L1_error)
  __pyx_r = 
#line 201 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_26computeAcceleration(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self), __pyx_v_a, __pyx_v_b);

#line 201 "pyOrbit.pyx"


#line 201 "pyOrbit.pyx"
  /* function exit code */

#line 201 "pyOrbit.pyx"
  goto __pyx_L0;

#line 201 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 201 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 201 "pyOrbit.pyx"
  __pyx_L0:;

#line 201 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 201 "pyOrbit.pyx"
  return __pyx_r;

#line 201 "pyOrbit.pyx"
}

#line 201 "pyOrbit.pyx"


#line 201 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_26computeAcceleration(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, double __pyx_v_a, PyObject *__pyx_v_b) {
  std::vector<double>  __pyx_v__b
#line 201 "pyOrbit.pyx"
;
  int __pyx_v_ret
#line 201 "pyOrbit.pyx"
;
  long __pyx_v_i
#line 201 "pyOrbit.pyx"
;

#line 201 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 201 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 201 "pyOrbit.pyx"
  long __pyx_t_1;

#line 201 "pyOrbit.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 201 "pyOrbit.pyx"
  double __pyx_t_3;

#line 201 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("computeAcceleration", 0);

  /* "pyOrbit.pyx":204
 *         cdef vector[double] _b
 *         cdef int ret
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             _b.push_back(b[i])
 *         ret = self.c_orbit.computeAcceleration(a,_b)
 */

#line 204 "pyOrbit.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 204 "pyOrbit.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyOrbit.pyx":205
 *         cdef int ret
 *         for i in range(3):
 *             _b.push_back(b[i])             # <<<<<<<<<<<<<<
 *         ret = self.c_orbit.computeAcceleration(a,_b)
 *         for i in range(3):
 */

#line 205 "pyOrbit.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 205 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 205 "pyOrbit.pyx"
      __PYX_ERR(9, 205, __pyx_L1_error)

#line 205 "pyOrbit.pyx"
    }

#line 205 "pyOrbit.pyx"
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_b, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 205, __pyx_L1_error)

#line 205 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 205 "pyOrbit.pyx"
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 205, __pyx_L1_error)

#line 205 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 205 "pyOrbit.pyx"
    try {

#line 205 "pyOrbit.pyx"
      __pyx_v__b.push_back(__pyx_t_3);

#line 205 "pyOrbit.pyx"
    } catch(...) {

#line 205 "pyOrbit.pyx"
      __Pyx_CppExn2PyErr();

#line 205 "pyOrbit.pyx"
      __PYX_ERR(9, 205, __pyx_L1_error)

#line 205 "pyOrbit.pyx"
    }

#line 205 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":206
 *         for i in range(3):
 *             _b.push_back(b[i])
 *         ret = self.c_orbit.computeAcceleration(a,_b)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             b[i] = _b[i]
 */

#line 206 "pyOrbit.pyx"
  __pyx_v_ret = __pyx_v_self->c_orbit->computeAcceleration(__pyx_v_a, __pyx_v__b);

  /* "pyOrbit.pyx":207
 *             _b.push_back(b[i])
 *         ret = self.c_orbit.computeAcceleration(a,_b)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             b[i] = _b[i]
 *         return ret
 */

#line 207 "pyOrbit.pyx"
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {

#line 207 "pyOrbit.pyx"
    __pyx_v_i = __pyx_t_1;

    /* "pyOrbit.pyx":208
 *         ret = self.c_orbit.computeAcceleration(a,_b)
 *         for i in range(3):
 *             b[i] = _b[i]             # <<<<<<<<<<<<<<
 *         return ret
 *     def printOrbit(self):
 */

#line 208 "pyOrbit.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v__b[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 208, __pyx_L1_error)

#line 208 "pyOrbit.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 208 "pyOrbit.pyx"
    if (unlikely(__pyx_v_b == Py_None)) {

#line 208 "pyOrbit.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 208 "pyOrbit.pyx"
      __PYX_ERR(9, 208, __pyx_L1_error)

#line 208 "pyOrbit.pyx"
    }

#line 208 "pyOrbit.pyx"
    if (unlikely(__Pyx_SetItemInt(__pyx_v_b, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(9, 208, __pyx_L1_error)

#line 208 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 208 "pyOrbit.pyx"
  }

  /* "pyOrbit.pyx":209
 *         for i in range(3):
 *             b[i] = _b[i]
 *         return ret             # <<<<<<<<<<<<<<
 *     def printOrbit(self):
 *         self.c_orbit.printOrbit()
 */

#line 209 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 209 "pyOrbit.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 209, __pyx_L1_error)

#line 209 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 209 "pyOrbit.pyx"
  __pyx_r = __pyx_t_2;

#line 209 "pyOrbit.pyx"
  __pyx_t_2 = 0;

#line 209 "pyOrbit.pyx"
  goto __pyx_L0;

  /* "pyOrbit.pyx":201
 *             c[i] = _c[i]
 *         return ret
 *     def computeAcceleration(self, double a, list b):             # <<<<<<<<<<<<<<
 *         cdef vector[double] _b
 *         cdef int ret
 */

#line 201 "pyOrbit.pyx"


#line 201 "pyOrbit.pyx"
  /* function exit code */

#line 201 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 201 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 201 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.computeAcceleration", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 201 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 201 "pyOrbit.pyx"
  __pyx_L0:;

#line 201 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 201 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 201 "pyOrbit.pyx"
  return __pyx_r;

#line 201 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":210
 *             b[i] = _b[i]
 *         return ret
 *     def printOrbit(self):             # <<<<<<<<<<<<<<
 *         self.c_orbit.printOrbit()
 *     def loadFromHDR(self, a, int b=1):
 */

#line 210 "pyOrbit.pyx"


#line 210 "pyOrbit.pyx"
/* Python wrapper */

#line 210 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_29printOrbit(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 210 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_29printOrbit(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 210 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 210 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 210 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("printOrbit (wrapper)", 0);
  __pyx_r = 
#line 210 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_28printOrbit(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self));

#line 210 "pyOrbit.pyx"


#line 210 "pyOrbit.pyx"
  /* function exit code */

#line 210 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 210 "pyOrbit.pyx"
  return __pyx_r;

#line 210 "pyOrbit.pyx"
}

#line 210 "pyOrbit.pyx"


#line 210 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_28printOrbit(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self) {

#line 210 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 210 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 210 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("printOrbit", 0);

  /* "pyOrbit.pyx":211
 *         return ret
 *     def printOrbit(self):
 *         self.c_orbit.printOrbit()             # <<<<<<<<<<<<<<
 *     def loadFromHDR(self, a, int b=1):
 *         cdef bytes _a = a.encode()
 */

#line 211 "pyOrbit.pyx"
  __pyx_v_self->c_orbit->printOrbit();

  /* "pyOrbit.pyx":210
 *             b[i] = _b[i]
 *         return ret
 *     def printOrbit(self):             # <<<<<<<<<<<<<<
 *         self.c_orbit.printOrbit()
 *     def loadFromHDR(self, a, int b=1):
 */

#line 210 "pyOrbit.pyx"


#line 210 "pyOrbit.pyx"
  /* function exit code */

#line 210 "pyOrbit.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 210 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 210 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 210 "pyOrbit.pyx"
  return __pyx_r;

#line 210 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":212
 *     def printOrbit(self):
 *         self.c_orbit.printOrbit()
 *     def loadFromHDR(self, a, int b=1):             # <<<<<<<<<<<<<<
 *         cdef bytes _a = a.encode()
 *         cdef char *cstring = _a
 */

#line 212 "pyOrbit.pyx"


#line 212 "pyOrbit.pyx"
/* Python wrapper */

#line 212 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_31loadFromHDR(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 212 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_31loadFromHDR(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0
#line 212 "pyOrbit.pyx"
;
  int __pyx_v_b
#line 212 "pyOrbit.pyx"
;

#line 212 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 212 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 212 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("loadFromHDR (wrapper)", 0);

#line 212 "pyOrbit.pyx"
  {

#line 212 "pyOrbit.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};

#line 212 "pyOrbit.pyx"
    PyObject* values[2] = {0,0};

#line 212 "pyOrbit.pyx"
    if (unlikely(__pyx_kwds)) {

#line 212 "pyOrbit.pyx"
      Py_ssize_t kw_args;

#line 212 "pyOrbit.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 212 "pyOrbit.pyx"
      switch (pos_args) {
        case  2: 
#line 212 "pyOrbit.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 212 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 212 "pyOrbit.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 212 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 212 "pyOrbit.pyx"
        case  0: break;
        default: 
#line 212 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 212 "pyOrbit.pyx"
      }

#line 212 "pyOrbit.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 212 "pyOrbit.pyx"
      switch (pos_args) {

#line 212 "pyOrbit.pyx"
        case  0:

#line 212 "pyOrbit.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 212 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 212 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;

#line 212 "pyOrbit.pyx"
        case  1:

#line 212 "pyOrbit.pyx"
        if (kw_args > 0) {

#line 212 "pyOrbit.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b);

#line 212 "pyOrbit.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 212 "pyOrbit.pyx"
        }

#line 212 "pyOrbit.pyx"
      }

#line 212 "pyOrbit.pyx"
      if (unlikely(kw_args > 0)) {

#line 212 "pyOrbit.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "loadFromHDR") < 0)) __PYX_ERR(9, 212, __pyx_L3_error)

#line 212 "pyOrbit.pyx"
      }

#line 212 "pyOrbit.pyx"
    } else {

#line 212 "pyOrbit.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: 
#line 212 "pyOrbit.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 212 "pyOrbit.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 212 "pyOrbit.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 212 "pyOrbit.pyx"
        break;
        default: 
#line 212 "pyOrbit.pyx"
goto __pyx_L5_argtuple_error;

#line 212 "pyOrbit.pyx"
      }

#line 212 "pyOrbit.pyx"
    }

#line 212 "pyOrbit.pyx"
    __pyx_v_a = values[0];

#line 212 "pyOrbit.pyx"
    if (values[1]) {

#line 212 "pyOrbit.pyx"
      __pyx_v_b = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_b == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 212, __pyx_L3_error)

#line 212 "pyOrbit.pyx"
    } else {

#line 212 "pyOrbit.pyx"
      __pyx_v_b = ((int)1);

#line 212 "pyOrbit.pyx"
    }

#line 212 "pyOrbit.pyx"
  }

#line 212 "pyOrbit.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 212 "pyOrbit.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("loadFromHDR", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 212 "pyOrbit.pyx"
__PYX_ERR(9, 212, __pyx_L3_error)

#line 212 "pyOrbit.pyx"
  __pyx_L3_error:;

#line 212 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.loadFromHDR", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 212 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 212 "pyOrbit.pyx"
  return NULL;

#line 212 "pyOrbit.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 212 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_30loadFromHDR(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self), __pyx_v_a, __pyx_v_b);

#line 212 "pyOrbit.pyx"


#line 212 "pyOrbit.pyx"
  /* function exit code */

#line 212 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 212 "pyOrbit.pyx"
  return __pyx_r;

#line 212 "pyOrbit.pyx"
}

#line 212 "pyOrbit.pyx"


#line 212 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_30loadFromHDR(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, PyObject *__pyx_v_a, int __pyx_v_b) {
  PyObject *__pyx_v__a = 0
#line 212 "pyOrbit.pyx"
;
  char *__pyx_v_cstring
#line 212 "pyOrbit.pyx"
;

#line 212 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 212 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 212 "pyOrbit.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 212 "pyOrbit.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 212 "pyOrbit.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 212 "pyOrbit.pyx"
  char *__pyx_t_4;

#line 212 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("loadFromHDR", 0);

  /* "pyOrbit.pyx":213
 *         self.c_orbit.printOrbit()
 *     def loadFromHDR(self, a, int b=1):
 *         cdef bytes _a = a.encode()             # <<<<<<<<<<<<<<
 *         cdef char *cstring = _a
 *         self.c_orbit.loadFromHDR(cstring,b)
 */

#line 213 "pyOrbit.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_a, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 213, __pyx_L1_error)

#line 213 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 213 "pyOrbit.pyx"
  __pyx_t_3 = NULL;

#line 213 "pyOrbit.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 213 "pyOrbit.pyx"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 213 "pyOrbit.pyx"
    if (likely(__pyx_t_3)) {

#line 213 "pyOrbit.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 213 "pyOrbit.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 213 "pyOrbit.pyx"
      __Pyx_INCREF(function);

#line 213 "pyOrbit.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 213 "pyOrbit.pyx"
    }

#line 213 "pyOrbit.pyx"
  }

#line 213 "pyOrbit.pyx"
  if (__pyx_t_3) {

#line 213 "pyOrbit.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 213, __pyx_L1_error)

#line 213 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 213 "pyOrbit.pyx"
  } else {

#line 213 "pyOrbit.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 213, __pyx_L1_error)

#line 213 "pyOrbit.pyx"
  }

#line 213 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 213 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 213 "pyOrbit.pyx"
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(9, 213, __pyx_L1_error)

#line 213 "pyOrbit.pyx"
  __pyx_v__a = ((PyObject*)__pyx_t_1);

#line 213 "pyOrbit.pyx"
  __pyx_t_1 = 0;

  /* "pyOrbit.pyx":214
 *     def loadFromHDR(self, a, int b=1):
 *         cdef bytes _a = a.encode()
 *         cdef char *cstring = _a             # <<<<<<<<<<<<<<
 *         self.c_orbit.loadFromHDR(cstring,b)
 *     def dumpToHDR(self, a):
 */

#line 214 "pyOrbit.pyx"
  if (unlikely(__pyx_v__a == Py_None)) {

#line 214 "pyOrbit.pyx"
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");

#line 214 "pyOrbit.pyx"
    __PYX_ERR(9, 214, __pyx_L1_error)

#line 214 "pyOrbit.pyx"
  }

#line 214 "pyOrbit.pyx"
  __pyx_t_4 = __Pyx_PyBytes_AsWritableString(__pyx_v__a); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(9, 214, __pyx_L1_error)

#line 214 "pyOrbit.pyx"
  __pyx_v_cstring = __pyx_t_4;

  /* "pyOrbit.pyx":215
 *         cdef bytes _a = a.encode()
 *         cdef char *cstring = _a
 *         self.c_orbit.loadFromHDR(cstring,b)             # <<<<<<<<<<<<<<
 *     def dumpToHDR(self, a):
 *         cdef bytes _a = a.encode()
 */

#line 215 "pyOrbit.pyx"
  __pyx_v_self->c_orbit->loadFromHDR(__pyx_v_cstring, __pyx_v_b);

  /* "pyOrbit.pyx":212
 *     def printOrbit(self):
 *         self.c_orbit.printOrbit()
 *     def loadFromHDR(self, a, int b=1):             # <<<<<<<<<<<<<<
 *         cdef bytes _a = a.encode()
 *         cdef char *cstring = _a
 */

#line 212 "pyOrbit.pyx"


#line 212 "pyOrbit.pyx"
  /* function exit code */

#line 212 "pyOrbit.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 212 "pyOrbit.pyx"
  goto __pyx_L0;

#line 212 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 212 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 212 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 212 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 212 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.loadFromHDR", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 212 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 212 "pyOrbit.pyx"
  __pyx_L0:;

#line 212 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_v__a);

#line 212 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 212 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 212 "pyOrbit.pyx"
  return __pyx_r;

#line 212 "pyOrbit.pyx"
}

/* "pyOrbit.pyx":216
 *         cdef char *cstring = _a
 *         self.c_orbit.loadFromHDR(cstring,b)
 *     def dumpToHDR(self, a):             # <<<<<<<<<<<<<<
 *         cdef bytes _a = a.encode()
 *         cdef char *cstring = _a
 */

#line 216 "pyOrbit.pyx"


#line 216 "pyOrbit.pyx"
/* Python wrapper */

#line 216 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_33dumpToHDR(PyObject *__pyx_v_self, PyObject *__pyx_v_a); /*proto*/

#line 216 "pyOrbit.pyx"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_33dumpToHDR(PyObject *__pyx_v_self, PyObject *__pyx_v_a) {

#line 216 "pyOrbit.pyx"
  PyObject *__pyx_r = 0;

#line 216 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 216 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("dumpToHDR (wrapper)", 0);
  __pyx_r = 
#line 216 "pyOrbit.pyx"
__pyx_pf_8iscecore_7pyOrbit_32dumpToHDR(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self), ((PyObject *)__pyx_v_a));

#line 216 "pyOrbit.pyx"


#line 216 "pyOrbit.pyx"
  /* function exit code */

#line 216 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 216 "pyOrbit.pyx"
  return __pyx_r;

#line 216 "pyOrbit.pyx"
}

#line 216 "pyOrbit.pyx"


#line 216 "pyOrbit.pyx"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_32dumpToHDR(struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, PyObject *__pyx_v_a) {
  PyObject *__pyx_v__a = 0
#line 216 "pyOrbit.pyx"
;
  char *__pyx_v_cstring
#line 216 "pyOrbit.pyx"
;

#line 216 "pyOrbit.pyx"
  PyObject *__pyx_r = NULL;

#line 216 "pyOrbit.pyx"
  __Pyx_RefNannyDeclarations

#line 216 "pyOrbit.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 216 "pyOrbit.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 216 "pyOrbit.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 216 "pyOrbit.pyx"
  char *__pyx_t_4;

#line 216 "pyOrbit.pyx"
  __Pyx_RefNannySetupContext("dumpToHDR", 0);

  /* "pyOrbit.pyx":217
 *         self.c_orbit.loadFromHDR(cstring,b)
 *     def dumpToHDR(self, a):
 *         cdef bytes _a = a.encode()             # <<<<<<<<<<<<<<
 *         cdef char *cstring = _a
 *         self.c_orbit.dumpToHDR(cstring)
 */

#line 217 "pyOrbit.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_a, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 217, __pyx_L1_error)

#line 217 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 217 "pyOrbit.pyx"
  __pyx_t_3 = NULL;

#line 217 "pyOrbit.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 217 "pyOrbit.pyx"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 217 "pyOrbit.pyx"
    if (likely(__pyx_t_3)) {

#line 217 "pyOrbit.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 217 "pyOrbit.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 217 "pyOrbit.pyx"
      __Pyx_INCREF(function);

#line 217 "pyOrbit.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 217 "pyOrbit.pyx"
    }

#line 217 "pyOrbit.pyx"
  }

#line 217 "pyOrbit.pyx"
  if (__pyx_t_3) {

#line 217 "pyOrbit.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 217, __pyx_L1_error)

#line 217 "pyOrbit.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 217 "pyOrbit.pyx"
  } else {

#line 217 "pyOrbit.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 217, __pyx_L1_error)

#line 217 "pyOrbit.pyx"
  }

#line 217 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 217 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 217 "pyOrbit.pyx"
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(9, 217, __pyx_L1_error)

#line 217 "pyOrbit.pyx"
  __pyx_v__a = ((PyObject*)__pyx_t_1);

#line 217 "pyOrbit.pyx"
  __pyx_t_1 = 0;

  /* "pyOrbit.pyx":218
 *     def dumpToHDR(self, a):
 *         cdef bytes _a = a.encode()
 *         cdef char *cstring = _a             # <<<<<<<<<<<<<<
 *         self.c_orbit.dumpToHDR(cstring)
 * 
 */

#line 218 "pyOrbit.pyx"
  if (unlikely(__pyx_v__a == Py_None)) {

#line 218 "pyOrbit.pyx"
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");

#line 218 "pyOrbit.pyx"
    __PYX_ERR(9, 218, __pyx_L1_error)

#line 218 "pyOrbit.pyx"
  }

#line 218 "pyOrbit.pyx"
  __pyx_t_4 = __Pyx_PyBytes_AsWritableString(__pyx_v__a); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(9, 218, __pyx_L1_error)

#line 218 "pyOrbit.pyx"
  __pyx_v_cstring = __pyx_t_4;

  /* "pyOrbit.pyx":219
 *         cdef bytes _a = a.encode()
 *         cdef char *cstring = _a
 *         self.c_orbit.dumpToHDR(cstring)             # <<<<<<<<<<<<<<
 * 
 */

#line 219 "pyOrbit.pyx"
  __pyx_v_self->c_orbit->dumpToHDR(__pyx_v_cstring);

  /* "pyOrbit.pyx":216
 *         cdef char *cstring = _a
 *         self.c_orbit.loadFromHDR(cstring,b)
 *     def dumpToHDR(self, a):             # <<<<<<<<<<<<<<
 *         cdef bytes _a = a.encode()
 *         cdef char *cstring = _a
 */

#line 216 "pyOrbit.pyx"


#line 216 "pyOrbit.pyx"
  /* function exit code */

#line 216 "pyOrbit.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 216 "pyOrbit.pyx"
  goto __pyx_L0;

#line 216 "pyOrbit.pyx"
  __pyx_L1_error:;

#line 216 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 216 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 216 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 216 "pyOrbit.pyx"
  __Pyx_AddTraceback("iscecore.pyOrbit.dumpToHDR", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 216 "pyOrbit.pyx"
  __pyx_r = NULL;

#line 216 "pyOrbit.pyx"
  __pyx_L0:;

#line 216 "pyOrbit.pyx"
  __Pyx_XDECREF(__pyx_v__a);

#line 216 "pyOrbit.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 216 "pyOrbit.pyx"
  __Pyx_RefNannyFinishContext();

#line 216 "pyOrbit.pyx"
  return __pyx_r;

#line 216 "pyOrbit.pyx"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_35__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_35__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_8iscecore_7pyOrbit_34__reduce_cython__(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_34__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyOrbit.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_37__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_7pyOrbit_37__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf_8iscecore_7pyOrbit_36__setstate_cython__(((struct __pyx_obj_8iscecore_pyOrbit *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_7pyOrbit_36__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyOrbit *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyOrbit.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "pyPoly1d.pyx":14
 *     cdef bool __owner
 * 
 *     def __cinit__(self, order=-1, mean=0., norm=1.):             # <<<<<<<<<<<<<<
 *         self.c_poly1d = new Poly1d(order,mean,norm)
 *         self.__owner = True
 */

#line 14 "pyPoly1d.pyx"


#line 14 "pyPoly1d.pyx"
/* Python wrapper */

#line 14 "pyPoly1d.pyx"
static int __pyx_pw_8iscecore_8pyPoly1d_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 14 "pyPoly1d.pyx"
static int __pyx_pw_8iscecore_8pyPoly1d_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_order = 0
#line 14 "pyPoly1d.pyx"
;
  PyObject *__pyx_v_mean = 0
#line 14 "pyPoly1d.pyx"
;
  PyObject *__pyx_v_norm = 0
#line 14 "pyPoly1d.pyx"
;

#line 14 "pyPoly1d.pyx"
  int __pyx_r;

#line 14 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 14 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 14 "pyPoly1d.pyx"
  {

#line 14 "pyPoly1d.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order,&__pyx_n_s_mean,&__pyx_n_s_norm,0};

#line 14 "pyPoly1d.pyx"
    PyObject* values[3] = {0,0,0};

#line 14 "pyPoly1d.pyx"
    values[0] = ((PyObject *)__pyx_int_neg_1);

#line 14 "pyPoly1d.pyx"
    values[1] = ((PyObject *)__pyx_float_0_);

#line 14 "pyPoly1d.pyx"
    values[2] = ((PyObject *)__pyx_float_1_);

#line 14 "pyPoly1d.pyx"
    if (unlikely(__pyx_kwds)) {

#line 14 "pyPoly1d.pyx"
      Py_ssize_t kw_args;

#line 14 "pyPoly1d.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 14 "pyPoly1d.pyx"
      switch (pos_args) {
        case  3: 
#line 14 "pyPoly1d.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 14 "pyPoly1d.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 14 "pyPoly1d.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 14 "pyPoly1d.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 14 "pyPoly1d.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 14 "pyPoly1d.pyx"
        CYTHON_FALLTHROUGH;

#line 14 "pyPoly1d.pyx"
        case  0: break;
        default: 
#line 14 "pyPoly1d.pyx"
goto __pyx_L5_argtuple_error;

#line 14 "pyPoly1d.pyx"
      }

#line 14 "pyPoly1d.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 14 "pyPoly1d.pyx"
      switch (pos_args) {

#line 14 "pyPoly1d.pyx"
        case  0:

#line 14 "pyPoly1d.pyx"
        if (kw_args > 0) {

#line 14 "pyPoly1d.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_order);

#line 14 "pyPoly1d.pyx"
          if (value) { values[0] = value; kw_args--; }

#line 14 "pyPoly1d.pyx"
        }

#line 14 "pyPoly1d.pyx"
        CYTHON_FALLTHROUGH;

#line 14 "pyPoly1d.pyx"
        case  1:

#line 14 "pyPoly1d.pyx"
        if (kw_args > 0) {

#line 14 "pyPoly1d.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mean);

#line 14 "pyPoly1d.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 14 "pyPoly1d.pyx"
        }

#line 14 "pyPoly1d.pyx"
        CYTHON_FALLTHROUGH;

#line 14 "pyPoly1d.pyx"
        case  2:

#line 14 "pyPoly1d.pyx"
        if (kw_args > 0) {

#line 14 "pyPoly1d.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_norm);

#line 14 "pyPoly1d.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 14 "pyPoly1d.pyx"
        }

#line 14 "pyPoly1d.pyx"
      }

#line 14 "pyPoly1d.pyx"
      if (unlikely(kw_args > 0)) {

#line 14 "pyPoly1d.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(10, 14, __pyx_L3_error)

#line 14 "pyPoly1d.pyx"
      }

#line 14 "pyPoly1d.pyx"
    } else {

#line 14 "pyPoly1d.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 14 "pyPoly1d.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 14 "pyPoly1d.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 14 "pyPoly1d.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 14 "pyPoly1d.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 14 "pyPoly1d.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 14 "pyPoly1d.pyx"
        CYTHON_FALLTHROUGH;
        case  0: 
#line 14 "pyPoly1d.pyx"
break;
        default: 
#line 14 "pyPoly1d.pyx"
goto __pyx_L5_argtuple_error;

#line 14 "pyPoly1d.pyx"
      }

#line 14 "pyPoly1d.pyx"
    }

#line 14 "pyPoly1d.pyx"
    __pyx_v_order = values[0];

#line 14 "pyPoly1d.pyx"
    __pyx_v_mean = values[1];

#line 14 "pyPoly1d.pyx"
    __pyx_v_norm = values[2];

#line 14 "pyPoly1d.pyx"
  }

#line 14 "pyPoly1d.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 14 "pyPoly1d.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 14 "pyPoly1d.pyx"
__PYX_ERR(10, 14, __pyx_L3_error)

#line 14 "pyPoly1d.pyx"
  __pyx_L3_error:;

#line 14 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 14 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 14 "pyPoly1d.pyx"
  return -1;

#line 14 "pyPoly1d.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 14 "pyPoly1d.pyx"
__pyx_pf_8iscecore_8pyPoly1d___cinit__(((struct __pyx_obj_8iscecore_pyPoly1d *)__pyx_v_self), __pyx_v_order, __pyx_v_mean, __pyx_v_norm);

#line 14 "pyPoly1d.pyx"


#line 14 "pyPoly1d.pyx"
  /* function exit code */

#line 14 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 14 "pyPoly1d.pyx"
  return __pyx_r;

#line 14 "pyPoly1d.pyx"
}

#line 14 "pyPoly1d.pyx"


#line 14 "pyPoly1d.pyx"
static int __pyx_pf_8iscecore_8pyPoly1d___cinit__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, PyObject *__pyx_v_order, PyObject *__pyx_v_mean, PyObject *__pyx_v_norm) {

#line 14 "pyPoly1d.pyx"
  int __pyx_r;

#line 14 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 14 "pyPoly1d.pyx"
  int __pyx_t_1;

#line 14 "pyPoly1d.pyx"
  double __pyx_t_2;

#line 14 "pyPoly1d.pyx"
  double __pyx_t_3;

#line 14 "pyPoly1d.pyx"
  isce::core::Poly1d *__pyx_t_4;

#line 14 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyPoly1d.pyx":15
 * 
 *     def __cinit__(self, order=-1, mean=0., norm=1.):
 *         self.c_poly1d = new Poly1d(order,mean,norm)             # <<<<<<<<<<<<<<
 *         self.__owner = True
 *     def __dealloc__(self):
 */

#line 15 "pyPoly1d.pyx"
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_order); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 15, __pyx_L1_error)

#line 15 "pyPoly1d.pyx"
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_mean); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 15, __pyx_L1_error)

#line 15 "pyPoly1d.pyx"
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_norm); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 15, __pyx_L1_error)

#line 15 "pyPoly1d.pyx"
  try {

#line 15 "pyPoly1d.pyx"
    __pyx_t_4 = new isce::core::Poly1d(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 15 "pyPoly1d.pyx"
  } catch(...) {

#line 15 "pyPoly1d.pyx"
    __Pyx_CppExn2PyErr();

#line 15 "pyPoly1d.pyx"
    __PYX_ERR(10, 15, __pyx_L1_error)

#line 15 "pyPoly1d.pyx"
  }

#line 15 "pyPoly1d.pyx"
  __pyx_v_self->c_poly1d = __pyx_t_4;

  /* "pyPoly1d.pyx":16
 *     def __cinit__(self, order=-1, mean=0., norm=1.):
 *         self.c_poly1d = new Poly1d(order,mean,norm)
 *         self.__owner = True             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.__owner:
 */

#line 16 "pyPoly1d.pyx"
  __pyx_v_self->__pyx___owner = 1;

  /* "pyPoly1d.pyx":14
 *     cdef bool __owner
 * 
 *     def __cinit__(self, order=-1, mean=0., norm=1.):             # <<<<<<<<<<<<<<
 *         self.c_poly1d = new Poly1d(order,mean,norm)
 *         self.__owner = True
 */

#line 14 "pyPoly1d.pyx"


#line 14 "pyPoly1d.pyx"
  /* function exit code */

#line 14 "pyPoly1d.pyx"
  __pyx_r = 0;

#line 14 "pyPoly1d.pyx"
  goto __pyx_L0;

#line 14 "pyPoly1d.pyx"
  __pyx_L1_error:;

#line 14 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 14 "pyPoly1d.pyx"
  __pyx_r = -1;

#line 14 "pyPoly1d.pyx"
  __pyx_L0:;

#line 14 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 14 "pyPoly1d.pyx"
  return __pyx_r;

#line 14 "pyPoly1d.pyx"
}

/* "pyPoly1d.pyx":17
 *         self.c_poly1d = new Poly1d(order,mean,norm)
 *         self.__owner = True
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_poly1d
 */

#line 17 "pyPoly1d.pyx"


#line 17 "pyPoly1d.pyx"
/* Python wrapper */

#line 17 "pyPoly1d.pyx"
static void __pyx_pw_8iscecore_8pyPoly1d_3__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 17 "pyPoly1d.pyx"
static void __pyx_pw_8iscecore_8pyPoly1d_3__dealloc__(PyObject *__pyx_v_self) {

#line 17 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 17 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 17 "pyPoly1d.pyx"
  __pyx_pf_8iscecore_8pyPoly1d_2__dealloc__(((struct __pyx_obj_8iscecore_pyPoly1d *)__pyx_v_self));

#line 17 "pyPoly1d.pyx"


#line 17 "pyPoly1d.pyx"
  /* function exit code */

#line 17 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 17 "pyPoly1d.pyx"
}

#line 17 "pyPoly1d.pyx"


#line 17 "pyPoly1d.pyx"
static void __pyx_pf_8iscecore_8pyPoly1d_2__dealloc__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self) {

#line 17 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 17 "pyPoly1d.pyx"
  int __pyx_t_1;

#line 17 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyPoly1d.pyx":18
 *         self.__owner = True
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_poly1d
 *     @staticmethod
 */

#line 18 "pyPoly1d.pyx"
  __pyx_t_1 = (__pyx_v_self->__pyx___owner != 0);

#line 18 "pyPoly1d.pyx"
  if (__pyx_t_1) {

    /* "pyPoly1d.pyx":19
 *     def __dealloc__(self):
 *         if self.__owner:
 *             del self.c_poly1d             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     def bind(pyPoly1d poly):
 */

#line 19 "pyPoly1d.pyx"
    delete __pyx_v_self->c_poly1d;

    /* "pyPoly1d.pyx":18
 *         self.__owner = True
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_poly1d
 *     @staticmethod
 */

#line 18 "pyPoly1d.pyx"
  }

  /* "pyPoly1d.pyx":17
 *         self.c_poly1d = new Poly1d(order,mean,norm)
 *         self.__owner = True
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_poly1d
 */

#line 17 "pyPoly1d.pyx"


#line 17 "pyPoly1d.pyx"
  /* function exit code */

#line 17 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 17 "pyPoly1d.pyx"
}

/* "pyPoly1d.pyx":21
 *             del self.c_poly1d
 *     @staticmethod
 *     def bind(pyPoly1d poly):             # <<<<<<<<<<<<<<
 *         new_poly = pyPoly1d()
 *         del new_poly.c_poly1d
 */

#line 21 "pyPoly1d.pyx"


#line 21 "pyPoly1d.pyx"
/* Python wrapper */

#line 21 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_5bind(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8iscecore_8pyPoly1d_5bind = 
#line 21 "pyPoly1d.pyx"
{"bind", (PyCFunction)__pyx_pw_8iscecore_8pyPoly1d_5bind, METH_VARARGS|METH_KEYWORDS, 0};

#line 21 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_5bind(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_poly = 0
#line 21 "pyPoly1d.pyx"
;

#line 21 "pyPoly1d.pyx"
  PyObject *__pyx_r = 0;

#line 21 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 21 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("bind (wrapper)", 0);

#line 21 "pyPoly1d.pyx"
  {

#line 21 "pyPoly1d.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_poly,0};

#line 21 "pyPoly1d.pyx"
    PyObject* values[1] = {0};

#line 21 "pyPoly1d.pyx"
    if (unlikely(__pyx_kwds)) {

#line 21 "pyPoly1d.pyx"
      Py_ssize_t kw_args;

#line 21 "pyPoly1d.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 21 "pyPoly1d.pyx"
      switch (pos_args) {
        case  1: 
#line 21 "pyPoly1d.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 21 "pyPoly1d.pyx"
        CYTHON_FALLTHROUGH;

#line 21 "pyPoly1d.pyx"
        case  0: break;
        default: 
#line 21 "pyPoly1d.pyx"
goto __pyx_L5_argtuple_error;

#line 21 "pyPoly1d.pyx"
      }

#line 21 "pyPoly1d.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 21 "pyPoly1d.pyx"
      switch (pos_args) {

#line 21 "pyPoly1d.pyx"
        case  0:

#line 21 "pyPoly1d.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_poly)) != 0)) kw_args--;
        else 
#line 21 "pyPoly1d.pyx"
goto __pyx_L5_argtuple_error;

#line 21 "pyPoly1d.pyx"
      }

#line 21 "pyPoly1d.pyx"
      if (unlikely(kw_args > 0)) {

#line 21 "pyPoly1d.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "bind") < 0)) __PYX_ERR(10, 21, __pyx_L3_error)

#line 21 "pyPoly1d.pyx"
      }

#line 21 "pyPoly1d.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {

#line 21 "pyPoly1d.pyx"
      goto __pyx_L5_argtuple_error;

#line 21 "pyPoly1d.pyx"
    } else {

#line 21 "pyPoly1d.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 21 "pyPoly1d.pyx"
    }

#line 21 "pyPoly1d.pyx"
    __pyx_v_poly = ((struct __pyx_obj_8iscecore_pyPoly1d *)values[0]);

#line 21 "pyPoly1d.pyx"
  }

#line 21 "pyPoly1d.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 21 "pyPoly1d.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bind", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 21 "pyPoly1d.pyx"
__PYX_ERR(10, 21, __pyx_L3_error)

#line 21 "pyPoly1d.pyx"
  __pyx_L3_error:;

#line 21 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.bind", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 21 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 21 "pyPoly1d.pyx"
  return NULL;

#line 21 "pyPoly1d.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 21 "pyPoly1d.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_poly), __pyx_ptype_8iscecore_pyPoly1d, 1, "poly", 0))) __PYX_ERR(10, 21, __pyx_L1_error)
  __pyx_r = 
#line 21 "pyPoly1d.pyx"
__pyx_pf_8iscecore_8pyPoly1d_4bind(__pyx_v_poly);

#line 21 "pyPoly1d.pyx"


#line 21 "pyPoly1d.pyx"
  /* function exit code */

#line 21 "pyPoly1d.pyx"
  goto __pyx_L0;

#line 21 "pyPoly1d.pyx"
  __pyx_L1_error:;

#line 21 "pyPoly1d.pyx"
  __pyx_r = NULL;

#line 21 "pyPoly1d.pyx"
  __pyx_L0:;

#line 21 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 21 "pyPoly1d.pyx"
  return __pyx_r;

#line 21 "pyPoly1d.pyx"
}

#line 21 "pyPoly1d.pyx"


#line 21 "pyPoly1d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_4bind(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_poly) {
  struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_new_poly = NULL
#line 21 "pyPoly1d.pyx"
;

#line 21 "pyPoly1d.pyx"
  PyObject *__pyx_r = NULL;

#line 21 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 21 "pyPoly1d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 21 "pyPoly1d.pyx"
  isce::core::Poly1d *__pyx_t_2;

#line 21 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("bind", 0);

  /* "pyPoly1d.pyx":22
 *     @staticmethod
 *     def bind(pyPoly1d poly):
 *         new_poly = pyPoly1d()             # <<<<<<<<<<<<<<
 *         del new_poly.c_poly1d
 *         new_poly.c_poly1d = poly.c_poly1d
 */

#line 22 "pyPoly1d.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8iscecore_pyPoly1d), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 22, __pyx_L1_error)

#line 22 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 22 "pyPoly1d.pyx"
  __pyx_v_new_poly = ((struct __pyx_obj_8iscecore_pyPoly1d *)__pyx_t_1);

#line 22 "pyPoly1d.pyx"
  __pyx_t_1 = 0;

  /* "pyPoly1d.pyx":23
 *     def bind(pyPoly1d poly):
 *         new_poly = pyPoly1d()
 *         del new_poly.c_poly1d             # <<<<<<<<<<<<<<
 *         new_poly.c_poly1d = poly.c_poly1d
 *         new_poly.__owner = False
 */

#line 23 "pyPoly1d.pyx"
  delete __pyx_v_new_poly->c_poly1d;

  /* "pyPoly1d.pyx":24
 *         new_poly = pyPoly1d()
 *         del new_poly.c_poly1d
 *         new_poly.c_poly1d = poly.c_poly1d             # <<<<<<<<<<<<<<
 *         new_poly.__owner = False
 *         return new_poly
 */

#line 24 "pyPoly1d.pyx"
  __pyx_t_2 = __pyx_v_poly->c_poly1d;

#line 24 "pyPoly1d.pyx"
  __pyx_v_new_poly->c_poly1d = __pyx_t_2;

  /* "pyPoly1d.pyx":25
 *         del new_poly.c_poly1d
 *         new_poly.c_poly1d = poly.c_poly1d
 *         new_poly.__owner = False             # <<<<<<<<<<<<<<
 *         return new_poly
 * 
 */

#line 25 "pyPoly1d.pyx"
  __pyx_v_new_poly->__pyx___owner = 0;

  /* "pyPoly1d.pyx":26
 *         new_poly.c_poly1d = poly.c_poly1d
 *         new_poly.__owner = False
 *         return new_poly             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 26 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 26 "pyPoly1d.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_new_poly));

#line 26 "pyPoly1d.pyx"
  __pyx_r = ((PyObject *)__pyx_v_new_poly);

#line 26 "pyPoly1d.pyx"
  goto __pyx_L0;

  /* "pyPoly1d.pyx":21
 *             del self.c_poly1d
 *     @staticmethod
 *     def bind(pyPoly1d poly):             # <<<<<<<<<<<<<<
 *         new_poly = pyPoly1d()
 *         del new_poly.c_poly1d
 */

#line 21 "pyPoly1d.pyx"


#line 21 "pyPoly1d.pyx"
  /* function exit code */

#line 21 "pyPoly1d.pyx"
  __pyx_L1_error:;

#line 21 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 21 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.bind", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 21 "pyPoly1d.pyx"
  __pyx_r = NULL;

#line 21 "pyPoly1d.pyx"
  __pyx_L0:;

#line 21 "pyPoly1d.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_new_poly);

#line 21 "pyPoly1d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 21 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 21 "pyPoly1d.pyx"
  return __pyx_r;

#line 21 "pyPoly1d.pyx"
}

/* "pyPoly1d.pyx":29
 * 
 *     @property
 *     def order(self):             # <<<<<<<<<<<<<<
 *         return self.c_poly1d.order
 *     @order.setter
 */

#line 29 "pyPoly1d.pyx"


#line 29 "pyPoly1d.pyx"
/* Python wrapper */

#line 29 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_5order_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 29 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_5order_1__get__(PyObject *__pyx_v_self) {

#line 29 "pyPoly1d.pyx"
  PyObject *__pyx_r = 0;

#line 29 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 29 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 29 "pyPoly1d.pyx"
__pyx_pf_8iscecore_8pyPoly1d_5order___get__(((struct __pyx_obj_8iscecore_pyPoly1d *)__pyx_v_self));

#line 29 "pyPoly1d.pyx"


#line 29 "pyPoly1d.pyx"
  /* function exit code */

#line 29 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 29 "pyPoly1d.pyx"
  return __pyx_r;

#line 29 "pyPoly1d.pyx"
}

#line 29 "pyPoly1d.pyx"


#line 29 "pyPoly1d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_5order___get__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self) {

#line 29 "pyPoly1d.pyx"
  PyObject *__pyx_r = NULL;

#line 29 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 29 "pyPoly1d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 29 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPoly1d.pyx":30
 *     @property
 *     def order(self):
 *         return self.c_poly1d.order             # <<<<<<<<<<<<<<
 *     @order.setter
 *     def order(self, int a):
 */

#line 30 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 30 "pyPoly1d.pyx"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c_poly1d->order); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 30, __pyx_L1_error)

#line 30 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 30 "pyPoly1d.pyx"
  __pyx_r = __pyx_t_1;

#line 30 "pyPoly1d.pyx"
  __pyx_t_1 = 0;

#line 30 "pyPoly1d.pyx"
  goto __pyx_L0;

  /* "pyPoly1d.pyx":29
 * 
 *     @property
 *     def order(self):             # <<<<<<<<<<<<<<
 *         return self.c_poly1d.order
 *     @order.setter
 */

#line 29 "pyPoly1d.pyx"


#line 29 "pyPoly1d.pyx"
  /* function exit code */

#line 29 "pyPoly1d.pyx"
  __pyx_L1_error:;

#line 29 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 29 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.order.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 29 "pyPoly1d.pyx"
  __pyx_r = NULL;

#line 29 "pyPoly1d.pyx"
  __pyx_L0:;

#line 29 "pyPoly1d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 29 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 29 "pyPoly1d.pyx"
  return __pyx_r;

#line 29 "pyPoly1d.pyx"
}

/* "pyPoly1d.pyx":32
 *         return self.c_poly1d.order
 *     @order.setter
 *     def order(self, int a):             # <<<<<<<<<<<<<<
 *         if (a < 0):
 *             return
 */

#line 32 "pyPoly1d.pyx"


#line 32 "pyPoly1d.pyx"
/* Python wrapper */

#line 32 "pyPoly1d.pyx"
static int __pyx_pw_8iscecore_8pyPoly1d_5order_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 32 "pyPoly1d.pyx"
static int __pyx_pw_8iscecore_8pyPoly1d_5order_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  int __pyx_v_a
#line 32 "pyPoly1d.pyx"
;

#line 32 "pyPoly1d.pyx"
  int __pyx_r;

#line 32 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 32 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);

#line 32 "pyPoly1d.pyx"
  assert(__pyx_arg_a); {

#line 32 "pyPoly1d.pyx"
    __pyx_v_a = __Pyx_PyInt_As_int(__pyx_arg_a); if (unlikely((__pyx_v_a == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 32, __pyx_L3_error)

#line 32 "pyPoly1d.pyx"
  }

#line 32 "pyPoly1d.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 32 "pyPoly1d.pyx"
  __pyx_L3_error:;

#line 32 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.order.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 32 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 32 "pyPoly1d.pyx"
  return -1;

#line 32 "pyPoly1d.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 32 "pyPoly1d.pyx"
__pyx_pf_8iscecore_8pyPoly1d_5order_2__set__(((struct __pyx_obj_8iscecore_pyPoly1d *)__pyx_v_self), ((int)__pyx_v_a));

#line 32 "pyPoly1d.pyx"


#line 32 "pyPoly1d.pyx"
  /* function exit code */

#line 32 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 32 "pyPoly1d.pyx"
  return __pyx_r;

#line 32 "pyPoly1d.pyx"
}

#line 32 "pyPoly1d.pyx"


#line 32 "pyPoly1d.pyx"
static int __pyx_pf_8iscecore_8pyPoly1d_5order_2__set__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, int __pyx_v_a) {

#line 32 "pyPoly1d.pyx"
  int __pyx_r;

#line 32 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 32 "pyPoly1d.pyx"
  int __pyx_t_1;

#line 32 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPoly1d.pyx":33
 *     @order.setter
 *     def order(self, int a):
 *         if (a < 0):             # <<<<<<<<<<<<<<
 *             return
 *         self.c_poly1d.order = a
 */

#line 33 "pyPoly1d.pyx"
  __pyx_t_1 = ((__pyx_v_a < 0) != 0);

#line 33 "pyPoly1d.pyx"
  if (__pyx_t_1) {

    /* "pyPoly1d.pyx":34
 *     def order(self, int a):
 *         if (a < 0):
 *             return             # <<<<<<<<<<<<<<
 *         self.c_poly1d.order = a
 *         self.c_poly1d.coeffs.resize(a+1)
 */

#line 34 "pyPoly1d.pyx"
    __pyx_r = 0;

#line 34 "pyPoly1d.pyx"
    goto __pyx_L0;

    /* "pyPoly1d.pyx":33
 *     @order.setter
 *     def order(self, int a):
 *         if (a < 0):             # <<<<<<<<<<<<<<
 *             return
 *         self.c_poly1d.order = a
 */

#line 33 "pyPoly1d.pyx"
  }

  /* "pyPoly1d.pyx":35
 *         if (a < 0):
 *             return
 *         self.c_poly1d.order = a             # <<<<<<<<<<<<<<
 *         self.c_poly1d.coeffs.resize(a+1)
 *     @property
 */

#line 35 "pyPoly1d.pyx"
  __pyx_v_self->c_poly1d->order = __pyx_v_a;

  /* "pyPoly1d.pyx":36
 *             return
 *         self.c_poly1d.order = a
 *         self.c_poly1d.coeffs.resize(a+1)             # <<<<<<<<<<<<<<
 *     @property
 *     def mean(self):
 */

#line 36 "pyPoly1d.pyx"
  try {

#line 36 "pyPoly1d.pyx"
    __pyx_v_self->c_poly1d->coeffs.resize((__pyx_v_a + 1));

#line 36 "pyPoly1d.pyx"
  } catch(...) {

#line 36 "pyPoly1d.pyx"
    __Pyx_CppExn2PyErr();

#line 36 "pyPoly1d.pyx"
    __PYX_ERR(10, 36, __pyx_L1_error)

#line 36 "pyPoly1d.pyx"
  }

  /* "pyPoly1d.pyx":32
 *         return self.c_poly1d.order
 *     @order.setter
 *     def order(self, int a):             # <<<<<<<<<<<<<<
 *         if (a < 0):
 *             return
 */

#line 32 "pyPoly1d.pyx"


#line 32 "pyPoly1d.pyx"
  /* function exit code */

#line 32 "pyPoly1d.pyx"
  __pyx_r = 0;

#line 32 "pyPoly1d.pyx"
  goto __pyx_L0;

#line 32 "pyPoly1d.pyx"
  __pyx_L1_error:;

#line 32 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.order.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 32 "pyPoly1d.pyx"
  __pyx_r = -1;

#line 32 "pyPoly1d.pyx"
  __pyx_L0:;

#line 32 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 32 "pyPoly1d.pyx"
  return __pyx_r;

#line 32 "pyPoly1d.pyx"
}

/* "pyPoly1d.pyx":38
 *         self.c_poly1d.coeffs.resize(a+1)
 *     @property
 *     def mean(self):             # <<<<<<<<<<<<<<
 *         return self.c_poly1d.mean
 *     @mean.setter
 */

#line 38 "pyPoly1d.pyx"


#line 38 "pyPoly1d.pyx"
/* Python wrapper */

#line 38 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_4mean_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 38 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_4mean_1__get__(PyObject *__pyx_v_self) {

#line 38 "pyPoly1d.pyx"
  PyObject *__pyx_r = 0;

#line 38 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 38 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 38 "pyPoly1d.pyx"
__pyx_pf_8iscecore_8pyPoly1d_4mean___get__(((struct __pyx_obj_8iscecore_pyPoly1d *)__pyx_v_self));

#line 38 "pyPoly1d.pyx"


#line 38 "pyPoly1d.pyx"
  /* function exit code */

#line 38 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 38 "pyPoly1d.pyx"
  return __pyx_r;

#line 38 "pyPoly1d.pyx"
}

#line 38 "pyPoly1d.pyx"


#line 38 "pyPoly1d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_4mean___get__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self) {

#line 38 "pyPoly1d.pyx"
  PyObject *__pyx_r = NULL;

#line 38 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 38 "pyPoly1d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 38 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPoly1d.pyx":39
 *     @property
 *     def mean(self):
 *         return self.c_poly1d.mean             # <<<<<<<<<<<<<<
 *     @mean.setter
 *     def mean(self, double a):
 */

#line 39 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 39 "pyPoly1d.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_poly1d->mean); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 39, __pyx_L1_error)

#line 39 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 39 "pyPoly1d.pyx"
  __pyx_r = __pyx_t_1;

#line 39 "pyPoly1d.pyx"
  __pyx_t_1 = 0;

#line 39 "pyPoly1d.pyx"
  goto __pyx_L0;

  /* "pyPoly1d.pyx":38
 *         self.c_poly1d.coeffs.resize(a+1)
 *     @property
 *     def mean(self):             # <<<<<<<<<<<<<<
 *         return self.c_poly1d.mean
 *     @mean.setter
 */

#line 38 "pyPoly1d.pyx"


#line 38 "pyPoly1d.pyx"
  /* function exit code */

#line 38 "pyPoly1d.pyx"
  __pyx_L1_error:;

#line 38 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 38 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.mean.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 38 "pyPoly1d.pyx"
  __pyx_r = NULL;

#line 38 "pyPoly1d.pyx"
  __pyx_L0:;

#line 38 "pyPoly1d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 38 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 38 "pyPoly1d.pyx"
  return __pyx_r;

#line 38 "pyPoly1d.pyx"
}

/* "pyPoly1d.pyx":41
 *         return self.c_poly1d.mean
 *     @mean.setter
 *     def mean(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_poly1d.mean = a
 *     @property
 */

#line 41 "pyPoly1d.pyx"


#line 41 "pyPoly1d.pyx"
/* Python wrapper */

#line 41 "pyPoly1d.pyx"
static int __pyx_pw_8iscecore_8pyPoly1d_4mean_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 41 "pyPoly1d.pyx"
static int __pyx_pw_8iscecore_8pyPoly1d_4mean_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a
#line 41 "pyPoly1d.pyx"
;

#line 41 "pyPoly1d.pyx"
  int __pyx_r;

#line 41 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 41 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);

#line 41 "pyPoly1d.pyx"
  assert(__pyx_arg_a); {

#line 41 "pyPoly1d.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 41, __pyx_L3_error)

#line 41 "pyPoly1d.pyx"
  }

#line 41 "pyPoly1d.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 41 "pyPoly1d.pyx"
  __pyx_L3_error:;

#line 41 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.mean.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 41 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 41 "pyPoly1d.pyx"
  return -1;

#line 41 "pyPoly1d.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 41 "pyPoly1d.pyx"
__pyx_pf_8iscecore_8pyPoly1d_4mean_2__set__(((struct __pyx_obj_8iscecore_pyPoly1d *)__pyx_v_self), ((double)__pyx_v_a));

#line 41 "pyPoly1d.pyx"


#line 41 "pyPoly1d.pyx"
  /* function exit code */

#line 41 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 41 "pyPoly1d.pyx"
  return __pyx_r;

#line 41 "pyPoly1d.pyx"
}

#line 41 "pyPoly1d.pyx"


#line 41 "pyPoly1d.pyx"
static int __pyx_pf_8iscecore_8pyPoly1d_4mean_2__set__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, double __pyx_v_a) {

#line 41 "pyPoly1d.pyx"
  int __pyx_r;

#line 41 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 41 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPoly1d.pyx":42
 *     @mean.setter
 *     def mean(self, double a):
 *         self.c_poly1d.mean = a             # <<<<<<<<<<<<<<
 *     @property
 *     def norm(self):
 */

#line 42 "pyPoly1d.pyx"
  __pyx_v_self->c_poly1d->mean = __pyx_v_a;

  /* "pyPoly1d.pyx":41
 *         return self.c_poly1d.mean
 *     @mean.setter
 *     def mean(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_poly1d.mean = a
 *     @property
 */

#line 41 "pyPoly1d.pyx"


#line 41 "pyPoly1d.pyx"
  /* function exit code */

#line 41 "pyPoly1d.pyx"
  __pyx_r = 0;

#line 41 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 41 "pyPoly1d.pyx"
  return __pyx_r;

#line 41 "pyPoly1d.pyx"
}

/* "pyPoly1d.pyx":44
 *         self.c_poly1d.mean = a
 *     @property
 *     def norm(self):             # <<<<<<<<<<<<<<
 *         return self.c_poly1d.norm
 *     @norm.setter
 */

#line 44 "pyPoly1d.pyx"


#line 44 "pyPoly1d.pyx"
/* Python wrapper */

#line 44 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_4norm_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 44 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_4norm_1__get__(PyObject *__pyx_v_self) {

#line 44 "pyPoly1d.pyx"
  PyObject *__pyx_r = 0;

#line 44 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 44 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 44 "pyPoly1d.pyx"
__pyx_pf_8iscecore_8pyPoly1d_4norm___get__(((struct __pyx_obj_8iscecore_pyPoly1d *)__pyx_v_self));

#line 44 "pyPoly1d.pyx"


#line 44 "pyPoly1d.pyx"
  /* function exit code */

#line 44 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 44 "pyPoly1d.pyx"
  return __pyx_r;

#line 44 "pyPoly1d.pyx"
}

#line 44 "pyPoly1d.pyx"


#line 44 "pyPoly1d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_4norm___get__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self) {

#line 44 "pyPoly1d.pyx"
  PyObject *__pyx_r = NULL;

#line 44 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 44 "pyPoly1d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 44 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPoly1d.pyx":45
 *     @property
 *     def norm(self):
 *         return self.c_poly1d.norm             # <<<<<<<<<<<<<<
 *     @norm.setter
 *     def norm(self, double a):
 */

#line 45 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 45 "pyPoly1d.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_poly1d->norm); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 45, __pyx_L1_error)

#line 45 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 45 "pyPoly1d.pyx"
  __pyx_r = __pyx_t_1;

#line 45 "pyPoly1d.pyx"
  __pyx_t_1 = 0;

#line 45 "pyPoly1d.pyx"
  goto __pyx_L0;

  /* "pyPoly1d.pyx":44
 *         self.c_poly1d.mean = a
 *     @property
 *     def norm(self):             # <<<<<<<<<<<<<<
 *         return self.c_poly1d.norm
 *     @norm.setter
 */

#line 44 "pyPoly1d.pyx"


#line 44 "pyPoly1d.pyx"
  /* function exit code */

#line 44 "pyPoly1d.pyx"
  __pyx_L1_error:;

#line 44 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 44 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.norm.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 44 "pyPoly1d.pyx"
  __pyx_r = NULL;

#line 44 "pyPoly1d.pyx"
  __pyx_L0:;

#line 44 "pyPoly1d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 44 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 44 "pyPoly1d.pyx"
  return __pyx_r;

#line 44 "pyPoly1d.pyx"
}

/* "pyPoly1d.pyx":47
 *         return self.c_poly1d.norm
 *     @norm.setter
 *     def norm(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_poly1d.norm = a
 *     @property
 */

#line 47 "pyPoly1d.pyx"


#line 47 "pyPoly1d.pyx"
/* Python wrapper */

#line 47 "pyPoly1d.pyx"
static int __pyx_pw_8iscecore_8pyPoly1d_4norm_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 47 "pyPoly1d.pyx"
static int __pyx_pw_8iscecore_8pyPoly1d_4norm_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a
#line 47 "pyPoly1d.pyx"
;

#line 47 "pyPoly1d.pyx"
  int __pyx_r;

#line 47 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 47 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);

#line 47 "pyPoly1d.pyx"
  assert(__pyx_arg_a); {

#line 47 "pyPoly1d.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 47, __pyx_L3_error)

#line 47 "pyPoly1d.pyx"
  }

#line 47 "pyPoly1d.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 47 "pyPoly1d.pyx"
  __pyx_L3_error:;

#line 47 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.norm.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 47 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 47 "pyPoly1d.pyx"
  return -1;

#line 47 "pyPoly1d.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 47 "pyPoly1d.pyx"
__pyx_pf_8iscecore_8pyPoly1d_4norm_2__set__(((struct __pyx_obj_8iscecore_pyPoly1d *)__pyx_v_self), ((double)__pyx_v_a));

#line 47 "pyPoly1d.pyx"


#line 47 "pyPoly1d.pyx"
  /* function exit code */

#line 47 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 47 "pyPoly1d.pyx"
  return __pyx_r;

#line 47 "pyPoly1d.pyx"
}

#line 47 "pyPoly1d.pyx"


#line 47 "pyPoly1d.pyx"
static int __pyx_pf_8iscecore_8pyPoly1d_4norm_2__set__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, double __pyx_v_a) {

#line 47 "pyPoly1d.pyx"
  int __pyx_r;

#line 47 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 47 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPoly1d.pyx":48
 *     @norm.setter
 *     def norm(self, double a):
 *         self.c_poly1d.norm = a             # <<<<<<<<<<<<<<
 *     @property
 *     def coeffs(self):
 */

#line 48 "pyPoly1d.pyx"
  __pyx_v_self->c_poly1d->norm = __pyx_v_a;

  /* "pyPoly1d.pyx":47
 *         return self.c_poly1d.norm
 *     @norm.setter
 *     def norm(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_poly1d.norm = a
 *     @property
 */

#line 47 "pyPoly1d.pyx"


#line 47 "pyPoly1d.pyx"
  /* function exit code */

#line 47 "pyPoly1d.pyx"
  __pyx_r = 0;

#line 47 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 47 "pyPoly1d.pyx"
  return __pyx_r;

#line 47 "pyPoly1d.pyx"
}

/* "pyPoly1d.pyx":50
 *         self.c_poly1d.norm = a
 *     @property
 *     def coeffs(self):             # <<<<<<<<<<<<<<
 *         a = []
 *         for i in range(self.order+1):
 */

#line 50 "pyPoly1d.pyx"


#line 50 "pyPoly1d.pyx"
/* Python wrapper */

#line 50 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_6coeffs_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 50 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_6coeffs_1__get__(PyObject *__pyx_v_self) {

#line 50 "pyPoly1d.pyx"
  PyObject *__pyx_r = 0;

#line 50 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 50 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 50 "pyPoly1d.pyx"
__pyx_pf_8iscecore_8pyPoly1d_6coeffs___get__(((struct __pyx_obj_8iscecore_pyPoly1d *)__pyx_v_self));

#line 50 "pyPoly1d.pyx"


#line 50 "pyPoly1d.pyx"
  /* function exit code */

#line 50 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 50 "pyPoly1d.pyx"
  return __pyx_r;

#line 50 "pyPoly1d.pyx"
}

#line 50 "pyPoly1d.pyx"


#line 50 "pyPoly1d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_6coeffs___get__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self) {
  PyObject *__pyx_v_a = NULL
#line 50 "pyPoly1d.pyx"
;
  PyObject *__pyx_v_i = NULL
#line 50 "pyPoly1d.pyx"
;

#line 50 "pyPoly1d.pyx"
  PyObject *__pyx_r = NULL;

#line 50 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 50 "pyPoly1d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 50 "pyPoly1d.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 50 "pyPoly1d.pyx"
  Py_ssize_t __pyx_t_3;

#line 50 "pyPoly1d.pyx"
  PyObject *(*__pyx_t_4)(PyObject *);

#line 50 "pyPoly1d.pyx"
  std::vector<double> ::size_type __pyx_t_5;

#line 50 "pyPoly1d.pyx"
  int __pyx_t_6;

#line 50 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPoly1d.pyx":51
 *     @property
 *     def coeffs(self):
 *         a = []             # <<<<<<<<<<<<<<
 *         for i in range(self.order+1):
 *             a.append(self.c_poly1d.coeffs[i])
 */

#line 51 "pyPoly1d.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 51, __pyx_L1_error)

#line 51 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 51 "pyPoly1d.pyx"
  __pyx_v_a = ((PyObject*)__pyx_t_1);

#line 51 "pyPoly1d.pyx"
  __pyx_t_1 = 0;

  /* "pyPoly1d.pyx":52
 *     def coeffs(self):
 *         a = []
 *         for i in range(self.order+1):             # <<<<<<<<<<<<<<
 *             a.append(self.c_poly1d.coeffs[i])
 *         return a
 */

#line 52 "pyPoly1d.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_order); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 52, __pyx_L1_error)

#line 52 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 52 "pyPoly1d.pyx"
  __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 52, __pyx_L1_error)

#line 52 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 52 "pyPoly1d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 52 "pyPoly1d.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 52, __pyx_L1_error)

#line 52 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 52 "pyPoly1d.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 52 "pyPoly1d.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);

#line 52 "pyPoly1d.pyx"
  __pyx_t_2 = 0;

#line 52 "pyPoly1d.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 52, __pyx_L1_error)

#line 52 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 52 "pyPoly1d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 52 "pyPoly1d.pyx"
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {

#line 52 "pyPoly1d.pyx"
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;

#line 52 "pyPoly1d.pyx"
    __pyx_t_4 = NULL;

#line 52 "pyPoly1d.pyx"
  } else {
    __pyx_t_3 = -1; 
#line 52 "pyPoly1d.pyx"
__pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 52, __pyx_L1_error)

#line 52 "pyPoly1d.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 52 "pyPoly1d.pyx"
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 52, __pyx_L1_error)

#line 52 "pyPoly1d.pyx"
  }

#line 52 "pyPoly1d.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 52 "pyPoly1d.pyx"
  for (;;) {

#line 52 "pyPoly1d.pyx"
    if (likely(!__pyx_t_4)) {

#line 52 "pyPoly1d.pyx"
      if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 52 "pyPoly1d.pyx"
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;

#line 52 "pyPoly1d.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 52 "pyPoly1d.pyx"
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(10, 52, __pyx_L1_error)

#line 52 "pyPoly1d.pyx"
        #else

#line 52 "pyPoly1d.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 52, __pyx_L1_error)

#line 52 "pyPoly1d.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 52 "pyPoly1d.pyx"
        #endif

#line 52 "pyPoly1d.pyx"
      } else {

#line 52 "pyPoly1d.pyx"
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 52 "pyPoly1d.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 52 "pyPoly1d.pyx"
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(10, 52, __pyx_L1_error)

#line 52 "pyPoly1d.pyx"
        #else

#line 52 "pyPoly1d.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 52, __pyx_L1_error)

#line 52 "pyPoly1d.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 52 "pyPoly1d.pyx"
        #endif

#line 52 "pyPoly1d.pyx"
      }
    } else 
#line 52 "pyPoly1d.pyx"
{

#line 52 "pyPoly1d.pyx"
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);

#line 52 "pyPoly1d.pyx"
      if (unlikely(!__pyx_t_2)) {

#line 52 "pyPoly1d.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 52 "pyPoly1d.pyx"
        if (exc_type) {

#line 52 "pyPoly1d.pyx"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 52 "pyPoly1d.pyx"
          else __PYX_ERR(10, 52, __pyx_L1_error)

#line 52 "pyPoly1d.pyx"
        }

#line 52 "pyPoly1d.pyx"
        break;

#line 52 "pyPoly1d.pyx"
      }

#line 52 "pyPoly1d.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 52 "pyPoly1d.pyx"
    }

#line 52 "pyPoly1d.pyx"
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);

#line 52 "pyPoly1d.pyx"
    __pyx_t_2 = 0;

    /* "pyPoly1d.pyx":53
 *         a = []
 *         for i in range(self.order+1):
 *             a.append(self.c_poly1d.coeffs[i])             # <<<<<<<<<<<<<<
 *         return a
 *     @coeffs.setter
 */

#line 53 "pyPoly1d.pyx"
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 53, __pyx_L1_error)

#line 53 "pyPoly1d.pyx"
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_self->c_poly1d->coeffs[__pyx_t_5])); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 53, __pyx_L1_error)

#line 53 "pyPoly1d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 53 "pyPoly1d.pyx"
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_a, __pyx_t_2); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(10, 53, __pyx_L1_error)

#line 53 "pyPoly1d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyPoly1d.pyx":52
 *     def coeffs(self):
 *         a = []
 *         for i in range(self.order+1):             # <<<<<<<<<<<<<<
 *             a.append(self.c_poly1d.coeffs[i])
 *         return a
 */

#line 52 "pyPoly1d.pyx"
  }

#line 52 "pyPoly1d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyPoly1d.pyx":54
 *         for i in range(self.order+1):
 *             a.append(self.c_poly1d.coeffs[i])
 *         return a             # <<<<<<<<<<<<<<
 *     @coeffs.setter
 *     def coeffs(self, a):
 */

#line 54 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 54 "pyPoly1d.pyx"
  __Pyx_INCREF(__pyx_v_a);

#line 54 "pyPoly1d.pyx"
  __pyx_r = __pyx_v_a;

#line 54 "pyPoly1d.pyx"
  goto __pyx_L0;

  /* "pyPoly1d.pyx":50
 *         self.c_poly1d.norm = a
 *     @property
 *     def coeffs(self):             # <<<<<<<<<<<<<<
 *         a = []
 *         for i in range(self.order+1):
 */

#line 50 "pyPoly1d.pyx"


#line 50 "pyPoly1d.pyx"
  /* function exit code */

#line 50 "pyPoly1d.pyx"
  __pyx_L1_error:;

#line 50 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 50 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 50 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.coeffs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 50 "pyPoly1d.pyx"
  __pyx_r = NULL;

#line 50 "pyPoly1d.pyx"
  __pyx_L0:;

#line 50 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_v_a);

#line 50 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 50 "pyPoly1d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 50 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 50 "pyPoly1d.pyx"
  return __pyx_r;

#line 50 "pyPoly1d.pyx"
}

/* "pyPoly1d.pyx":56
 *         return a
 *     @coeffs.setter
 *     def coeffs(self, a):             # <<<<<<<<<<<<<<
 *         if (self.order+1 != len(a)):
 *             print("Error: Invalid input size (expected list of length "+str(self.order+1)+")")
 */

#line 56 "pyPoly1d.pyx"


#line 56 "pyPoly1d.pyx"
/* Python wrapper */

#line 56 "pyPoly1d.pyx"
static int __pyx_pw_8iscecore_8pyPoly1d_6coeffs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a); /*proto*/

#line 56 "pyPoly1d.pyx"
static int __pyx_pw_8iscecore_8pyPoly1d_6coeffs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a) {

#line 56 "pyPoly1d.pyx"
  int __pyx_r;

#line 56 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 56 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = 
#line 56 "pyPoly1d.pyx"
__pyx_pf_8iscecore_8pyPoly1d_6coeffs_2__set__(((struct __pyx_obj_8iscecore_pyPoly1d *)__pyx_v_self), ((PyObject *)__pyx_v_a));

#line 56 "pyPoly1d.pyx"


#line 56 "pyPoly1d.pyx"
  /* function exit code */

#line 56 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 56 "pyPoly1d.pyx"
  return __pyx_r;

#line 56 "pyPoly1d.pyx"
}

#line 56 "pyPoly1d.pyx"


#line 56 "pyPoly1d.pyx"
static int __pyx_pf_8iscecore_8pyPoly1d_6coeffs_2__set__(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, PyObject *__pyx_v_a) {
  PyObject *__pyx_v_i = NULL
#line 56 "pyPoly1d.pyx"
;

#line 56 "pyPoly1d.pyx"
  int __pyx_r;

#line 56 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 56 "pyPoly1d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 56 "pyPoly1d.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 56 "pyPoly1d.pyx"
  Py_ssize_t __pyx_t_3;

#line 56 "pyPoly1d.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 56 "pyPoly1d.pyx"
  int __pyx_t_5;

#line 56 "pyPoly1d.pyx"
  PyObject *(*__pyx_t_6)(PyObject *);

#line 56 "pyPoly1d.pyx"
  double __pyx_t_7;

#line 56 "pyPoly1d.pyx"
  std::vector<double> ::size_type __pyx_t_8;

#line 56 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPoly1d.pyx":57
 *     @coeffs.setter
 *     def coeffs(self, a):
 *         if (self.order+1 != len(a)):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size (expected list of length "+str(self.order+1)+")")
 *             return
 */

#line 57 "pyPoly1d.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_order); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 57, __pyx_L1_error)

#line 57 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 57 "pyPoly1d.pyx"
  __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 57, __pyx_L1_error)

#line 57 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 57 "pyPoly1d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 57 "pyPoly1d.pyx"
  __pyx_t_3 = PyObject_Length(__pyx_v_a); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(10, 57, __pyx_L1_error)

#line 57 "pyPoly1d.pyx"
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 57, __pyx_L1_error)

#line 57 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 57 "pyPoly1d.pyx"
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 57, __pyx_L1_error)

#line 57 "pyPoly1d.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 57 "pyPoly1d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 57 "pyPoly1d.pyx"
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(10, 57, __pyx_L1_error)

#line 57 "pyPoly1d.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 57 "pyPoly1d.pyx"
  if (__pyx_t_5) {

    /* "pyPoly1d.pyx":58
 *     def coeffs(self, a):
 *         if (self.order+1 != len(a)):
 *             print("Error: Invalid input size (expected list of length "+str(self.order+1)+")")             # <<<<<<<<<<<<<<
 *             return
 *         for i in range(self.order+1):
 */

#line 58 "pyPoly1d.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_order); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 58, __pyx_L1_error)

#line 58 "pyPoly1d.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 58 "pyPoly1d.pyx"
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 58, __pyx_L1_error)

#line 58 "pyPoly1d.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 58 "pyPoly1d.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 58 "pyPoly1d.pyx"
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 58, __pyx_L1_error)

#line 58 "pyPoly1d.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 58 "pyPoly1d.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 58 "pyPoly1d.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);

#line 58 "pyPoly1d.pyx"
    __pyx_t_1 = 0;

#line 58 "pyPoly1d.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 58, __pyx_L1_error)

#line 58 "pyPoly1d.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 58 "pyPoly1d.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 58 "pyPoly1d.pyx"
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Error_Invalid_input_size_expecte, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 58, __pyx_L1_error)

#line 58 "pyPoly1d.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 58 "pyPoly1d.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 58 "pyPoly1d.pyx"
    __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_t_4, __pyx_kp_u__47); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 58, __pyx_L1_error)

#line 58 "pyPoly1d.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 58 "pyPoly1d.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 58 "pyPoly1d.pyx"
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 58, __pyx_L1_error)

#line 58 "pyPoly1d.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 58 "pyPoly1d.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 58 "pyPoly1d.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);

#line 58 "pyPoly1d.pyx"
    __pyx_t_1 = 0;

#line 58 "pyPoly1d.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 58, __pyx_L1_error)

#line 58 "pyPoly1d.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 58 "pyPoly1d.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 58 "pyPoly1d.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyPoly1d.pyx":59
 *         if (self.order+1 != len(a)):
 *             print("Error: Invalid input size (expected list of length "+str(self.order+1)+")")
 *             return             # <<<<<<<<<<<<<<
 *         for i in range(self.order+1):
 *             self.c_poly1d.coeffs[i] = a[i]
 */

#line 59 "pyPoly1d.pyx"
    __pyx_r = 0;

#line 59 "pyPoly1d.pyx"
    goto __pyx_L0;

    /* "pyPoly1d.pyx":57
 *     @coeffs.setter
 *     def coeffs(self, a):
 *         if (self.order+1 != len(a)):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size (expected list of length "+str(self.order+1)+")")
 *             return
 */

#line 57 "pyPoly1d.pyx"
  }

  /* "pyPoly1d.pyx":60
 *             print("Error: Invalid input size (expected list of length "+str(self.order+1)+")")
 *             return
 *         for i in range(self.order+1):             # <<<<<<<<<<<<<<
 *             self.c_poly1d.coeffs[i] = a[i]
 *     def copy(self, poly):
 */

#line 60 "pyPoly1d.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_order); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 60, __pyx_L1_error)

#line 60 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 60 "pyPoly1d.pyx"
  __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 60, __pyx_L1_error)

#line 60 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 60 "pyPoly1d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 60 "pyPoly1d.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 60, __pyx_L1_error)

#line 60 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 60 "pyPoly1d.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 60 "pyPoly1d.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);

#line 60 "pyPoly1d.pyx"
  __pyx_t_4 = 0;

#line 60 "pyPoly1d.pyx"
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 60, __pyx_L1_error)

#line 60 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 60 "pyPoly1d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 60 "pyPoly1d.pyx"
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {

#line 60 "pyPoly1d.pyx"
    __pyx_t_1 = __pyx_t_4; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;

#line 60 "pyPoly1d.pyx"
    __pyx_t_6 = NULL;

#line 60 "pyPoly1d.pyx"
  } else {
    __pyx_t_3 = -1; 
#line 60 "pyPoly1d.pyx"
__pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 60, __pyx_L1_error)

#line 60 "pyPoly1d.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 60 "pyPoly1d.pyx"
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(10, 60, __pyx_L1_error)

#line 60 "pyPoly1d.pyx"
  }

#line 60 "pyPoly1d.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 60 "pyPoly1d.pyx"
  for (;;) {

#line 60 "pyPoly1d.pyx"
    if (likely(!__pyx_t_6)) {

#line 60 "pyPoly1d.pyx"
      if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 60 "pyPoly1d.pyx"
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;

#line 60 "pyPoly1d.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 60 "pyPoly1d.pyx"
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(10, 60, __pyx_L1_error)

#line 60 "pyPoly1d.pyx"
        #else

#line 60 "pyPoly1d.pyx"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 60, __pyx_L1_error)

#line 60 "pyPoly1d.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 60 "pyPoly1d.pyx"
        #endif

#line 60 "pyPoly1d.pyx"
      } else {

#line 60 "pyPoly1d.pyx"
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 60 "pyPoly1d.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 60 "pyPoly1d.pyx"
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(10, 60, __pyx_L1_error)

#line 60 "pyPoly1d.pyx"
        #else

#line 60 "pyPoly1d.pyx"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 60, __pyx_L1_error)

#line 60 "pyPoly1d.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 60 "pyPoly1d.pyx"
        #endif

#line 60 "pyPoly1d.pyx"
      }
    } else 
#line 60 "pyPoly1d.pyx"
{

#line 60 "pyPoly1d.pyx"
      __pyx_t_4 = __pyx_t_6(__pyx_t_1);

#line 60 "pyPoly1d.pyx"
      if (unlikely(!__pyx_t_4)) {

#line 60 "pyPoly1d.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 60 "pyPoly1d.pyx"
        if (exc_type) {

#line 60 "pyPoly1d.pyx"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 60 "pyPoly1d.pyx"
          else __PYX_ERR(10, 60, __pyx_L1_error)

#line 60 "pyPoly1d.pyx"
        }

#line 60 "pyPoly1d.pyx"
        break;

#line 60 "pyPoly1d.pyx"
      }

#line 60 "pyPoly1d.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 60 "pyPoly1d.pyx"
    }

#line 60 "pyPoly1d.pyx"
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);

#line 60 "pyPoly1d.pyx"
    __pyx_t_4 = 0;

    /* "pyPoly1d.pyx":61
 *             return
 *         for i in range(self.order+1):
 *             self.c_poly1d.coeffs[i] = a[i]             # <<<<<<<<<<<<<<
 *     def copy(self, poly):
 *         try:
 */

#line 61 "pyPoly1d.pyx"
    __pyx_t_4 = PyObject_GetItem(__pyx_v_a, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 61, __pyx_L1_error)

#line 61 "pyPoly1d.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 61 "pyPoly1d.pyx"
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 61, __pyx_L1_error)

#line 61 "pyPoly1d.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 61 "pyPoly1d.pyx"
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 61, __pyx_L1_error)

#line 61 "pyPoly1d.pyx"
    (__pyx_v_self->c_poly1d->coeffs[__pyx_t_8]) = __pyx_t_7;

    /* "pyPoly1d.pyx":60
 *             print("Error: Invalid input size (expected list of length "+str(self.order+1)+")")
 *             return
 *         for i in range(self.order+1):             # <<<<<<<<<<<<<<
 *             self.c_poly1d.coeffs[i] = a[i]
 *     def copy(self, poly):
 */

#line 60 "pyPoly1d.pyx"
  }

#line 60 "pyPoly1d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyPoly1d.pyx":56
 *         return a
 *     @coeffs.setter
 *     def coeffs(self, a):             # <<<<<<<<<<<<<<
 *         if (self.order+1 != len(a)):
 *             print("Error: Invalid input size (expected list of length "+str(self.order+1)+")")
 */

#line 56 "pyPoly1d.pyx"


#line 56 "pyPoly1d.pyx"
  /* function exit code */

#line 56 "pyPoly1d.pyx"
  __pyx_r = 0;

#line 56 "pyPoly1d.pyx"
  goto __pyx_L0;

#line 56 "pyPoly1d.pyx"
  __pyx_L1_error:;

#line 56 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 56 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 56 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 56 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.coeffs.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 56 "pyPoly1d.pyx"
  __pyx_r = -1;

#line 56 "pyPoly1d.pyx"
  __pyx_L0:;

#line 56 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 56 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 56 "pyPoly1d.pyx"
  return __pyx_r;

#line 56 "pyPoly1d.pyx"
}

/* "pyPoly1d.pyx":62
 *         for i in range(self.order+1):
 *             self.c_poly1d.coeffs[i] = a[i]
 *     def copy(self, poly):             # <<<<<<<<<<<<<<
 *         try:
 *             self.order = poly.order
 */

#line 62 "pyPoly1d.pyx"


#line 62 "pyPoly1d.pyx"
/* Python wrapper */

#line 62 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_7copy(PyObject *__pyx_v_self, PyObject *__pyx_v_poly); /*proto*/

#line 62 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_7copy(PyObject *__pyx_v_self, PyObject *__pyx_v_poly) {

#line 62 "pyPoly1d.pyx"
  PyObject *__pyx_r = 0;

#line 62 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 62 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = 
#line 62 "pyPoly1d.pyx"
__pyx_pf_8iscecore_8pyPoly1d_6copy(((struct __pyx_obj_8iscecore_pyPoly1d *)__pyx_v_self), ((PyObject *)__pyx_v_poly));

#line 62 "pyPoly1d.pyx"


#line 62 "pyPoly1d.pyx"
  /* function exit code */

#line 62 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 62 "pyPoly1d.pyx"
  return __pyx_r;

#line 62 "pyPoly1d.pyx"
}

#line 62 "pyPoly1d.pyx"


#line 62 "pyPoly1d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_6copy(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, PyObject *__pyx_v_poly) {

#line 62 "pyPoly1d.pyx"
  PyObject *__pyx_r = NULL;

#line 62 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 62 "pyPoly1d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 62 "pyPoly1d.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 62 "pyPoly1d.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 62 "pyPoly1d.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 62 "pyPoly1d.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 62 "pyPoly1d.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 62 "pyPoly1d.pyx"
  PyObject *__pyx_t_7 = NULL;

#line 62 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("copy", 0);

  /* "pyPoly1d.pyx":63
 *             self.c_poly1d.coeffs[i] = a[i]
 *     def copy(self, poly):
 *         try:             # <<<<<<<<<<<<<<
 *             self.order = poly.order
 *             self.mean = poly.mean
 */

#line 63 "pyPoly1d.pyx"
  {

#line 63 "pyPoly1d.pyx"
    __Pyx_PyThreadState_declare

#line 63 "pyPoly1d.pyx"
    __Pyx_PyThreadState_assign

#line 63 "pyPoly1d.pyx"
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);

#line 63 "pyPoly1d.pyx"
    __Pyx_XGOTREF(__pyx_t_1);

#line 63 "pyPoly1d.pyx"
    __Pyx_XGOTREF(__pyx_t_2);

#line 63 "pyPoly1d.pyx"
    __Pyx_XGOTREF(__pyx_t_3);

#line 63 "pyPoly1d.pyx"
    /*try:*/ {

      /* "pyPoly1d.pyx":64
 *     def copy(self, poly):
 *         try:
 *             self.order = poly.order             # <<<<<<<<<<<<<<
 *             self.mean = poly.mean
 *             self.norm = poly.norm
 */

#line 64 "pyPoly1d.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_poly, __pyx_n_s_order); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 64, __pyx_L3_error)

#line 64 "pyPoly1d.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 64 "pyPoly1d.pyx"
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_order, __pyx_t_4) < 0) __PYX_ERR(10, 64, __pyx_L3_error)

#line 64 "pyPoly1d.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyPoly1d.pyx":65
 *         try:
 *             self.order = poly.order
 *             self.mean = poly.mean             # <<<<<<<<<<<<<<
 *             self.norm = poly.norm
 *             self.coeffs = poly.coeffs
 */

#line 65 "pyPoly1d.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_poly, __pyx_n_s_mean); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 65, __pyx_L3_error)

#line 65 "pyPoly1d.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 65 "pyPoly1d.pyx"
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_mean, __pyx_t_4) < 0) __PYX_ERR(10, 65, __pyx_L3_error)

#line 65 "pyPoly1d.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyPoly1d.pyx":66
 *             self.order = poly.order
 *             self.mean = poly.mean
 *             self.norm = poly.norm             # <<<<<<<<<<<<<<
 *             self.coeffs = poly.coeffs
 *         except:
 */

#line 66 "pyPoly1d.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_poly, __pyx_n_s_norm); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 66, __pyx_L3_error)

#line 66 "pyPoly1d.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 66 "pyPoly1d.pyx"
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_norm, __pyx_t_4) < 0) __PYX_ERR(10, 66, __pyx_L3_error)

#line 66 "pyPoly1d.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyPoly1d.pyx":67
 *             self.mean = poly.mean
 *             self.norm = poly.norm
 *             self.coeffs = poly.coeffs             # <<<<<<<<<<<<<<
 *         except:
 *             print("Error: Object passed in to copy is incompatible with object of type pyPoly1d.")
 */

#line 67 "pyPoly1d.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_poly, __pyx_n_s_coeffs); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 67, __pyx_L3_error)

#line 67 "pyPoly1d.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 67 "pyPoly1d.pyx"
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_coeffs, __pyx_t_4) < 0) __PYX_ERR(10, 67, __pyx_L3_error)

#line 67 "pyPoly1d.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyPoly1d.pyx":63
 *             self.c_poly1d.coeffs[i] = a[i]
 *     def copy(self, poly):
 *         try:             # <<<<<<<<<<<<<<
 *             self.order = poly.order
 *             self.mean = poly.mean
 */

#line 63 "pyPoly1d.pyx"
    }

#line 63 "pyPoly1d.pyx"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 63 "pyPoly1d.pyx"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 63 "pyPoly1d.pyx"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 63 "pyPoly1d.pyx"
    goto __pyx_L8_try_end;

#line 63 "pyPoly1d.pyx"
    __pyx_L3_error:;

#line 63 "pyPoly1d.pyx"
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyPoly1d.pyx":68
 *             self.norm = poly.norm
 *             self.coeffs = poly.coeffs
 *         except:             # <<<<<<<<<<<<<<
 *             print("Error: Object passed in to copy is incompatible with object of type pyPoly1d.")
 *     def dPrint(self):
 */

#line 68 "pyPoly1d.pyx"
    /*except:*/ {

#line 68 "pyPoly1d.pyx"
      __Pyx_AddTraceback("iscecore.pyPoly1d.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 68 "pyPoly1d.pyx"
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(10, 68, __pyx_L5_except_error)

#line 68 "pyPoly1d.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 68 "pyPoly1d.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 68 "pyPoly1d.pyx"
      __Pyx_GOTREF(__pyx_t_6);

      /* "pyPoly1d.pyx":69
 *             self.coeffs = poly.coeffs
 *         except:
 *             print("Error: Object passed in to copy is incompatible with object of type pyPoly1d.")             # <<<<<<<<<<<<<<
 *     def dPrint(self):
 *         self.printPoly()
 */

#line 69 "pyPoly1d.pyx"
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(10, 69, __pyx_L5_except_error)

#line 69 "pyPoly1d.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 69 "pyPoly1d.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 69 "pyPoly1d.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 69 "pyPoly1d.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 69 "pyPoly1d.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 69 "pyPoly1d.pyx"
      goto __pyx_L4_exception_handled;

#line 69 "pyPoly1d.pyx"
    }

#line 69 "pyPoly1d.pyx"
    __pyx_L5_except_error:;

    /* "pyPoly1d.pyx":63
 *             self.c_poly1d.coeffs[i] = a[i]
 *     def copy(self, poly):
 *         try:             # <<<<<<<<<<<<<<
 *             self.order = poly.order
 *             self.mean = poly.mean
 */

#line 63 "pyPoly1d.pyx"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 63 "pyPoly1d.pyx"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 63 "pyPoly1d.pyx"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 63 "pyPoly1d.pyx"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 63 "pyPoly1d.pyx"
    goto __pyx_L1_error;

#line 63 "pyPoly1d.pyx"
    __pyx_L4_exception_handled:;

#line 63 "pyPoly1d.pyx"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 63 "pyPoly1d.pyx"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 63 "pyPoly1d.pyx"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 63 "pyPoly1d.pyx"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 63 "pyPoly1d.pyx"
    __pyx_L8_try_end:;

#line 63 "pyPoly1d.pyx"
  }

  /* "pyPoly1d.pyx":62
 *         for i in range(self.order+1):
 *             self.c_poly1d.coeffs[i] = a[i]
 *     def copy(self, poly):             # <<<<<<<<<<<<<<
 *         try:
 *             self.order = poly.order
 */

#line 62 "pyPoly1d.pyx"


#line 62 "pyPoly1d.pyx"
  /* function exit code */

#line 62 "pyPoly1d.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 62 "pyPoly1d.pyx"
  goto __pyx_L0;

#line 62 "pyPoly1d.pyx"
  __pyx_L1_error:;

#line 62 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 62 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 62 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 62 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 62 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 62 "pyPoly1d.pyx"
  __pyx_r = NULL;

#line 62 "pyPoly1d.pyx"
  __pyx_L0:;

#line 62 "pyPoly1d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 62 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 62 "pyPoly1d.pyx"
  return __pyx_r;

#line 62 "pyPoly1d.pyx"
}

/* "pyPoly1d.pyx":70
 *         except:
 *             print("Error: Object passed in to copy is incompatible with object of type pyPoly1d.")
 *     def dPrint(self):             # <<<<<<<<<<<<<<
 *         self.printPoly()
 * 
 */

#line 70 "pyPoly1d.pyx"


#line 70 "pyPoly1d.pyx"
/* Python wrapper */

#line 70 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_9dPrint(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 70 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_9dPrint(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 70 "pyPoly1d.pyx"
  PyObject *__pyx_r = 0;

#line 70 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 70 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("dPrint (wrapper)", 0);
  __pyx_r = 
#line 70 "pyPoly1d.pyx"
__pyx_pf_8iscecore_8pyPoly1d_8dPrint(((struct __pyx_obj_8iscecore_pyPoly1d *)__pyx_v_self));

#line 70 "pyPoly1d.pyx"


#line 70 "pyPoly1d.pyx"
  /* function exit code */

#line 70 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 70 "pyPoly1d.pyx"
  return __pyx_r;

#line 70 "pyPoly1d.pyx"
}

#line 70 "pyPoly1d.pyx"


#line 70 "pyPoly1d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_8dPrint(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self) {

#line 70 "pyPoly1d.pyx"
  PyObject *__pyx_r = NULL;

#line 70 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 70 "pyPoly1d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 70 "pyPoly1d.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 70 "pyPoly1d.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 70 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("dPrint", 0);

  /* "pyPoly1d.pyx":71
 *             print("Error: Object passed in to copy is incompatible with object of type pyPoly1d.")
 *     def dPrint(self):
 *         self.printPoly()             # <<<<<<<<<<<<<<
 * 
 *     def setCoeff(self, int a, double b):
 */

#line 71 "pyPoly1d.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_printPoly); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 71, __pyx_L1_error)

#line 71 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 71 "pyPoly1d.pyx"
  __pyx_t_3 = NULL;

#line 71 "pyPoly1d.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 71 "pyPoly1d.pyx"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 71 "pyPoly1d.pyx"
    if (likely(__pyx_t_3)) {

#line 71 "pyPoly1d.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 71 "pyPoly1d.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 71 "pyPoly1d.pyx"
      __Pyx_INCREF(function);

#line 71 "pyPoly1d.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 71 "pyPoly1d.pyx"
    }

#line 71 "pyPoly1d.pyx"
  }

#line 71 "pyPoly1d.pyx"
  if (__pyx_t_3) {

#line 71 "pyPoly1d.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 71, __pyx_L1_error)

#line 71 "pyPoly1d.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 71 "pyPoly1d.pyx"
  } else {

#line 71 "pyPoly1d.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 71, __pyx_L1_error)

#line 71 "pyPoly1d.pyx"
  }

#line 71 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 71 "pyPoly1d.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 71 "pyPoly1d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyPoly1d.pyx":70
 *         except:
 *             print("Error: Object passed in to copy is incompatible with object of type pyPoly1d.")
 *     def dPrint(self):             # <<<<<<<<<<<<<<
 *         self.printPoly()
 * 
 */

#line 70 "pyPoly1d.pyx"


#line 70 "pyPoly1d.pyx"
  /* function exit code */

#line 70 "pyPoly1d.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 70 "pyPoly1d.pyx"
  goto __pyx_L0;

#line 70 "pyPoly1d.pyx"
  __pyx_L1_error:;

#line 70 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 70 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 70 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 70 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.dPrint", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 70 "pyPoly1d.pyx"
  __pyx_r = NULL;

#line 70 "pyPoly1d.pyx"
  __pyx_L0:;

#line 70 "pyPoly1d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 70 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 70 "pyPoly1d.pyx"
  return __pyx_r;

#line 70 "pyPoly1d.pyx"
}

/* "pyPoly1d.pyx":73
 *         self.printPoly()
 * 
 *     def setCoeff(self, int a, double b):             # <<<<<<<<<<<<<<
 *         self.c_poly1d.setCoeff(a,b)
 *     def getCoeff(self, int a):
 */

#line 73 "pyPoly1d.pyx"


#line 73 "pyPoly1d.pyx"
/* Python wrapper */

#line 73 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_11setCoeff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 73 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_11setCoeff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_a
#line 73 "pyPoly1d.pyx"
;
  double __pyx_v_b
#line 73 "pyPoly1d.pyx"
;

#line 73 "pyPoly1d.pyx"
  PyObject *__pyx_r = 0;

#line 73 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 73 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("setCoeff (wrapper)", 0);

#line 73 "pyPoly1d.pyx"
  {

#line 73 "pyPoly1d.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};

#line 73 "pyPoly1d.pyx"
    PyObject* values[2] = {0,0};

#line 73 "pyPoly1d.pyx"
    if (unlikely(__pyx_kwds)) {

#line 73 "pyPoly1d.pyx"
      Py_ssize_t kw_args;

#line 73 "pyPoly1d.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 73 "pyPoly1d.pyx"
      switch (pos_args) {
        case  2: 
#line 73 "pyPoly1d.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 73 "pyPoly1d.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 73 "pyPoly1d.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 73 "pyPoly1d.pyx"
        CYTHON_FALLTHROUGH;

#line 73 "pyPoly1d.pyx"
        case  0: break;
        default: 
#line 73 "pyPoly1d.pyx"
goto __pyx_L5_argtuple_error;

#line 73 "pyPoly1d.pyx"
      }

#line 73 "pyPoly1d.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 73 "pyPoly1d.pyx"
      switch (pos_args) {

#line 73 "pyPoly1d.pyx"
        case  0:

#line 73 "pyPoly1d.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 73 "pyPoly1d.pyx"
goto __pyx_L5_argtuple_error;

#line 73 "pyPoly1d.pyx"
        CYTHON_FALLTHROUGH;

#line 73 "pyPoly1d.pyx"
        case  1:

#line 73 "pyPoly1d.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 73 "pyPoly1d.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("setCoeff", 1, 2, 2, 1); 
#line 73 "pyPoly1d.pyx"
__PYX_ERR(10, 73, __pyx_L3_error)

#line 73 "pyPoly1d.pyx"
        }

#line 73 "pyPoly1d.pyx"
      }

#line 73 "pyPoly1d.pyx"
      if (unlikely(kw_args > 0)) {

#line 73 "pyPoly1d.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setCoeff") < 0)) __PYX_ERR(10, 73, __pyx_L3_error)

#line 73 "pyPoly1d.pyx"
      }

#line 73 "pyPoly1d.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 73 "pyPoly1d.pyx"
      goto __pyx_L5_argtuple_error;

#line 73 "pyPoly1d.pyx"
    } else {

#line 73 "pyPoly1d.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 73 "pyPoly1d.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 73 "pyPoly1d.pyx"
    }

#line 73 "pyPoly1d.pyx"
    __pyx_v_a = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_a == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 73, __pyx_L3_error)

#line 73 "pyPoly1d.pyx"
    __pyx_v_b = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 73, __pyx_L3_error)

#line 73 "pyPoly1d.pyx"
  }

#line 73 "pyPoly1d.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 73 "pyPoly1d.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setCoeff", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 73 "pyPoly1d.pyx"
__PYX_ERR(10, 73, __pyx_L3_error)

#line 73 "pyPoly1d.pyx"
  __pyx_L3_error:;

#line 73 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.setCoeff", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 73 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 73 "pyPoly1d.pyx"
  return NULL;

#line 73 "pyPoly1d.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 73 "pyPoly1d.pyx"
__pyx_pf_8iscecore_8pyPoly1d_10setCoeff(((struct __pyx_obj_8iscecore_pyPoly1d *)__pyx_v_self), __pyx_v_a, __pyx_v_b);

#line 73 "pyPoly1d.pyx"


#line 73 "pyPoly1d.pyx"
  /* function exit code */

#line 73 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 73 "pyPoly1d.pyx"
  return __pyx_r;

#line 73 "pyPoly1d.pyx"
}

#line 73 "pyPoly1d.pyx"


#line 73 "pyPoly1d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_10setCoeff(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, int __pyx_v_a, double __pyx_v_b) {

#line 73 "pyPoly1d.pyx"
  PyObject *__pyx_r = NULL;

#line 73 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 73 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("setCoeff", 0);

  /* "pyPoly1d.pyx":74
 * 
 *     def setCoeff(self, int a, double b):
 *         self.c_poly1d.setCoeff(a,b)             # <<<<<<<<<<<<<<
 *     def getCoeff(self, int a):
 *         return self.c_poly1d.getCoeff(a)
 */

#line 74 "pyPoly1d.pyx"
  __pyx_v_self->c_poly1d->setCoeff(__pyx_v_a, __pyx_v_b);

  /* "pyPoly1d.pyx":73
 *         self.printPoly()
 * 
 *     def setCoeff(self, int a, double b):             # <<<<<<<<<<<<<<
 *         self.c_poly1d.setCoeff(a,b)
 *     def getCoeff(self, int a):
 */

#line 73 "pyPoly1d.pyx"


#line 73 "pyPoly1d.pyx"
  /* function exit code */

#line 73 "pyPoly1d.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 73 "pyPoly1d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 73 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 73 "pyPoly1d.pyx"
  return __pyx_r;

#line 73 "pyPoly1d.pyx"
}

/* "pyPoly1d.pyx":75
 *     def setCoeff(self, int a, double b):
 *         self.c_poly1d.setCoeff(a,b)
 *     def getCoeff(self, int a):             # <<<<<<<<<<<<<<
 *         return self.c_poly1d.getCoeff(a)
 *     def eval(self, double a):
 */

#line 75 "pyPoly1d.pyx"


#line 75 "pyPoly1d.pyx"
/* Python wrapper */

#line 75 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_13getCoeff(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 75 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_13getCoeff(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  int __pyx_v_a
#line 75 "pyPoly1d.pyx"
;

#line 75 "pyPoly1d.pyx"
  PyObject *__pyx_r = 0;

#line 75 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 75 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("getCoeff (wrapper)", 0);

#line 75 "pyPoly1d.pyx"
  assert(__pyx_arg_a); {

#line 75 "pyPoly1d.pyx"
    __pyx_v_a = __Pyx_PyInt_As_int(__pyx_arg_a); if (unlikely((__pyx_v_a == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 75, __pyx_L3_error)

#line 75 "pyPoly1d.pyx"
  }

#line 75 "pyPoly1d.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 75 "pyPoly1d.pyx"
  __pyx_L3_error:;

#line 75 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.getCoeff", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 75 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 75 "pyPoly1d.pyx"
  return NULL;

#line 75 "pyPoly1d.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 75 "pyPoly1d.pyx"
__pyx_pf_8iscecore_8pyPoly1d_12getCoeff(((struct __pyx_obj_8iscecore_pyPoly1d *)__pyx_v_self), ((int)__pyx_v_a));

#line 75 "pyPoly1d.pyx"


#line 75 "pyPoly1d.pyx"
  /* function exit code */

#line 75 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 75 "pyPoly1d.pyx"
  return __pyx_r;

#line 75 "pyPoly1d.pyx"
}

#line 75 "pyPoly1d.pyx"


#line 75 "pyPoly1d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_12getCoeff(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, int __pyx_v_a) {

#line 75 "pyPoly1d.pyx"
  PyObject *__pyx_r = NULL;

#line 75 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 75 "pyPoly1d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 75 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("getCoeff", 0);

  /* "pyPoly1d.pyx":76
 *         self.c_poly1d.setCoeff(a,b)
 *     def getCoeff(self, int a):
 *         return self.c_poly1d.getCoeff(a)             # <<<<<<<<<<<<<<
 *     def eval(self, double a):
 *         return self.c_poly1d.eval(a)
 */

#line 76 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 76 "pyPoly1d.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_poly1d->getCoeff(__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 76, __pyx_L1_error)

#line 76 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 76 "pyPoly1d.pyx"
  __pyx_r = __pyx_t_1;

#line 76 "pyPoly1d.pyx"
  __pyx_t_1 = 0;

#line 76 "pyPoly1d.pyx"
  goto __pyx_L0;

  /* "pyPoly1d.pyx":75
 *     def setCoeff(self, int a, double b):
 *         self.c_poly1d.setCoeff(a,b)
 *     def getCoeff(self, int a):             # <<<<<<<<<<<<<<
 *         return self.c_poly1d.getCoeff(a)
 *     def eval(self, double a):
 */

#line 75 "pyPoly1d.pyx"


#line 75 "pyPoly1d.pyx"
  /* function exit code */

#line 75 "pyPoly1d.pyx"
  __pyx_L1_error:;

#line 75 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 75 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.getCoeff", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 75 "pyPoly1d.pyx"
  __pyx_r = NULL;

#line 75 "pyPoly1d.pyx"
  __pyx_L0:;

#line 75 "pyPoly1d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 75 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 75 "pyPoly1d.pyx"
  return __pyx_r;

#line 75 "pyPoly1d.pyx"
}

/* "pyPoly1d.pyx":77
 *     def getCoeff(self, int a):
 *         return self.c_poly1d.getCoeff(a)
 *     def eval(self, double a):             # <<<<<<<<<<<<<<
 *         return self.c_poly1d.eval(a)
 *     def printPoly(self):
 */

#line 77 "pyPoly1d.pyx"


#line 77 "pyPoly1d.pyx"
/* Python wrapper */

#line 77 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_15eval(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 77 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_15eval(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a
#line 77 "pyPoly1d.pyx"
;

#line 77 "pyPoly1d.pyx"
  PyObject *__pyx_r = 0;

#line 77 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 77 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("eval (wrapper)", 0);

#line 77 "pyPoly1d.pyx"
  assert(__pyx_arg_a); {

#line 77 "pyPoly1d.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 77, __pyx_L3_error)

#line 77 "pyPoly1d.pyx"
  }

#line 77 "pyPoly1d.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 77 "pyPoly1d.pyx"
  __pyx_L3_error:;

#line 77 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.eval", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 77 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 77 "pyPoly1d.pyx"
  return NULL;

#line 77 "pyPoly1d.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 77 "pyPoly1d.pyx"
__pyx_pf_8iscecore_8pyPoly1d_14eval(((struct __pyx_obj_8iscecore_pyPoly1d *)__pyx_v_self), ((double)__pyx_v_a));

#line 77 "pyPoly1d.pyx"


#line 77 "pyPoly1d.pyx"
  /* function exit code */

#line 77 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 77 "pyPoly1d.pyx"
  return __pyx_r;

#line 77 "pyPoly1d.pyx"
}

#line 77 "pyPoly1d.pyx"


#line 77 "pyPoly1d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_14eval(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, double __pyx_v_a) {

#line 77 "pyPoly1d.pyx"
  PyObject *__pyx_r = NULL;

#line 77 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 77 "pyPoly1d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 77 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("eval", 0);

  /* "pyPoly1d.pyx":78
 *         return self.c_poly1d.getCoeff(a)
 *     def eval(self, double a):
 *         return self.c_poly1d.eval(a)             # <<<<<<<<<<<<<<
 *     def printPoly(self):
 *         self.c_poly1d.printPoly()
 */

#line 78 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 78 "pyPoly1d.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_poly1d->eval(__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 78, __pyx_L1_error)

#line 78 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 78 "pyPoly1d.pyx"
  __pyx_r = __pyx_t_1;

#line 78 "pyPoly1d.pyx"
  __pyx_t_1 = 0;

#line 78 "pyPoly1d.pyx"
  goto __pyx_L0;

  /* "pyPoly1d.pyx":77
 *     def getCoeff(self, int a):
 *         return self.c_poly1d.getCoeff(a)
 *     def eval(self, double a):             # <<<<<<<<<<<<<<
 *         return self.c_poly1d.eval(a)
 *     def printPoly(self):
 */

#line 77 "pyPoly1d.pyx"


#line 77 "pyPoly1d.pyx"
  /* function exit code */

#line 77 "pyPoly1d.pyx"
  __pyx_L1_error:;

#line 77 "pyPoly1d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 77 "pyPoly1d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly1d.eval", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 77 "pyPoly1d.pyx"
  __pyx_r = NULL;

#line 77 "pyPoly1d.pyx"
  __pyx_L0:;

#line 77 "pyPoly1d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 77 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 77 "pyPoly1d.pyx"
  return __pyx_r;

#line 77 "pyPoly1d.pyx"
}

/* "pyPoly1d.pyx":79
 *     def eval(self, double a):
 *         return self.c_poly1d.eval(a)
 *     def printPoly(self):             # <<<<<<<<<<<<<<
 *         self.c_poly1d.printPoly()
 * 
 */

#line 79 "pyPoly1d.pyx"


#line 79 "pyPoly1d.pyx"
/* Python wrapper */

#line 79 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_17printPoly(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 79 "pyPoly1d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_17printPoly(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 79 "pyPoly1d.pyx"
  PyObject *__pyx_r = 0;

#line 79 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 79 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("printPoly (wrapper)", 0);
  __pyx_r = 
#line 79 "pyPoly1d.pyx"
__pyx_pf_8iscecore_8pyPoly1d_16printPoly(((struct __pyx_obj_8iscecore_pyPoly1d *)__pyx_v_self));

#line 79 "pyPoly1d.pyx"


#line 79 "pyPoly1d.pyx"
  /* function exit code */

#line 79 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 79 "pyPoly1d.pyx"
  return __pyx_r;

#line 79 "pyPoly1d.pyx"
}

#line 79 "pyPoly1d.pyx"


#line 79 "pyPoly1d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_16printPoly(struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self) {

#line 79 "pyPoly1d.pyx"
  PyObject *__pyx_r = NULL;

#line 79 "pyPoly1d.pyx"
  __Pyx_RefNannyDeclarations

#line 79 "pyPoly1d.pyx"
  __Pyx_RefNannySetupContext("printPoly", 0);

  /* "pyPoly1d.pyx":80
 *         return self.c_poly1d.eval(a)
 *     def printPoly(self):
 *         self.c_poly1d.printPoly()             # <<<<<<<<<<<<<<
 * 
 */

#line 80 "pyPoly1d.pyx"
  __pyx_v_self->c_poly1d->printPoly();

  /* "pyPoly1d.pyx":79
 *     def eval(self, double a):
 *         return self.c_poly1d.eval(a)
 *     def printPoly(self):             # <<<<<<<<<<<<<<
 *         self.c_poly1d.printPoly()
 * 
 */

#line 79 "pyPoly1d.pyx"


#line 79 "pyPoly1d.pyx"
  /* function exit code */

#line 79 "pyPoly1d.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 79 "pyPoly1d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 79 "pyPoly1d.pyx"
  __Pyx_RefNannyFinishContext();

#line 79 "pyPoly1d.pyx"
  return __pyx_r;

#line 79 "pyPoly1d.pyx"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_8iscecore_8pyPoly1d_18__reduce_cython__(((struct __pyx_obj_8iscecore_pyPoly1d *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyPoly1d.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_8pyPoly1d_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf_8iscecore_8pyPoly1d_20__setstate_cython__(((struct __pyx_obj_8iscecore_pyPoly1d *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_8pyPoly1d_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPoly1d *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyPoly1d.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "pyPoly2d.pyx":14
 *     cdef bool __owner
 * 
 *     def __cinit__(self, int azimuthOrder=-1, int rangeOrder=-1, double azimuthMean=0.,             # <<<<<<<<<<<<<<
 *                   double rangeMean=0., double azimuthNorm=1., double rangeNorm=1.):
 *         self.c_poly2d = new Poly2d(azimuthOrder,rangeOrder,azimuthMean,rangeMean,azimuthNorm,
 */

#line 14 "pyPoly2d.pyx"


#line 14 "pyPoly2d.pyx"
/* Python wrapper */

#line 14 "pyPoly2d.pyx"
static int __pyx_pw_8iscecore_8pyPoly2d_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 14 "pyPoly2d.pyx"
static int __pyx_pw_8iscecore_8pyPoly2d_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_azimuthOrder
#line 14 "pyPoly2d.pyx"
;
  int __pyx_v_rangeOrder
#line 14 "pyPoly2d.pyx"
;
  double __pyx_v_azimuthMean
#line 14 "pyPoly2d.pyx"
;
  double __pyx_v_rangeMean
#line 14 "pyPoly2d.pyx"
;
  double __pyx_v_azimuthNorm
#line 14 "pyPoly2d.pyx"
;
  double __pyx_v_rangeNorm
#line 14 "pyPoly2d.pyx"
;

#line 14 "pyPoly2d.pyx"
  int __pyx_r;

#line 14 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 14 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 14 "pyPoly2d.pyx"
  {

#line 14 "pyPoly2d.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_azimuthOrder,&__pyx_n_s_rangeOrder,&__pyx_n_s_azimuthMean,&__pyx_n_s_rangeMean,&__pyx_n_s_azimuthNorm,&__pyx_n_s_rangeNorm,0};

#line 14 "pyPoly2d.pyx"
    PyObject* values[6] = {0,0,0,0,0,0};

#line 14 "pyPoly2d.pyx"
    if (unlikely(__pyx_kwds)) {

#line 14 "pyPoly2d.pyx"
      Py_ssize_t kw_args;

#line 14 "pyPoly2d.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 14 "pyPoly2d.pyx"
      switch (pos_args) {
        case  6: 
#line 14 "pyPoly2d.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 14 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;
        case  5: 
#line 14 "pyPoly2d.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 14 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 14 "pyPoly2d.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 14 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 14 "pyPoly2d.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 14 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 14 "pyPoly2d.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 14 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 14 "pyPoly2d.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 14 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;

#line 14 "pyPoly2d.pyx"
        case  0: break;
        default: 
#line 14 "pyPoly2d.pyx"
goto __pyx_L5_argtuple_error;

#line 14 "pyPoly2d.pyx"
      }

#line 14 "pyPoly2d.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 14 "pyPoly2d.pyx"
      switch (pos_args) {

#line 14 "pyPoly2d.pyx"
        case  0:

#line 14 "pyPoly2d.pyx"
        if (kw_args > 0) {

#line 14 "pyPoly2d.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_azimuthOrder);

#line 14 "pyPoly2d.pyx"
          if (value) { values[0] = value; kw_args--; }

#line 14 "pyPoly2d.pyx"
        }

#line 14 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;

#line 14 "pyPoly2d.pyx"
        case  1:

#line 14 "pyPoly2d.pyx"
        if (kw_args > 0) {

#line 14 "pyPoly2d.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rangeOrder);

#line 14 "pyPoly2d.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 14 "pyPoly2d.pyx"
        }

#line 14 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;

#line 14 "pyPoly2d.pyx"
        case  2:

#line 14 "pyPoly2d.pyx"
        if (kw_args > 0) {

#line 14 "pyPoly2d.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_azimuthMean);

#line 14 "pyPoly2d.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 14 "pyPoly2d.pyx"
        }

#line 14 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;

#line 14 "pyPoly2d.pyx"
        case  3:

#line 14 "pyPoly2d.pyx"
        if (kw_args > 0) {

#line 14 "pyPoly2d.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rangeMean);

#line 14 "pyPoly2d.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 14 "pyPoly2d.pyx"
        }

#line 14 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;

#line 14 "pyPoly2d.pyx"
        case  4:

#line 14 "pyPoly2d.pyx"
        if (kw_args > 0) {

#line 14 "pyPoly2d.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_azimuthNorm);

#line 14 "pyPoly2d.pyx"
          if (value) { values[4] = value; kw_args--; }

#line 14 "pyPoly2d.pyx"
        }

#line 14 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;

#line 14 "pyPoly2d.pyx"
        case  5:

#line 14 "pyPoly2d.pyx"
        if (kw_args > 0) {

#line 14 "pyPoly2d.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rangeNorm);

#line 14 "pyPoly2d.pyx"
          if (value) { values[5] = value; kw_args--; }

#line 14 "pyPoly2d.pyx"
        }

#line 14 "pyPoly2d.pyx"
      }

#line 14 "pyPoly2d.pyx"
      if (unlikely(kw_args > 0)) {

#line 14 "pyPoly2d.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(11, 14, __pyx_L3_error)

#line 14 "pyPoly2d.pyx"
      }

#line 14 "pyPoly2d.pyx"
    } else {

#line 14 "pyPoly2d.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: 
#line 14 "pyPoly2d.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 14 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;
        case  5: 
#line 14 "pyPoly2d.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 14 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 14 "pyPoly2d.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 14 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 14 "pyPoly2d.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 14 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 14 "pyPoly2d.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 14 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 14 "pyPoly2d.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 14 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;
        case  0: 
#line 14 "pyPoly2d.pyx"
break;
        default: 
#line 14 "pyPoly2d.pyx"
goto __pyx_L5_argtuple_error;

#line 14 "pyPoly2d.pyx"
      }

#line 14 "pyPoly2d.pyx"
    }

#line 14 "pyPoly2d.pyx"
    if (values[0]) {

#line 14 "pyPoly2d.pyx"
      __pyx_v_azimuthOrder = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_azimuthOrder == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 14, __pyx_L3_error)

#line 14 "pyPoly2d.pyx"
    } else {

#line 14 "pyPoly2d.pyx"
      __pyx_v_azimuthOrder = ((int)-1);

#line 14 "pyPoly2d.pyx"
    }

#line 14 "pyPoly2d.pyx"
    if (values[1]) {

#line 14 "pyPoly2d.pyx"
      __pyx_v_rangeOrder = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_rangeOrder == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 14, __pyx_L3_error)

#line 14 "pyPoly2d.pyx"
    } else {

#line 14 "pyPoly2d.pyx"
      __pyx_v_rangeOrder = ((int)-1);

#line 14 "pyPoly2d.pyx"
    }

#line 14 "pyPoly2d.pyx"
    if (values[2]) {

#line 14 "pyPoly2d.pyx"
      __pyx_v_azimuthMean = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_azimuthMean == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 14, __pyx_L3_error)

#line 14 "pyPoly2d.pyx"
    } else {

#line 14 "pyPoly2d.pyx"
      __pyx_v_azimuthMean = ((double)0.);

#line 14 "pyPoly2d.pyx"
    }

#line 14 "pyPoly2d.pyx"
    if (values[3]) {

#line 14 "pyPoly2d.pyx"
      __pyx_v_rangeMean = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_rangeMean == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 15, __pyx_L3_error)

#line 14 "pyPoly2d.pyx"
    } else {

#line 14 "pyPoly2d.pyx"
      __pyx_v_rangeMean = ((double)0.);

#line 14 "pyPoly2d.pyx"
    }

#line 14 "pyPoly2d.pyx"
    if (values[4]) {

#line 14 "pyPoly2d.pyx"
      __pyx_v_azimuthNorm = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_azimuthNorm == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 15, __pyx_L3_error)

#line 14 "pyPoly2d.pyx"
    } else {

#line 14 "pyPoly2d.pyx"
      __pyx_v_azimuthNorm = ((double)1.);

#line 14 "pyPoly2d.pyx"
    }

#line 14 "pyPoly2d.pyx"
    if (values[5]) {

#line 14 "pyPoly2d.pyx"
      __pyx_v_rangeNorm = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_rangeNorm == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 15, __pyx_L3_error)

#line 14 "pyPoly2d.pyx"
    } else {

#line 14 "pyPoly2d.pyx"
      __pyx_v_rangeNorm = ((double)1.);

#line 14 "pyPoly2d.pyx"
    }

#line 14 "pyPoly2d.pyx"
  }

#line 14 "pyPoly2d.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 14 "pyPoly2d.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 6, PyTuple_GET_SIZE(__pyx_args)); 
#line 14 "pyPoly2d.pyx"
__PYX_ERR(11, 14, __pyx_L3_error)

#line 14 "pyPoly2d.pyx"
  __pyx_L3_error:;

#line 14 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 14 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 14 "pyPoly2d.pyx"
  return -1;

#line 14 "pyPoly2d.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 14 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d___cinit__(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self), __pyx_v_azimuthOrder, __pyx_v_rangeOrder, __pyx_v_azimuthMean, __pyx_v_rangeMean, __pyx_v_azimuthNorm, __pyx_v_rangeNorm);

#line 14 "pyPoly2d.pyx"


#line 14 "pyPoly2d.pyx"
  /* function exit code */

#line 14 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 14 "pyPoly2d.pyx"
  return __pyx_r;

#line 14 "pyPoly2d.pyx"
}

#line 14 "pyPoly2d.pyx"


#line 14 "pyPoly2d.pyx"
static int __pyx_pf_8iscecore_8pyPoly2d___cinit__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, int __pyx_v_azimuthOrder, int __pyx_v_rangeOrder, double __pyx_v_azimuthMean, double __pyx_v_rangeMean, double __pyx_v_azimuthNorm, double __pyx_v_rangeNorm) {

#line 14 "pyPoly2d.pyx"
  int __pyx_r;

#line 14 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 14 "pyPoly2d.pyx"
  isce::core::Poly2d *__pyx_t_1;

#line 14 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyPoly2d.pyx":16
 *     def __cinit__(self, int azimuthOrder=-1, int rangeOrder=-1, double azimuthMean=0.,
 *                   double rangeMean=0., double azimuthNorm=1., double rangeNorm=1.):
 *         self.c_poly2d = new Poly2d(azimuthOrder,rangeOrder,azimuthMean,rangeMean,azimuthNorm,             # <<<<<<<<<<<<<<
 *                                     rangeNorm)
 *         self.__owner = True
 */

#line 16 "pyPoly2d.pyx"
  try {

#line 16 "pyPoly2d.pyx"
    __pyx_t_1 = new isce::core::Poly2d(__pyx_v_azimuthOrder, __pyx_v_rangeOrder, __pyx_v_azimuthMean, __pyx_v_rangeMean, __pyx_v_azimuthNorm, __pyx_v_rangeNorm);

#line 16 "pyPoly2d.pyx"
  } catch(...) {

#line 16 "pyPoly2d.pyx"
    __Pyx_CppExn2PyErr();

#line 16 "pyPoly2d.pyx"
    __PYX_ERR(11, 16, __pyx_L1_error)

#line 16 "pyPoly2d.pyx"
  }

#line 16 "pyPoly2d.pyx"
  __pyx_v_self->c_poly2d = __pyx_t_1;

  /* "pyPoly2d.pyx":18
 *         self.c_poly2d = new Poly2d(azimuthOrder,rangeOrder,azimuthMean,rangeMean,azimuthNorm,
 *                                     rangeNorm)
 *         self.__owner = True             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.__owner:
 */

#line 18 "pyPoly2d.pyx"
  __pyx_v_self->__pyx___owner = 1;

  /* "pyPoly2d.pyx":14
 *     cdef bool __owner
 * 
 *     def __cinit__(self, int azimuthOrder=-1, int rangeOrder=-1, double azimuthMean=0.,             # <<<<<<<<<<<<<<
 *                   double rangeMean=0., double azimuthNorm=1., double rangeNorm=1.):
 *         self.c_poly2d = new Poly2d(azimuthOrder,rangeOrder,azimuthMean,rangeMean,azimuthNorm,
 */

#line 14 "pyPoly2d.pyx"


#line 14 "pyPoly2d.pyx"
  /* function exit code */

#line 14 "pyPoly2d.pyx"
  __pyx_r = 0;

#line 14 "pyPoly2d.pyx"
  goto __pyx_L0;

#line 14 "pyPoly2d.pyx"
  __pyx_L1_error:;

#line 14 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 14 "pyPoly2d.pyx"
  __pyx_r = -1;

#line 14 "pyPoly2d.pyx"
  __pyx_L0:;

#line 14 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 14 "pyPoly2d.pyx"
  return __pyx_r;

#line 14 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":19
 *                                     rangeNorm)
 *         self.__owner = True
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_poly2d
 */

#line 19 "pyPoly2d.pyx"


#line 19 "pyPoly2d.pyx"
/* Python wrapper */

#line 19 "pyPoly2d.pyx"
static void __pyx_pw_8iscecore_8pyPoly2d_3__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 19 "pyPoly2d.pyx"
static void __pyx_pw_8iscecore_8pyPoly2d_3__dealloc__(PyObject *__pyx_v_self) {

#line 19 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 19 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 19 "pyPoly2d.pyx"
  __pyx_pf_8iscecore_8pyPoly2d_2__dealloc__(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self));

#line 19 "pyPoly2d.pyx"


#line 19 "pyPoly2d.pyx"
  /* function exit code */

#line 19 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 19 "pyPoly2d.pyx"
}

#line 19 "pyPoly2d.pyx"


#line 19 "pyPoly2d.pyx"
static void __pyx_pf_8iscecore_8pyPoly2d_2__dealloc__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self) {

#line 19 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 19 "pyPoly2d.pyx"
  int __pyx_t_1;

#line 19 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyPoly2d.pyx":20
 *         self.__owner = True
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_poly2d
 *     @staticmethod
 */

#line 20 "pyPoly2d.pyx"
  __pyx_t_1 = (__pyx_v_self->__pyx___owner != 0);

#line 20 "pyPoly2d.pyx"
  if (__pyx_t_1) {

    /* "pyPoly2d.pyx":21
 *     def __dealloc__(self):
 *         if self.__owner:
 *             del self.c_poly2d             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     def bind(pyPoly2d poly):
 */

#line 21 "pyPoly2d.pyx"
    delete __pyx_v_self->c_poly2d;

    /* "pyPoly2d.pyx":20
 *         self.__owner = True
 *     def __dealloc__(self):
 *         if self.__owner:             # <<<<<<<<<<<<<<
 *             del self.c_poly2d
 *     @staticmethod
 */

#line 20 "pyPoly2d.pyx"
  }

  /* "pyPoly2d.pyx":19
 *                                     rangeNorm)
 *         self.__owner = True
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.__owner:
 *             del self.c_poly2d
 */

#line 19 "pyPoly2d.pyx"


#line 19 "pyPoly2d.pyx"
  /* function exit code */

#line 19 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 19 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":23
 *             del self.c_poly2d
 *     @staticmethod
 *     def bind(pyPoly2d poly):             # <<<<<<<<<<<<<<
 *         new_poly = pyPoly2d()
 *         del new_poly.c_poly2d
 */

#line 23 "pyPoly2d.pyx"


#line 23 "pyPoly2d.pyx"
/* Python wrapper */

#line 23 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_5bind(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8iscecore_8pyPoly2d_5bind = 
#line 23 "pyPoly2d.pyx"
{"bind", (PyCFunction)__pyx_pw_8iscecore_8pyPoly2d_5bind, METH_VARARGS|METH_KEYWORDS, 0};

#line 23 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_5bind(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_poly = 0
#line 23 "pyPoly2d.pyx"
;

#line 23 "pyPoly2d.pyx"
  PyObject *__pyx_r = 0;

#line 23 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 23 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("bind (wrapper)", 0);

#line 23 "pyPoly2d.pyx"
  {

#line 23 "pyPoly2d.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_poly,0};

#line 23 "pyPoly2d.pyx"
    PyObject* values[1] = {0};

#line 23 "pyPoly2d.pyx"
    if (unlikely(__pyx_kwds)) {

#line 23 "pyPoly2d.pyx"
      Py_ssize_t kw_args;

#line 23 "pyPoly2d.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 23 "pyPoly2d.pyx"
      switch (pos_args) {
        case  1: 
#line 23 "pyPoly2d.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 23 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;

#line 23 "pyPoly2d.pyx"
        case  0: break;
        default: 
#line 23 "pyPoly2d.pyx"
goto __pyx_L5_argtuple_error;

#line 23 "pyPoly2d.pyx"
      }

#line 23 "pyPoly2d.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 23 "pyPoly2d.pyx"
      switch (pos_args) {

#line 23 "pyPoly2d.pyx"
        case  0:

#line 23 "pyPoly2d.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_poly)) != 0)) kw_args--;
        else 
#line 23 "pyPoly2d.pyx"
goto __pyx_L5_argtuple_error;

#line 23 "pyPoly2d.pyx"
      }

#line 23 "pyPoly2d.pyx"
      if (unlikely(kw_args > 0)) {

#line 23 "pyPoly2d.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "bind") < 0)) __PYX_ERR(11, 23, __pyx_L3_error)

#line 23 "pyPoly2d.pyx"
      }

#line 23 "pyPoly2d.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {

#line 23 "pyPoly2d.pyx"
      goto __pyx_L5_argtuple_error;

#line 23 "pyPoly2d.pyx"
    } else {

#line 23 "pyPoly2d.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 23 "pyPoly2d.pyx"
    }

#line 23 "pyPoly2d.pyx"
    __pyx_v_poly = ((struct __pyx_obj_8iscecore_pyPoly2d *)values[0]);

#line 23 "pyPoly2d.pyx"
  }

#line 23 "pyPoly2d.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 23 "pyPoly2d.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bind", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 23 "pyPoly2d.pyx"
__PYX_ERR(11, 23, __pyx_L3_error)

#line 23 "pyPoly2d.pyx"
  __pyx_L3_error:;

#line 23 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.bind", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 23 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 23 "pyPoly2d.pyx"
  return NULL;

#line 23 "pyPoly2d.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 23 "pyPoly2d.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_poly), __pyx_ptype_8iscecore_pyPoly2d, 1, "poly", 0))) __PYX_ERR(11, 23, __pyx_L1_error)
  __pyx_r = 
#line 23 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_4bind(__pyx_v_poly);

#line 23 "pyPoly2d.pyx"


#line 23 "pyPoly2d.pyx"
  /* function exit code */

#line 23 "pyPoly2d.pyx"
  goto __pyx_L0;

#line 23 "pyPoly2d.pyx"
  __pyx_L1_error:;

#line 23 "pyPoly2d.pyx"
  __pyx_r = NULL;

#line 23 "pyPoly2d.pyx"
  __pyx_L0:;

#line 23 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 23 "pyPoly2d.pyx"
  return __pyx_r;

#line 23 "pyPoly2d.pyx"
}

#line 23 "pyPoly2d.pyx"


#line 23 "pyPoly2d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_4bind(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_poly) {
  struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_new_poly = NULL
#line 23 "pyPoly2d.pyx"
;

#line 23 "pyPoly2d.pyx"
  PyObject *__pyx_r = NULL;

#line 23 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 23 "pyPoly2d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 23 "pyPoly2d.pyx"
  isce::core::Poly2d *__pyx_t_2;

#line 23 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("bind", 0);

  /* "pyPoly2d.pyx":24
 *     @staticmethod
 *     def bind(pyPoly2d poly):
 *         new_poly = pyPoly2d()             # <<<<<<<<<<<<<<
 *         del new_poly.c_poly2d
 *         new_poly.c_poly2d = poly.c_poly2d
 */

#line 24 "pyPoly2d.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8iscecore_pyPoly2d), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 24, __pyx_L1_error)

#line 24 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 24 "pyPoly2d.pyx"
  __pyx_v_new_poly = ((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_t_1);

#line 24 "pyPoly2d.pyx"
  __pyx_t_1 = 0;

  /* "pyPoly2d.pyx":25
 *     def bind(pyPoly2d poly):
 *         new_poly = pyPoly2d()
 *         del new_poly.c_poly2d             # <<<<<<<<<<<<<<
 *         new_poly.c_poly2d = poly.c_poly2d
 *         new_poly.__owner = False
 */

#line 25 "pyPoly2d.pyx"
  delete __pyx_v_new_poly->c_poly2d;

  /* "pyPoly2d.pyx":26
 *         new_poly = pyPoly2d()
 *         del new_poly.c_poly2d
 *         new_poly.c_poly2d = poly.c_poly2d             # <<<<<<<<<<<<<<
 *         new_poly.__owner = False
 *         return new_poly
 */

#line 26 "pyPoly2d.pyx"
  __pyx_t_2 = __pyx_v_poly->c_poly2d;

#line 26 "pyPoly2d.pyx"
  __pyx_v_new_poly->c_poly2d = __pyx_t_2;

  /* "pyPoly2d.pyx":27
 *         del new_poly.c_poly2d
 *         new_poly.c_poly2d = poly.c_poly2d
 *         new_poly.__owner = False             # <<<<<<<<<<<<<<
 *         return new_poly
 * 
 */

#line 27 "pyPoly2d.pyx"
  __pyx_v_new_poly->__pyx___owner = 0;

  /* "pyPoly2d.pyx":28
 *         new_poly.c_poly2d = poly.c_poly2d
 *         new_poly.__owner = False
 *         return new_poly             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 28 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 28 "pyPoly2d.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_new_poly));

#line 28 "pyPoly2d.pyx"
  __pyx_r = ((PyObject *)__pyx_v_new_poly);

#line 28 "pyPoly2d.pyx"
  goto __pyx_L0;

  /* "pyPoly2d.pyx":23
 *             del self.c_poly2d
 *     @staticmethod
 *     def bind(pyPoly2d poly):             # <<<<<<<<<<<<<<
 *         new_poly = pyPoly2d()
 *         del new_poly.c_poly2d
 */

#line 23 "pyPoly2d.pyx"


#line 23 "pyPoly2d.pyx"
  /* function exit code */

#line 23 "pyPoly2d.pyx"
  __pyx_L1_error:;

#line 23 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 23 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.bind", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 23 "pyPoly2d.pyx"
  __pyx_r = NULL;

#line 23 "pyPoly2d.pyx"
  __pyx_L0:;

#line 23 "pyPoly2d.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_new_poly);

#line 23 "pyPoly2d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 23 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 23 "pyPoly2d.pyx"
  return __pyx_r;

#line 23 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":31
 * 
 *     @property
 *     def azimuthOrder(self):             # <<<<<<<<<<<<<<
 *         return self.c_poly2d.azimuthOrder
 *     @azimuthOrder.setter
 */

#line 31 "pyPoly2d.pyx"


#line 31 "pyPoly2d.pyx"
/* Python wrapper */

#line 31 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_12azimuthOrder_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 31 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_12azimuthOrder_1__get__(PyObject *__pyx_v_self) {

#line 31 "pyPoly2d.pyx"
  PyObject *__pyx_r = 0;

#line 31 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 31 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 31 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_12azimuthOrder___get__(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self));

#line 31 "pyPoly2d.pyx"


#line 31 "pyPoly2d.pyx"
  /* function exit code */

#line 31 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 31 "pyPoly2d.pyx"
  return __pyx_r;

#line 31 "pyPoly2d.pyx"
}

#line 31 "pyPoly2d.pyx"


#line 31 "pyPoly2d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_12azimuthOrder___get__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self) {

#line 31 "pyPoly2d.pyx"
  PyObject *__pyx_r = NULL;

#line 31 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 31 "pyPoly2d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 31 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPoly2d.pyx":32
 *     @property
 *     def azimuthOrder(self):
 *         return self.c_poly2d.azimuthOrder             # <<<<<<<<<<<<<<
 *     @azimuthOrder.setter
 *     def azimuthOrder(self, int a):
 */

#line 32 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 32 "pyPoly2d.pyx"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c_poly2d->azimuthOrder); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 32, __pyx_L1_error)

#line 32 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 32 "pyPoly2d.pyx"
  __pyx_r = __pyx_t_1;

#line 32 "pyPoly2d.pyx"
  __pyx_t_1 = 0;

#line 32 "pyPoly2d.pyx"
  goto __pyx_L0;

  /* "pyPoly2d.pyx":31
 * 
 *     @property
 *     def azimuthOrder(self):             # <<<<<<<<<<<<<<
 *         return self.c_poly2d.azimuthOrder
 *     @azimuthOrder.setter
 */

#line 31 "pyPoly2d.pyx"


#line 31 "pyPoly2d.pyx"
  /* function exit code */

#line 31 "pyPoly2d.pyx"
  __pyx_L1_error:;

#line 31 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 31 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.azimuthOrder.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 31 "pyPoly2d.pyx"
  __pyx_r = NULL;

#line 31 "pyPoly2d.pyx"
  __pyx_L0:;

#line 31 "pyPoly2d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 31 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 31 "pyPoly2d.pyx"
  return __pyx_r;

#line 31 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":34
 *         return self.c_poly2d.azimuthOrder
 *     @azimuthOrder.setter
 *     def azimuthOrder(self, int a):             # <<<<<<<<<<<<<<
 *         if (a < 0):
 *             return
 */

#line 34 "pyPoly2d.pyx"


#line 34 "pyPoly2d.pyx"
/* Python wrapper */

#line 34 "pyPoly2d.pyx"
static int __pyx_pw_8iscecore_8pyPoly2d_12azimuthOrder_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 34 "pyPoly2d.pyx"
static int __pyx_pw_8iscecore_8pyPoly2d_12azimuthOrder_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  int __pyx_v_a
#line 34 "pyPoly2d.pyx"
;

#line 34 "pyPoly2d.pyx"
  int __pyx_r;

#line 34 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 34 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);

#line 34 "pyPoly2d.pyx"
  assert(__pyx_arg_a); {

#line 34 "pyPoly2d.pyx"
    __pyx_v_a = __Pyx_PyInt_As_int(__pyx_arg_a); if (unlikely((__pyx_v_a == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 34, __pyx_L3_error)

#line 34 "pyPoly2d.pyx"
  }

#line 34 "pyPoly2d.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 34 "pyPoly2d.pyx"
  __pyx_L3_error:;

#line 34 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.azimuthOrder.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 34 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 34 "pyPoly2d.pyx"
  return -1;

#line 34 "pyPoly2d.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 34 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_12azimuthOrder_2__set__(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self), ((int)__pyx_v_a));

#line 34 "pyPoly2d.pyx"


#line 34 "pyPoly2d.pyx"
  /* function exit code */

#line 34 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 34 "pyPoly2d.pyx"
  return __pyx_r;

#line 34 "pyPoly2d.pyx"
}

#line 34 "pyPoly2d.pyx"


#line 34 "pyPoly2d.pyx"
static int __pyx_pf_8iscecore_8pyPoly2d_12azimuthOrder_2__set__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, int __pyx_v_a) {
  PyObject *__pyx_v_c = NULL
#line 34 "pyPoly2d.pyx"
;
  PyObject *__pyx_v_i = NULL
#line 34 "pyPoly2d.pyx"
;
  PyObject *__pyx_v_nc = NULL
#line 34 "pyPoly2d.pyx"
;

#line 34 "pyPoly2d.pyx"
  int __pyx_r;

#line 34 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 34 "pyPoly2d.pyx"
  int __pyx_t_1;

#line 34 "pyPoly2d.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 34 "pyPoly2d.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 34 "pyPoly2d.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 34 "pyPoly2d.pyx"
  Py_ssize_t __pyx_t_5;

#line 34 "pyPoly2d.pyx"
  PyObject *(*__pyx_t_6)(PyObject *);

#line 34 "pyPoly2d.pyx"
  int __pyx_t_7;

#line 34 "pyPoly2d.pyx"
  std::vector<double> ::size_type __pyx_t_8;

#line 34 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPoly2d.pyx":35
 *     @azimuthOrder.setter
 *     def azimuthOrder(self, int a):
 *         if (a < 0):             # <<<<<<<<<<<<<<
 *             return
 *         else:
 */

#line 35 "pyPoly2d.pyx"
  __pyx_t_1 = ((__pyx_v_a < 0) != 0);

#line 35 "pyPoly2d.pyx"
  if (__pyx_t_1) {

    /* "pyPoly2d.pyx":36
 *     def azimuthOrder(self, int a):
 *         if (a < 0):
 *             return             # <<<<<<<<<<<<<<
 *         else:
 *             c = self.coeffs
 */

#line 36 "pyPoly2d.pyx"
    __pyx_r = 0;

#line 36 "pyPoly2d.pyx"
    goto __pyx_L0;

    /* "pyPoly2d.pyx":35
 *     @azimuthOrder.setter
 *     def azimuthOrder(self, int a):
 *         if (a < 0):             # <<<<<<<<<<<<<<
 *             return
 *         else:
 */

#line 35 "pyPoly2d.pyx"
  }

  /* "pyPoly2d.pyx":38
 *             return
 *         else:
 *             c = self.coeffs             # <<<<<<<<<<<<<<
 *             for i in range((a-self.azimuthOrder)*(self.rangeOrder+1)):
 *                 c.append(0.)
 */

#line 38 "pyPoly2d.pyx"
  /*else*/ {

#line 38 "pyPoly2d.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_coeffs); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 38, __pyx_L1_error)

#line 38 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 38 "pyPoly2d.pyx"
    __pyx_v_c = __pyx_t_2;

#line 38 "pyPoly2d.pyx"
    __pyx_t_2 = 0;

    /* "pyPoly2d.pyx":39
 *         else:
 *             c = self.coeffs
 *             for i in range((a-self.azimuthOrder)*(self.rangeOrder+1)):             # <<<<<<<<<<<<<<
 *                 c.append(0.)
 *             nc = []
 */

#line 39 "pyPoly2d.pyx"
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_a); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 39, __pyx_L1_error)

#line 39 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 39 "pyPoly2d.pyx"
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_azimuthOrder); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 39, __pyx_L1_error)

#line 39 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 39 "pyPoly2d.pyx"
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 39, __pyx_L1_error)

#line 39 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 39 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 39 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 39 "pyPoly2d.pyx"
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rangeOrder); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 39, __pyx_L1_error)

#line 39 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 39 "pyPoly2d.pyx"
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 39, __pyx_L1_error)

#line 39 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 39 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 39 "pyPoly2d.pyx"
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 39, __pyx_L1_error)

#line 39 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 39 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 39 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 39 "pyPoly2d.pyx"
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 39, __pyx_L1_error)

#line 39 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 39 "pyPoly2d.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 39 "pyPoly2d.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);

#line 39 "pyPoly2d.pyx"
    __pyx_t_3 = 0;

#line 39 "pyPoly2d.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 39, __pyx_L1_error)

#line 39 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 39 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 39 "pyPoly2d.pyx"
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {

#line 39 "pyPoly2d.pyx"
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;

#line 39 "pyPoly2d.pyx"
      __pyx_t_6 = NULL;

#line 39 "pyPoly2d.pyx"
    } else {
      __pyx_t_5 = -1; 
#line 39 "pyPoly2d.pyx"
__pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 39, __pyx_L1_error)

#line 39 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 39 "pyPoly2d.pyx"
      __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 39, __pyx_L1_error)

#line 39 "pyPoly2d.pyx"
    }

#line 39 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 39 "pyPoly2d.pyx"
    for (;;) {

#line 39 "pyPoly2d.pyx"
      if (likely(!__pyx_t_6)) {

#line 39 "pyPoly2d.pyx"
        if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 39 "pyPoly2d.pyx"
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 39 "pyPoly2d.pyx"
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 39 "pyPoly2d.pyx"
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(11, 39, __pyx_L1_error)

#line 39 "pyPoly2d.pyx"
          #else

#line 39 "pyPoly2d.pyx"
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 39, __pyx_L1_error)

#line 39 "pyPoly2d.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 39 "pyPoly2d.pyx"
          #endif

#line 39 "pyPoly2d.pyx"
        } else {

#line 39 "pyPoly2d.pyx"
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 39 "pyPoly2d.pyx"
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 39 "pyPoly2d.pyx"
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(11, 39, __pyx_L1_error)

#line 39 "pyPoly2d.pyx"
          #else

#line 39 "pyPoly2d.pyx"
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 39, __pyx_L1_error)

#line 39 "pyPoly2d.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 39 "pyPoly2d.pyx"
          #endif

#line 39 "pyPoly2d.pyx"
        }
      } else 
#line 39 "pyPoly2d.pyx"
{

#line 39 "pyPoly2d.pyx"
        __pyx_t_3 = __pyx_t_6(__pyx_t_2);

#line 39 "pyPoly2d.pyx"
        if (unlikely(!__pyx_t_3)) {

#line 39 "pyPoly2d.pyx"
          PyObject* exc_type = PyErr_Occurred();

#line 39 "pyPoly2d.pyx"
          if (exc_type) {

#line 39 "pyPoly2d.pyx"
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 39 "pyPoly2d.pyx"
            else __PYX_ERR(11, 39, __pyx_L1_error)

#line 39 "pyPoly2d.pyx"
          }

#line 39 "pyPoly2d.pyx"
          break;

#line 39 "pyPoly2d.pyx"
        }

#line 39 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 39 "pyPoly2d.pyx"
      }

#line 39 "pyPoly2d.pyx"
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);

#line 39 "pyPoly2d.pyx"
      __pyx_t_3 = 0;

      /* "pyPoly2d.pyx":40
 *             c = self.coeffs
 *             for i in range((a-self.azimuthOrder)*(self.rangeOrder+1)):
 *                 c.append(0.)             # <<<<<<<<<<<<<<
 *             nc = []
 *             for i in range((a+1)*(self.rangeOrder+1)):
 */

#line 40 "pyPoly2d.pyx"
      __pyx_t_7 = __Pyx_PyObject_Append(__pyx_v_c, __pyx_float_0_); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(11, 40, __pyx_L1_error)

      /* "pyPoly2d.pyx":39
 *         else:
 *             c = self.coeffs
 *             for i in range((a-self.azimuthOrder)*(self.rangeOrder+1)):             # <<<<<<<<<<<<<<
 *                 c.append(0.)
 *             nc = []
 */

#line 39 "pyPoly2d.pyx"
    }

#line 39 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyPoly2d.pyx":41
 *             for i in range((a-self.azimuthOrder)*(self.rangeOrder+1)):
 *                 c.append(0.)
 *             nc = []             # <<<<<<<<<<<<<<
 *             for i in range((a+1)*(self.rangeOrder+1)):
 *                 nc.append(c[i])
 */

#line 41 "pyPoly2d.pyx"
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 41, __pyx_L1_error)

#line 41 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 41 "pyPoly2d.pyx"
    __pyx_v_nc = ((PyObject*)__pyx_t_2);

#line 41 "pyPoly2d.pyx"
    __pyx_t_2 = 0;

    /* "pyPoly2d.pyx":42
 *                 c.append(0.)
 *             nc = []
 *             for i in range((a+1)*(self.rangeOrder+1)):             # <<<<<<<<<<<<<<
 *                 nc.append(c[i])
 *             self.c_poly2d.azimuthOrder = a
 */

#line 42 "pyPoly2d.pyx"
    __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_a + 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 42, __pyx_L1_error)

#line 42 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 42 "pyPoly2d.pyx"
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rangeOrder); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 42, __pyx_L1_error)

#line 42 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 42 "pyPoly2d.pyx"
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 42, __pyx_L1_error)

#line 42 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 42 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 42 "pyPoly2d.pyx"
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 42, __pyx_L1_error)

#line 42 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 42 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 42 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 42 "pyPoly2d.pyx"
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 42, __pyx_L1_error)

#line 42 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 42 "pyPoly2d.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 42 "pyPoly2d.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 42 "pyPoly2d.pyx"
    __pyx_t_3 = 0;

#line 42 "pyPoly2d.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 42, __pyx_L1_error)

#line 42 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 42 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 42 "pyPoly2d.pyx"
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {

#line 42 "pyPoly2d.pyx"
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;

#line 42 "pyPoly2d.pyx"
      __pyx_t_6 = NULL;

#line 42 "pyPoly2d.pyx"
    } else {
      __pyx_t_5 = -1; 
#line 42 "pyPoly2d.pyx"
__pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 42, __pyx_L1_error)

#line 42 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 42 "pyPoly2d.pyx"
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 42, __pyx_L1_error)

#line 42 "pyPoly2d.pyx"
    }

#line 42 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 42 "pyPoly2d.pyx"
    for (;;) {

#line 42 "pyPoly2d.pyx"
      if (likely(!__pyx_t_6)) {

#line 42 "pyPoly2d.pyx"
        if (likely(PyList_CheckExact(__pyx_t_4))) {

#line 42 "pyPoly2d.pyx"
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;

#line 42 "pyPoly2d.pyx"
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 42 "pyPoly2d.pyx"
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(11, 42, __pyx_L1_error)

#line 42 "pyPoly2d.pyx"
          #else

#line 42 "pyPoly2d.pyx"
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 42, __pyx_L1_error)

#line 42 "pyPoly2d.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 42 "pyPoly2d.pyx"
          #endif

#line 42 "pyPoly2d.pyx"
        } else {

#line 42 "pyPoly2d.pyx"
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;

#line 42 "pyPoly2d.pyx"
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 42 "pyPoly2d.pyx"
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(11, 42, __pyx_L1_error)

#line 42 "pyPoly2d.pyx"
          #else

#line 42 "pyPoly2d.pyx"
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 42, __pyx_L1_error)

#line 42 "pyPoly2d.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 42 "pyPoly2d.pyx"
          #endif

#line 42 "pyPoly2d.pyx"
        }
      } else 
#line 42 "pyPoly2d.pyx"
{

#line 42 "pyPoly2d.pyx"
        __pyx_t_3 = __pyx_t_6(__pyx_t_4);

#line 42 "pyPoly2d.pyx"
        if (unlikely(!__pyx_t_3)) {

#line 42 "pyPoly2d.pyx"
          PyObject* exc_type = PyErr_Occurred();

#line 42 "pyPoly2d.pyx"
          if (exc_type) {

#line 42 "pyPoly2d.pyx"
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 42 "pyPoly2d.pyx"
            else __PYX_ERR(11, 42, __pyx_L1_error)

#line 42 "pyPoly2d.pyx"
          }

#line 42 "pyPoly2d.pyx"
          break;

#line 42 "pyPoly2d.pyx"
        }

#line 42 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 42 "pyPoly2d.pyx"
      }

#line 42 "pyPoly2d.pyx"
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);

#line 42 "pyPoly2d.pyx"
      __pyx_t_3 = 0;

      /* "pyPoly2d.pyx":43
 *             nc = []
 *             for i in range((a+1)*(self.rangeOrder+1)):
 *                 nc.append(c[i])             # <<<<<<<<<<<<<<
 *             self.c_poly2d.azimuthOrder = a
 *             self.c_poly2d.coeffs.resize((self.azimuthOrder+1)*(self.rangeOrder+1))
 */

#line 43 "pyPoly2d.pyx"
      __pyx_t_3 = PyObject_GetItem(__pyx_v_c, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 43, __pyx_L1_error)

#line 43 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 43 "pyPoly2d.pyx"
      __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_nc, __pyx_t_3); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(11, 43, __pyx_L1_error)

#line 43 "pyPoly2d.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyPoly2d.pyx":42
 *                 c.append(0.)
 *             nc = []
 *             for i in range((a+1)*(self.rangeOrder+1)):             # <<<<<<<<<<<<<<
 *                 nc.append(c[i])
 *             self.c_poly2d.azimuthOrder = a
 */

#line 42 "pyPoly2d.pyx"
    }

#line 42 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyPoly2d.pyx":44
 *             for i in range((a+1)*(self.rangeOrder+1)):
 *                 nc.append(c[i])
 *             self.c_poly2d.azimuthOrder = a             # <<<<<<<<<<<<<<
 *             self.c_poly2d.coeffs.resize((self.azimuthOrder+1)*(self.rangeOrder+1))
 *             self.coeffs = nc
 */

#line 44 "pyPoly2d.pyx"
    __pyx_v_self->c_poly2d->azimuthOrder = __pyx_v_a;

    /* "pyPoly2d.pyx":45
 *                 nc.append(c[i])
 *             self.c_poly2d.azimuthOrder = a
 *             self.c_poly2d.coeffs.resize((self.azimuthOrder+1)*(self.rangeOrder+1))             # <<<<<<<<<<<<<<
 *             self.coeffs = nc
 *     @property
 */

#line 45 "pyPoly2d.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_azimuthOrder); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 45, __pyx_L1_error)

#line 45 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 45 "pyPoly2d.pyx"
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 45, __pyx_L1_error)

#line 45 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 45 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 45 "pyPoly2d.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rangeOrder); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 45, __pyx_L1_error)

#line 45 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 45 "pyPoly2d.pyx"
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 45, __pyx_L1_error)

#line 45 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 45 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 45 "pyPoly2d.pyx"
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 45, __pyx_L1_error)

#line 45 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 45 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 45 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 45 "pyPoly2d.pyx"
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 45, __pyx_L1_error)

#line 45 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 45 "pyPoly2d.pyx"
    try {

#line 45 "pyPoly2d.pyx"
      __pyx_v_self->c_poly2d->coeffs.resize(__pyx_t_8);

#line 45 "pyPoly2d.pyx"
    } catch(...) {

#line 45 "pyPoly2d.pyx"
      __Pyx_CppExn2PyErr();

#line 45 "pyPoly2d.pyx"
      __PYX_ERR(11, 45, __pyx_L1_error)

#line 45 "pyPoly2d.pyx"
    }

    /* "pyPoly2d.pyx":46
 *             self.c_poly2d.azimuthOrder = a
 *             self.c_poly2d.coeffs.resize((self.azimuthOrder+1)*(self.rangeOrder+1))
 *             self.coeffs = nc             # <<<<<<<<<<<<<<
 *     @property
 *     def rangeOrder(self):
 */

#line 46 "pyPoly2d.pyx"
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_coeffs, __pyx_v_nc) < 0) __PYX_ERR(11, 46, __pyx_L1_error)

#line 46 "pyPoly2d.pyx"
  }

  /* "pyPoly2d.pyx":34
 *         return self.c_poly2d.azimuthOrder
 *     @azimuthOrder.setter
 *     def azimuthOrder(self, int a):             # <<<<<<<<<<<<<<
 *         if (a < 0):
 *             return
 */

#line 34 "pyPoly2d.pyx"


#line 34 "pyPoly2d.pyx"
  /* function exit code */

#line 34 "pyPoly2d.pyx"
  __pyx_r = 0;

#line 34 "pyPoly2d.pyx"
  goto __pyx_L0;

#line 34 "pyPoly2d.pyx"
  __pyx_L1_error:;

#line 34 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 34 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 34 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 34 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.azimuthOrder.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 34 "pyPoly2d.pyx"
  __pyx_r = -1;

#line 34 "pyPoly2d.pyx"
  __pyx_L0:;

#line 34 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_v_c);

#line 34 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 34 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_v_nc);

#line 34 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 34 "pyPoly2d.pyx"
  return __pyx_r;

#line 34 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":48
 *             self.coeffs = nc
 *     @property
 *     def rangeOrder(self):             # <<<<<<<<<<<<<<
 *         return self.c_poly2d.rangeOrder
 *     @rangeOrder.setter
 */

#line 48 "pyPoly2d.pyx"


#line 48 "pyPoly2d.pyx"
/* Python wrapper */

#line 48 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_10rangeOrder_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 48 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_10rangeOrder_1__get__(PyObject *__pyx_v_self) {

#line 48 "pyPoly2d.pyx"
  PyObject *__pyx_r = 0;

#line 48 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 48 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 48 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_10rangeOrder___get__(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self));

#line 48 "pyPoly2d.pyx"


#line 48 "pyPoly2d.pyx"
  /* function exit code */

#line 48 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 48 "pyPoly2d.pyx"
  return __pyx_r;

#line 48 "pyPoly2d.pyx"
}

#line 48 "pyPoly2d.pyx"


#line 48 "pyPoly2d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_10rangeOrder___get__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self) {

#line 48 "pyPoly2d.pyx"
  PyObject *__pyx_r = NULL;

#line 48 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 48 "pyPoly2d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 48 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPoly2d.pyx":49
 *     @property
 *     def rangeOrder(self):
 *         return self.c_poly2d.rangeOrder             # <<<<<<<<<<<<<<
 *     @rangeOrder.setter
 *     def rangeOrder(self, int a):
 */

#line 49 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 49 "pyPoly2d.pyx"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c_poly2d->rangeOrder); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 49, __pyx_L1_error)

#line 49 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 49 "pyPoly2d.pyx"
  __pyx_r = __pyx_t_1;

#line 49 "pyPoly2d.pyx"
  __pyx_t_1 = 0;

#line 49 "pyPoly2d.pyx"
  goto __pyx_L0;

  /* "pyPoly2d.pyx":48
 *             self.coeffs = nc
 *     @property
 *     def rangeOrder(self):             # <<<<<<<<<<<<<<
 *         return self.c_poly2d.rangeOrder
 *     @rangeOrder.setter
 */

#line 48 "pyPoly2d.pyx"


#line 48 "pyPoly2d.pyx"
  /* function exit code */

#line 48 "pyPoly2d.pyx"
  __pyx_L1_error:;

#line 48 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 48 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.rangeOrder.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 48 "pyPoly2d.pyx"
  __pyx_r = NULL;

#line 48 "pyPoly2d.pyx"
  __pyx_L0:;

#line 48 "pyPoly2d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 48 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 48 "pyPoly2d.pyx"
  return __pyx_r;

#line 48 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":51
 *         return self.c_poly2d.rangeOrder
 *     @rangeOrder.setter
 *     def rangeOrder(self, int a):             # <<<<<<<<<<<<<<
 *         if (a < 0):
 *             return
 */

#line 51 "pyPoly2d.pyx"


#line 51 "pyPoly2d.pyx"
/* Python wrapper */

#line 51 "pyPoly2d.pyx"
static int __pyx_pw_8iscecore_8pyPoly2d_10rangeOrder_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 51 "pyPoly2d.pyx"
static int __pyx_pw_8iscecore_8pyPoly2d_10rangeOrder_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  int __pyx_v_a
#line 51 "pyPoly2d.pyx"
;

#line 51 "pyPoly2d.pyx"
  int __pyx_r;

#line 51 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 51 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);

#line 51 "pyPoly2d.pyx"
  assert(__pyx_arg_a); {

#line 51 "pyPoly2d.pyx"
    __pyx_v_a = __Pyx_PyInt_As_int(__pyx_arg_a); if (unlikely((__pyx_v_a == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 51, __pyx_L3_error)

#line 51 "pyPoly2d.pyx"
  }

#line 51 "pyPoly2d.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 51 "pyPoly2d.pyx"
  __pyx_L3_error:;

#line 51 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.rangeOrder.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 51 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 51 "pyPoly2d.pyx"
  return -1;

#line 51 "pyPoly2d.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 51 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_10rangeOrder_2__set__(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self), ((int)__pyx_v_a));

#line 51 "pyPoly2d.pyx"


#line 51 "pyPoly2d.pyx"
  /* function exit code */

#line 51 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 51 "pyPoly2d.pyx"
  return __pyx_r;

#line 51 "pyPoly2d.pyx"
}

#line 51 "pyPoly2d.pyx"


#line 51 "pyPoly2d.pyx"
static int __pyx_pf_8iscecore_8pyPoly2d_10rangeOrder_2__set__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, int __pyx_v_a) {
  PyObject *__pyx_v_c = NULL
#line 51 "pyPoly2d.pyx"
;
  PyObject *__pyx_v_nc = NULL
#line 51 "pyPoly2d.pyx"
;
  PyObject *__pyx_v_i = NULL
#line 51 "pyPoly2d.pyx"
;
  PyObject *__pyx_v_ncs = NULL
#line 51 "pyPoly2d.pyx"
;
  PyObject *__pyx_v_j = NULL
#line 51 "pyPoly2d.pyx"
;

#line 51 "pyPoly2d.pyx"
  int __pyx_r;

#line 51 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 51 "pyPoly2d.pyx"
  int __pyx_t_1;

#line 51 "pyPoly2d.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 51 "pyPoly2d.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 51 "pyPoly2d.pyx"
  Py_ssize_t __pyx_t_4;

#line 51 "pyPoly2d.pyx"
  PyObject *(*__pyx_t_5)(PyObject *);

#line 51 "pyPoly2d.pyx"
  PyObject *__pyx_t_6 = NULL;

#line 51 "pyPoly2d.pyx"
  Py_ssize_t __pyx_t_7;

#line 51 "pyPoly2d.pyx"
  PyObject *(*__pyx_t_8)(PyObject *);

#line 51 "pyPoly2d.pyx"
  PyObject *__pyx_t_9 = NULL;

#line 51 "pyPoly2d.pyx"
  int __pyx_t_10;

#line 51 "pyPoly2d.pyx"
  std::vector<double> ::size_type __pyx_t_11;

#line 51 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPoly2d.pyx":52
 *     @rangeOrder.setter
 *     def rangeOrder(self, int a):
 *         if (a < 0):             # <<<<<<<<<<<<<<
 *             return
 *         else:
 */

#line 52 "pyPoly2d.pyx"
  __pyx_t_1 = ((__pyx_v_a < 0) != 0);

#line 52 "pyPoly2d.pyx"
  if (__pyx_t_1) {

    /* "pyPoly2d.pyx":53
 *     def rangeOrder(self, int a):
 *         if (a < 0):
 *             return             # <<<<<<<<<<<<<<
 *         else:
 *             c = self.coeffs
 */

#line 53 "pyPoly2d.pyx"
    __pyx_r = 0;

#line 53 "pyPoly2d.pyx"
    goto __pyx_L0;

    /* "pyPoly2d.pyx":52
 *     @rangeOrder.setter
 *     def rangeOrder(self, int a):
 *         if (a < 0):             # <<<<<<<<<<<<<<
 *             return
 *         else:
 */

#line 52 "pyPoly2d.pyx"
  }

  /* "pyPoly2d.pyx":55
 *             return
 *         else:
 *             c = self.coeffs             # <<<<<<<<<<<<<<
 *             nc = []
 *             # Cleanest is to first form 2D array of coeffs from 1D
 */

#line 55 "pyPoly2d.pyx"
  /*else*/ {

#line 55 "pyPoly2d.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_coeffs); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 55, __pyx_L1_error)

#line 55 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 55 "pyPoly2d.pyx"
    __pyx_v_c = __pyx_t_2;

#line 55 "pyPoly2d.pyx"
    __pyx_t_2 = 0;

    /* "pyPoly2d.pyx":56
 *         else:
 *             c = self.coeffs
 *             nc = []             # <<<<<<<<<<<<<<
 *             # Cleanest is to first form 2D array of coeffs from 1D
 *             for i in range(self.azimuthOrder+1):
 */

#line 56 "pyPoly2d.pyx"
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 56, __pyx_L1_error)

#line 56 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 56 "pyPoly2d.pyx"
    __pyx_v_nc = ((PyObject*)__pyx_t_2);

#line 56 "pyPoly2d.pyx"
    __pyx_t_2 = 0;

    /* "pyPoly2d.pyx":58
 *             nc = []
 *             # Cleanest is to first form 2D array of coeffs from 1D
 *             for i in range(self.azimuthOrder+1):             # <<<<<<<<<<<<<<
 *                 ncs = []
 *                 for j in range(self.rangeOrder+1):
 */

#line 58 "pyPoly2d.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_azimuthOrder); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 58, __pyx_L1_error)

#line 58 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 58 "pyPoly2d.pyx"
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 58, __pyx_L1_error)

#line 58 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 58 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 58 "pyPoly2d.pyx"
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 58, __pyx_L1_error)

#line 58 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 58 "pyPoly2d.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 58 "pyPoly2d.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);

#line 58 "pyPoly2d.pyx"
    __pyx_t_3 = 0;

#line 58 "pyPoly2d.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 58, __pyx_L1_error)

#line 58 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 58 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 58 "pyPoly2d.pyx"
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {

#line 58 "pyPoly2d.pyx"
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;

#line 58 "pyPoly2d.pyx"
      __pyx_t_5 = NULL;

#line 58 "pyPoly2d.pyx"
    } else {
      __pyx_t_4 = -1; 
#line 58 "pyPoly2d.pyx"
__pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 58, __pyx_L1_error)

#line 58 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 58 "pyPoly2d.pyx"
      __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 58, __pyx_L1_error)

#line 58 "pyPoly2d.pyx"
    }

#line 58 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 58 "pyPoly2d.pyx"
    for (;;) {

#line 58 "pyPoly2d.pyx"
      if (likely(!__pyx_t_5)) {

#line 58 "pyPoly2d.pyx"
        if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 58 "pyPoly2d.pyx"
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 58 "pyPoly2d.pyx"
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 58 "pyPoly2d.pyx"
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 58, __pyx_L1_error)

#line 58 "pyPoly2d.pyx"
          #else

#line 58 "pyPoly2d.pyx"
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 58, __pyx_L1_error)

#line 58 "pyPoly2d.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 58 "pyPoly2d.pyx"
          #endif

#line 58 "pyPoly2d.pyx"
        } else {

#line 58 "pyPoly2d.pyx"
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 58 "pyPoly2d.pyx"
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 58 "pyPoly2d.pyx"
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 58, __pyx_L1_error)

#line 58 "pyPoly2d.pyx"
          #else

#line 58 "pyPoly2d.pyx"
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 58, __pyx_L1_error)

#line 58 "pyPoly2d.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 58 "pyPoly2d.pyx"
          #endif

#line 58 "pyPoly2d.pyx"
        }
      } else 
#line 58 "pyPoly2d.pyx"
{

#line 58 "pyPoly2d.pyx"
        __pyx_t_3 = __pyx_t_5(__pyx_t_2);

#line 58 "pyPoly2d.pyx"
        if (unlikely(!__pyx_t_3)) {

#line 58 "pyPoly2d.pyx"
          PyObject* exc_type = PyErr_Occurred();

#line 58 "pyPoly2d.pyx"
          if (exc_type) {

#line 58 "pyPoly2d.pyx"
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 58 "pyPoly2d.pyx"
            else __PYX_ERR(11, 58, __pyx_L1_error)

#line 58 "pyPoly2d.pyx"
          }

#line 58 "pyPoly2d.pyx"
          break;

#line 58 "pyPoly2d.pyx"
        }

#line 58 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 58 "pyPoly2d.pyx"
      }

#line 58 "pyPoly2d.pyx"
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);

#line 58 "pyPoly2d.pyx"
      __pyx_t_3 = 0;

      /* "pyPoly2d.pyx":59
 *             # Cleanest is to first form 2D array of coeffs from 1D
 *             for i in range(self.azimuthOrder+1):
 *                 ncs = []             # <<<<<<<<<<<<<<
 *                 for j in range(self.rangeOrder+1):
 *                     ncs.append(c[i*(self.rangeOrder+1)+j])
 */

#line 59 "pyPoly2d.pyx"
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 59, __pyx_L1_error)

#line 59 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 59 "pyPoly2d.pyx"
      __Pyx_XDECREF_SET(__pyx_v_ncs, ((PyObject*)__pyx_t_3));

#line 59 "pyPoly2d.pyx"
      __pyx_t_3 = 0;

      /* "pyPoly2d.pyx":60
 *             for i in range(self.azimuthOrder+1):
 *                 ncs = []
 *                 for j in range(self.rangeOrder+1):             # <<<<<<<<<<<<<<
 *                     ncs.append(c[i*(self.rangeOrder+1)+j])
 *                 nc.append(ncs)
 */

#line 60 "pyPoly2d.pyx"
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rangeOrder); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 60, __pyx_L1_error)

#line 60 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 60 "pyPoly2d.pyx"
      __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 60, __pyx_L1_error)

#line 60 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 60 "pyPoly2d.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 60 "pyPoly2d.pyx"
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 60, __pyx_L1_error)

#line 60 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 60 "pyPoly2d.pyx"
      __Pyx_GIVEREF(__pyx_t_6);

#line 60 "pyPoly2d.pyx"
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);

#line 60 "pyPoly2d.pyx"
      __pyx_t_6 = 0;

#line 60 "pyPoly2d.pyx"
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 60, __pyx_L1_error)

#line 60 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 60 "pyPoly2d.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 60 "pyPoly2d.pyx"
      if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {

#line 60 "pyPoly2d.pyx"
        __pyx_t_3 = __pyx_t_6; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;

#line 60 "pyPoly2d.pyx"
        __pyx_t_8 = NULL;

#line 60 "pyPoly2d.pyx"
      } else {
        __pyx_t_7 = -1; 
#line 60 "pyPoly2d.pyx"
__pyx_t_3 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 60, __pyx_L1_error)

#line 60 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 60 "pyPoly2d.pyx"
        __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(11, 60, __pyx_L1_error)

#line 60 "pyPoly2d.pyx"
      }

#line 60 "pyPoly2d.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 60 "pyPoly2d.pyx"
      for (;;) {

#line 60 "pyPoly2d.pyx"
        if (likely(!__pyx_t_8)) {

#line 60 "pyPoly2d.pyx"
          if (likely(PyList_CheckExact(__pyx_t_3))) {

#line 60 "pyPoly2d.pyx"
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 60 "pyPoly2d.pyx"
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 60 "pyPoly2d.pyx"
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(11, 60, __pyx_L1_error)

#line 60 "pyPoly2d.pyx"
            #else

#line 60 "pyPoly2d.pyx"
            __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 60, __pyx_L1_error)

#line 60 "pyPoly2d.pyx"
            __Pyx_GOTREF(__pyx_t_6);

#line 60 "pyPoly2d.pyx"
            #endif

#line 60 "pyPoly2d.pyx"
          } else {

#line 60 "pyPoly2d.pyx"
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 60 "pyPoly2d.pyx"
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 60 "pyPoly2d.pyx"
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(11, 60, __pyx_L1_error)

#line 60 "pyPoly2d.pyx"
            #else

#line 60 "pyPoly2d.pyx"
            __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 60, __pyx_L1_error)

#line 60 "pyPoly2d.pyx"
            __Pyx_GOTREF(__pyx_t_6);

#line 60 "pyPoly2d.pyx"
            #endif

#line 60 "pyPoly2d.pyx"
          }
        } else 
#line 60 "pyPoly2d.pyx"
{

#line 60 "pyPoly2d.pyx"
          __pyx_t_6 = __pyx_t_8(__pyx_t_3);

#line 60 "pyPoly2d.pyx"
          if (unlikely(!__pyx_t_6)) {

#line 60 "pyPoly2d.pyx"
            PyObject* exc_type = PyErr_Occurred();

#line 60 "pyPoly2d.pyx"
            if (exc_type) {

#line 60 "pyPoly2d.pyx"
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 60 "pyPoly2d.pyx"
              else __PYX_ERR(11, 60, __pyx_L1_error)

#line 60 "pyPoly2d.pyx"
            }

#line 60 "pyPoly2d.pyx"
            break;

#line 60 "pyPoly2d.pyx"
          }

#line 60 "pyPoly2d.pyx"
          __Pyx_GOTREF(__pyx_t_6);

#line 60 "pyPoly2d.pyx"
        }

#line 60 "pyPoly2d.pyx"
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_6);

#line 60 "pyPoly2d.pyx"
        __pyx_t_6 = 0;

        /* "pyPoly2d.pyx":61
 *                 ncs = []
 *                 for j in range(self.rangeOrder+1):
 *                     ncs.append(c[i*(self.rangeOrder+1)+j])             # <<<<<<<<<<<<<<
 *                 nc.append(ncs)
 *             # nc is now the 2D reshape of coeffs
 */

#line 61 "pyPoly2d.pyx"
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rangeOrder); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 61, __pyx_L1_error)

#line 61 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 61 "pyPoly2d.pyx"
        __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 61, __pyx_L1_error)

#line 61 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 61 "pyPoly2d.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 61 "pyPoly2d.pyx"
        __pyx_t_6 = PyNumber_Multiply(__pyx_v_i, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 61, __pyx_L1_error)

#line 61 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 61 "pyPoly2d.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 61 "pyPoly2d.pyx"
        __pyx_t_9 = PyNumber_Add(__pyx_t_6, __pyx_v_j); if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 61, __pyx_L1_error)

#line 61 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 61 "pyPoly2d.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 61 "pyPoly2d.pyx"
        __pyx_t_6 = PyObject_GetItem(__pyx_v_c, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 61, __pyx_L1_error)

#line 61 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 61 "pyPoly2d.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 61 "pyPoly2d.pyx"
        __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_ncs, __pyx_t_6); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(11, 61, __pyx_L1_error)

#line 61 "pyPoly2d.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "pyPoly2d.pyx":60
 *             for i in range(self.azimuthOrder+1):
 *                 ncs = []
 *                 for j in range(self.rangeOrder+1):             # <<<<<<<<<<<<<<
 *                     ncs.append(c[i*(self.rangeOrder+1)+j])
 *                 nc.append(ncs)
 */

#line 60 "pyPoly2d.pyx"
      }

#line 60 "pyPoly2d.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyPoly2d.pyx":62
 *                 for j in range(self.rangeOrder+1):
 *                     ncs.append(c[i*(self.rangeOrder+1)+j])
 *                 nc.append(ncs)             # <<<<<<<<<<<<<<
 *             # nc is now the 2D reshape of coeffs
 *             # Go row-by-row...
 */

#line 62 "pyPoly2d.pyx"
      __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_nc, __pyx_v_ncs); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(11, 62, __pyx_L1_error)

      /* "pyPoly2d.pyx":58
 *             nc = []
 *             # Cleanest is to first form 2D array of coeffs from 1D
 *             for i in range(self.azimuthOrder+1):             # <<<<<<<<<<<<<<
 *                 ncs = []
 *                 for j in range(self.rangeOrder+1):
 */

#line 58 "pyPoly2d.pyx"
    }

#line 58 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyPoly2d.pyx":65
 *             # nc is now the 2D reshape of coeffs
 *             # Go row-by-row...
 *             for i in range(self.azimuthOrder+1):             # <<<<<<<<<<<<<<
 *                 # Add 0s to each row (if a > self.rangeOrder)
 *                 for j in range(a-self.rangeOrder):
 */

#line 65 "pyPoly2d.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_azimuthOrder); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 65, __pyx_L1_error)

#line 65 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 65 "pyPoly2d.pyx"
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 65, __pyx_L1_error)

#line 65 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 65 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 65 "pyPoly2d.pyx"
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 65, __pyx_L1_error)

#line 65 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 65 "pyPoly2d.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 65 "pyPoly2d.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);

#line 65 "pyPoly2d.pyx"
    __pyx_t_3 = 0;

#line 65 "pyPoly2d.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 65, __pyx_L1_error)

#line 65 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 65 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 65 "pyPoly2d.pyx"
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {

#line 65 "pyPoly2d.pyx"
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;

#line 65 "pyPoly2d.pyx"
      __pyx_t_5 = NULL;

#line 65 "pyPoly2d.pyx"
    } else {
      __pyx_t_4 = -1; 
#line 65 "pyPoly2d.pyx"
__pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 65, __pyx_L1_error)

#line 65 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 65 "pyPoly2d.pyx"
      __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 65, __pyx_L1_error)

#line 65 "pyPoly2d.pyx"
    }

#line 65 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 65 "pyPoly2d.pyx"
    for (;;) {

#line 65 "pyPoly2d.pyx"
      if (likely(!__pyx_t_5)) {

#line 65 "pyPoly2d.pyx"
        if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 65 "pyPoly2d.pyx"
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 65 "pyPoly2d.pyx"
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 65 "pyPoly2d.pyx"
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 65, __pyx_L1_error)

#line 65 "pyPoly2d.pyx"
          #else

#line 65 "pyPoly2d.pyx"
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 65, __pyx_L1_error)

#line 65 "pyPoly2d.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 65 "pyPoly2d.pyx"
          #endif

#line 65 "pyPoly2d.pyx"
        } else {

#line 65 "pyPoly2d.pyx"
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 65 "pyPoly2d.pyx"
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 65 "pyPoly2d.pyx"
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 65, __pyx_L1_error)

#line 65 "pyPoly2d.pyx"
          #else

#line 65 "pyPoly2d.pyx"
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 65, __pyx_L1_error)

#line 65 "pyPoly2d.pyx"
          __Pyx_GOTREF(__pyx_t_3);

#line 65 "pyPoly2d.pyx"
          #endif

#line 65 "pyPoly2d.pyx"
        }
      } else 
#line 65 "pyPoly2d.pyx"
{

#line 65 "pyPoly2d.pyx"
        __pyx_t_3 = __pyx_t_5(__pyx_t_2);

#line 65 "pyPoly2d.pyx"
        if (unlikely(!__pyx_t_3)) {

#line 65 "pyPoly2d.pyx"
          PyObject* exc_type = PyErr_Occurred();

#line 65 "pyPoly2d.pyx"
          if (exc_type) {

#line 65 "pyPoly2d.pyx"
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 65 "pyPoly2d.pyx"
            else __PYX_ERR(11, 65, __pyx_L1_error)

#line 65 "pyPoly2d.pyx"
          }

#line 65 "pyPoly2d.pyx"
          break;

#line 65 "pyPoly2d.pyx"
        }

#line 65 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 65 "pyPoly2d.pyx"
      }

#line 65 "pyPoly2d.pyx"
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);

#line 65 "pyPoly2d.pyx"
      __pyx_t_3 = 0;

      /* "pyPoly2d.pyx":67
 *             for i in range(self.azimuthOrder+1):
 *                 # Add 0s to each row (if a > self.rangeOrder)
 *                 for j in range(a-self.rangeOrder):             # <<<<<<<<<<<<<<
 *                     nc[i].append(0.)
 *             self.c_poly2d.rangeOrder = a
 */

#line 67 "pyPoly2d.pyx"
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_a); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 67, __pyx_L1_error)

#line 67 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 67 "pyPoly2d.pyx"
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rangeOrder); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 67, __pyx_L1_error)

#line 67 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 67 "pyPoly2d.pyx"
      __pyx_t_9 = PyNumber_Subtract(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 67, __pyx_L1_error)

#line 67 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 67 "pyPoly2d.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 67 "pyPoly2d.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 67 "pyPoly2d.pyx"
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 67, __pyx_L1_error)

#line 67 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 67 "pyPoly2d.pyx"
      __Pyx_GIVEREF(__pyx_t_9);

#line 67 "pyPoly2d.pyx"
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_9);

#line 67 "pyPoly2d.pyx"
      __pyx_t_9 = 0;

#line 67 "pyPoly2d.pyx"
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_6, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 67, __pyx_L1_error)

#line 67 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 67 "pyPoly2d.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 67 "pyPoly2d.pyx"
      if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {

#line 67 "pyPoly2d.pyx"
        __pyx_t_6 = __pyx_t_9; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;

#line 67 "pyPoly2d.pyx"
        __pyx_t_8 = NULL;

#line 67 "pyPoly2d.pyx"
      } else {
        __pyx_t_7 = -1; 
#line 67 "pyPoly2d.pyx"
__pyx_t_6 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 67, __pyx_L1_error)

#line 67 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 67 "pyPoly2d.pyx"
        __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(11, 67, __pyx_L1_error)

#line 67 "pyPoly2d.pyx"
      }

#line 67 "pyPoly2d.pyx"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 67 "pyPoly2d.pyx"
      for (;;) {

#line 67 "pyPoly2d.pyx"
        if (likely(!__pyx_t_8)) {

#line 67 "pyPoly2d.pyx"
          if (likely(PyList_CheckExact(__pyx_t_6))) {

#line 67 "pyPoly2d.pyx"
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;

#line 67 "pyPoly2d.pyx"
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 67 "pyPoly2d.pyx"
            __pyx_t_9 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(11, 67, __pyx_L1_error)

#line 67 "pyPoly2d.pyx"
            #else

#line 67 "pyPoly2d.pyx"
            __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 67, __pyx_L1_error)

#line 67 "pyPoly2d.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 67 "pyPoly2d.pyx"
            #endif

#line 67 "pyPoly2d.pyx"
          } else {

#line 67 "pyPoly2d.pyx"
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;

#line 67 "pyPoly2d.pyx"
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 67 "pyPoly2d.pyx"
            __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(11, 67, __pyx_L1_error)

#line 67 "pyPoly2d.pyx"
            #else

#line 67 "pyPoly2d.pyx"
            __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 67, __pyx_L1_error)

#line 67 "pyPoly2d.pyx"
            __Pyx_GOTREF(__pyx_t_9);

#line 67 "pyPoly2d.pyx"
            #endif

#line 67 "pyPoly2d.pyx"
          }
        } else 
#line 67 "pyPoly2d.pyx"
{

#line 67 "pyPoly2d.pyx"
          __pyx_t_9 = __pyx_t_8(__pyx_t_6);

#line 67 "pyPoly2d.pyx"
          if (unlikely(!__pyx_t_9)) {

#line 67 "pyPoly2d.pyx"
            PyObject* exc_type = PyErr_Occurred();

#line 67 "pyPoly2d.pyx"
            if (exc_type) {

#line 67 "pyPoly2d.pyx"
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 67 "pyPoly2d.pyx"
              else __PYX_ERR(11, 67, __pyx_L1_error)

#line 67 "pyPoly2d.pyx"
            }

#line 67 "pyPoly2d.pyx"
            break;

#line 67 "pyPoly2d.pyx"
          }

#line 67 "pyPoly2d.pyx"
          __Pyx_GOTREF(__pyx_t_9);

#line 67 "pyPoly2d.pyx"
        }

#line 67 "pyPoly2d.pyx"
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_9);

#line 67 "pyPoly2d.pyx"
        __pyx_t_9 = 0;

        /* "pyPoly2d.pyx":68
 *                 # Add 0s to each row (if a > self.rangeOrder)
 *                 for j in range(a-self.rangeOrder):
 *                     nc[i].append(0.)             # <<<<<<<<<<<<<<
 *             self.c_poly2d.rangeOrder = a
 *             self.c_poly2d.coeffs.resize((self.azimuthOrder+1)*(self.rangeOrder+1))
 */

#line 68 "pyPoly2d.pyx"
        __pyx_t_9 = PyObject_GetItem(__pyx_v_nc, __pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 68, __pyx_L1_error)

#line 68 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 68 "pyPoly2d.pyx"
        __pyx_t_10 = __Pyx_PyObject_Append(__pyx_t_9, __pyx_float_0_); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(11, 68, __pyx_L1_error)

#line 68 "pyPoly2d.pyx"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "pyPoly2d.pyx":67
 *             for i in range(self.azimuthOrder+1):
 *                 # Add 0s to each row (if a > self.rangeOrder)
 *                 for j in range(a-self.rangeOrder):             # <<<<<<<<<<<<<<
 *                     nc[i].append(0.)
 *             self.c_poly2d.rangeOrder = a
 */

#line 67 "pyPoly2d.pyx"
      }

#line 67 "pyPoly2d.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "pyPoly2d.pyx":65
 *             # nc is now the 2D reshape of coeffs
 *             # Go row-by-row...
 *             for i in range(self.azimuthOrder+1):             # <<<<<<<<<<<<<<
 *                 # Add 0s to each row (if a > self.rangeOrder)
 *                 for j in range(a-self.rangeOrder):
 */

#line 65 "pyPoly2d.pyx"
    }

#line 65 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyPoly2d.pyx":69
 *                 for j in range(a-self.rangeOrder):
 *                     nc[i].append(0.)
 *             self.c_poly2d.rangeOrder = a             # <<<<<<<<<<<<<<
 *             self.c_poly2d.coeffs.resize((self.azimuthOrder+1)*(self.rangeOrder+1))
 *             c = []
 */

#line 69 "pyPoly2d.pyx"
    __pyx_v_self->c_poly2d->rangeOrder = __pyx_v_a;

    /* "pyPoly2d.pyx":70
 *                     nc[i].append(0.)
 *             self.c_poly2d.rangeOrder = a
 *             self.c_poly2d.coeffs.resize((self.azimuthOrder+1)*(self.rangeOrder+1))             # <<<<<<<<<<<<<<
 *             c = []
 *             for i in range(self.azimuthOrder+1):
 */

#line 70 "pyPoly2d.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_azimuthOrder); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 70, __pyx_L1_error)

#line 70 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 70 "pyPoly2d.pyx"
    __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 70, __pyx_L1_error)

#line 70 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 70 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 70 "pyPoly2d.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rangeOrder); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 70, __pyx_L1_error)

#line 70 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 70 "pyPoly2d.pyx"
    __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 70, __pyx_L1_error)

#line 70 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_9);

#line 70 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 70 "pyPoly2d.pyx"
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 70, __pyx_L1_error)

#line 70 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 70 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 70 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 70 "pyPoly2d.pyx"
    __pyx_t_11 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_11 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 70, __pyx_L1_error)

#line 70 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 70 "pyPoly2d.pyx"
    try {

#line 70 "pyPoly2d.pyx"
      __pyx_v_self->c_poly2d->coeffs.resize(__pyx_t_11);

#line 70 "pyPoly2d.pyx"
    } catch(...) {

#line 70 "pyPoly2d.pyx"
      __Pyx_CppExn2PyErr();

#line 70 "pyPoly2d.pyx"
      __PYX_ERR(11, 70, __pyx_L1_error)

#line 70 "pyPoly2d.pyx"
    }

    /* "pyPoly2d.pyx":71
 *             self.c_poly2d.rangeOrder = a
 *             self.c_poly2d.coeffs.resize((self.azimuthOrder+1)*(self.rangeOrder+1))
 *             c = []             # <<<<<<<<<<<<<<
 *             for i in range(self.azimuthOrder+1):
 *                 for j in range(self.rangeOrder+1):
 */

#line 71 "pyPoly2d.pyx"
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 71, __pyx_L1_error)

#line 71 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 71 "pyPoly2d.pyx"
    __Pyx_DECREF_SET(__pyx_v_c, __pyx_t_2);

#line 71 "pyPoly2d.pyx"
    __pyx_t_2 = 0;

    /* "pyPoly2d.pyx":72
 *             self.c_poly2d.coeffs.resize((self.azimuthOrder+1)*(self.rangeOrder+1))
 *             c = []
 *             for i in range(self.azimuthOrder+1):             # <<<<<<<<<<<<<<
 *                 for j in range(self.rangeOrder+1):
 *                     c.append(nc[i][j])
 */

#line 72 "pyPoly2d.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_azimuthOrder); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 72, __pyx_L1_error)

#line 72 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 72 "pyPoly2d.pyx"
    __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 72, __pyx_L1_error)

#line 72 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_9);

#line 72 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 72 "pyPoly2d.pyx"
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 72, __pyx_L1_error)

#line 72 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 72 "pyPoly2d.pyx"
    __Pyx_GIVEREF(__pyx_t_9);

#line 72 "pyPoly2d.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_9);

#line 72 "pyPoly2d.pyx"
    __pyx_t_9 = 0;

#line 72 "pyPoly2d.pyx"
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 72, __pyx_L1_error)

#line 72 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_9);

#line 72 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 72 "pyPoly2d.pyx"
    if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {

#line 72 "pyPoly2d.pyx"
      __pyx_t_2 = __pyx_t_9; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;

#line 72 "pyPoly2d.pyx"
      __pyx_t_5 = NULL;

#line 72 "pyPoly2d.pyx"
    } else {
      __pyx_t_4 = -1; 
#line 72 "pyPoly2d.pyx"
__pyx_t_2 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 72, __pyx_L1_error)

#line 72 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 72 "pyPoly2d.pyx"
      __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 72, __pyx_L1_error)

#line 72 "pyPoly2d.pyx"
    }

#line 72 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 72 "pyPoly2d.pyx"
    for (;;) {

#line 72 "pyPoly2d.pyx"
      if (likely(!__pyx_t_5)) {

#line 72 "pyPoly2d.pyx"
        if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 72 "pyPoly2d.pyx"
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 72 "pyPoly2d.pyx"
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 72 "pyPoly2d.pyx"
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_9); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 72, __pyx_L1_error)

#line 72 "pyPoly2d.pyx"
          #else

#line 72 "pyPoly2d.pyx"
          __pyx_t_9 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 72, __pyx_L1_error)

#line 72 "pyPoly2d.pyx"
          __Pyx_GOTREF(__pyx_t_9);

#line 72 "pyPoly2d.pyx"
          #endif

#line 72 "pyPoly2d.pyx"
        } else {

#line 72 "pyPoly2d.pyx"
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 72 "pyPoly2d.pyx"
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 72 "pyPoly2d.pyx"
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_9); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 72, __pyx_L1_error)

#line 72 "pyPoly2d.pyx"
          #else

#line 72 "pyPoly2d.pyx"
          __pyx_t_9 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 72, __pyx_L1_error)

#line 72 "pyPoly2d.pyx"
          __Pyx_GOTREF(__pyx_t_9);

#line 72 "pyPoly2d.pyx"
          #endif

#line 72 "pyPoly2d.pyx"
        }
      } else 
#line 72 "pyPoly2d.pyx"
{

#line 72 "pyPoly2d.pyx"
        __pyx_t_9 = __pyx_t_5(__pyx_t_2);

#line 72 "pyPoly2d.pyx"
        if (unlikely(!__pyx_t_9)) {

#line 72 "pyPoly2d.pyx"
          PyObject* exc_type = PyErr_Occurred();

#line 72 "pyPoly2d.pyx"
          if (exc_type) {

#line 72 "pyPoly2d.pyx"
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 72 "pyPoly2d.pyx"
            else __PYX_ERR(11, 72, __pyx_L1_error)

#line 72 "pyPoly2d.pyx"
          }

#line 72 "pyPoly2d.pyx"
          break;

#line 72 "pyPoly2d.pyx"
        }

#line 72 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 72 "pyPoly2d.pyx"
      }

#line 72 "pyPoly2d.pyx"
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_9);

#line 72 "pyPoly2d.pyx"
      __pyx_t_9 = 0;

      /* "pyPoly2d.pyx":73
 *             c = []
 *             for i in range(self.azimuthOrder+1):
 *                 for j in range(self.rangeOrder+1):             # <<<<<<<<<<<<<<
 *                     c.append(nc[i][j])
 *             self.coeffs = c
 */

#line 73 "pyPoly2d.pyx"
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rangeOrder); if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 73, __pyx_L1_error)

#line 73 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 73 "pyPoly2d.pyx"
      __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_9, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 73, __pyx_L1_error)

#line 73 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 73 "pyPoly2d.pyx"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 73 "pyPoly2d.pyx"
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 73, __pyx_L1_error)

#line 73 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 73 "pyPoly2d.pyx"
      __Pyx_GIVEREF(__pyx_t_6);

#line 73 "pyPoly2d.pyx"
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6);

#line 73 "pyPoly2d.pyx"
      __pyx_t_6 = 0;

#line 73 "pyPoly2d.pyx"
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_9, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 73, __pyx_L1_error)

#line 73 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 73 "pyPoly2d.pyx"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 73 "pyPoly2d.pyx"
      if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {

#line 73 "pyPoly2d.pyx"
        __pyx_t_9 = __pyx_t_6; __Pyx_INCREF(__pyx_t_9); __pyx_t_7 = 0;

#line 73 "pyPoly2d.pyx"
        __pyx_t_8 = NULL;

#line 73 "pyPoly2d.pyx"
      } else {
        __pyx_t_7 = -1; 
#line 73 "pyPoly2d.pyx"
__pyx_t_9 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(11, 73, __pyx_L1_error)

#line 73 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_9);

#line 73 "pyPoly2d.pyx"
        __pyx_t_8 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(11, 73, __pyx_L1_error)

#line 73 "pyPoly2d.pyx"
      }

#line 73 "pyPoly2d.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 73 "pyPoly2d.pyx"
      for (;;) {

#line 73 "pyPoly2d.pyx"
        if (likely(!__pyx_t_8)) {

#line 73 "pyPoly2d.pyx"
          if (likely(PyList_CheckExact(__pyx_t_9))) {

#line 73 "pyPoly2d.pyx"
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_9)) break;

#line 73 "pyPoly2d.pyx"
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 73 "pyPoly2d.pyx"
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(11, 73, __pyx_L1_error)

#line 73 "pyPoly2d.pyx"
            #else

#line 73 "pyPoly2d.pyx"
            __pyx_t_6 = PySequence_ITEM(__pyx_t_9, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 73, __pyx_L1_error)

#line 73 "pyPoly2d.pyx"
            __Pyx_GOTREF(__pyx_t_6);

#line 73 "pyPoly2d.pyx"
            #endif

#line 73 "pyPoly2d.pyx"
          } else {

#line 73 "pyPoly2d.pyx"
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_9)) break;

#line 73 "pyPoly2d.pyx"
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 73 "pyPoly2d.pyx"
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(11, 73, __pyx_L1_error)

#line 73 "pyPoly2d.pyx"
            #else

#line 73 "pyPoly2d.pyx"
            __pyx_t_6 = PySequence_ITEM(__pyx_t_9, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 73, __pyx_L1_error)

#line 73 "pyPoly2d.pyx"
            __Pyx_GOTREF(__pyx_t_6);

#line 73 "pyPoly2d.pyx"
            #endif

#line 73 "pyPoly2d.pyx"
          }
        } else 
#line 73 "pyPoly2d.pyx"
{

#line 73 "pyPoly2d.pyx"
          __pyx_t_6 = __pyx_t_8(__pyx_t_9);

#line 73 "pyPoly2d.pyx"
          if (unlikely(!__pyx_t_6)) {

#line 73 "pyPoly2d.pyx"
            PyObject* exc_type = PyErr_Occurred();

#line 73 "pyPoly2d.pyx"
            if (exc_type) {

#line 73 "pyPoly2d.pyx"
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 73 "pyPoly2d.pyx"
              else __PYX_ERR(11, 73, __pyx_L1_error)

#line 73 "pyPoly2d.pyx"
            }

#line 73 "pyPoly2d.pyx"
            break;

#line 73 "pyPoly2d.pyx"
          }

#line 73 "pyPoly2d.pyx"
          __Pyx_GOTREF(__pyx_t_6);

#line 73 "pyPoly2d.pyx"
        }

#line 73 "pyPoly2d.pyx"
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_6);

#line 73 "pyPoly2d.pyx"
        __pyx_t_6 = 0;

        /* "pyPoly2d.pyx":74
 *             for i in range(self.azimuthOrder+1):
 *                 for j in range(self.rangeOrder+1):
 *                     c.append(nc[i][j])             # <<<<<<<<<<<<<<
 *             self.coeffs = c
 *     @property
 */

#line 74 "pyPoly2d.pyx"
        __pyx_t_6 = PyObject_GetItem(__pyx_v_nc, __pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 74, __pyx_L1_error)

#line 74 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 74 "pyPoly2d.pyx"
        __pyx_t_3 = PyObject_GetItem(__pyx_t_6, __pyx_v_j); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 74, __pyx_L1_error)

#line 74 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 74 "pyPoly2d.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 74 "pyPoly2d.pyx"
        __pyx_t_10 = __Pyx_PyObject_Append(__pyx_v_c, __pyx_t_3); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(11, 74, __pyx_L1_error)

#line 74 "pyPoly2d.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "pyPoly2d.pyx":73
 *             c = []
 *             for i in range(self.azimuthOrder+1):
 *                 for j in range(self.rangeOrder+1):             # <<<<<<<<<<<<<<
 *                     c.append(nc[i][j])
 *             self.coeffs = c
 */

#line 73 "pyPoly2d.pyx"
      }

#line 73 "pyPoly2d.pyx"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "pyPoly2d.pyx":72
 *             self.c_poly2d.coeffs.resize((self.azimuthOrder+1)*(self.rangeOrder+1))
 *             c = []
 *             for i in range(self.azimuthOrder+1):             # <<<<<<<<<<<<<<
 *                 for j in range(self.rangeOrder+1):
 *                     c.append(nc[i][j])
 */

#line 72 "pyPoly2d.pyx"
    }

#line 72 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyPoly2d.pyx":75
 *                 for j in range(self.rangeOrder+1):
 *                     c.append(nc[i][j])
 *             self.coeffs = c             # <<<<<<<<<<<<<<
 *     @property
 *     def azimuthMean(self):
 */

#line 75 "pyPoly2d.pyx"
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_coeffs, __pyx_v_c) < 0) __PYX_ERR(11, 75, __pyx_L1_error)

#line 75 "pyPoly2d.pyx"
  }

  /* "pyPoly2d.pyx":51
 *         return self.c_poly2d.rangeOrder
 *     @rangeOrder.setter
 *     def rangeOrder(self, int a):             # <<<<<<<<<<<<<<
 *         if (a < 0):
 *             return
 */

#line 51 "pyPoly2d.pyx"


#line 51 "pyPoly2d.pyx"
  /* function exit code */

#line 51 "pyPoly2d.pyx"
  __pyx_r = 0;

#line 51 "pyPoly2d.pyx"
  goto __pyx_L0;

#line 51 "pyPoly2d.pyx"
  __pyx_L1_error:;

#line 51 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 51 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 51 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 51 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 51 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.rangeOrder.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 51 "pyPoly2d.pyx"
  __pyx_r = -1;

#line 51 "pyPoly2d.pyx"
  __pyx_L0:;

#line 51 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_v_c);

#line 51 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_v_nc);

#line 51 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 51 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_v_ncs);

#line 51 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_v_j);

#line 51 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 51 "pyPoly2d.pyx"
  return __pyx_r;

#line 51 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":77
 *             self.coeffs = c
 *     @property
 *     def azimuthMean(self):             # <<<<<<<<<<<<<<
 *         return self.c_poly2d.azimuthMean
 *     @azimuthMean.setter
 */

#line 77 "pyPoly2d.pyx"


#line 77 "pyPoly2d.pyx"
/* Python wrapper */

#line 77 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_11azimuthMean_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 77 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_11azimuthMean_1__get__(PyObject *__pyx_v_self) {

#line 77 "pyPoly2d.pyx"
  PyObject *__pyx_r = 0;

#line 77 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 77 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 77 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_11azimuthMean___get__(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self));

#line 77 "pyPoly2d.pyx"


#line 77 "pyPoly2d.pyx"
  /* function exit code */

#line 77 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 77 "pyPoly2d.pyx"
  return __pyx_r;

#line 77 "pyPoly2d.pyx"
}

#line 77 "pyPoly2d.pyx"


#line 77 "pyPoly2d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_11azimuthMean___get__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self) {

#line 77 "pyPoly2d.pyx"
  PyObject *__pyx_r = NULL;

#line 77 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 77 "pyPoly2d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 77 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPoly2d.pyx":78
 *     @property
 *     def azimuthMean(self):
 *         return self.c_poly2d.azimuthMean             # <<<<<<<<<<<<<<
 *     @azimuthMean.setter
 *     def azimuthMean(self, double a):
 */

#line 78 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 78 "pyPoly2d.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_poly2d->azimuthMean); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 78, __pyx_L1_error)

#line 78 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 78 "pyPoly2d.pyx"
  __pyx_r = __pyx_t_1;

#line 78 "pyPoly2d.pyx"
  __pyx_t_1 = 0;

#line 78 "pyPoly2d.pyx"
  goto __pyx_L0;

  /* "pyPoly2d.pyx":77
 *             self.coeffs = c
 *     @property
 *     def azimuthMean(self):             # <<<<<<<<<<<<<<
 *         return self.c_poly2d.azimuthMean
 *     @azimuthMean.setter
 */

#line 77 "pyPoly2d.pyx"


#line 77 "pyPoly2d.pyx"
  /* function exit code */

#line 77 "pyPoly2d.pyx"
  __pyx_L1_error:;

#line 77 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 77 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.azimuthMean.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 77 "pyPoly2d.pyx"
  __pyx_r = NULL;

#line 77 "pyPoly2d.pyx"
  __pyx_L0:;

#line 77 "pyPoly2d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 77 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 77 "pyPoly2d.pyx"
  return __pyx_r;

#line 77 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":80
 *         return self.c_poly2d.azimuthMean
 *     @azimuthMean.setter
 *     def azimuthMean(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_poly2d.azimuthMean = a
 *     @property
 */

#line 80 "pyPoly2d.pyx"


#line 80 "pyPoly2d.pyx"
/* Python wrapper */

#line 80 "pyPoly2d.pyx"
static int __pyx_pw_8iscecore_8pyPoly2d_11azimuthMean_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 80 "pyPoly2d.pyx"
static int __pyx_pw_8iscecore_8pyPoly2d_11azimuthMean_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a
#line 80 "pyPoly2d.pyx"
;

#line 80 "pyPoly2d.pyx"
  int __pyx_r;

#line 80 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 80 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);

#line 80 "pyPoly2d.pyx"
  assert(__pyx_arg_a); {

#line 80 "pyPoly2d.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 80, __pyx_L3_error)

#line 80 "pyPoly2d.pyx"
  }

#line 80 "pyPoly2d.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 80 "pyPoly2d.pyx"
  __pyx_L3_error:;

#line 80 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.azimuthMean.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 80 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 80 "pyPoly2d.pyx"
  return -1;

#line 80 "pyPoly2d.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 80 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_11azimuthMean_2__set__(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self), ((double)__pyx_v_a));

#line 80 "pyPoly2d.pyx"


#line 80 "pyPoly2d.pyx"
  /* function exit code */

#line 80 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 80 "pyPoly2d.pyx"
  return __pyx_r;

#line 80 "pyPoly2d.pyx"
}

#line 80 "pyPoly2d.pyx"


#line 80 "pyPoly2d.pyx"
static int __pyx_pf_8iscecore_8pyPoly2d_11azimuthMean_2__set__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, double __pyx_v_a) {

#line 80 "pyPoly2d.pyx"
  int __pyx_r;

#line 80 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 80 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPoly2d.pyx":81
 *     @azimuthMean.setter
 *     def azimuthMean(self, double a):
 *         self.c_poly2d.azimuthMean = a             # <<<<<<<<<<<<<<
 *     @property
 *     def rangeMean(self):
 */

#line 81 "pyPoly2d.pyx"
  __pyx_v_self->c_poly2d->azimuthMean = __pyx_v_a;

  /* "pyPoly2d.pyx":80
 *         return self.c_poly2d.azimuthMean
 *     @azimuthMean.setter
 *     def azimuthMean(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_poly2d.azimuthMean = a
 *     @property
 */

#line 80 "pyPoly2d.pyx"


#line 80 "pyPoly2d.pyx"
  /* function exit code */

#line 80 "pyPoly2d.pyx"
  __pyx_r = 0;

#line 80 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 80 "pyPoly2d.pyx"
  return __pyx_r;

#line 80 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":83
 *         self.c_poly2d.azimuthMean = a
 *     @property
 *     def rangeMean(self):             # <<<<<<<<<<<<<<
 *         return self.c_poly2d.rangeMean
 *     @rangeMean.setter
 */

#line 83 "pyPoly2d.pyx"


#line 83 "pyPoly2d.pyx"
/* Python wrapper */

#line 83 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_9rangeMean_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 83 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_9rangeMean_1__get__(PyObject *__pyx_v_self) {

#line 83 "pyPoly2d.pyx"
  PyObject *__pyx_r = 0;

#line 83 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 83 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 83 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_9rangeMean___get__(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self));

#line 83 "pyPoly2d.pyx"


#line 83 "pyPoly2d.pyx"
  /* function exit code */

#line 83 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 83 "pyPoly2d.pyx"
  return __pyx_r;

#line 83 "pyPoly2d.pyx"
}

#line 83 "pyPoly2d.pyx"


#line 83 "pyPoly2d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_9rangeMean___get__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self) {

#line 83 "pyPoly2d.pyx"
  PyObject *__pyx_r = NULL;

#line 83 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 83 "pyPoly2d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 83 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPoly2d.pyx":84
 *     @property
 *     def rangeMean(self):
 *         return self.c_poly2d.rangeMean             # <<<<<<<<<<<<<<
 *     @rangeMean.setter
 *     def rangeMean(self, double a):
 */

#line 84 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 84 "pyPoly2d.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_poly2d->rangeMean); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 84, __pyx_L1_error)

#line 84 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 84 "pyPoly2d.pyx"
  __pyx_r = __pyx_t_1;

#line 84 "pyPoly2d.pyx"
  __pyx_t_1 = 0;

#line 84 "pyPoly2d.pyx"
  goto __pyx_L0;

  /* "pyPoly2d.pyx":83
 *         self.c_poly2d.azimuthMean = a
 *     @property
 *     def rangeMean(self):             # <<<<<<<<<<<<<<
 *         return self.c_poly2d.rangeMean
 *     @rangeMean.setter
 */

#line 83 "pyPoly2d.pyx"


#line 83 "pyPoly2d.pyx"
  /* function exit code */

#line 83 "pyPoly2d.pyx"
  __pyx_L1_error:;

#line 83 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 83 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.rangeMean.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 83 "pyPoly2d.pyx"
  __pyx_r = NULL;

#line 83 "pyPoly2d.pyx"
  __pyx_L0:;

#line 83 "pyPoly2d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 83 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 83 "pyPoly2d.pyx"
  return __pyx_r;

#line 83 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":86
 *         return self.c_poly2d.rangeMean
 *     @rangeMean.setter
 *     def rangeMean(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_poly2d.rangeMean = a
 *     @property
 */

#line 86 "pyPoly2d.pyx"


#line 86 "pyPoly2d.pyx"
/* Python wrapper */

#line 86 "pyPoly2d.pyx"
static int __pyx_pw_8iscecore_8pyPoly2d_9rangeMean_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 86 "pyPoly2d.pyx"
static int __pyx_pw_8iscecore_8pyPoly2d_9rangeMean_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a
#line 86 "pyPoly2d.pyx"
;

#line 86 "pyPoly2d.pyx"
  int __pyx_r;

#line 86 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 86 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);

#line 86 "pyPoly2d.pyx"
  assert(__pyx_arg_a); {

#line 86 "pyPoly2d.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 86, __pyx_L3_error)

#line 86 "pyPoly2d.pyx"
  }

#line 86 "pyPoly2d.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 86 "pyPoly2d.pyx"
  __pyx_L3_error:;

#line 86 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.rangeMean.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 86 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 86 "pyPoly2d.pyx"
  return -1;

#line 86 "pyPoly2d.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 86 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_9rangeMean_2__set__(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self), ((double)__pyx_v_a));

#line 86 "pyPoly2d.pyx"


#line 86 "pyPoly2d.pyx"
  /* function exit code */

#line 86 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 86 "pyPoly2d.pyx"
  return __pyx_r;

#line 86 "pyPoly2d.pyx"
}

#line 86 "pyPoly2d.pyx"


#line 86 "pyPoly2d.pyx"
static int __pyx_pf_8iscecore_8pyPoly2d_9rangeMean_2__set__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, double __pyx_v_a) {

#line 86 "pyPoly2d.pyx"
  int __pyx_r;

#line 86 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 86 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPoly2d.pyx":87
 *     @rangeMean.setter
 *     def rangeMean(self, double a):
 *         self.c_poly2d.rangeMean = a             # <<<<<<<<<<<<<<
 *     @property
 *     def azimuthNorm(self):
 */

#line 87 "pyPoly2d.pyx"
  __pyx_v_self->c_poly2d->rangeMean = __pyx_v_a;

  /* "pyPoly2d.pyx":86
 *         return self.c_poly2d.rangeMean
 *     @rangeMean.setter
 *     def rangeMean(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_poly2d.rangeMean = a
 *     @property
 */

#line 86 "pyPoly2d.pyx"


#line 86 "pyPoly2d.pyx"
  /* function exit code */

#line 86 "pyPoly2d.pyx"
  __pyx_r = 0;

#line 86 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 86 "pyPoly2d.pyx"
  return __pyx_r;

#line 86 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":89
 *         self.c_poly2d.rangeMean = a
 *     @property
 *     def azimuthNorm(self):             # <<<<<<<<<<<<<<
 *         return self.c_poly2d.azimuthNorm
 *     @azimuthNorm.setter
 */

#line 89 "pyPoly2d.pyx"


#line 89 "pyPoly2d.pyx"
/* Python wrapper */

#line 89 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_11azimuthNorm_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 89 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_11azimuthNorm_1__get__(PyObject *__pyx_v_self) {

#line 89 "pyPoly2d.pyx"
  PyObject *__pyx_r = 0;

#line 89 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 89 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 89 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_11azimuthNorm___get__(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self));

#line 89 "pyPoly2d.pyx"


#line 89 "pyPoly2d.pyx"
  /* function exit code */

#line 89 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 89 "pyPoly2d.pyx"
  return __pyx_r;

#line 89 "pyPoly2d.pyx"
}

#line 89 "pyPoly2d.pyx"


#line 89 "pyPoly2d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_11azimuthNorm___get__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self) {

#line 89 "pyPoly2d.pyx"
  PyObject *__pyx_r = NULL;

#line 89 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 89 "pyPoly2d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 89 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPoly2d.pyx":90
 *     @property
 *     def azimuthNorm(self):
 *         return self.c_poly2d.azimuthNorm             # <<<<<<<<<<<<<<
 *     @azimuthNorm.setter
 *     def azimuthNorm(self, double a):
 */

#line 90 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 90 "pyPoly2d.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_poly2d->azimuthNorm); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 90, __pyx_L1_error)

#line 90 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 90 "pyPoly2d.pyx"
  __pyx_r = __pyx_t_1;

#line 90 "pyPoly2d.pyx"
  __pyx_t_1 = 0;

#line 90 "pyPoly2d.pyx"
  goto __pyx_L0;

  /* "pyPoly2d.pyx":89
 *         self.c_poly2d.rangeMean = a
 *     @property
 *     def azimuthNorm(self):             # <<<<<<<<<<<<<<
 *         return self.c_poly2d.azimuthNorm
 *     @azimuthNorm.setter
 */

#line 89 "pyPoly2d.pyx"


#line 89 "pyPoly2d.pyx"
  /* function exit code */

#line 89 "pyPoly2d.pyx"
  __pyx_L1_error:;

#line 89 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 89 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.azimuthNorm.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 89 "pyPoly2d.pyx"
  __pyx_r = NULL;

#line 89 "pyPoly2d.pyx"
  __pyx_L0:;

#line 89 "pyPoly2d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 89 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 89 "pyPoly2d.pyx"
  return __pyx_r;

#line 89 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":92
 *         return self.c_poly2d.azimuthNorm
 *     @azimuthNorm.setter
 *     def azimuthNorm(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_poly2d.azimuthNorm = a
 *     @property
 */

#line 92 "pyPoly2d.pyx"


#line 92 "pyPoly2d.pyx"
/* Python wrapper */

#line 92 "pyPoly2d.pyx"
static int __pyx_pw_8iscecore_8pyPoly2d_11azimuthNorm_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 92 "pyPoly2d.pyx"
static int __pyx_pw_8iscecore_8pyPoly2d_11azimuthNorm_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a
#line 92 "pyPoly2d.pyx"
;

#line 92 "pyPoly2d.pyx"
  int __pyx_r;

#line 92 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 92 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);

#line 92 "pyPoly2d.pyx"
  assert(__pyx_arg_a); {

#line 92 "pyPoly2d.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 92, __pyx_L3_error)

#line 92 "pyPoly2d.pyx"
  }

#line 92 "pyPoly2d.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 92 "pyPoly2d.pyx"
  __pyx_L3_error:;

#line 92 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.azimuthNorm.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 92 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 92 "pyPoly2d.pyx"
  return -1;

#line 92 "pyPoly2d.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 92 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_11azimuthNorm_2__set__(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self), ((double)__pyx_v_a));

#line 92 "pyPoly2d.pyx"


#line 92 "pyPoly2d.pyx"
  /* function exit code */

#line 92 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 92 "pyPoly2d.pyx"
  return __pyx_r;

#line 92 "pyPoly2d.pyx"
}

#line 92 "pyPoly2d.pyx"


#line 92 "pyPoly2d.pyx"
static int __pyx_pf_8iscecore_8pyPoly2d_11azimuthNorm_2__set__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, double __pyx_v_a) {

#line 92 "pyPoly2d.pyx"
  int __pyx_r;

#line 92 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 92 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPoly2d.pyx":93
 *     @azimuthNorm.setter
 *     def azimuthNorm(self, double a):
 *         self.c_poly2d.azimuthNorm = a             # <<<<<<<<<<<<<<
 *     @property
 *     def rangeNorm(self):
 */

#line 93 "pyPoly2d.pyx"
  __pyx_v_self->c_poly2d->azimuthNorm = __pyx_v_a;

  /* "pyPoly2d.pyx":92
 *         return self.c_poly2d.azimuthNorm
 *     @azimuthNorm.setter
 *     def azimuthNorm(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_poly2d.azimuthNorm = a
 *     @property
 */

#line 92 "pyPoly2d.pyx"


#line 92 "pyPoly2d.pyx"
  /* function exit code */

#line 92 "pyPoly2d.pyx"
  __pyx_r = 0;

#line 92 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 92 "pyPoly2d.pyx"
  return __pyx_r;

#line 92 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":95
 *         self.c_poly2d.azimuthNorm = a
 *     @property
 *     def rangeNorm(self):             # <<<<<<<<<<<<<<
 *         return self.c_poly2d.rangeNorm
 *     @rangeNorm.setter
 */

#line 95 "pyPoly2d.pyx"


#line 95 "pyPoly2d.pyx"
/* Python wrapper */

#line 95 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_9rangeNorm_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 95 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_9rangeNorm_1__get__(PyObject *__pyx_v_self) {

#line 95 "pyPoly2d.pyx"
  PyObject *__pyx_r = 0;

#line 95 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 95 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 95 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_9rangeNorm___get__(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self));

#line 95 "pyPoly2d.pyx"


#line 95 "pyPoly2d.pyx"
  /* function exit code */

#line 95 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 95 "pyPoly2d.pyx"
  return __pyx_r;

#line 95 "pyPoly2d.pyx"
}

#line 95 "pyPoly2d.pyx"


#line 95 "pyPoly2d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_9rangeNorm___get__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self) {

#line 95 "pyPoly2d.pyx"
  PyObject *__pyx_r = NULL;

#line 95 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 95 "pyPoly2d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 95 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPoly2d.pyx":96
 *     @property
 *     def rangeNorm(self):
 *         return self.c_poly2d.rangeNorm             # <<<<<<<<<<<<<<
 *     @rangeNorm.setter
 *     def rangeNorm(self, double a):
 */

#line 96 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 96 "pyPoly2d.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_poly2d->rangeNorm); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 96, __pyx_L1_error)

#line 96 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 96 "pyPoly2d.pyx"
  __pyx_r = __pyx_t_1;

#line 96 "pyPoly2d.pyx"
  __pyx_t_1 = 0;

#line 96 "pyPoly2d.pyx"
  goto __pyx_L0;

  /* "pyPoly2d.pyx":95
 *         self.c_poly2d.azimuthNorm = a
 *     @property
 *     def rangeNorm(self):             # <<<<<<<<<<<<<<
 *         return self.c_poly2d.rangeNorm
 *     @rangeNorm.setter
 */

#line 95 "pyPoly2d.pyx"


#line 95 "pyPoly2d.pyx"
  /* function exit code */

#line 95 "pyPoly2d.pyx"
  __pyx_L1_error:;

#line 95 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 95 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.rangeNorm.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 95 "pyPoly2d.pyx"
  __pyx_r = NULL;

#line 95 "pyPoly2d.pyx"
  __pyx_L0:;

#line 95 "pyPoly2d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 95 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 95 "pyPoly2d.pyx"
  return __pyx_r;

#line 95 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":98
 *         return self.c_poly2d.rangeNorm
 *     @rangeNorm.setter
 *     def rangeNorm(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_poly2d.rangeNorm = a
 *     @property
 */

#line 98 "pyPoly2d.pyx"


#line 98 "pyPoly2d.pyx"
/* Python wrapper */

#line 98 "pyPoly2d.pyx"
static int __pyx_pw_8iscecore_8pyPoly2d_9rangeNorm_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/

#line 98 "pyPoly2d.pyx"
static int __pyx_pw_8iscecore_8pyPoly2d_9rangeNorm_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  double __pyx_v_a
#line 98 "pyPoly2d.pyx"
;

#line 98 "pyPoly2d.pyx"
  int __pyx_r;

#line 98 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 98 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);

#line 98 "pyPoly2d.pyx"
  assert(__pyx_arg_a); {

#line 98 "pyPoly2d.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(__pyx_arg_a); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 98, __pyx_L3_error)

#line 98 "pyPoly2d.pyx"
  }

#line 98 "pyPoly2d.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 98 "pyPoly2d.pyx"
  __pyx_L3_error:;

#line 98 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.rangeNorm.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 98 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 98 "pyPoly2d.pyx"
  return -1;

#line 98 "pyPoly2d.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 98 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_9rangeNorm_2__set__(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self), ((double)__pyx_v_a));

#line 98 "pyPoly2d.pyx"


#line 98 "pyPoly2d.pyx"
  /* function exit code */

#line 98 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 98 "pyPoly2d.pyx"
  return __pyx_r;

#line 98 "pyPoly2d.pyx"
}

#line 98 "pyPoly2d.pyx"


#line 98 "pyPoly2d.pyx"
static int __pyx_pf_8iscecore_8pyPoly2d_9rangeNorm_2__set__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, double __pyx_v_a) {

#line 98 "pyPoly2d.pyx"
  int __pyx_r;

#line 98 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 98 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPoly2d.pyx":99
 *     @rangeNorm.setter
 *     def rangeNorm(self, double a):
 *         self.c_poly2d.rangeNorm = a             # <<<<<<<<<<<<<<
 *     @property
 *     def coeffs(self):
 */

#line 99 "pyPoly2d.pyx"
  __pyx_v_self->c_poly2d->rangeNorm = __pyx_v_a;

  /* "pyPoly2d.pyx":98
 *         return self.c_poly2d.rangeNorm
 *     @rangeNorm.setter
 *     def rangeNorm(self, double a):             # <<<<<<<<<<<<<<
 *         self.c_poly2d.rangeNorm = a
 *     @property
 */

#line 98 "pyPoly2d.pyx"


#line 98 "pyPoly2d.pyx"
  /* function exit code */

#line 98 "pyPoly2d.pyx"
  __pyx_r = 0;

#line 98 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 98 "pyPoly2d.pyx"
  return __pyx_r;

#line 98 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":101
 *         self.c_poly2d.rangeNorm = a
 *     @property
 *     def coeffs(self):             # <<<<<<<<<<<<<<
 *         a = []
 *         for i in range((self.azimuthOrder+1)*(self.rangeOrder+1)):
 */

#line 101 "pyPoly2d.pyx"


#line 101 "pyPoly2d.pyx"
/* Python wrapper */

#line 101 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_6coeffs_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 101 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_6coeffs_1__get__(PyObject *__pyx_v_self) {

#line 101 "pyPoly2d.pyx"
  PyObject *__pyx_r = 0;

#line 101 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 101 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 101 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_6coeffs___get__(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self));

#line 101 "pyPoly2d.pyx"


#line 101 "pyPoly2d.pyx"
  /* function exit code */

#line 101 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 101 "pyPoly2d.pyx"
  return __pyx_r;

#line 101 "pyPoly2d.pyx"
}

#line 101 "pyPoly2d.pyx"


#line 101 "pyPoly2d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_6coeffs___get__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self) {
  PyObject *__pyx_v_a = NULL
#line 101 "pyPoly2d.pyx"
;
  PyObject *__pyx_v_i = NULL
#line 101 "pyPoly2d.pyx"
;

#line 101 "pyPoly2d.pyx"
  PyObject *__pyx_r = NULL;

#line 101 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 101 "pyPoly2d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 101 "pyPoly2d.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 101 "pyPoly2d.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 101 "pyPoly2d.pyx"
  Py_ssize_t __pyx_t_4;

#line 101 "pyPoly2d.pyx"
  PyObject *(*__pyx_t_5)(PyObject *);

#line 101 "pyPoly2d.pyx"
  std::vector<double> ::size_type __pyx_t_6;

#line 101 "pyPoly2d.pyx"
  int __pyx_t_7;

#line 101 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pyPoly2d.pyx":102
 *     @property
 *     def coeffs(self):
 *         a = []             # <<<<<<<<<<<<<<
 *         for i in range((self.azimuthOrder+1)*(self.rangeOrder+1)):
 *             a.append(self.c_poly2d.coeffs[i])
 */

#line 102 "pyPoly2d.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 102, __pyx_L1_error)

#line 102 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 102 "pyPoly2d.pyx"
  __pyx_v_a = ((PyObject*)__pyx_t_1);

#line 102 "pyPoly2d.pyx"
  __pyx_t_1 = 0;

  /* "pyPoly2d.pyx":103
 *     def coeffs(self):
 *         a = []
 *         for i in range((self.azimuthOrder+1)*(self.rangeOrder+1)):             # <<<<<<<<<<<<<<
 *             a.append(self.c_poly2d.coeffs[i])
 *         return a
 */

#line 103 "pyPoly2d.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_azimuthOrder); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 103, __pyx_L1_error)

#line 103 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 103 "pyPoly2d.pyx"
  __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 103, __pyx_L1_error)

#line 103 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 103 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 103 "pyPoly2d.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rangeOrder); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 103, __pyx_L1_error)

#line 103 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 103 "pyPoly2d.pyx"
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 103, __pyx_L1_error)

#line 103 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 103 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 103 "pyPoly2d.pyx"
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 103, __pyx_L1_error)

#line 103 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 103 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 103 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 103 "pyPoly2d.pyx"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 103, __pyx_L1_error)

#line 103 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 103 "pyPoly2d.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 103 "pyPoly2d.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);

#line 103 "pyPoly2d.pyx"
  __pyx_t_1 = 0;

#line 103 "pyPoly2d.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 103, __pyx_L1_error)

#line 103 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 103 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 103 "pyPoly2d.pyx"
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {

#line 103 "pyPoly2d.pyx"
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;

#line 103 "pyPoly2d.pyx"
    __pyx_t_5 = NULL;

#line 103 "pyPoly2d.pyx"
  } else {
    __pyx_t_4 = -1; 
#line 103 "pyPoly2d.pyx"
__pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 103, __pyx_L1_error)

#line 103 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 103 "pyPoly2d.pyx"
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 103, __pyx_L1_error)

#line 103 "pyPoly2d.pyx"
  }

#line 103 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 103 "pyPoly2d.pyx"
  for (;;) {

#line 103 "pyPoly2d.pyx"
    if (likely(!__pyx_t_5)) {

#line 103 "pyPoly2d.pyx"
      if (likely(PyList_CheckExact(__pyx_t_3))) {

#line 103 "pyPoly2d.pyx"
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 103 "pyPoly2d.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 103 "pyPoly2d.pyx"
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 103, __pyx_L1_error)

#line 103 "pyPoly2d.pyx"
        #else

#line 103 "pyPoly2d.pyx"
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 103, __pyx_L1_error)

#line 103 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 103 "pyPoly2d.pyx"
        #endif

#line 103 "pyPoly2d.pyx"
      } else {

#line 103 "pyPoly2d.pyx"
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 103 "pyPoly2d.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 103 "pyPoly2d.pyx"
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 103, __pyx_L1_error)

#line 103 "pyPoly2d.pyx"
        #else

#line 103 "pyPoly2d.pyx"
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 103, __pyx_L1_error)

#line 103 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 103 "pyPoly2d.pyx"
        #endif

#line 103 "pyPoly2d.pyx"
      }
    } else 
#line 103 "pyPoly2d.pyx"
{

#line 103 "pyPoly2d.pyx"
      __pyx_t_1 = __pyx_t_5(__pyx_t_3);

#line 103 "pyPoly2d.pyx"
      if (unlikely(!__pyx_t_1)) {

#line 103 "pyPoly2d.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 103 "pyPoly2d.pyx"
        if (exc_type) {

#line 103 "pyPoly2d.pyx"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 103 "pyPoly2d.pyx"
          else __PYX_ERR(11, 103, __pyx_L1_error)

#line 103 "pyPoly2d.pyx"
        }

#line 103 "pyPoly2d.pyx"
        break;

#line 103 "pyPoly2d.pyx"
      }

#line 103 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 103 "pyPoly2d.pyx"
    }

#line 103 "pyPoly2d.pyx"
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);

#line 103 "pyPoly2d.pyx"
    __pyx_t_1 = 0;

    /* "pyPoly2d.pyx":104
 *         a = []
 *         for i in range((self.azimuthOrder+1)*(self.rangeOrder+1)):
 *             a.append(self.c_poly2d.coeffs[i])             # <<<<<<<<<<<<<<
 *         return a
 *     @coeffs.setter
 */

#line 104 "pyPoly2d.pyx"
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 104, __pyx_L1_error)

#line 104 "pyPoly2d.pyx"
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->c_poly2d->coeffs[__pyx_t_6])); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 104, __pyx_L1_error)

#line 104 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 104 "pyPoly2d.pyx"
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_a, __pyx_t_1); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(11, 104, __pyx_L1_error)

#line 104 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyPoly2d.pyx":103
 *     def coeffs(self):
 *         a = []
 *         for i in range((self.azimuthOrder+1)*(self.rangeOrder+1)):             # <<<<<<<<<<<<<<
 *             a.append(self.c_poly2d.coeffs[i])
 *         return a
 */

#line 103 "pyPoly2d.pyx"
  }

#line 103 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyPoly2d.pyx":105
 *         for i in range((self.azimuthOrder+1)*(self.rangeOrder+1)):
 *             a.append(self.c_poly2d.coeffs[i])
 *         return a             # <<<<<<<<<<<<<<
 *     @coeffs.setter
 *     def coeffs(self, a):
 */

#line 105 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 105 "pyPoly2d.pyx"
  __Pyx_INCREF(__pyx_v_a);

#line 105 "pyPoly2d.pyx"
  __pyx_r = __pyx_v_a;

#line 105 "pyPoly2d.pyx"
  goto __pyx_L0;

  /* "pyPoly2d.pyx":101
 *         self.c_poly2d.rangeNorm = a
 *     @property
 *     def coeffs(self):             # <<<<<<<<<<<<<<
 *         a = []
 *         for i in range((self.azimuthOrder+1)*(self.rangeOrder+1)):
 */

#line 101 "pyPoly2d.pyx"


#line 101 "pyPoly2d.pyx"
  /* function exit code */

#line 101 "pyPoly2d.pyx"
  __pyx_L1_error:;

#line 101 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 101 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 101 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 101 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.coeffs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 101 "pyPoly2d.pyx"
  __pyx_r = NULL;

#line 101 "pyPoly2d.pyx"
  __pyx_L0:;

#line 101 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_v_a);

#line 101 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 101 "pyPoly2d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 101 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 101 "pyPoly2d.pyx"
  return __pyx_r;

#line 101 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":107
 *         return a
 *     @coeffs.setter
 *     def coeffs(self, a):             # <<<<<<<<<<<<<<
 *         if ((self.azimuthOrder+1)*(self.rangeOrder+1) != len(a)):
 *             print("Error: Invalid input size (expected 1D list of length "+str(self.azimuthOrder+1)+
 */

#line 107 "pyPoly2d.pyx"


#line 107 "pyPoly2d.pyx"
/* Python wrapper */

#line 107 "pyPoly2d.pyx"
static int __pyx_pw_8iscecore_8pyPoly2d_6coeffs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a); /*proto*/

#line 107 "pyPoly2d.pyx"
static int __pyx_pw_8iscecore_8pyPoly2d_6coeffs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_a) {

#line 107 "pyPoly2d.pyx"
  int __pyx_r;

#line 107 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 107 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = 
#line 107 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_6coeffs_2__set__(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self), ((PyObject *)__pyx_v_a));

#line 107 "pyPoly2d.pyx"


#line 107 "pyPoly2d.pyx"
  /* function exit code */

#line 107 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 107 "pyPoly2d.pyx"
  return __pyx_r;

#line 107 "pyPoly2d.pyx"
}

#line 107 "pyPoly2d.pyx"


#line 107 "pyPoly2d.pyx"
static int __pyx_pf_8iscecore_8pyPoly2d_6coeffs_2__set__(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, PyObject *__pyx_v_a) {
  PyObject *__pyx_v_i = NULL
#line 107 "pyPoly2d.pyx"
;

#line 107 "pyPoly2d.pyx"
  int __pyx_r;

#line 107 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 107 "pyPoly2d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 107 "pyPoly2d.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 107 "pyPoly2d.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 107 "pyPoly2d.pyx"
  Py_ssize_t __pyx_t_4;

#line 107 "pyPoly2d.pyx"
  int __pyx_t_5;

#line 107 "pyPoly2d.pyx"
  PyObject *(*__pyx_t_6)(PyObject *);

#line 107 "pyPoly2d.pyx"
  double __pyx_t_7;

#line 107 "pyPoly2d.pyx"
  std::vector<double> ::size_type __pyx_t_8;

#line 107 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pyPoly2d.pyx":108
 *     @coeffs.setter
 *     def coeffs(self, a):
 *         if ((self.azimuthOrder+1)*(self.rangeOrder+1) != len(a)):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size (expected 1D list of length "+str(self.azimuthOrder+1)+
 *                   "*"+str(self.rangeOrder+1)+")")
 */

#line 108 "pyPoly2d.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_azimuthOrder); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 108, __pyx_L1_error)

#line 108 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 108 "pyPoly2d.pyx"
  __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 108, __pyx_L1_error)

#line 108 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 108 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 108 "pyPoly2d.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rangeOrder); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 108, __pyx_L1_error)

#line 108 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 108 "pyPoly2d.pyx"
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 108, __pyx_L1_error)

#line 108 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 108 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 108 "pyPoly2d.pyx"
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 108, __pyx_L1_error)

#line 108 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 108 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 108 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 108 "pyPoly2d.pyx"
  __pyx_t_4 = PyObject_Length(__pyx_v_a); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(11, 108, __pyx_L1_error)

#line 108 "pyPoly2d.pyx"
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 108, __pyx_L1_error)

#line 108 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 108 "pyPoly2d.pyx"
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 108, __pyx_L1_error)

#line 108 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 108 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 108 "pyPoly2d.pyx"
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(11, 108, __pyx_L1_error)

#line 108 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 108 "pyPoly2d.pyx"
  if (__pyx_t_5) {

    /* "pyPoly2d.pyx":109
 *     def coeffs(self, a):
 *         if ((self.azimuthOrder+1)*(self.rangeOrder+1) != len(a)):
 *             print("Error: Invalid input size (expected 1D list of length "+str(self.azimuthOrder+1)+             # <<<<<<<<<<<<<<
 *                   "*"+str(self.rangeOrder+1)+")")
 *             return
 */

#line 109 "pyPoly2d.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_azimuthOrder); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 109, __pyx_L1_error)

#line 109 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 109 "pyPoly2d.pyx"
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 109, __pyx_L1_error)

#line 109 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 109 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 109 "pyPoly2d.pyx"
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 109, __pyx_L1_error)

#line 109 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 109 "pyPoly2d.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 109 "pyPoly2d.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);

#line 109 "pyPoly2d.pyx"
    __pyx_t_3 = 0;

#line 109 "pyPoly2d.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 109, __pyx_L1_error)

#line 109 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 109 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 109 "pyPoly2d.pyx"
    __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Error_Invalid_input_size_expecte_2, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 109, __pyx_L1_error)

#line 109 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 109 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 109 "pyPoly2d.pyx"
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_t_2, __pyx_kp_u__59); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 109, __pyx_L1_error)

#line 109 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 109 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyPoly2d.pyx":110
 *         if ((self.azimuthOrder+1)*(self.rangeOrder+1) != len(a)):
 *             print("Error: Invalid input size (expected 1D list of length "+str(self.azimuthOrder+1)+
 *                   "*"+str(self.rangeOrder+1)+")")             # <<<<<<<<<<<<<<
 *             return
 *         for i in range((self.azimuthOrder+1)*(self.rangeOrder+1)):
 */

#line 110 "pyPoly2d.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rangeOrder); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 110, __pyx_L1_error)

#line 110 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 110 "pyPoly2d.pyx"
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 110, __pyx_L1_error)

#line 110 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 110 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 110 "pyPoly2d.pyx"
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 110, __pyx_L1_error)

#line 110 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 110 "pyPoly2d.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 110 "pyPoly2d.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 110 "pyPoly2d.pyx"
    __pyx_t_1 = 0;

#line 110 "pyPoly2d.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 110, __pyx_L1_error)

#line 110 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 110 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 110 "pyPoly2d.pyx"
    __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 110, __pyx_L1_error)

#line 110 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 110 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 110 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 110 "pyPoly2d.pyx"
    __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_t_2, __pyx_kp_u__47); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 110, __pyx_L1_error)

#line 110 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 110 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyPoly2d.pyx":109
 *     def coeffs(self, a):
 *         if ((self.azimuthOrder+1)*(self.rangeOrder+1) != len(a)):
 *             print("Error: Invalid input size (expected 1D list of length "+str(self.azimuthOrder+1)+             # <<<<<<<<<<<<<<
 *                   "*"+str(self.rangeOrder+1)+")")
 *             return
 */

#line 109 "pyPoly2d.pyx"
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 109, __pyx_L1_error)

#line 109 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 109 "pyPoly2d.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 109 "pyPoly2d.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 109 "pyPoly2d.pyx"
    __pyx_t_1 = 0;

#line 109 "pyPoly2d.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 109, __pyx_L1_error)

#line 109 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 109 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 109 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyPoly2d.pyx":111
 *             print("Error: Invalid input size (expected 1D list of length "+str(self.azimuthOrder+1)+
 *                   "*"+str(self.rangeOrder+1)+")")
 *             return             # <<<<<<<<<<<<<<
 *         for i in range((self.azimuthOrder+1)*(self.rangeOrder+1)):
 *             self.c_poly2d.coeffs[i] = a[i]
 */

#line 111 "pyPoly2d.pyx"
    __pyx_r = 0;

#line 111 "pyPoly2d.pyx"
    goto __pyx_L0;

    /* "pyPoly2d.pyx":108
 *     @coeffs.setter
 *     def coeffs(self, a):
 *         if ((self.azimuthOrder+1)*(self.rangeOrder+1) != len(a)):             # <<<<<<<<<<<<<<
 *             print("Error: Invalid input size (expected 1D list of length "+str(self.azimuthOrder+1)+
 *                   "*"+str(self.rangeOrder+1)+")")
 */

#line 108 "pyPoly2d.pyx"
  }

  /* "pyPoly2d.pyx":112
 *                   "*"+str(self.rangeOrder+1)+")")
 *             return
 *         for i in range((self.azimuthOrder+1)*(self.rangeOrder+1)):             # <<<<<<<<<<<<<<
 *             self.c_poly2d.coeffs[i] = a[i]
 * 
 */

#line 112 "pyPoly2d.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_azimuthOrder); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 112, __pyx_L1_error)

#line 112 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 112 "pyPoly2d.pyx"
  __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 112, __pyx_L1_error)

#line 112 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 112 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 112 "pyPoly2d.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rangeOrder); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 112, __pyx_L1_error)

#line 112 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 112 "pyPoly2d.pyx"
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 112, __pyx_L1_error)

#line 112 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 112 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 112 "pyPoly2d.pyx"
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 112, __pyx_L1_error)

#line 112 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 112 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 112 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 112 "pyPoly2d.pyx"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 112, __pyx_L1_error)

#line 112 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 112 "pyPoly2d.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 112 "pyPoly2d.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);

#line 112 "pyPoly2d.pyx"
  __pyx_t_1 = 0;

#line 112 "pyPoly2d.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 112, __pyx_L1_error)

#line 112 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 112 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 112 "pyPoly2d.pyx"
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {

#line 112 "pyPoly2d.pyx"
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;

#line 112 "pyPoly2d.pyx"
    __pyx_t_6 = NULL;

#line 112 "pyPoly2d.pyx"
  } else {
    __pyx_t_4 = -1; 
#line 112 "pyPoly2d.pyx"
__pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 112, __pyx_L1_error)

#line 112 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 112 "pyPoly2d.pyx"
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 112, __pyx_L1_error)

#line 112 "pyPoly2d.pyx"
  }

#line 112 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 112 "pyPoly2d.pyx"
  for (;;) {

#line 112 "pyPoly2d.pyx"
    if (likely(!__pyx_t_6)) {

#line 112 "pyPoly2d.pyx"
      if (likely(PyList_CheckExact(__pyx_t_3))) {

#line 112 "pyPoly2d.pyx"
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 112 "pyPoly2d.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 112 "pyPoly2d.pyx"
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 112, __pyx_L1_error)

#line 112 "pyPoly2d.pyx"
        #else

#line 112 "pyPoly2d.pyx"
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 112, __pyx_L1_error)

#line 112 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 112 "pyPoly2d.pyx"
        #endif

#line 112 "pyPoly2d.pyx"
      } else {

#line 112 "pyPoly2d.pyx"
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 112 "pyPoly2d.pyx"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 112 "pyPoly2d.pyx"
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 112, __pyx_L1_error)

#line 112 "pyPoly2d.pyx"
        #else

#line 112 "pyPoly2d.pyx"
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 112, __pyx_L1_error)

#line 112 "pyPoly2d.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 112 "pyPoly2d.pyx"
        #endif

#line 112 "pyPoly2d.pyx"
      }
    } else 
#line 112 "pyPoly2d.pyx"
{

#line 112 "pyPoly2d.pyx"
      __pyx_t_1 = __pyx_t_6(__pyx_t_3);

#line 112 "pyPoly2d.pyx"
      if (unlikely(!__pyx_t_1)) {

#line 112 "pyPoly2d.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 112 "pyPoly2d.pyx"
        if (exc_type) {

#line 112 "pyPoly2d.pyx"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 112 "pyPoly2d.pyx"
          else __PYX_ERR(11, 112, __pyx_L1_error)

#line 112 "pyPoly2d.pyx"
        }

#line 112 "pyPoly2d.pyx"
        break;

#line 112 "pyPoly2d.pyx"
      }

#line 112 "pyPoly2d.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 112 "pyPoly2d.pyx"
    }

#line 112 "pyPoly2d.pyx"
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);

#line 112 "pyPoly2d.pyx"
    __pyx_t_1 = 0;

    /* "pyPoly2d.pyx":113
 *             return
 *         for i in range((self.azimuthOrder+1)*(self.rangeOrder+1)):
 *             self.c_poly2d.coeffs[i] = a[i]             # <<<<<<<<<<<<<<
 * 
 *     def dPrint(self):
 */

#line 113 "pyPoly2d.pyx"
    __pyx_t_1 = PyObject_GetItem(__pyx_v_a, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 113, __pyx_L1_error)

#line 113 "pyPoly2d.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 113 "pyPoly2d.pyx"
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 113, __pyx_L1_error)

#line 113 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 113 "pyPoly2d.pyx"
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 113, __pyx_L1_error)

#line 113 "pyPoly2d.pyx"
    (__pyx_v_self->c_poly2d->coeffs[__pyx_t_8]) = __pyx_t_7;

    /* "pyPoly2d.pyx":112
 *                   "*"+str(self.rangeOrder+1)+")")
 *             return
 *         for i in range((self.azimuthOrder+1)*(self.rangeOrder+1)):             # <<<<<<<<<<<<<<
 *             self.c_poly2d.coeffs[i] = a[i]
 * 
 */

#line 112 "pyPoly2d.pyx"
  }

#line 112 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyPoly2d.pyx":107
 *         return a
 *     @coeffs.setter
 *     def coeffs(self, a):             # <<<<<<<<<<<<<<
 *         if ((self.azimuthOrder+1)*(self.rangeOrder+1) != len(a)):
 *             print("Error: Invalid input size (expected 1D list of length "+str(self.azimuthOrder+1)+
 */

#line 107 "pyPoly2d.pyx"


#line 107 "pyPoly2d.pyx"
  /* function exit code */

#line 107 "pyPoly2d.pyx"
  __pyx_r = 0;

#line 107 "pyPoly2d.pyx"
  goto __pyx_L0;

#line 107 "pyPoly2d.pyx"
  __pyx_L1_error:;

#line 107 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 107 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 107 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 107 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.coeffs.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 107 "pyPoly2d.pyx"
  __pyx_r = -1;

#line 107 "pyPoly2d.pyx"
  __pyx_L0:;

#line 107 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 107 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 107 "pyPoly2d.pyx"
  return __pyx_r;

#line 107 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":115
 *             self.c_poly2d.coeffs[i] = a[i]
 * 
 *     def dPrint(self):             # <<<<<<<<<<<<<<
 *         self.printPoly()
 * 
 */

#line 115 "pyPoly2d.pyx"


#line 115 "pyPoly2d.pyx"
/* Python wrapper */

#line 115 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_7dPrint(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 115 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_7dPrint(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 115 "pyPoly2d.pyx"
  PyObject *__pyx_r = 0;

#line 115 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 115 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("dPrint (wrapper)", 0);
  __pyx_r = 
#line 115 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_6dPrint(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self));

#line 115 "pyPoly2d.pyx"


#line 115 "pyPoly2d.pyx"
  /* function exit code */

#line 115 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 115 "pyPoly2d.pyx"
  return __pyx_r;

#line 115 "pyPoly2d.pyx"
}

#line 115 "pyPoly2d.pyx"


#line 115 "pyPoly2d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_6dPrint(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self) {

#line 115 "pyPoly2d.pyx"
  PyObject *__pyx_r = NULL;

#line 115 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 115 "pyPoly2d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 115 "pyPoly2d.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 115 "pyPoly2d.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 115 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("dPrint", 0);

  /* "pyPoly2d.pyx":116
 * 
 *     def dPrint(self):
 *         self.printPoly()             # <<<<<<<<<<<<<<
 * 
 *     def setCoeff(self, int a, int b, double c):
 */

#line 116 "pyPoly2d.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_printPoly); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 116, __pyx_L1_error)

#line 116 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 116 "pyPoly2d.pyx"
  __pyx_t_3 = NULL;

#line 116 "pyPoly2d.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 116 "pyPoly2d.pyx"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 116 "pyPoly2d.pyx"
    if (likely(__pyx_t_3)) {

#line 116 "pyPoly2d.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 116 "pyPoly2d.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 116 "pyPoly2d.pyx"
      __Pyx_INCREF(function);

#line 116 "pyPoly2d.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 116 "pyPoly2d.pyx"
    }

#line 116 "pyPoly2d.pyx"
  }

#line 116 "pyPoly2d.pyx"
  if (__pyx_t_3) {

#line 116 "pyPoly2d.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 116, __pyx_L1_error)

#line 116 "pyPoly2d.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 116 "pyPoly2d.pyx"
  } else {

#line 116 "pyPoly2d.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 116, __pyx_L1_error)

#line 116 "pyPoly2d.pyx"
  }

#line 116 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 116 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 116 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyPoly2d.pyx":115
 *             self.c_poly2d.coeffs[i] = a[i]
 * 
 *     def dPrint(self):             # <<<<<<<<<<<<<<
 *         self.printPoly()
 * 
 */

#line 115 "pyPoly2d.pyx"


#line 115 "pyPoly2d.pyx"
  /* function exit code */

#line 115 "pyPoly2d.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 115 "pyPoly2d.pyx"
  goto __pyx_L0;

#line 115 "pyPoly2d.pyx"
  __pyx_L1_error:;

#line 115 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 115 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 115 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 115 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.dPrint", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 115 "pyPoly2d.pyx"
  __pyx_r = NULL;

#line 115 "pyPoly2d.pyx"
  __pyx_L0:;

#line 115 "pyPoly2d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 115 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 115 "pyPoly2d.pyx"
  return __pyx_r;

#line 115 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":118
 *         self.printPoly()
 * 
 *     def setCoeff(self, int a, int b, double c):             # <<<<<<<<<<<<<<
 *         self.c_poly2d.setCoeff(a,b,c)
 *     def getCoeff(self, int a, int b):
 */

#line 118 "pyPoly2d.pyx"


#line 118 "pyPoly2d.pyx"
/* Python wrapper */

#line 118 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_9setCoeff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 118 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_9setCoeff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_a
#line 118 "pyPoly2d.pyx"
;
  int __pyx_v_b
#line 118 "pyPoly2d.pyx"
;
  double __pyx_v_c
#line 118 "pyPoly2d.pyx"
;

#line 118 "pyPoly2d.pyx"
  PyObject *__pyx_r = 0;

#line 118 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 118 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("setCoeff (wrapper)", 0);

#line 118 "pyPoly2d.pyx"
  {

#line 118 "pyPoly2d.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,0};

#line 118 "pyPoly2d.pyx"
    PyObject* values[3] = {0,0,0};

#line 118 "pyPoly2d.pyx"
    if (unlikely(__pyx_kwds)) {

#line 118 "pyPoly2d.pyx"
      Py_ssize_t kw_args;

#line 118 "pyPoly2d.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 118 "pyPoly2d.pyx"
      switch (pos_args) {
        case  3: 
#line 118 "pyPoly2d.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 118 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 118 "pyPoly2d.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 118 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 118 "pyPoly2d.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 118 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;

#line 118 "pyPoly2d.pyx"
        case  0: break;
        default: 
#line 118 "pyPoly2d.pyx"
goto __pyx_L5_argtuple_error;

#line 118 "pyPoly2d.pyx"
      }

#line 118 "pyPoly2d.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 118 "pyPoly2d.pyx"
      switch (pos_args) {

#line 118 "pyPoly2d.pyx"
        case  0:

#line 118 "pyPoly2d.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 118 "pyPoly2d.pyx"
goto __pyx_L5_argtuple_error;

#line 118 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;

#line 118 "pyPoly2d.pyx"
        case  1:

#line 118 "pyPoly2d.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 118 "pyPoly2d.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("setCoeff", 1, 3, 3, 1); 
#line 118 "pyPoly2d.pyx"
__PYX_ERR(11, 118, __pyx_L3_error)

#line 118 "pyPoly2d.pyx"
        }

#line 118 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;

#line 118 "pyPoly2d.pyx"
        case  2:

#line 118 "pyPoly2d.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;

#line 118 "pyPoly2d.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("setCoeff", 1, 3, 3, 2); 
#line 118 "pyPoly2d.pyx"
__PYX_ERR(11, 118, __pyx_L3_error)

#line 118 "pyPoly2d.pyx"
        }

#line 118 "pyPoly2d.pyx"
      }

#line 118 "pyPoly2d.pyx"
      if (unlikely(kw_args > 0)) {

#line 118 "pyPoly2d.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setCoeff") < 0)) __PYX_ERR(11, 118, __pyx_L3_error)

#line 118 "pyPoly2d.pyx"
      }

#line 118 "pyPoly2d.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 118 "pyPoly2d.pyx"
      goto __pyx_L5_argtuple_error;

#line 118 "pyPoly2d.pyx"
    } else {

#line 118 "pyPoly2d.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 118 "pyPoly2d.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 118 "pyPoly2d.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 118 "pyPoly2d.pyx"
    }

#line 118 "pyPoly2d.pyx"
    __pyx_v_a = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_a == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 118, __pyx_L3_error)

#line 118 "pyPoly2d.pyx"
    __pyx_v_b = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_b == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 118, __pyx_L3_error)

#line 118 "pyPoly2d.pyx"
    __pyx_v_c = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_c == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 118, __pyx_L3_error)

#line 118 "pyPoly2d.pyx"
  }

#line 118 "pyPoly2d.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 118 "pyPoly2d.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setCoeff", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 118 "pyPoly2d.pyx"
__PYX_ERR(11, 118, __pyx_L3_error)

#line 118 "pyPoly2d.pyx"
  __pyx_L3_error:;

#line 118 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.setCoeff", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 118 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 118 "pyPoly2d.pyx"
  return NULL;

#line 118 "pyPoly2d.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 118 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_8setCoeff(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c);

#line 118 "pyPoly2d.pyx"


#line 118 "pyPoly2d.pyx"
  /* function exit code */

#line 118 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 118 "pyPoly2d.pyx"
  return __pyx_r;

#line 118 "pyPoly2d.pyx"
}

#line 118 "pyPoly2d.pyx"


#line 118 "pyPoly2d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_8setCoeff(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, int __pyx_v_a, int __pyx_v_b, double __pyx_v_c) {

#line 118 "pyPoly2d.pyx"
  PyObject *__pyx_r = NULL;

#line 118 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 118 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("setCoeff", 0);

  /* "pyPoly2d.pyx":119
 * 
 *     def setCoeff(self, int a, int b, double c):
 *         self.c_poly2d.setCoeff(a,b,c)             # <<<<<<<<<<<<<<
 *     def getCoeff(self, int a, int b):
 *         return self.c_poly2d.getCoeff(a,b)
 */

#line 119 "pyPoly2d.pyx"
  __pyx_v_self->c_poly2d->setCoeff(__pyx_v_a, __pyx_v_b, __pyx_v_c);

  /* "pyPoly2d.pyx":118
 *         self.printPoly()
 * 
 *     def setCoeff(self, int a, int b, double c):             # <<<<<<<<<<<<<<
 *         self.c_poly2d.setCoeff(a,b,c)
 *     def getCoeff(self, int a, int b):
 */

#line 118 "pyPoly2d.pyx"


#line 118 "pyPoly2d.pyx"
  /* function exit code */

#line 118 "pyPoly2d.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 118 "pyPoly2d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 118 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 118 "pyPoly2d.pyx"
  return __pyx_r;

#line 118 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":120
 *     def setCoeff(self, int a, int b, double c):
 *         self.c_poly2d.setCoeff(a,b,c)
 *     def getCoeff(self, int a, int b):             # <<<<<<<<<<<<<<
 *         return self.c_poly2d.getCoeff(a,b)
 *     def eval(self, double a, double b):
 */

#line 120 "pyPoly2d.pyx"


#line 120 "pyPoly2d.pyx"
/* Python wrapper */

#line 120 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_11getCoeff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 120 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_11getCoeff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_a
#line 120 "pyPoly2d.pyx"
;
  int __pyx_v_b
#line 120 "pyPoly2d.pyx"
;

#line 120 "pyPoly2d.pyx"
  PyObject *__pyx_r = 0;

#line 120 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 120 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("getCoeff (wrapper)", 0);

#line 120 "pyPoly2d.pyx"
  {

#line 120 "pyPoly2d.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};

#line 120 "pyPoly2d.pyx"
    PyObject* values[2] = {0,0};

#line 120 "pyPoly2d.pyx"
    if (unlikely(__pyx_kwds)) {

#line 120 "pyPoly2d.pyx"
      Py_ssize_t kw_args;

#line 120 "pyPoly2d.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 120 "pyPoly2d.pyx"
      switch (pos_args) {
        case  2: 
#line 120 "pyPoly2d.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 120 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 120 "pyPoly2d.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 120 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;

#line 120 "pyPoly2d.pyx"
        case  0: break;
        default: 
#line 120 "pyPoly2d.pyx"
goto __pyx_L5_argtuple_error;

#line 120 "pyPoly2d.pyx"
      }

#line 120 "pyPoly2d.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 120 "pyPoly2d.pyx"
      switch (pos_args) {

#line 120 "pyPoly2d.pyx"
        case  0:

#line 120 "pyPoly2d.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 120 "pyPoly2d.pyx"
goto __pyx_L5_argtuple_error;

#line 120 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;

#line 120 "pyPoly2d.pyx"
        case  1:

#line 120 "pyPoly2d.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 120 "pyPoly2d.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("getCoeff", 1, 2, 2, 1); 
#line 120 "pyPoly2d.pyx"
__PYX_ERR(11, 120, __pyx_L3_error)

#line 120 "pyPoly2d.pyx"
        }

#line 120 "pyPoly2d.pyx"
      }

#line 120 "pyPoly2d.pyx"
      if (unlikely(kw_args > 0)) {

#line 120 "pyPoly2d.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getCoeff") < 0)) __PYX_ERR(11, 120, __pyx_L3_error)

#line 120 "pyPoly2d.pyx"
      }

#line 120 "pyPoly2d.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 120 "pyPoly2d.pyx"
      goto __pyx_L5_argtuple_error;

#line 120 "pyPoly2d.pyx"
    } else {

#line 120 "pyPoly2d.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 120 "pyPoly2d.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 120 "pyPoly2d.pyx"
    }

#line 120 "pyPoly2d.pyx"
    __pyx_v_a = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_a == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 120, __pyx_L3_error)

#line 120 "pyPoly2d.pyx"
    __pyx_v_b = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_b == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 120, __pyx_L3_error)

#line 120 "pyPoly2d.pyx"
  }

#line 120 "pyPoly2d.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 120 "pyPoly2d.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getCoeff", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 120 "pyPoly2d.pyx"
__PYX_ERR(11, 120, __pyx_L3_error)

#line 120 "pyPoly2d.pyx"
  __pyx_L3_error:;

#line 120 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.getCoeff", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 120 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 120 "pyPoly2d.pyx"
  return NULL;

#line 120 "pyPoly2d.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 120 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_10getCoeff(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self), __pyx_v_a, __pyx_v_b);

#line 120 "pyPoly2d.pyx"


#line 120 "pyPoly2d.pyx"
  /* function exit code */

#line 120 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 120 "pyPoly2d.pyx"
  return __pyx_r;

#line 120 "pyPoly2d.pyx"
}

#line 120 "pyPoly2d.pyx"


#line 120 "pyPoly2d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_10getCoeff(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, int __pyx_v_a, int __pyx_v_b) {

#line 120 "pyPoly2d.pyx"
  PyObject *__pyx_r = NULL;

#line 120 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 120 "pyPoly2d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 120 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("getCoeff", 0);

  /* "pyPoly2d.pyx":121
 *         self.c_poly2d.setCoeff(a,b,c)
 *     def getCoeff(self, int a, int b):
 *         return self.c_poly2d.getCoeff(a,b)             # <<<<<<<<<<<<<<
 *     def eval(self, double a, double b):
 *         return self.c_poly2d.eval(a,b)
 */

#line 121 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 121 "pyPoly2d.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_poly2d->getCoeff(__pyx_v_a, __pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 121, __pyx_L1_error)

#line 121 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 121 "pyPoly2d.pyx"
  __pyx_r = __pyx_t_1;

#line 121 "pyPoly2d.pyx"
  __pyx_t_1 = 0;

#line 121 "pyPoly2d.pyx"
  goto __pyx_L0;

  /* "pyPoly2d.pyx":120
 *     def setCoeff(self, int a, int b, double c):
 *         self.c_poly2d.setCoeff(a,b,c)
 *     def getCoeff(self, int a, int b):             # <<<<<<<<<<<<<<
 *         return self.c_poly2d.getCoeff(a,b)
 *     def eval(self, double a, double b):
 */

#line 120 "pyPoly2d.pyx"


#line 120 "pyPoly2d.pyx"
  /* function exit code */

#line 120 "pyPoly2d.pyx"
  __pyx_L1_error:;

#line 120 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 120 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.getCoeff", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 120 "pyPoly2d.pyx"
  __pyx_r = NULL;

#line 120 "pyPoly2d.pyx"
  __pyx_L0:;

#line 120 "pyPoly2d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 120 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 120 "pyPoly2d.pyx"
  return __pyx_r;

#line 120 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":122
 *     def getCoeff(self, int a, int b):
 *         return self.c_poly2d.getCoeff(a,b)
 *     def eval(self, double a, double b):             # <<<<<<<<<<<<<<
 *         return self.c_poly2d.eval(a,b)
 *     def printPoly(self):
 */

#line 122 "pyPoly2d.pyx"


#line 122 "pyPoly2d.pyx"
/* Python wrapper */

#line 122 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_13eval(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 122 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_13eval(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_a
#line 122 "pyPoly2d.pyx"
;
  double __pyx_v_b
#line 122 "pyPoly2d.pyx"
;

#line 122 "pyPoly2d.pyx"
  PyObject *__pyx_r = 0;

#line 122 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 122 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("eval (wrapper)", 0);

#line 122 "pyPoly2d.pyx"
  {

#line 122 "pyPoly2d.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};

#line 122 "pyPoly2d.pyx"
    PyObject* values[2] = {0,0};

#line 122 "pyPoly2d.pyx"
    if (unlikely(__pyx_kwds)) {

#line 122 "pyPoly2d.pyx"
      Py_ssize_t kw_args;

#line 122 "pyPoly2d.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 122 "pyPoly2d.pyx"
      switch (pos_args) {
        case  2: 
#line 122 "pyPoly2d.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 122 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 122 "pyPoly2d.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 122 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;

#line 122 "pyPoly2d.pyx"
        case  0: break;
        default: 
#line 122 "pyPoly2d.pyx"
goto __pyx_L5_argtuple_error;

#line 122 "pyPoly2d.pyx"
      }

#line 122 "pyPoly2d.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 122 "pyPoly2d.pyx"
      switch (pos_args) {

#line 122 "pyPoly2d.pyx"
        case  0:

#line 122 "pyPoly2d.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else 
#line 122 "pyPoly2d.pyx"
goto __pyx_L5_argtuple_error;

#line 122 "pyPoly2d.pyx"
        CYTHON_FALLTHROUGH;

#line 122 "pyPoly2d.pyx"
        case  1:

#line 122 "pyPoly2d.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;

#line 122 "pyPoly2d.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("eval", 1, 2, 2, 1); 
#line 122 "pyPoly2d.pyx"
__PYX_ERR(11, 122, __pyx_L3_error)

#line 122 "pyPoly2d.pyx"
        }

#line 122 "pyPoly2d.pyx"
      }

#line 122 "pyPoly2d.pyx"
      if (unlikely(kw_args > 0)) {

#line 122 "pyPoly2d.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eval") < 0)) __PYX_ERR(11, 122, __pyx_L3_error)

#line 122 "pyPoly2d.pyx"
      }

#line 122 "pyPoly2d.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 122 "pyPoly2d.pyx"
      goto __pyx_L5_argtuple_error;

#line 122 "pyPoly2d.pyx"
    } else {

#line 122 "pyPoly2d.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 122 "pyPoly2d.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 122 "pyPoly2d.pyx"
    }

#line 122 "pyPoly2d.pyx"
    __pyx_v_a = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 122, __pyx_L3_error)

#line 122 "pyPoly2d.pyx"
    __pyx_v_b = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 122, __pyx_L3_error)

#line 122 "pyPoly2d.pyx"
  }

#line 122 "pyPoly2d.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 122 "pyPoly2d.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eval", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 122 "pyPoly2d.pyx"
__PYX_ERR(11, 122, __pyx_L3_error)

#line 122 "pyPoly2d.pyx"
  __pyx_L3_error:;

#line 122 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.eval", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 122 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 122 "pyPoly2d.pyx"
  return NULL;

#line 122 "pyPoly2d.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 122 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_12eval(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self), __pyx_v_a, __pyx_v_b);

#line 122 "pyPoly2d.pyx"


#line 122 "pyPoly2d.pyx"
  /* function exit code */

#line 122 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 122 "pyPoly2d.pyx"
  return __pyx_r;

#line 122 "pyPoly2d.pyx"
}

#line 122 "pyPoly2d.pyx"


#line 122 "pyPoly2d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_12eval(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, double __pyx_v_a, double __pyx_v_b) {

#line 122 "pyPoly2d.pyx"
  PyObject *__pyx_r = NULL;

#line 122 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 122 "pyPoly2d.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 122 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("eval", 0);

  /* "pyPoly2d.pyx":123
 *         return self.c_poly2d.getCoeff(a,b)
 *     def eval(self, double a, double b):
 *         return self.c_poly2d.eval(a,b)             # <<<<<<<<<<<<<<
 *     def printPoly(self):
 *         self.c_poly2d.printPoly()
 */

#line 123 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 123 "pyPoly2d.pyx"
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_poly2d->eval(__pyx_v_a, __pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 123, __pyx_L1_error)

#line 123 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 123 "pyPoly2d.pyx"
  __pyx_r = __pyx_t_1;

#line 123 "pyPoly2d.pyx"
  __pyx_t_1 = 0;

#line 123 "pyPoly2d.pyx"
  goto __pyx_L0;

  /* "pyPoly2d.pyx":122
 *     def getCoeff(self, int a, int b):
 *         return self.c_poly2d.getCoeff(a,b)
 *     def eval(self, double a, double b):             # <<<<<<<<<<<<<<
 *         return self.c_poly2d.eval(a,b)
 *     def printPoly(self):
 */

#line 122 "pyPoly2d.pyx"


#line 122 "pyPoly2d.pyx"
  /* function exit code */

#line 122 "pyPoly2d.pyx"
  __pyx_L1_error:;

#line 122 "pyPoly2d.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 122 "pyPoly2d.pyx"
  __Pyx_AddTraceback("iscecore.pyPoly2d.eval", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 122 "pyPoly2d.pyx"
  __pyx_r = NULL;

#line 122 "pyPoly2d.pyx"
  __pyx_L0:;

#line 122 "pyPoly2d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 122 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 122 "pyPoly2d.pyx"
  return __pyx_r;

#line 122 "pyPoly2d.pyx"
}

/* "pyPoly2d.pyx":124
 *     def eval(self, double a, double b):
 *         return self.c_poly2d.eval(a,b)
 *     def printPoly(self):             # <<<<<<<<<<<<<<
 *         self.c_poly2d.printPoly()
 * 
 */

#line 124 "pyPoly2d.pyx"


#line 124 "pyPoly2d.pyx"
/* Python wrapper */

#line 124 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_15printPoly(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 124 "pyPoly2d.pyx"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_15printPoly(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 124 "pyPoly2d.pyx"
  PyObject *__pyx_r = 0;

#line 124 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 124 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("printPoly (wrapper)", 0);
  __pyx_r = 
#line 124 "pyPoly2d.pyx"
__pyx_pf_8iscecore_8pyPoly2d_14printPoly(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self));

#line 124 "pyPoly2d.pyx"


#line 124 "pyPoly2d.pyx"
  /* function exit code */

#line 124 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 124 "pyPoly2d.pyx"
  return __pyx_r;

#line 124 "pyPoly2d.pyx"
}

#line 124 "pyPoly2d.pyx"


#line 124 "pyPoly2d.pyx"
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_14printPoly(struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self) {

#line 124 "pyPoly2d.pyx"
  PyObject *__pyx_r = NULL;

#line 124 "pyPoly2d.pyx"
  __Pyx_RefNannyDeclarations

#line 124 "pyPoly2d.pyx"
  __Pyx_RefNannySetupContext("printPoly", 0);

  /* "pyPoly2d.pyx":125
 *         return self.c_poly2d.eval(a,b)
 *     def printPoly(self):
 *         self.c_poly2d.printPoly()             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 125 "pyPoly2d.pyx"
  __pyx_v_self->c_poly2d->printPoly();

  /* "pyPoly2d.pyx":124
 *     def eval(self, double a, double b):
 *         return self.c_poly2d.eval(a,b)
 *     def printPoly(self):             # <<<<<<<<<<<<<<
 *         self.c_poly2d.printPoly()
 * 
 */

#line 124 "pyPoly2d.pyx"


#line 124 "pyPoly2d.pyx"
  /* function exit code */

#line 124 "pyPoly2d.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 124 "pyPoly2d.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 124 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 124 "pyPoly2d.pyx"
  return __pyx_r;

#line 124 "pyPoly2d.pyx"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_8iscecore_8pyPoly2d_16__reduce_cython__(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyPoly2d.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8iscecore_8pyPoly2d_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf_8iscecore_8pyPoly2d_18__setstate_cython__(((struct __pyx_obj_8iscecore_pyPoly2d *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf_8iscecore_8pyPoly2d_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8iscecore_pyPoly2d *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("iscecore.pyPoly2d.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":214
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
/* Python wrapper */

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_r;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = 
#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
__pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
}

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape
#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_i
#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_ndim
#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_endian_detector
#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_little_endian
#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_t
#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  char *__pyx_v_f
#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyArray_Descr *__pyx_v_descr = 0
#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_offset
#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_hasfields
#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_r;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_1;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_2;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_3 = NULL;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_4;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_5;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_6 = NULL;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  char *__pyx_t_7;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("__getbuffer__", 0);

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_v_info != NULL) {

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GIVEREF(__pyx_v_info->obj);

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */

#line 220 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);

#line 220 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

#line 220 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_r = 0;

#line 220 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L0;

#line 220 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":223
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */

#line 223 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_endian_detector = 1;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":224
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */

#line 224 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */

#line 226 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":228
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */

#line 228 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);

#line 228 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":229
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */

#line 229 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_copy_shape = 1;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":228
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */

#line 228 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L4;

#line 228 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */

#line 231 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

#line 231 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_copy_shape = 0;

#line 231 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 231 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L4:;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */

#line 233 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);

#line 233 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_2) {

#line 233 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  } else {

#line 233 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_1 = __pyx_t_2;

#line 233 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L6_bool_binop_done;

#line 233 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":234
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */

#line 234 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);

#line 234 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = __pyx_t_2;

#line 234 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L6_bool_binop_done:;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */

#line 233 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */

#line 235 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 235, __pyx_L1_error)

#line 235 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 235 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 235 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 235 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __PYX_ERR(12, 235, __pyx_L1_error)

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */

#line 233 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */

#line 237 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);

#line 237 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_2) {

#line 237 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  } else {

#line 237 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_1 = __pyx_t_2;

#line 237 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L9_bool_binop_done;

#line 237 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":238
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */

#line 238 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);

#line 238 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = __pyx_t_2;

#line 238 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L9_bool_binop_done:;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */

#line 237 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":239
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */

#line 239 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 239, __pyx_L1_error)

#line 239 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 239 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 239 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 239 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __PYX_ERR(12, 239, __pyx_L1_error)

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */

#line 237 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":241
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */

#line 241 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */

#line 242 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */

#line 243 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (__pyx_v_copy_shape != 0);

#line 243 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */

#line 246 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":247
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */

#line 247 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */

#line 248 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_4 = __pyx_v_ndim;

#line 248 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {

#line 248 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_i = __pyx_t_5;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":249
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */

#line 249 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":250
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */

#line 250 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);

#line 250 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */

#line 243 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L11;

#line 243 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":252
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */

#line 252 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

#line 252 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */

#line 253 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));

#line 253 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 253 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L11:;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":254
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */

#line 254 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->suboffsets = NULL;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */

#line 255 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":256
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */

#line 256 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":259
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */

#line 259 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_f = NULL;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */

#line 260 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);

#line 260 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_INCREF(__pyx_t_3);

#line 260 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);

#line 260 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_3 = 0;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */

#line 263 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */

#line 265 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);

#line 265 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_2) {

#line 265 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  } else {

#line 265 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_1 = __pyx_t_2;

#line 265 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L15_bool_binop_done;

#line 265 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 265 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);

#line 265 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = __pyx_t_2;

#line 265 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L15_bool_binop_done:;

#line 265 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */

#line 267 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_INCREF(Py_None);

#line 267 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GIVEREF(Py_None);

#line 267 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 267 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_v_info->obj);

#line 267 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->obj = Py_None;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */

#line 265 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L14;

#line 265 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */

#line 270 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

#line 270 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_INCREF(((PyObject *)__pyx_v_self));

#line 270 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));

#line 270 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 270 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_v_info->obj);

#line 270 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

#line 270 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 270 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L14:;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */

#line 272 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);

#line 272 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":273
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */

#line 273 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_4 = __pyx_v_descr->type_num;

#line 273 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_t = __pyx_t_4;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */

#line 274 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);

#line 274 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!__pyx_t_2) {

#line 274 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L20_next_or;

#line 274 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 274 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 274 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_2 = (__pyx_v_little_endian != 0);

#line 274 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!__pyx_t_2) {

#line 274 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 274 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_1 = __pyx_t_2;

#line 274 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L19_bool_binop_done;

#line 274 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 274 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L20_next_or:;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */

#line 275 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);

#line 275 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_2) {

#line 275 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 275 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_1 = __pyx_t_2;

#line 275 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L19_bool_binop_done;

#line 275 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 275 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);

#line 275 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_1 = __pyx_t_2;

#line 275 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L19_bool_binop_done:;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */

#line 274 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_1) {

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */

#line 276 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 276, __pyx_L1_error)

#line 276 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 276 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 276 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 276 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __PYX_ERR(12, 276, __pyx_L1_error)

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */

#line 274 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":277
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */

#line 277 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    switch (__pyx_v_t) {

#line 277 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_BYTE:

#line 277 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"b");

#line 277 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */

#line 278 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_UBYTE:

#line 278 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"B");

#line 278 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */

#line 279 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_SHORT:

#line 279 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"h");

#line 279 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */

#line 280 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_USHORT:

#line 280 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"H");

#line 280 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":281
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */

#line 281 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_INT:

#line 281 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"i");

#line 281 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */

#line 282 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_UINT:

#line 282 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"I");

#line 282 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */

#line 283 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_LONG:

#line 283 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"l");

#line 283 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */

#line 284 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_ULONG:

#line 284 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"L");

#line 284 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */

#line 285 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_LONGLONG:

#line 285 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"q");

#line 285 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */

#line 286 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_ULONGLONG:

#line 286 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"Q");

#line 286 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":287
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */

#line 287 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_FLOAT:

#line 287 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"f");

#line 287 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */

#line 288 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_DOUBLE:

#line 288 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"d");

#line 288 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":289
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */

#line 289 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_LONGDOUBLE:

#line 289 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"g");

#line 289 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */

#line 290 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_CFLOAT:

#line 290 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"Zf");

#line 290 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */

#line 291 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_CDOUBLE:

#line 291 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"Zd");

#line 291 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */

#line 292 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_CLONGDOUBLE:

#line 292 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"Zg");

#line 292 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */

#line 293 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_OBJECT:

#line 293 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = ((char *)"O");

#line 293 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

#line 293 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      default:

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":295
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */

#line 295 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 295, __pyx_L1_error)

#line 295 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 295 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(12, 295, __pyx_L1_error)

#line 295 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_6);

#line 295 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 295 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 295, __pyx_L1_error)

#line 295 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 295 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GIVEREF(__pyx_t_6);

#line 295 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);

#line 295 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = 0;

#line 295 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(12, 295, __pyx_L1_error)

#line 295 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_6);

#line 295 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 295 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);

#line 295 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 295 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __PYX_ERR(12, 295, __pyx_L1_error)

#line 295 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

#line 295 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":296
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */

#line 296 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 */

#line 297 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_r = 0;

#line 297 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L0;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */

#line 272 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":299
 *                 return
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */

#line 299 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

#line 299 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":300
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */

#line 300 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    (__pyx_v_info->format[0]) = '^';

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":301
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */

#line 301 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_offset = 0;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */

#line 302 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(12, 302, __pyx_L1_error)

#line 302 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_f = __pyx_t_7;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":305
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */

#line 305 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    (__pyx_v_f[0]) = '\x00';

#line 305 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":214
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_3);

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_6);

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = -1;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L2;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(Py_None);

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L2:;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 214 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":307
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
/* Python wrapper */

#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/

#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {

#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);

#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
}

#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {

#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_1;

#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":308
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */

#line 308 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);

#line 308 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":309
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)
 */

#line 309 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    PyObject_Free(__pyx_v_info->format);

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":308
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */

#line 308 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":310
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */

#line 310 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);

#line 310 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":311
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */

#line 311 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    PyObject_Free(__pyx_v_info->strides);

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":310
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */

#line 310 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":307
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 307 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":788
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

#line 788 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 788 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {

#line 788 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;

#line 788 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 788 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 788 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":789
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */

#line 789 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 789 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 789, __pyx_L1_error)

#line 789 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 789 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 789 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 789 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":788
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

#line 788 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 788 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 788 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 788 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 788 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 788 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 788 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 788 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 788 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 788 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 788 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

#line 791 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 791 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {

#line 791 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;

#line 791 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 791 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 791 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":792
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */

#line 792 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 792 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 792, __pyx_L1_error)

#line 792 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 792 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 792 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 792 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

#line 791 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 791 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 791 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 791 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 791 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 791 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 791 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 791 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 791 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 791 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 791 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

#line 794 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 794 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {

#line 794 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;

#line 794 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 794 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 794 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */

#line 795 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 795 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 795, __pyx_L1_error)

#line 795 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 795 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 795 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 795 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

#line 794 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 794 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 794 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 794 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 794 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 794 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 794 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 794 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 794 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 794 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 794 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":797
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

#line 797 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 797 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {

#line 797 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;

#line 797 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 797 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 797 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":798
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */

#line 798 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 798 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 798, __pyx_L1_error)

#line 798 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 798 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 798 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 798 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":797
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

#line 797 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 797 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 797 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 797 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 797 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 797 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 797 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 797 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 797 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 797 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 797 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":800
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

#line 800 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 800 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {

#line 800 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;

#line 800 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 800 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 800 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":801
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */

#line 801 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 801 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 801, __pyx_L1_error)

#line 801 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 801 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 801 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 801 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":800
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

#line 800 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 800 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 800 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 800 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 800 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 800 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 800 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 800 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 800 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 800 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 800 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

#line 803 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 803 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {

#line 803 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;

#line 803 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 803 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_1;

#line 803 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":804
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */

#line 804 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);

#line 804 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":805
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */

#line 805 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF(__pyx_r);

#line 805 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));

#line 805 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);

#line 805 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L0;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":804
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */

#line 804 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":807
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */

#line 807 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

#line 807 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF(__pyx_r);

#line 807 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_INCREF(__pyx_empty_tuple);

#line 807 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_r = __pyx_empty_tuple;

#line 807 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L0;

#line 807 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

#line 803 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 803 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 803 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 803 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 803 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 803 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 803 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":809
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0
#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_endian_detector
#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_little_endian
#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyObject *__pyx_v_fields = 0
#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyObject *__pyx_v_childname = NULL
#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyObject *__pyx_v_new_offset = NULL
#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyObject *__pyx_v_t = NULL
#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
;

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  char *__pyx_r;

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  Py_ssize_t __pyx_t_2;

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_3 = NULL;

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_4 = NULL;

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_5;

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_6;

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_7;

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  long __pyx_t_8;

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  char *__pyx_t_9;

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":814
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */

#line 814 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_endian_detector = 1;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */

#line 815 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */

#line 818 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (unlikely(__pyx_v_descr->names == Py_None)) {

#line 818 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");

#line 818 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __PYX_ERR(12, 818, __pyx_L1_error)

#line 818 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 818 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;

#line 818 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  for (;;) {

#line 818 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 818 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 818 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(12, 818, __pyx_L1_error)

#line 818 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    #else

#line 818 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 818, __pyx_L1_error)

#line 818 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 818 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    #endif

#line 818 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);

#line 818 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = 0;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":819
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */

#line 819 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (unlikely(__pyx_v_descr->fields == Py_None)) {

#line 819 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 819 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __PYX_ERR(12, 819, __pyx_L1_error)

#line 819 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 819 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 819, __pyx_L1_error)

#line 819 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 819 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(12, 819, __pyx_L1_error)

#line 819 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));

#line 819 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = 0;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (likely(__pyx_v_fields != Py_None)) {

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      PyObject* sequence = __pyx_v_fields;

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      #if !CYTHON_COMPILING_IN_PYPY

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      Py_ssize_t size = Py_SIZE(sequence);

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      #else

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      Py_ssize_t size = PySequence_Size(sequence);

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      #endif

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (unlikely(size != 2)) {

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __PYX_ERR(12, 820, __pyx_L1_error)

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_INCREF(__pyx_t_3);

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_INCREF(__pyx_t_4);

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      #else

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 820, __pyx_L1_error)

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 820, __pyx_L1_error)

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      #endif

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(12, 820, __pyx_L1_error)

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(12, 820, __pyx_L1_error)

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = 0;

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);

#line 820 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_4 = 0;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */

#line 822 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 822, __pyx_L1_error)

#line 822 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_4);

#line 822 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 822, __pyx_L1_error)

#line 822 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 822 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 822 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(12, 822, __pyx_L1_error)

#line 822 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 822 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);

#line 822 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_6) {

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":823
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */

#line 823 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 823, __pyx_L1_error)

#line 823 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 823 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 823 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 823 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __PYX_ERR(12, 823, __pyx_L1_error)

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */

#line 822 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":825
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */

#line 825 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);

#line 825 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!__pyx_t_7) {

#line 825 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L8_next_or;

#line 825 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 825 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 825 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = (__pyx_v_little_endian != 0);

#line 825 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!__pyx_t_7) {

#line 825 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 825 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __pyx_t_7;

#line 825 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L7_bool_binop_done;

#line 825 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 825 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L8_next_or:;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */

#line 826 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);

#line 826 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_7) {

#line 826 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 826 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __pyx_t_7;

#line 826 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L7_bool_binop_done;

#line 826 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 826 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);

#line 826 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_6 = __pyx_t_7;

#line 826 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L7_bool_binop_done:;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":825
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */

#line 825 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_6) {

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */

#line 827 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 827, __pyx_L1_error)

#line 827 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 827 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 827 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 827 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __PYX_ERR(12, 827, __pyx_L1_error)

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":825
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */

#line 825 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */

#line 837 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    while (1) {

#line 837 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 837, __pyx_L1_error)

#line 837 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 837 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 837, __pyx_L1_error)

#line 837 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 837 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(12, 837, __pyx_L1_error)

#line 837 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 837 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (!__pyx_t_6) break;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */

#line 838 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      (__pyx_v_f[0]) = 0x78;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */

#line 839 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */

#line 840 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_8 = 0;

#line 840 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);

#line 840 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */

#line 842 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_8 = 0;

#line 842 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */

#line 844 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);

#line 844 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_6) {

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":845
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */

#line 845 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 845, __pyx_L1_error)

#line 845 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 845 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);

#line 845 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = 0;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":846
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */

#line 846 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);

#line 846 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

        /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":847
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */

#line 847 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 847, __pyx_L1_error)

#line 847 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GOTREF(__pyx_t_4);

#line 847 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 847 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 847 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __PYX_ERR(12, 847, __pyx_L1_error)

        /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":846
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */

#line 846 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":850
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */

#line 850 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 850, __pyx_L1_error)

#line 850 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 850 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 850, __pyx_L1_error)

#line 850 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 850 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(12, 850, __pyx_L1_error)

#line 850 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 850 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 850 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 98;

#line 850 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 850 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */

#line 851 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 851, __pyx_L1_error)

#line 851 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 851 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 851, __pyx_L1_error)

#line 851 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 851 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(12, 851, __pyx_L1_error)

#line 851 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 851 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 851 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 66;

#line 851 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 851 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":852
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */

#line 852 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 852, __pyx_L1_error)

#line 852 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 852 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 852, __pyx_L1_error)

#line 852 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 852 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(12, 852, __pyx_L1_error)

#line 852 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 852 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 852 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 0x68;

#line 852 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 852 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":853
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */

#line 853 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 853, __pyx_L1_error)

#line 853 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 853 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 853, __pyx_L1_error)

#line 853 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 853 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(12, 853, __pyx_L1_error)

#line 853 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 853 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 853 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 72;

#line 853 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 853 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":854
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */

#line 854 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 854, __pyx_L1_error)

#line 854 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 854 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 854, __pyx_L1_error)

#line 854 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 854 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(12, 854, __pyx_L1_error)

#line 854 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 854 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 854 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 0x69;

#line 854 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 854 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */

#line 855 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 855, __pyx_L1_error)

#line 855 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 855 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 855, __pyx_L1_error)

#line 855 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 855 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(12, 855, __pyx_L1_error)

#line 855 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 855 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 855 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 73;

#line 855 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 855 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":856
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */

#line 856 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 856, __pyx_L1_error)

#line 856 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 856 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 856, __pyx_L1_error)

#line 856 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 856 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(12, 856, __pyx_L1_error)

#line 856 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 856 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 856 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 0x6C;

#line 856 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 856 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":857
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */

#line 857 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 857, __pyx_L1_error)

#line 857 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 857 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 857, __pyx_L1_error)

#line 857 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 857 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(12, 857, __pyx_L1_error)

#line 857 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 857 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 857 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 76;

#line 857 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 857 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */

#line 858 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 858, __pyx_L1_error)

#line 858 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 858 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 858, __pyx_L1_error)

#line 858 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 858 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(12, 858, __pyx_L1_error)

#line 858 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 858 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 858 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 0x71;

#line 858 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 858 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":859
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */

#line 859 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 859, __pyx_L1_error)

#line 859 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 859 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 859, __pyx_L1_error)

#line 859 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 859 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(12, 859, __pyx_L1_error)

#line 859 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 859 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 859 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 81;

#line 859 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 859 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":860
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */

#line 860 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 860, __pyx_L1_error)

#line 860 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 860 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 860, __pyx_L1_error)

#line 860 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 860 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(12, 860, __pyx_L1_error)

#line 860 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 860 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 860 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 0x66;

#line 860 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 860 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":861
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */

#line 861 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 861, __pyx_L1_error)

#line 861 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 861 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 861, __pyx_L1_error)

#line 861 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 861 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(12, 861, __pyx_L1_error)

#line 861 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 861 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 861 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 0x64;

#line 861 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 861 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":862
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */

#line 862 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 862, __pyx_L1_error)

#line 862 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 862 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 862, __pyx_L1_error)

#line 862 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 862 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(12, 862, __pyx_L1_error)

#line 862 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 862 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 862 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 0x67;

#line 862 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 862 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":863
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */

#line 863 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 863, __pyx_L1_error)

#line 863 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 863 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 863, __pyx_L1_error)

#line 863 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 863 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(12, 863, __pyx_L1_error)

#line 863 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 863 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 863 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 90;

#line 863 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[1]) = 0x66;

#line 863 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_v_f = (__pyx_v_f + 1);

#line 863 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 863 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":864
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */

#line 864 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 864, __pyx_L1_error)

#line 864 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 864 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 864, __pyx_L1_error)

#line 864 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 864 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(12, 864, __pyx_L1_error)

#line 864 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 864 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 864 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 90;

#line 864 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[1]) = 0x64;

#line 864 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_v_f = (__pyx_v_f + 1);

#line 864 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 864 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":865
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */

#line 865 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 865, __pyx_L1_error)

#line 865 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 865 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 865, __pyx_L1_error)

#line 865 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 865 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(12, 865, __pyx_L1_error)

#line 865 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 865 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 865 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 90;

#line 865 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[1]) = 0x67;

#line 865 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_v_f = (__pyx_v_f + 1);

#line 865 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 865 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":866
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */

#line 866 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 866, __pyx_L1_error)

#line 866 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 866 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 866, __pyx_L1_error)

#line 866 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 866 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(12, 866, __pyx_L1_error)

#line 866 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 866 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 866 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 79;

#line 866 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 866 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":868
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */

#line 868 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      /*else*/ {

#line 868 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 868, __pyx_L1_error)

#line 868 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GOTREF(__pyx_t_3);

#line 868 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 868, __pyx_L1_error)

#line 868 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GOTREF(__pyx_t_4);

#line 868 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GIVEREF(__pyx_t_3);

#line 868 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 868 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_3 = 0;

#line 868 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 868, __pyx_L1_error)

#line 868 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GOTREF(__pyx_t_3);

#line 868 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 868 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 868 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 868 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
        __PYX_ERR(12, 868, __pyx_L1_error)

#line 868 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

#line 868 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_L15:;

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":869
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */

#line 869 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */

#line 844 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L13;

#line 844 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":873
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */

#line 873 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    /*else*/ {

#line 873 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(12, 873, __pyx_L1_error)

#line 873 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_t_9;

#line 873 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 873 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L13:;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */

#line 818 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 818 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":874
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 874 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_v_f;

#line 874 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":809
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_3);

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_4);

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = NULL;

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_child);

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_v_fields);

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_v_childname);

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_v_new_offset);

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_v_t);

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 809 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":990
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

#line 990 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 990 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr
#line 990 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
;

#line 990 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 990 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_1;

#line 990 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_2;

#line 990 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */

#line 992 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (__pyx_v_base == Py_None);

#line 992 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = (__pyx_t_1 != 0);

#line 992 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_2) {

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":993
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */

#line 993 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_baseptr = NULL;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":992
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */

#line 992 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L3;

#line 992 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":995
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */

#line 995 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

#line 995 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    Py_INCREF(__pyx_v_base);

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":996
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */

#line 996 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);

#line 996 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 996 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L3:;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":997
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */

#line 997 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":998
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */

#line 998 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":990
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

#line 990 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 990 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 990 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 990 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

#line 1000 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 1000 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {

#line 1000 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;

#line 1000 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 1000 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_1;

#line 1000 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1001
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */

#line 1001 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);

#line 1001 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1002
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */

#line 1002 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF(__pyx_r);

#line 1002 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_INCREF(Py_None);

#line 1002 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_r = Py_None;

#line 1002 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L0;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1001
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */

#line 1001 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1004
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1004 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

#line 1004 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF(__pyx_r);

#line 1004 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));

#line 1004 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_r = ((PyObject *)__pyx_v_arr->base);

#line 1004 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L0;

#line 1004 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

#line 1000 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 1000 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 1000 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 1000 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 1000 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 1000 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 1000 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_r;

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_2 = NULL;

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_3 = NULL;

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_4;

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_5 = NULL;

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_6 = NULL;

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_7 = NULL;

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_8 = NULL;

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1010
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  {

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_PyThreadState_declare

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_PyThreadState_assign

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XGOTREF(__pyx_t_1);

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XGOTREF(__pyx_t_2);

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XGOTREF(__pyx_t_3);

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    /*try:*/ {

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1011
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */

#line 1011 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(12, 1011, __pyx_L3_error)

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1010
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L8_try_end;

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L3_error:;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1012
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */

#line 1012 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));

#line 1012 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_4) {

#line 1012 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1012 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(12, 1012, __pyx_L5_except_error)

#line 1012 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 1012 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_6);

#line 1012 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1013
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */

#line 1013 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(12, 1013, __pyx_L5_except_error)

#line 1013 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_8);

#line 1013 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);

#line 1013 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 1013 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __PYX_ERR(12, 1013, __pyx_L5_except_error)

#line 1013 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 1013 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L5_except_error;

#line 1013 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L5_except_error:;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1010
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L1_error;

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L8_try_end:;

#line 1010 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_5);

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_6);

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_7);

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_8);

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = -1;

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 1009 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1015
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_r;

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_2 = NULL;

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_3 = NULL;

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_4;

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_5 = NULL;

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_6 = NULL;

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_7 = NULL;

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_8 = NULL;

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1016
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  {

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_PyThreadState_declare

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_PyThreadState_assign

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XGOTREF(__pyx_t_1);

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XGOTREF(__pyx_t_2);

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XGOTREF(__pyx_t_3);

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    /*try:*/ {

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1017
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */

#line 1017 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(12, 1017, __pyx_L3_error)

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1016
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L8_try_end;

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L3_error:;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1018
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */

#line 1018 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));

#line 1018 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_4) {

#line 1018 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1018 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(12, 1018, __pyx_L5_except_error)

#line 1018 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 1018 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_6);

#line 1018 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1019
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */

#line 1019 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(12, 1019, __pyx_L5_except_error)

#line 1019 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_8);

#line 1019 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);

#line 1019 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 1019 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __PYX_ERR(12, 1019, __pyx_L5_except_error)

#line 1019 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 1019 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L5_except_error;

#line 1019 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L5_except_error:;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1016
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L1_error;

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L8_try_end:;

#line 1016 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1015
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_5);

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_6);

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_7);

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_8);

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = -1;

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 1015 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1021
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_r;

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_2 = NULL;

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_3 = NULL;

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_t_4;

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_5 = NULL;

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_6 = NULL;

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_7 = NULL;

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_t_8 = NULL;

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  {

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_PyThreadState_declare

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_PyThreadState_assign

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XGOTREF(__pyx_t_1);

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XGOTREF(__pyx_t_2);

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XGOTREF(__pyx_t_3);

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    /*try:*/ {

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1023
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */

#line 1023 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(12, 1023, __pyx_L3_error)

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L8_try_end;

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L3_error:;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1024
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */

#line 1024 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));

#line 1024 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_4) {

#line 1024 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1024 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(12, 1024, __pyx_L5_except_error)

#line 1024 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 1024 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_6);

#line 1024 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1025
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */

#line 1025 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(12, 1025, __pyx_L5_except_error)

#line 1025 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_8);

#line 1025 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);

#line 1025 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 1025 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
      __PYX_ERR(12, 1025, __pyx_L5_except_error)

#line 1025 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 1025 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L5_except_error;

#line 1025 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L5_except_error:;

    /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L1_error;

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L8_try_end:;

#line 1022 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1021
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_5);

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_6);

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_7);

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_8);

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = -1;

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 1021 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

#line 13 "string.from_py"


#line 13 "string.from_py"
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length
#line 13 "string.from_py"
;
  char const *__pyx_v_data
#line 13 "string.from_py"
;

#line 13 "string.from_py"
  std::string __pyx_r;

#line 13 "string.from_py"
  __Pyx_RefNannyDeclarations

#line 13 "string.from_py"
  char const *__pyx_t_1;

#line 13 "string.from_py"
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */

#line 15 "string.from_py"
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(2, 15, __pyx_L1_error)

#line 15 "string.from_py"
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 16 "string.from_py"
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);

#line 16 "string.from_py"
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

#line 13 "string.from_py"


#line 13 "string.from_py"
  /* function exit code */

#line 13 "string.from_py"
  __pyx_L1_error:;

#line 13 "string.from_py"
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 13 "string.from_py"
  __Pyx_pretend_to_initialize(&__pyx_r);

#line 13 "string.from_py"
  __pyx_L0:;

#line 13 "string.from_py"
  __Pyx_RefNannyFinishContext();

#line 13 "string.from_py"
  return __pyx_r;

#line 13 "string.from_py"
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 31 "string.to_py"


#line 31 "string.to_py"
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {

#line 31 "string.to_py"
  PyObject *__pyx_r = NULL;

#line 31 "string.to_py"
  __Pyx_RefNannyDeclarations

#line 31 "string.to_py"
  PyObject *__pyx_t_1 = NULL;

#line 31 "string.to_py"
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */

#line 32 "string.to_py"
  __Pyx_XDECREF(__pyx_r);

#line 32 "string.to_py"
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 32, __pyx_L1_error)

#line 32 "string.to_py"
  __Pyx_GOTREF(__pyx_t_1);

#line 32 "string.to_py"
  __pyx_r = __pyx_t_1;

#line 32 "string.to_py"
  __pyx_t_1 = 0;

#line 32 "string.to_py"
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 31 "string.to_py"


#line 31 "string.to_py"
  /* function exit code */

#line 31 "string.to_py"
  __pyx_L1_error:;

#line 31 "string.to_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 31 "string.to_py"
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 31 "string.to_py"
  __pyx_r = 0;

#line 31 "string.to_py"
  __pyx_L0:;

#line 31 "string.to_py"
  __Pyx_XGIVEREF(__pyx_r);

#line 31 "string.to_py"
  __Pyx_RefNannyFinishContext();

#line 31 "string.to_py"
  return __pyx_r;

#line 31 "string.to_py"
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 37 "string.to_py"


#line 37 "string.to_py"
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {

#line 37 "string.to_py"
  PyObject *__pyx_r = NULL;

#line 37 "string.to_py"
  __Pyx_RefNannyDeclarations

#line 37 "string.to_py"
  PyObject *__pyx_t_1 = NULL;

#line 37 "string.to_py"
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */

#line 38 "string.to_py"
  __Pyx_XDECREF(__pyx_r);

#line 38 "string.to_py"
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 38, __pyx_L1_error)

#line 38 "string.to_py"
  __Pyx_GOTREF(__pyx_t_1);

#line 38 "string.to_py"
  __pyx_r = __pyx_t_1;

#line 38 "string.to_py"
  __pyx_t_1 = 0;

#line 38 "string.to_py"
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 37 "string.to_py"


#line 37 "string.to_py"
  /* function exit code */

#line 37 "string.to_py"
  __pyx_L1_error:;

#line 37 "string.to_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 37 "string.to_py"
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 37 "string.to_py"
  __pyx_r = 0;

#line 37 "string.to_py"
  __pyx_L0:;

#line 37 "string.to_py"
  __Pyx_XGIVEREF(__pyx_r);

#line 37 "string.to_py"
  __Pyx_RefNannyFinishContext();

#line 37 "string.to_py"
  return __pyx_r;

#line 37 "string.to_py"
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 43 "string.to_py"


#line 43 "string.to_py"
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {

#line 43 "string.to_py"
  PyObject *__pyx_r = NULL;

#line 43 "string.to_py"
  __Pyx_RefNannyDeclarations

#line 43 "string.to_py"
  PyObject *__pyx_t_1 = NULL;

#line 43 "string.to_py"
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */

#line 44 "string.to_py"
  __Pyx_XDECREF(__pyx_r);

#line 44 "string.to_py"
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 44, __pyx_L1_error)

#line 44 "string.to_py"
  __Pyx_GOTREF(__pyx_t_1);

#line 44 "string.to_py"
  __pyx_r = __pyx_t_1;

#line 44 "string.to_py"
  __pyx_t_1 = 0;

#line 44 "string.to_py"
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 43 "string.to_py"


#line 43 "string.to_py"
  /* function exit code */

#line 43 "string.to_py"
  __pyx_L1_error:;

#line 43 "string.to_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 43 "string.to_py"
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 43 "string.to_py"
  __pyx_r = 0;

#line 43 "string.to_py"
  __pyx_L0:;

#line 43 "string.to_py"
  __Pyx_XGIVEREF(__pyx_r);

#line 43 "string.to_py"
  __Pyx_RefNannyFinishContext();

#line 43 "string.to_py"
  return __pyx_r;

#line 43 "string.to_py"
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 49 "string.to_py"


#line 49 "string.to_py"
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {

#line 49 "string.to_py"
  PyObject *__pyx_r = NULL;

#line 49 "string.to_py"
  __Pyx_RefNannyDeclarations

#line 49 "string.to_py"
  PyObject *__pyx_t_1 = NULL;

#line 49 "string.to_py"
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */

#line 50 "string.to_py"
  __Pyx_XDECREF(__pyx_r);

#line 50 "string.to_py"
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 50, __pyx_L1_error)

#line 50 "string.to_py"
  __Pyx_GOTREF(__pyx_t_1);

#line 50 "string.to_py"
  __pyx_r = __pyx_t_1;

#line 50 "string.to_py"
  __pyx_t_1 = 0;

#line 50 "string.to_py"
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 49 "string.to_py"


#line 49 "string.to_py"
  /* function exit code */

#line 49 "string.to_py"
  __pyx_L1_error:;

#line 49 "string.to_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 49 "string.to_py"
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 49 "string.to_py"
  __pyx_r = 0;

#line 49 "string.to_py"
  __pyx_L0:;

#line 49 "string.to_py"
  __Pyx_XGIVEREF(__pyx_r);

#line 49 "string.to_py"
  __Pyx_RefNannyFinishContext();

#line 49 "string.to_py"
  return __pyx_r;

#line 49 "string.to_py"
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

#line 55 "string.to_py"


#line 55 "string.to_py"
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {

#line 55 "string.to_py"
  PyObject *__pyx_r = NULL;

#line 55 "string.to_py"
  __Pyx_RefNannyDeclarations

#line 55 "string.to_py"
  PyObject *__pyx_t_1 = NULL;

#line 55 "string.to_py"
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */

#line 56 "string.to_py"
  __Pyx_XDECREF(__pyx_r);

#line 56 "string.to_py"
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 56, __pyx_L1_error)

#line 56 "string.to_py"
  __Pyx_GOTREF(__pyx_t_1);

#line 56 "string.to_py"
  __pyx_r = __pyx_t_1;

#line 56 "string.to_py"
  __pyx_t_1 = 0;

#line 56 "string.to_py"
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

#line 55 "string.to_py"


#line 55 "string.to_py"
  /* function exit code */

#line 55 "string.to_py"
  __pyx_L1_error:;

#line 55 "string.to_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 55 "string.to_py"
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 55 "string.to_py"
  __pyx_r = 0;

#line 55 "string.to_py"
  __pyx_L0:;

#line 55 "string.to_py"
  __Pyx_XGIVEREF(__pyx_r);

#line 55 "string.to_py"
  __Pyx_RefNannyFinishContext();

#line 55 "string.to_py"
  return __pyx_r;

#line 55 "string.to_py"
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double>  __pyx_v_v
#line 45 "vector.from_py"
;
  PyObject *__pyx_v_item = NULL
#line 45 "vector.from_py"
;

#line 45 "vector.from_py"
  std::vector<double>  __pyx_r;

#line 45 "vector.from_py"
  __Pyx_RefNannyDeclarations

#line 45 "vector.from_py"
  PyObject *__pyx_t_1 = NULL;

#line 45 "vector.from_py"
  Py_ssize_t __pyx_t_2;

#line 45 "vector.from_py"
  PyObject *(*__pyx_t_3)(PyObject *);

#line 45 "vector.from_py"
  PyObject *__pyx_t_4 = NULL;

#line 45 "vector.from_py"
  double __pyx_t_5;

#line 45 "vector.from_py"
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */

#line 47 "vector.from_py"
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {

#line 47 "vector.from_py"
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;

#line 47 "vector.from_py"
    __pyx_t_3 = NULL;

#line 47 "vector.from_py"
  } else {
    __pyx_t_2 = -1; 
#line 47 "vector.from_py"
__pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
    __Pyx_GOTREF(__pyx_t_1);

#line 47 "vector.from_py"
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
  }

#line 47 "vector.from_py"
  for (;;) {

#line 47 "vector.from_py"
    if (likely(!__pyx_t_3)) {

#line 47 "vector.from_py"
      if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 47 "vector.from_py"
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;

#line 47 "vector.from_py"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 47 "vector.from_py"
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        #else

#line 47 "vector.from_py"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        __Pyx_GOTREF(__pyx_t_4);

#line 47 "vector.from_py"
        #endif

#line 47 "vector.from_py"
      } else {

#line 47 "vector.from_py"
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 47 "vector.from_py"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 47 "vector.from_py"
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        #else

#line 47 "vector.from_py"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        __Pyx_GOTREF(__pyx_t_4);

#line 47 "vector.from_py"
        #endif

#line 47 "vector.from_py"
      }
    } else 
#line 47 "vector.from_py"
{

#line 47 "vector.from_py"
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);

#line 47 "vector.from_py"
      if (unlikely(!__pyx_t_4)) {

#line 47 "vector.from_py"
        PyObject* exc_type = PyErr_Occurred();

#line 47 "vector.from_py"
        if (exc_type) {

#line 47 "vector.from_py"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 47 "vector.from_py"
          else __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        }

#line 47 "vector.from_py"
        break;

#line 47 "vector.from_py"
      }

#line 47 "vector.from_py"
      __Pyx_GOTREF(__pyx_t_4);

#line 47 "vector.from_py"
    }

#line 47 "vector.from_py"
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);

#line 47 "vector.from_py"
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */

#line 48 "vector.from_py"
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 48, __pyx_L1_error)

#line 48 "vector.from_py"
    __pyx_v_v.push_back(((double)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */

#line 47 "vector.from_py"
  }

#line 47 "vector.from_py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 49 "vector.from_py"
  __pyx_r = __pyx_v_v;

#line 49 "vector.from_py"
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

#line 45 "vector.from_py"


#line 45 "vector.from_py"
  /* function exit code */

#line 45 "vector.from_py"
  __pyx_L1_error:;

#line 45 "vector.from_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 45 "vector.from_py"
  __Pyx_XDECREF(__pyx_t_4);

#line 45 "vector.from_py"
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 45 "vector.from_py"
  __Pyx_pretend_to_initialize(&__pyx_r);

#line 45 "vector.from_py"
  __pyx_L0:;

#line 45 "vector.from_py"
  __Pyx_XDECREF(__pyx_v_item);

#line 45 "vector.from_py"
  __Pyx_RefNannyFinishContext();

#line 45 "vector.from_py"
  return __pyx_r;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static std::vector<std::vector<double> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(PyObject *__pyx_v_o) {
  std::vector<std::vector<double> >  __pyx_v_v
#line 45 "vector.from_py"
;
  PyObject *__pyx_v_item = NULL
#line 45 "vector.from_py"
;

#line 45 "vector.from_py"
  std::vector<std::vector<double> >  __pyx_r;

#line 45 "vector.from_py"
  __Pyx_RefNannyDeclarations

#line 45 "vector.from_py"
  PyObject *__pyx_t_1 = NULL;

#line 45 "vector.from_py"
  Py_ssize_t __pyx_t_2;

#line 45 "vector.from_py"
  PyObject *(*__pyx_t_3)(PyObject *);

#line 45 "vector.from_py"
  PyObject *__pyx_t_4 = NULL;

#line 45 "vector.from_py"
  std::vector<double>  __pyx_t_5;

#line 45 "vector.from_py"
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */

#line 47 "vector.from_py"
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {

#line 47 "vector.from_py"
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;

#line 47 "vector.from_py"
    __pyx_t_3 = NULL;

#line 47 "vector.from_py"
  } else {
    __pyx_t_2 = -1; 
#line 47 "vector.from_py"
__pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
    __Pyx_GOTREF(__pyx_t_1);

#line 47 "vector.from_py"
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
  }

#line 47 "vector.from_py"
  for (;;) {

#line 47 "vector.from_py"
    if (likely(!__pyx_t_3)) {

#line 47 "vector.from_py"
      if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 47 "vector.from_py"
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;

#line 47 "vector.from_py"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 47 "vector.from_py"
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        #else

#line 47 "vector.from_py"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        __Pyx_GOTREF(__pyx_t_4);

#line 47 "vector.from_py"
        #endif

#line 47 "vector.from_py"
      } else {

#line 47 "vector.from_py"
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 47 "vector.from_py"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 47 "vector.from_py"
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        #else

#line 47 "vector.from_py"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        __Pyx_GOTREF(__pyx_t_4);

#line 47 "vector.from_py"
        #endif

#line 47 "vector.from_py"
      }
    } else 
#line 47 "vector.from_py"
{

#line 47 "vector.from_py"
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);

#line 47 "vector.from_py"
      if (unlikely(!__pyx_t_4)) {

#line 47 "vector.from_py"
        PyObject* exc_type = PyErr_Occurred();

#line 47 "vector.from_py"
        if (exc_type) {

#line 47 "vector.from_py"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 47 "vector.from_py"
          else __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        }

#line 47 "vector.from_py"
        break;

#line 47 "vector.from_py"
      }

#line 47 "vector.from_py"
      __Pyx_GOTREF(__pyx_t_4);

#line 47 "vector.from_py"
    }

#line 47 "vector.from_py"
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);

#line 47 "vector.from_py"
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */

#line 48 "vector.from_py"
    __pyx_t_5 = __pyx_convert_vector_from_py_double(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 48, __pyx_L1_error)

#line 48 "vector.from_py"
    __pyx_v_v.push_back(((std::vector<double> )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */

#line 47 "vector.from_py"
  }

#line 47 "vector.from_py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 49 "vector.from_py"
  __pyx_r = __pyx_v_v;

#line 49 "vector.from_py"
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

#line 45 "vector.from_py"


#line 45 "vector.from_py"
  /* function exit code */

#line 45 "vector.from_py"
  __pyx_L1_error:;

#line 45 "vector.from_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 45 "vector.from_py"
  __Pyx_XDECREF(__pyx_t_4);

#line 45 "vector.from_py"
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 45 "vector.from_py"
  __Pyx_pretend_to_initialize(&__pyx_r);

#line 45 "vector.from_py"
  __pyx_L0:;

#line 45 "vector.from_py"
  __Pyx_XDECREF(__pyx_v_item);

#line 45 "vector.from_py"
  __Pyx_RefNannyFinishContext();

#line 45 "vector.from_py"
  return __pyx_r;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static std::vector<float>  __pyx_convert_vector_from_py_float(PyObject *__pyx_v_o) {
  std::vector<float>  __pyx_v_v
#line 45 "vector.from_py"
;
  PyObject *__pyx_v_item = NULL
#line 45 "vector.from_py"
;

#line 45 "vector.from_py"
  std::vector<float>  __pyx_r;

#line 45 "vector.from_py"
  __Pyx_RefNannyDeclarations

#line 45 "vector.from_py"
  PyObject *__pyx_t_1 = NULL;

#line 45 "vector.from_py"
  Py_ssize_t __pyx_t_2;

#line 45 "vector.from_py"
  PyObject *(*__pyx_t_3)(PyObject *);

#line 45 "vector.from_py"
  PyObject *__pyx_t_4 = NULL;

#line 45 "vector.from_py"
  float __pyx_t_5;

#line 45 "vector.from_py"
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_float", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_float(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */

#line 47 "vector.from_py"
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {

#line 47 "vector.from_py"
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;

#line 47 "vector.from_py"
    __pyx_t_3 = NULL;

#line 47 "vector.from_py"
  } else {
    __pyx_t_2 = -1; 
#line 47 "vector.from_py"
__pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
    __Pyx_GOTREF(__pyx_t_1);

#line 47 "vector.from_py"
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
  }

#line 47 "vector.from_py"
  for (;;) {

#line 47 "vector.from_py"
    if (likely(!__pyx_t_3)) {

#line 47 "vector.from_py"
      if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 47 "vector.from_py"
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;

#line 47 "vector.from_py"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 47 "vector.from_py"
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        #else

#line 47 "vector.from_py"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        __Pyx_GOTREF(__pyx_t_4);

#line 47 "vector.from_py"
        #endif

#line 47 "vector.from_py"
      } else {

#line 47 "vector.from_py"
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 47 "vector.from_py"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 47 "vector.from_py"
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        #else

#line 47 "vector.from_py"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        __Pyx_GOTREF(__pyx_t_4);

#line 47 "vector.from_py"
        #endif

#line 47 "vector.from_py"
      }
    } else 
#line 47 "vector.from_py"
{

#line 47 "vector.from_py"
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);

#line 47 "vector.from_py"
      if (unlikely(!__pyx_t_4)) {

#line 47 "vector.from_py"
        PyObject* exc_type = PyErr_Occurred();

#line 47 "vector.from_py"
        if (exc_type) {

#line 47 "vector.from_py"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 47 "vector.from_py"
          else __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        }

#line 47 "vector.from_py"
        break;

#line 47 "vector.from_py"
      }

#line 47 "vector.from_py"
      __Pyx_GOTREF(__pyx_t_4);

#line 47 "vector.from_py"
    }

#line 47 "vector.from_py"
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);

#line 47 "vector.from_py"
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */

#line 48 "vector.from_py"
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_item); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(2, 48, __pyx_L1_error)

#line 48 "vector.from_py"
    __pyx_v_v.push_back(((float)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_float(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */

#line 47 "vector.from_py"
  }

#line 47 "vector.from_py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 49 "vector.from_py"
  __pyx_r = __pyx_v_v;

#line 49 "vector.from_py"
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_float")
 * cdef vector[X] __pyx_convert_vector_from_py_float(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

#line 45 "vector.from_py"


#line 45 "vector.from_py"
  /* function exit code */

#line 45 "vector.from_py"
  __pyx_L1_error:;

#line 45 "vector.from_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 45 "vector.from_py"
  __Pyx_XDECREF(__pyx_t_4);

#line 45 "vector.from_py"
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_float", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 45 "vector.from_py"
  __Pyx_pretend_to_initialize(&__pyx_r);

#line 45 "vector.from_py"
  __pyx_L0:;

#line 45 "vector.from_py"
  __Pyx_XDECREF(__pyx_v_item);

#line 45 "vector.from_py"
  __Pyx_RefNannyFinishContext();

#line 45 "vector.from_py"
  return __pyx_r;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static std::vector<std::vector<float> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_float_3e___(PyObject *__pyx_v_o) {
  std::vector<std::vector<float> >  __pyx_v_v
#line 45 "vector.from_py"
;
  PyObject *__pyx_v_item = NULL
#line 45 "vector.from_py"
;

#line 45 "vector.from_py"
  std::vector<std::vector<float> >  __pyx_r;

#line 45 "vector.from_py"
  __Pyx_RefNannyDeclarations

#line 45 "vector.from_py"
  PyObject *__pyx_t_1 = NULL;

#line 45 "vector.from_py"
  Py_ssize_t __pyx_t_2;

#line 45 "vector.from_py"
  PyObject *(*__pyx_t_3)(PyObject *);

#line 45 "vector.from_py"
  PyObject *__pyx_t_4 = NULL;

#line 45 "vector.from_py"
  std::vector<float>  __pyx_t_5;

#line 45 "vector.from_py"
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_float_3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_float_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */

#line 47 "vector.from_py"
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {

#line 47 "vector.from_py"
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;

#line 47 "vector.from_py"
    __pyx_t_3 = NULL;

#line 47 "vector.from_py"
  } else {
    __pyx_t_2 = -1; 
#line 47 "vector.from_py"
__pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
    __Pyx_GOTREF(__pyx_t_1);

#line 47 "vector.from_py"
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
  }

#line 47 "vector.from_py"
  for (;;) {

#line 47 "vector.from_py"
    if (likely(!__pyx_t_3)) {

#line 47 "vector.from_py"
      if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 47 "vector.from_py"
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;

#line 47 "vector.from_py"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 47 "vector.from_py"
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        #else

#line 47 "vector.from_py"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        __Pyx_GOTREF(__pyx_t_4);

#line 47 "vector.from_py"
        #endif

#line 47 "vector.from_py"
      } else {

#line 47 "vector.from_py"
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 47 "vector.from_py"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 47 "vector.from_py"
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        #else

#line 47 "vector.from_py"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        __Pyx_GOTREF(__pyx_t_4);

#line 47 "vector.from_py"
        #endif

#line 47 "vector.from_py"
      }
    } else 
#line 47 "vector.from_py"
{

#line 47 "vector.from_py"
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);

#line 47 "vector.from_py"
      if (unlikely(!__pyx_t_4)) {

#line 47 "vector.from_py"
        PyObject* exc_type = PyErr_Occurred();

#line 47 "vector.from_py"
        if (exc_type) {

#line 47 "vector.from_py"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 47 "vector.from_py"
          else __PYX_ERR(2, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        }

#line 47 "vector.from_py"
        break;

#line 47 "vector.from_py"
      }

#line 47 "vector.from_py"
      __Pyx_GOTREF(__pyx_t_4);

#line 47 "vector.from_py"
    }

#line 47 "vector.from_py"
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);

#line 47 "vector.from_py"
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */

#line 48 "vector.from_py"
    __pyx_t_5 = __pyx_convert_vector_from_py_float(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 48, __pyx_L1_error)

#line 48 "vector.from_py"
    __pyx_v_v.push_back(((std::vector<float> )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_float_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */

#line 47 "vector.from_py"
  }

#line 47 "vector.from_py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 49 "vector.from_py"
  __pyx_r = __pyx_v_v;

#line 49 "vector.from_py"
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_float_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_float_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

#line 45 "vector.from_py"


#line 45 "vector.from_py"
  /* function exit code */

#line 45 "vector.from_py"
  __pyx_L1_error:;

#line 45 "vector.from_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 45 "vector.from_py"
  __Pyx_XDECREF(__pyx_t_4);

#line 45 "vector.from_py"
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_vector_3c_float_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 45 "vector.from_py"
  __Pyx_pretend_to_initialize(&__pyx_r);

#line 45 "vector.from_py"
  __pyx_L0:;

#line 45 "vector.from_py"
  __Pyx_XDECREF(__pyx_v_item);

#line 45 "vector.from_py"
  __Pyx_RefNannyFinishContext();

#line 45 "vector.from_py"
  return __pyx_r;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_tp_new_8iscecore_pyEulerAngles(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 45 "vector.from_py"
  PyObject *o;

#line 45 "vector.from_py"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 45 "vector.from_py"
    o = (*t->tp_alloc)(t, 0);

#line 45 "vector.from_py"
  } else {

#line 45 "vector.from_py"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  if (unlikely(!o)) return 0;

#line 45 "vector.from_py"
  if (unlikely(__pyx_pw_8iscecore_13pyEulerAngles_1__cinit__(o, a, k) < 0)) goto bad;

#line 45 "vector.from_py"
  return o;

#line 45 "vector.from_py"
  bad:

#line 45 "vector.from_py"
  Py_DECREF(o); o = 0;

#line 45 "vector.from_py"
  return NULL;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static void __pyx_tp_dealloc_8iscecore_pyEulerAngles(PyObject *o) {

#line 45 "vector.from_py"
  #if CYTHON_USE_TP_FINALIZE

#line 45 "vector.from_py"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {

#line 45 "vector.from_py"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  {

#line 45 "vector.from_py"
    PyObject *etype, *eval, *etb;

#line 45 "vector.from_py"
    PyErr_Fetch(&etype, &eval, &etb);

#line 45 "vector.from_py"
    ++Py_REFCNT(o);

#line 45 "vector.from_py"
    __pyx_pw_8iscecore_13pyEulerAngles_3__dealloc__(o);

#line 45 "vector.from_py"
    --Py_REFCNT(o);

#line 45 "vector.from_py"
    PyErr_Restore(etype, eval, etb);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  (*Py_TYPE(o)->tp_free)(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_13pyEulerAngles_yaw(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_13pyEulerAngles_3yaw_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_13pyEulerAngles_yaw(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_13pyEulerAngles_3yaw_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_13pyEulerAngles_pitch(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_13pyEulerAngles_5pitch_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_13pyEulerAngles_pitch(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_13pyEulerAngles_5pitch_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_13pyEulerAngles_roll(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_13pyEulerAngles_4roll_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_13pyEulerAngles_roll(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_13pyEulerAngles_4roll_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyMethodDef __pyx_methods_8iscecore_pyEulerAngles[] = {

#line 45 "vector.from_py"
  {"ypr", (PyCFunction)__pyx_pw_8iscecore_13pyEulerAngles_5ypr, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"rotmat", (PyCFunction)__pyx_pw_8iscecore_13pyEulerAngles_7rotmat, METH_O, 0},

#line 45 "vector.from_py"
  {"quaternion", (PyCFunction)__pyx_pw_8iscecore_13pyEulerAngles_9quaternion, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8iscecore_13pyEulerAngles_11__reduce_cython__, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8iscecore_13pyEulerAngles_13__setstate_cython__, METH_O, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static struct PyGetSetDef __pyx_getsets_8iscecore_pyEulerAngles[] = {

#line 45 "vector.from_py"
  {(char *)"yaw", __pyx_getprop_8iscecore_13pyEulerAngles_yaw, __pyx_setprop_8iscecore_13pyEulerAngles_yaw, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"pitch", __pyx_getprop_8iscecore_13pyEulerAngles_pitch, __pyx_setprop_8iscecore_13pyEulerAngles_pitch, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"roll", __pyx_getprop_8iscecore_13pyEulerAngles_roll, __pyx_setprop_8iscecore_13pyEulerAngles_roll, (char *)0, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyTypeObject __pyx_type_8iscecore_pyEulerAngles = {

#line 45 "vector.from_py"
  PyVarObject_HEAD_INIT(0, 0)

#line 45 "vector.from_py"
  "iscecore.pyEulerAngles", /*tp_name*/

#line 45 "vector.from_py"
  sizeof(struct __pyx_obj_8iscecore_pyEulerAngles), /*tp_basicsize*/

#line 45 "vector.from_py"
  0, /*tp_itemsize*/

#line 45 "vector.from_py"
  __pyx_tp_dealloc_8iscecore_pyEulerAngles, /*tp_dealloc*/

#line 45 "vector.from_py"
  0, /*tp_print*/

#line 45 "vector.from_py"
  0, /*tp_getattr*/

#line 45 "vector.from_py"
  0, /*tp_setattr*/

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION < 3

#line 45 "vector.from_py"
  0, /*tp_compare*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION >= 3

#line 45 "vector.from_py"
  0, /*tp_as_async*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  0, /*tp_repr*/

#line 45 "vector.from_py"
  0, /*tp_as_number*/

#line 45 "vector.from_py"
  0, /*tp_as_sequence*/

#line 45 "vector.from_py"
  0, /*tp_as_mapping*/

#line 45 "vector.from_py"
  0, /*tp_hash*/

#line 45 "vector.from_py"
  0, /*tp_call*/

#line 45 "vector.from_py"
  0, /*tp_str*/

#line 45 "vector.from_py"
  0, /*tp_getattro*/

#line 45 "vector.from_py"
  0, /*tp_setattro*/

#line 45 "vector.from_py"
  0, /*tp_as_buffer*/

#line 45 "vector.from_py"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 45 "vector.from_py"
  0, /*tp_doc*/

#line 45 "vector.from_py"
  0, /*tp_traverse*/

#line 45 "vector.from_py"
  0, /*tp_clear*/

#line 45 "vector.from_py"
  0, /*tp_richcompare*/

#line 45 "vector.from_py"
  0, /*tp_weaklistoffset*/

#line 45 "vector.from_py"
  0, /*tp_iter*/

#line 45 "vector.from_py"
  0, /*tp_iternext*/

#line 45 "vector.from_py"
  __pyx_methods_8iscecore_pyEulerAngles, /*tp_methods*/

#line 45 "vector.from_py"
  0, /*tp_members*/

#line 45 "vector.from_py"
  __pyx_getsets_8iscecore_pyEulerAngles, /*tp_getset*/

#line 45 "vector.from_py"
  0, /*tp_base*/

#line 45 "vector.from_py"
  0, /*tp_dict*/

#line 45 "vector.from_py"
  0, /*tp_descr_get*/

#line 45 "vector.from_py"
  0, /*tp_descr_set*/

#line 45 "vector.from_py"
  0, /*tp_dictoffset*/

#line 45 "vector.from_py"
  0, /*tp_init*/

#line 45 "vector.from_py"
  0, /*tp_alloc*/

#line 45 "vector.from_py"
  __pyx_tp_new_8iscecore_pyEulerAngles, /*tp_new*/

#line 45 "vector.from_py"
  0, /*tp_free*/

#line 45 "vector.from_py"
  0, /*tp_is_gc*/

#line 45 "vector.from_py"
  0, /*tp_bases*/

#line 45 "vector.from_py"
  0, /*tp_mro*/

#line 45 "vector.from_py"
  0, /*tp_cache*/

#line 45 "vector.from_py"
  0, /*tp_subclasses*/

#line 45 "vector.from_py"
  0, /*tp_weaklist*/

#line 45 "vector.from_py"
  0, /*tp_del*/

#line 45 "vector.from_py"
  0, /*tp_version_tag*/

#line 45 "vector.from_py"
  #if PY_VERSION_HEX >= 0x030400a1

#line 45 "vector.from_py"
  0, /*tp_finalize*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_tp_new_8iscecore_pyQuaternion(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 45 "vector.from_py"
  PyObject *o;

#line 45 "vector.from_py"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 45 "vector.from_py"
    o = (*t->tp_alloc)(t, 0);

#line 45 "vector.from_py"
  } else {

#line 45 "vector.from_py"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  if (unlikely(!o)) return 0;

#line 45 "vector.from_py"
  if (unlikely(__pyx_pw_8iscecore_12pyQuaternion_1__cinit__(o, a, k) < 0)) goto bad;

#line 45 "vector.from_py"
  return o;

#line 45 "vector.from_py"
  bad:

#line 45 "vector.from_py"
  Py_DECREF(o); o = 0;

#line 45 "vector.from_py"
  return NULL;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static void __pyx_tp_dealloc_8iscecore_pyQuaternion(PyObject *o) {

#line 45 "vector.from_py"
  #if CYTHON_USE_TP_FINALIZE

#line 45 "vector.from_py"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {

#line 45 "vector.from_py"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  {

#line 45 "vector.from_py"
    PyObject *etype, *eval, *etb;

#line 45 "vector.from_py"
    PyErr_Fetch(&etype, &eval, &etb);

#line 45 "vector.from_py"
    ++Py_REFCNT(o);

#line 45 "vector.from_py"
    __pyx_pw_8iscecore_12pyQuaternion_3__dealloc__(o);

#line 45 "vector.from_py"
    --Py_REFCNT(o);

#line 45 "vector.from_py"
    PyErr_Restore(etype, eval, etb);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  (*Py_TYPE(o)->tp_free)(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_12pyQuaternion_qvec(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_12pyQuaternion_4qvec_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_12pyQuaternion_qvec(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_12pyQuaternion_4qvec_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyMethodDef __pyx_methods_8iscecore_pyQuaternion[] = {

#line 45 "vector.from_py"
  {"ypr", (PyCFunction)__pyx_pw_8iscecore_12pyQuaternion_5ypr, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"factoredYPR", (PyCFunction)__pyx_pw_8iscecore_12pyQuaternion_7factoredYPR, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"rotmat", (PyCFunction)__pyx_pw_8iscecore_12pyQuaternion_9rotmat, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8iscecore_12pyQuaternion_11__reduce_cython__, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8iscecore_12pyQuaternion_13__setstate_cython__, METH_O, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static struct PyGetSetDef __pyx_getsets_8iscecore_pyQuaternion[] = {

#line 45 "vector.from_py"
  {(char *)"qvec", __pyx_getprop_8iscecore_12pyQuaternion_qvec, __pyx_setprop_8iscecore_12pyQuaternion_qvec, (char *)0, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyTypeObject __pyx_type_8iscecore_pyQuaternion = {

#line 45 "vector.from_py"
  PyVarObject_HEAD_INIT(0, 0)

#line 45 "vector.from_py"
  "iscecore.pyQuaternion", /*tp_name*/

#line 45 "vector.from_py"
  sizeof(struct __pyx_obj_8iscecore_pyQuaternion), /*tp_basicsize*/

#line 45 "vector.from_py"
  0, /*tp_itemsize*/

#line 45 "vector.from_py"
  __pyx_tp_dealloc_8iscecore_pyQuaternion, /*tp_dealloc*/

#line 45 "vector.from_py"
  0, /*tp_print*/

#line 45 "vector.from_py"
  0, /*tp_getattr*/

#line 45 "vector.from_py"
  0, /*tp_setattr*/

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION < 3

#line 45 "vector.from_py"
  0, /*tp_compare*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION >= 3

#line 45 "vector.from_py"
  0, /*tp_as_async*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  0, /*tp_repr*/

#line 45 "vector.from_py"
  0, /*tp_as_number*/

#line 45 "vector.from_py"
  0, /*tp_as_sequence*/

#line 45 "vector.from_py"
  0, /*tp_as_mapping*/

#line 45 "vector.from_py"
  0, /*tp_hash*/

#line 45 "vector.from_py"
  0, /*tp_call*/

#line 45 "vector.from_py"
  0, /*tp_str*/

#line 45 "vector.from_py"
  0, /*tp_getattro*/

#line 45 "vector.from_py"
  0, /*tp_setattro*/

#line 45 "vector.from_py"
  0, /*tp_as_buffer*/

#line 45 "vector.from_py"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 45 "vector.from_py"
  0, /*tp_doc*/

#line 45 "vector.from_py"
  0, /*tp_traverse*/

#line 45 "vector.from_py"
  0, /*tp_clear*/

#line 45 "vector.from_py"
  0, /*tp_richcompare*/

#line 45 "vector.from_py"
  0, /*tp_weaklistoffset*/

#line 45 "vector.from_py"
  0, /*tp_iter*/

#line 45 "vector.from_py"
  0, /*tp_iternext*/

#line 45 "vector.from_py"
  __pyx_methods_8iscecore_pyQuaternion, /*tp_methods*/

#line 45 "vector.from_py"
  0, /*tp_members*/

#line 45 "vector.from_py"
  __pyx_getsets_8iscecore_pyQuaternion, /*tp_getset*/

#line 45 "vector.from_py"
  0, /*tp_base*/

#line 45 "vector.from_py"
  0, /*tp_dict*/

#line 45 "vector.from_py"
  0, /*tp_descr_get*/

#line 45 "vector.from_py"
  0, /*tp_descr_set*/

#line 45 "vector.from_py"
  0, /*tp_dictoffset*/

#line 45 "vector.from_py"
  0, /*tp_init*/

#line 45 "vector.from_py"
  0, /*tp_alloc*/

#line 45 "vector.from_py"
  __pyx_tp_new_8iscecore_pyQuaternion, /*tp_new*/

#line 45 "vector.from_py"
  0, /*tp_free*/

#line 45 "vector.from_py"
  0, /*tp_is_gc*/

#line 45 "vector.from_py"
  0, /*tp_bases*/

#line 45 "vector.from_py"
  0, /*tp_mro*/

#line 45 "vector.from_py"
  0, /*tp_cache*/

#line 45 "vector.from_py"
  0, /*tp_subclasses*/

#line 45 "vector.from_py"
  0, /*tp_weaklist*/

#line 45 "vector.from_py"
  0, /*tp_del*/

#line 45 "vector.from_py"
  0, /*tp_version_tag*/

#line 45 "vector.from_py"
  #if PY_VERSION_HEX >= 0x030400a1

#line 45 "vector.from_py"
  0, /*tp_finalize*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_tp_new_8iscecore_pyDoppler(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

#line 45 "vector.from_py"
  struct __pyx_obj_8iscecore_pyDoppler *p;

#line 45 "vector.from_py"
  PyObject *o;

#line 45 "vector.from_py"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 45 "vector.from_py"
    o = (*t->tp_alloc)(t, 0);

#line 45 "vector.from_py"
  } else {

#line 45 "vector.from_py"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  if (unlikely(!o)) return 0;

#line 45 "vector.from_py"
  p = ((struct __pyx_obj_8iscecore_pyDoppler *)o);

#line 45 "vector.from_py"
  new((void*)&(p->frame)) std::string();

#line 45 "vector.from_py"
  if (unlikely(__pyx_pw_8iscecore_9pyDoppler_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;

#line 45 "vector.from_py"
  return o;

#line 45 "vector.from_py"
  bad:

#line 45 "vector.from_py"
  Py_DECREF(o); o = 0;

#line 45 "vector.from_py"
  return NULL;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static void __pyx_tp_dealloc_8iscecore_pyDoppler(PyObject *o) {

#line 45 "vector.from_py"
  struct __pyx_obj_8iscecore_pyDoppler *p = (struct __pyx_obj_8iscecore_pyDoppler *)o;

#line 45 "vector.from_py"
  #if CYTHON_USE_TP_FINALIZE

#line 45 "vector.from_py"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {

#line 45 "vector.from_py"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  {

#line 45 "vector.from_py"
    PyObject *etype, *eval, *etb;

#line 45 "vector.from_py"
    PyErr_Fetch(&etype, &eval, &etb);

#line 45 "vector.from_py"
    ++Py_REFCNT(o);

#line 45 "vector.from_py"
    __pyx_pw_8iscecore_9pyDoppler_3__dealloc__(o);

#line 45 "vector.from_py"
    --Py_REFCNT(o);

#line 45 "vector.from_py"
    PyErr_Restore(etype, eval, etb);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  __Pyx_call_destructor(p->frame);

#line 45 "vector.from_py"
  (*Py_TYPE(o)->tp_free)(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_9pyDoppler_satxyz(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_9pyDoppler_6satxyz_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_9pyDoppler_satxyz(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_9pyDoppler_6satxyz_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_9pyDoppler_satvel(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_9pyDoppler_6satvel_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_9pyDoppler_satvel(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_9pyDoppler_6satvel_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_9pyDoppler_satllh(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_9pyDoppler_6satllh_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_9pyDoppler_satllh(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_9pyDoppler_6satllh_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyMethodDef __pyx_methods_8iscecore_pyDoppler[] = {

#line 45 "vector.from_py"
  {"centroid", (PyCFunction)__pyx_pw_8iscecore_9pyDoppler_5centroid, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"centroidProfile", (PyCFunction)__pyx_pw_8iscecore_9pyDoppler_7centroidProfile, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8iscecore_9pyDoppler_9__reduce_cython__, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8iscecore_9pyDoppler_11__setstate_cython__, METH_O, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static struct PyGetSetDef __pyx_getsets_8iscecore_pyDoppler[] = {

#line 45 "vector.from_py"
  {(char *)"satxyz", __pyx_getprop_8iscecore_9pyDoppler_satxyz, __pyx_setprop_8iscecore_9pyDoppler_satxyz, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"satvel", __pyx_getprop_8iscecore_9pyDoppler_satvel, __pyx_setprop_8iscecore_9pyDoppler_satvel, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"satllh", __pyx_getprop_8iscecore_9pyDoppler_satllh, __pyx_setprop_8iscecore_9pyDoppler_satllh, (char *)0, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyTypeObject __pyx_type_8iscecore_pyDoppler = {

#line 45 "vector.from_py"
  PyVarObject_HEAD_INIT(0, 0)

#line 45 "vector.from_py"
  "iscecore.pyDoppler", /*tp_name*/

#line 45 "vector.from_py"
  sizeof(struct __pyx_obj_8iscecore_pyDoppler), /*tp_basicsize*/

#line 45 "vector.from_py"
  0, /*tp_itemsize*/

#line 45 "vector.from_py"
  __pyx_tp_dealloc_8iscecore_pyDoppler, /*tp_dealloc*/

#line 45 "vector.from_py"
  0, /*tp_print*/

#line 45 "vector.from_py"
  0, /*tp_getattr*/

#line 45 "vector.from_py"
  0, /*tp_setattr*/

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION < 3

#line 45 "vector.from_py"
  0, /*tp_compare*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION >= 3

#line 45 "vector.from_py"
  0, /*tp_as_async*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  0, /*tp_repr*/

#line 45 "vector.from_py"
  0, /*tp_as_number*/

#line 45 "vector.from_py"
  0, /*tp_as_sequence*/

#line 45 "vector.from_py"
  0, /*tp_as_mapping*/

#line 45 "vector.from_py"
  0, /*tp_hash*/

#line 45 "vector.from_py"
  0, /*tp_call*/

#line 45 "vector.from_py"
  0, /*tp_str*/

#line 45 "vector.from_py"
  0, /*tp_getattro*/

#line 45 "vector.from_py"
  0, /*tp_setattro*/

#line 45 "vector.from_py"
  0, /*tp_as_buffer*/

#line 45 "vector.from_py"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 45 "vector.from_py"
  0, /*tp_doc*/

#line 45 "vector.from_py"
  0, /*tp_traverse*/

#line 45 "vector.from_py"
  0, /*tp_clear*/

#line 45 "vector.from_py"
  0, /*tp_richcompare*/

#line 45 "vector.from_py"
  0, /*tp_weaklistoffset*/

#line 45 "vector.from_py"
  0, /*tp_iter*/

#line 45 "vector.from_py"
  0, /*tp_iternext*/

#line 45 "vector.from_py"
  __pyx_methods_8iscecore_pyDoppler, /*tp_methods*/

#line 45 "vector.from_py"
  0, /*tp_members*/

#line 45 "vector.from_py"
  __pyx_getsets_8iscecore_pyDoppler, /*tp_getset*/

#line 45 "vector.from_py"
  0, /*tp_base*/

#line 45 "vector.from_py"
  0, /*tp_dict*/

#line 45 "vector.from_py"
  0, /*tp_descr_get*/

#line 45 "vector.from_py"
  0, /*tp_descr_set*/

#line 45 "vector.from_py"
  0, /*tp_dictoffset*/

#line 45 "vector.from_py"
  0, /*tp_init*/

#line 45 "vector.from_py"
  0, /*tp_alloc*/

#line 45 "vector.from_py"
  __pyx_tp_new_8iscecore_pyDoppler, /*tp_new*/

#line 45 "vector.from_py"
  0, /*tp_free*/

#line 45 "vector.from_py"
  0, /*tp_is_gc*/

#line 45 "vector.from_py"
  0, /*tp_bases*/

#line 45 "vector.from_py"
  0, /*tp_mro*/

#line 45 "vector.from_py"
  0, /*tp_cache*/

#line 45 "vector.from_py"
  0, /*tp_subclasses*/

#line 45 "vector.from_py"
  0, /*tp_weaklist*/

#line 45 "vector.from_py"
  0, /*tp_del*/

#line 45 "vector.from_py"
  0, /*tp_version_tag*/

#line 45 "vector.from_py"
  #if PY_VERSION_HEX >= 0x030400a1

#line 45 "vector.from_py"
  0, /*tp_finalize*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_tp_new_8iscecore_pyDopplerEuler(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 45 "vector.from_py"
  struct __pyx_obj_8iscecore_pyDopplerEuler *p;

#line 45 "vector.from_py"
  PyObject *o = __pyx_tp_new_8iscecore_pyDoppler(t, a, k);

#line 45 "vector.from_py"
  if (unlikely(!o)) return 0;

#line 45 "vector.from_py"
  p = ((struct __pyx_obj_8iscecore_pyDopplerEuler *)o);

#line 45 "vector.from_py"
  p->eulerangles = ((struct __pyx_obj_8iscecore_pyEulerAngles *)Py_None); Py_INCREF(Py_None);

#line 45 "vector.from_py"
  if (unlikely(__pyx_pw_8iscecore_14pyDopplerEuler_1__cinit__(o, a, k) < 0)) goto bad;

#line 45 "vector.from_py"
  return o;

#line 45 "vector.from_py"
  bad:

#line 45 "vector.from_py"
  Py_DECREF(o); o = 0;

#line 45 "vector.from_py"
  return NULL;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static void __pyx_tp_dealloc_8iscecore_pyDopplerEuler(PyObject *o) {

#line 45 "vector.from_py"
  struct __pyx_obj_8iscecore_pyDopplerEuler *p = (struct __pyx_obj_8iscecore_pyDopplerEuler *)o;

#line 45 "vector.from_py"
  #if CYTHON_USE_TP_FINALIZE

#line 45 "vector.from_py"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {

#line 45 "vector.from_py"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  PyObject_GC_UnTrack(o);

#line 45 "vector.from_py"
  Py_CLEAR(p->eulerangles);

#line 45 "vector.from_py"
  #if CYTHON_USE_TYPE_SLOTS

#line 45 "vector.from_py"
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  PyObject_GC_Track(o);

#line 45 "vector.from_py"
  __pyx_tp_dealloc_8iscecore_pyDoppler(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_tp_traverse_8iscecore_pyDopplerEuler(PyObject *o, visitproc v, void *a) {

#line 45 "vector.from_py"
  int e;

#line 45 "vector.from_py"
  struct __pyx_obj_8iscecore_pyDopplerEuler *p = (struct __pyx_obj_8iscecore_pyDopplerEuler *)o;

#line 45 "vector.from_py"
  e = ((likely(__pyx_ptype_8iscecore_pyDoppler)) ? ((__pyx_ptype_8iscecore_pyDoppler->tp_traverse) ? __pyx_ptype_8iscecore_pyDoppler->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8iscecore_pyDopplerEuler)); if (e) return e;

#line 45 "vector.from_py"
  if (p->eulerangles) {

#line 45 "vector.from_py"
    e = (*v)(((PyObject *)p->eulerangles), a); if (e) return e;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  return 0;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_tp_clear_8iscecore_pyDopplerEuler(PyObject *o) {

#line 45 "vector.from_py"
  PyObject* tmp;

#line 45 "vector.from_py"
  struct __pyx_obj_8iscecore_pyDopplerEuler *p = (struct __pyx_obj_8iscecore_pyDopplerEuler *)o;

#line 45 "vector.from_py"
  if (likely(__pyx_ptype_8iscecore_pyDoppler)) { if (__pyx_ptype_8iscecore_pyDoppler->tp_clear) __pyx_ptype_8iscecore_pyDoppler->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8iscecore_pyDopplerEuler);

#line 45 "vector.from_py"
  tmp = ((PyObject*)p->eulerangles);

#line 45 "vector.from_py"
  p->eulerangles = ((struct __pyx_obj_8iscecore_pyEulerAngles *)Py_None); Py_INCREF(Py_None);

#line 45 "vector.from_py"
  Py_XDECREF(tmp);

#line 45 "vector.from_py"
  return 0;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyMethodDef __pyx_methods_8iscecore_pyDopplerEuler[] = {

#line 45 "vector.from_py"
  {"derivs", (PyCFunction)__pyx_pw_8iscecore_14pyDopplerEuler_3derivs, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8iscecore_14pyDopplerEuler_5__reduce_cython__, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8iscecore_14pyDopplerEuler_7__setstate_cython__, METH_O, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyTypeObject __pyx_type_8iscecore_pyDopplerEuler = {

#line 45 "vector.from_py"
  PyVarObject_HEAD_INIT(0, 0)

#line 45 "vector.from_py"
  "iscecore.pyDopplerEuler", /*tp_name*/

#line 45 "vector.from_py"
  sizeof(struct __pyx_obj_8iscecore_pyDopplerEuler), /*tp_basicsize*/

#line 45 "vector.from_py"
  0, /*tp_itemsize*/

#line 45 "vector.from_py"
  __pyx_tp_dealloc_8iscecore_pyDopplerEuler, /*tp_dealloc*/

#line 45 "vector.from_py"
  0, /*tp_print*/

#line 45 "vector.from_py"
  0, /*tp_getattr*/

#line 45 "vector.from_py"
  0, /*tp_setattr*/

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION < 3

#line 45 "vector.from_py"
  0, /*tp_compare*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION >= 3

#line 45 "vector.from_py"
  0, /*tp_as_async*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  0, /*tp_repr*/

#line 45 "vector.from_py"
  0, /*tp_as_number*/

#line 45 "vector.from_py"
  0, /*tp_as_sequence*/

#line 45 "vector.from_py"
  0, /*tp_as_mapping*/

#line 45 "vector.from_py"
  0, /*tp_hash*/

#line 45 "vector.from_py"
  0, /*tp_call*/

#line 45 "vector.from_py"
  0, /*tp_str*/

#line 45 "vector.from_py"
  0, /*tp_getattro*/

#line 45 "vector.from_py"
  0, /*tp_setattro*/

#line 45 "vector.from_py"
  0, /*tp_as_buffer*/

#line 45 "vector.from_py"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/

#line 45 "vector.from_py"
  0, /*tp_doc*/

#line 45 "vector.from_py"
  __pyx_tp_traverse_8iscecore_pyDopplerEuler, /*tp_traverse*/

#line 45 "vector.from_py"
  __pyx_tp_clear_8iscecore_pyDopplerEuler, /*tp_clear*/

#line 45 "vector.from_py"
  0, /*tp_richcompare*/

#line 45 "vector.from_py"
  0, /*tp_weaklistoffset*/

#line 45 "vector.from_py"
  0, /*tp_iter*/

#line 45 "vector.from_py"
  0, /*tp_iternext*/

#line 45 "vector.from_py"
  __pyx_methods_8iscecore_pyDopplerEuler, /*tp_methods*/

#line 45 "vector.from_py"
  0, /*tp_members*/

#line 45 "vector.from_py"
  0, /*tp_getset*/

#line 45 "vector.from_py"
  0, /*tp_base*/

#line 45 "vector.from_py"
  0, /*tp_dict*/

#line 45 "vector.from_py"
  0, /*tp_descr_get*/

#line 45 "vector.from_py"
  0, /*tp_descr_set*/

#line 45 "vector.from_py"
  0, /*tp_dictoffset*/

#line 45 "vector.from_py"
  0, /*tp_init*/

#line 45 "vector.from_py"
  0, /*tp_alloc*/

#line 45 "vector.from_py"
  __pyx_tp_new_8iscecore_pyDopplerEuler, /*tp_new*/

#line 45 "vector.from_py"
  0, /*tp_free*/

#line 45 "vector.from_py"
  0, /*tp_is_gc*/

#line 45 "vector.from_py"
  0, /*tp_bases*/

#line 45 "vector.from_py"
  0, /*tp_mro*/

#line 45 "vector.from_py"
  0, /*tp_cache*/

#line 45 "vector.from_py"
  0, /*tp_subclasses*/

#line 45 "vector.from_py"
  0, /*tp_weaklist*/

#line 45 "vector.from_py"
  0, /*tp_del*/

#line 45 "vector.from_py"
  0, /*tp_version_tag*/

#line 45 "vector.from_py"
  #if PY_VERSION_HEX >= 0x030400a1

#line 45 "vector.from_py"
  0, /*tp_finalize*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_tp_new_8iscecore_pyDopplerQuaternion(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 45 "vector.from_py"
  struct __pyx_obj_8iscecore_pyDopplerQuaternion *p;

#line 45 "vector.from_py"
  PyObject *o = __pyx_tp_new_8iscecore_pyDoppler(t, a, k);

#line 45 "vector.from_py"
  if (unlikely(!o)) return 0;

#line 45 "vector.from_py"
  p = ((struct __pyx_obj_8iscecore_pyDopplerQuaternion *)o);

#line 45 "vector.from_py"
  p->quaternion = ((struct __pyx_obj_8iscecore_pyQuaternion *)Py_None); Py_INCREF(Py_None);

#line 45 "vector.from_py"
  if (unlikely(__pyx_pw_8iscecore_19pyDopplerQuaternion_1__cinit__(o, a, k) < 0)) goto bad;

#line 45 "vector.from_py"
  return o;

#line 45 "vector.from_py"
  bad:

#line 45 "vector.from_py"
  Py_DECREF(o); o = 0;

#line 45 "vector.from_py"
  return NULL;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static void __pyx_tp_dealloc_8iscecore_pyDopplerQuaternion(PyObject *o) {

#line 45 "vector.from_py"
  struct __pyx_obj_8iscecore_pyDopplerQuaternion *p = (struct __pyx_obj_8iscecore_pyDopplerQuaternion *)o;

#line 45 "vector.from_py"
  #if CYTHON_USE_TP_FINALIZE

#line 45 "vector.from_py"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {

#line 45 "vector.from_py"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  PyObject_GC_UnTrack(o);

#line 45 "vector.from_py"
  Py_CLEAR(p->quaternion);

#line 45 "vector.from_py"
  #if CYTHON_USE_TYPE_SLOTS

#line 45 "vector.from_py"
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  PyObject_GC_Track(o);

#line 45 "vector.from_py"
  __pyx_tp_dealloc_8iscecore_pyDoppler(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_tp_traverse_8iscecore_pyDopplerQuaternion(PyObject *o, visitproc v, void *a) {

#line 45 "vector.from_py"
  int e;

#line 45 "vector.from_py"
  struct __pyx_obj_8iscecore_pyDopplerQuaternion *p = (struct __pyx_obj_8iscecore_pyDopplerQuaternion *)o;

#line 45 "vector.from_py"
  e = ((likely(__pyx_ptype_8iscecore_pyDoppler)) ? ((__pyx_ptype_8iscecore_pyDoppler->tp_traverse) ? __pyx_ptype_8iscecore_pyDoppler->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8iscecore_pyDopplerQuaternion)); if (e) return e;

#line 45 "vector.from_py"
  if (p->quaternion) {

#line 45 "vector.from_py"
    e = (*v)(((PyObject *)p->quaternion), a); if (e) return e;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  return 0;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_tp_clear_8iscecore_pyDopplerQuaternion(PyObject *o) {

#line 45 "vector.from_py"
  PyObject* tmp;

#line 45 "vector.from_py"
  struct __pyx_obj_8iscecore_pyDopplerQuaternion *p = (struct __pyx_obj_8iscecore_pyDopplerQuaternion *)o;

#line 45 "vector.from_py"
  if (likely(__pyx_ptype_8iscecore_pyDoppler)) { if (__pyx_ptype_8iscecore_pyDoppler->tp_clear) __pyx_ptype_8iscecore_pyDoppler->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8iscecore_pyDopplerQuaternion);

#line 45 "vector.from_py"
  tmp = ((PyObject*)p->quaternion);

#line 45 "vector.from_py"
  p->quaternion = ((struct __pyx_obj_8iscecore_pyQuaternion *)Py_None); Py_INCREF(Py_None);

#line 45 "vector.from_py"
  Py_XDECREF(tmp);

#line 45 "vector.from_py"
  return 0;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyMethodDef __pyx_methods_8iscecore_pyDopplerQuaternion[] = {

#line 45 "vector.from_py"
  {"derivs", (PyCFunction)__pyx_pw_8iscecore_19pyDopplerQuaternion_3derivs, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8iscecore_19pyDopplerQuaternion_5__reduce_cython__, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8iscecore_19pyDopplerQuaternion_7__setstate_cython__, METH_O, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyTypeObject __pyx_type_8iscecore_pyDopplerQuaternion = {

#line 45 "vector.from_py"
  PyVarObject_HEAD_INIT(0, 0)

#line 45 "vector.from_py"
  "iscecore.pyDopplerQuaternion", /*tp_name*/

#line 45 "vector.from_py"
  sizeof(struct __pyx_obj_8iscecore_pyDopplerQuaternion), /*tp_basicsize*/

#line 45 "vector.from_py"
  0, /*tp_itemsize*/

#line 45 "vector.from_py"
  __pyx_tp_dealloc_8iscecore_pyDopplerQuaternion, /*tp_dealloc*/

#line 45 "vector.from_py"
  0, /*tp_print*/

#line 45 "vector.from_py"
  0, /*tp_getattr*/

#line 45 "vector.from_py"
  0, /*tp_setattr*/

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION < 3

#line 45 "vector.from_py"
  0, /*tp_compare*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION >= 3

#line 45 "vector.from_py"
  0, /*tp_as_async*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  0, /*tp_repr*/

#line 45 "vector.from_py"
  0, /*tp_as_number*/

#line 45 "vector.from_py"
  0, /*tp_as_sequence*/

#line 45 "vector.from_py"
  0, /*tp_as_mapping*/

#line 45 "vector.from_py"
  0, /*tp_hash*/

#line 45 "vector.from_py"
  0, /*tp_call*/

#line 45 "vector.from_py"
  0, /*tp_str*/

#line 45 "vector.from_py"
  0, /*tp_getattro*/

#line 45 "vector.from_py"
  0, /*tp_setattro*/

#line 45 "vector.from_py"
  0, /*tp_as_buffer*/

#line 45 "vector.from_py"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/

#line 45 "vector.from_py"
  0, /*tp_doc*/

#line 45 "vector.from_py"
  __pyx_tp_traverse_8iscecore_pyDopplerQuaternion, /*tp_traverse*/

#line 45 "vector.from_py"
  __pyx_tp_clear_8iscecore_pyDopplerQuaternion, /*tp_clear*/

#line 45 "vector.from_py"
  0, /*tp_richcompare*/

#line 45 "vector.from_py"
  0, /*tp_weaklistoffset*/

#line 45 "vector.from_py"
  0, /*tp_iter*/

#line 45 "vector.from_py"
  0, /*tp_iternext*/

#line 45 "vector.from_py"
  __pyx_methods_8iscecore_pyDopplerQuaternion, /*tp_methods*/

#line 45 "vector.from_py"
  0, /*tp_members*/

#line 45 "vector.from_py"
  0, /*tp_getset*/

#line 45 "vector.from_py"
  0, /*tp_base*/

#line 45 "vector.from_py"
  0, /*tp_dict*/

#line 45 "vector.from_py"
  0, /*tp_descr_get*/

#line 45 "vector.from_py"
  0, /*tp_descr_set*/

#line 45 "vector.from_py"
  0, /*tp_dictoffset*/

#line 45 "vector.from_py"
  0, /*tp_init*/

#line 45 "vector.from_py"
  0, /*tp_alloc*/

#line 45 "vector.from_py"
  __pyx_tp_new_8iscecore_pyDopplerQuaternion, /*tp_new*/

#line 45 "vector.from_py"
  0, /*tp_free*/

#line 45 "vector.from_py"
  0, /*tp_is_gc*/

#line 45 "vector.from_py"
  0, /*tp_bases*/

#line 45 "vector.from_py"
  0, /*tp_mro*/

#line 45 "vector.from_py"
  0, /*tp_cache*/

#line 45 "vector.from_py"
  0, /*tp_subclasses*/

#line 45 "vector.from_py"
  0, /*tp_weaklist*/

#line 45 "vector.from_py"
  0, /*tp_del*/

#line 45 "vector.from_py"
  0, /*tp_version_tag*/

#line 45 "vector.from_py"
  #if PY_VERSION_HEX >= 0x030400a1

#line 45 "vector.from_py"
  0, /*tp_finalize*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_tp_new_8iscecore_pyEllipsoid(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 45 "vector.from_py"
  PyObject *o;

#line 45 "vector.from_py"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 45 "vector.from_py"
    o = (*t->tp_alloc)(t, 0);

#line 45 "vector.from_py"
  } else {

#line 45 "vector.from_py"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  if (unlikely(!o)) return 0;

#line 45 "vector.from_py"
  if (unlikely(__pyx_pw_8iscecore_11pyEllipsoid_1__cinit__(o, a, k) < 0)) goto bad;

#line 45 "vector.from_py"
  return o;

#line 45 "vector.from_py"
  bad:

#line 45 "vector.from_py"
  Py_DECREF(o); o = 0;

#line 45 "vector.from_py"
  return NULL;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static void __pyx_tp_dealloc_8iscecore_pyEllipsoid(PyObject *o) {

#line 45 "vector.from_py"
  #if CYTHON_USE_TP_FINALIZE

#line 45 "vector.from_py"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {

#line 45 "vector.from_py"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  {

#line 45 "vector.from_py"
    PyObject *etype, *eval, *etb;

#line 45 "vector.from_py"
    PyErr_Fetch(&etype, &eval, &etb);

#line 45 "vector.from_py"
    ++Py_REFCNT(o);

#line 45 "vector.from_py"
    __pyx_pw_8iscecore_11pyEllipsoid_3__dealloc__(o);

#line 45 "vector.from_py"
    --Py_REFCNT(o);

#line 45 "vector.from_py"
    PyErr_Restore(etype, eval, etb);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  (*Py_TYPE(o)->tp_free)(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_11pyEllipsoid_a(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_11pyEllipsoid_1a_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_11pyEllipsoid_a(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_11pyEllipsoid_1a_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_11pyEllipsoid_e2(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_11pyEllipsoid_2e2_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_11pyEllipsoid_e2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_11pyEllipsoid_2e2_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyMethodDef __pyx_methods_8iscecore_pyEllipsoid[] = {

#line 45 "vector.from_py"
  {"bind", (PyCFunction)__pyx_pw_8iscecore_11pyEllipsoid_5bind, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"copyFrom", (PyCFunction)__pyx_pw_8iscecore_11pyEllipsoid_7copyFrom, METH_O, 0},

#line 45 "vector.from_py"
  {"rEast", (PyCFunction)__pyx_pw_8iscecore_11pyEllipsoid_9rEast, METH_O, 0},

#line 45 "vector.from_py"
  {"rNorth", (PyCFunction)__pyx_pw_8iscecore_11pyEllipsoid_11rNorth, METH_O, 0},

#line 45 "vector.from_py"
  {"rDir", (PyCFunction)__pyx_pw_8iscecore_11pyEllipsoid_13rDir, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"latLonToXyz", (PyCFunction)__pyx_pw_8iscecore_11pyEllipsoid_15latLonToXyz, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"xyzToLatLon", (PyCFunction)__pyx_pw_8iscecore_11pyEllipsoid_17xyzToLatLon, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"getAngs", (PyCFunction)__pyx_pw_8iscecore_11pyEllipsoid_19getAngs, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"getTCN_TCvec", (PyCFunction)__pyx_pw_8iscecore_11pyEllipsoid_21getTCN_TCvec, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"TCNbasis", (PyCFunction)__pyx_pw_8iscecore_11pyEllipsoid_23TCNbasis, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8iscecore_11pyEllipsoid_25__reduce_cython__, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8iscecore_11pyEllipsoid_27__setstate_cython__, METH_O, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static struct PyGetSetDef __pyx_getsets_8iscecore_pyEllipsoid[] = {

#line 45 "vector.from_py"
  {(char *)"a", __pyx_getprop_8iscecore_11pyEllipsoid_a, __pyx_setprop_8iscecore_11pyEllipsoid_a, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"e2", __pyx_getprop_8iscecore_11pyEllipsoid_e2, __pyx_setprop_8iscecore_11pyEllipsoid_e2, (char *)0, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyTypeObject __pyx_type_8iscecore_pyEllipsoid = {

#line 45 "vector.from_py"
  PyVarObject_HEAD_INIT(0, 0)

#line 45 "vector.from_py"
  "iscecore.pyEllipsoid", /*tp_name*/

#line 45 "vector.from_py"
  sizeof(struct __pyx_obj_8iscecore_pyEllipsoid), /*tp_basicsize*/

#line 45 "vector.from_py"
  0, /*tp_itemsize*/

#line 45 "vector.from_py"
  __pyx_tp_dealloc_8iscecore_pyEllipsoid, /*tp_dealloc*/

#line 45 "vector.from_py"
  0, /*tp_print*/

#line 45 "vector.from_py"
  0, /*tp_getattr*/

#line 45 "vector.from_py"
  0, /*tp_setattr*/

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION < 3

#line 45 "vector.from_py"
  0, /*tp_compare*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION >= 3

#line 45 "vector.from_py"
  0, /*tp_as_async*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  0, /*tp_repr*/

#line 45 "vector.from_py"
  0, /*tp_as_number*/

#line 45 "vector.from_py"
  0, /*tp_as_sequence*/

#line 45 "vector.from_py"
  0, /*tp_as_mapping*/

#line 45 "vector.from_py"
  0, /*tp_hash*/

#line 45 "vector.from_py"
  0, /*tp_call*/

#line 45 "vector.from_py"
  0, /*tp_str*/

#line 45 "vector.from_py"
  0, /*tp_getattro*/

#line 45 "vector.from_py"
  0, /*tp_setattro*/

#line 45 "vector.from_py"
  0, /*tp_as_buffer*/

#line 45 "vector.from_py"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 45 "vector.from_py"
  0, /*tp_doc*/

#line 45 "vector.from_py"
  0, /*tp_traverse*/

#line 45 "vector.from_py"
  0, /*tp_clear*/

#line 45 "vector.from_py"
  0, /*tp_richcompare*/

#line 45 "vector.from_py"
  0, /*tp_weaklistoffset*/

#line 45 "vector.from_py"
  0, /*tp_iter*/

#line 45 "vector.from_py"
  0, /*tp_iternext*/

#line 45 "vector.from_py"
  __pyx_methods_8iscecore_pyEllipsoid, /*tp_methods*/

#line 45 "vector.from_py"
  0, /*tp_members*/

#line 45 "vector.from_py"
  __pyx_getsets_8iscecore_pyEllipsoid, /*tp_getset*/

#line 45 "vector.from_py"
  0, /*tp_base*/

#line 45 "vector.from_py"
  0, /*tp_dict*/

#line 45 "vector.from_py"
  0, /*tp_descr_get*/

#line 45 "vector.from_py"
  0, /*tp_descr_set*/

#line 45 "vector.from_py"
  0, /*tp_dictoffset*/

#line 45 "vector.from_py"
  0, /*tp_init*/

#line 45 "vector.from_py"
  0, /*tp_alloc*/

#line 45 "vector.from_py"
  __pyx_tp_new_8iscecore_pyEllipsoid, /*tp_new*/

#line 45 "vector.from_py"
  0, /*tp_free*/

#line 45 "vector.from_py"
  0, /*tp_is_gc*/

#line 45 "vector.from_py"
  0, /*tp_bases*/

#line 45 "vector.from_py"
  0, /*tp_mro*/

#line 45 "vector.from_py"
  0, /*tp_cache*/

#line 45 "vector.from_py"
  0, /*tp_subclasses*/

#line 45 "vector.from_py"
  0, /*tp_weaklist*/

#line 45 "vector.from_py"
  0, /*tp_del*/

#line 45 "vector.from_py"
  0, /*tp_version_tag*/

#line 45 "vector.from_py"
  #if PY_VERSION_HEX >= 0x030400a1

#line 45 "vector.from_py"
  0, /*tp_finalize*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_tp_new_8iscecore_pyInterpolator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

#line 45 "vector.from_py"
  PyObject *o;

#line 45 "vector.from_py"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 45 "vector.from_py"
    o = (*t->tp_alloc)(t, 0);

#line 45 "vector.from_py"
  } else {

#line 45 "vector.from_py"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  if (unlikely(!o)) return 0;

#line 45 "vector.from_py"
  if (unlikely(__pyx_pw_8iscecore_14pyInterpolator_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;

#line 45 "vector.from_py"
  return o;

#line 45 "vector.from_py"
  bad:

#line 45 "vector.from_py"
  Py_DECREF(o); o = 0;

#line 45 "vector.from_py"
  return NULL;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static void __pyx_tp_dealloc_8iscecore_pyInterpolator(PyObject *o) {

#line 45 "vector.from_py"
  #if CYTHON_USE_TP_FINALIZE

#line 45 "vector.from_py"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {

#line 45 "vector.from_py"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  {

#line 45 "vector.from_py"
    PyObject *etype, *eval, *etb;

#line 45 "vector.from_py"
    PyErr_Fetch(&etype, &eval, &etb);

#line 45 "vector.from_py"
    ++Py_REFCNT(o);

#line 45 "vector.from_py"
    __pyx_pw_8iscecore_14pyInterpolator_3__dealloc__(o);

#line 45 "vector.from_py"
    --Py_REFCNT(o);

#line 45 "vector.from_py"
    PyErr_Restore(etype, eval, etb);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  (*Py_TYPE(o)->tp_free)(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyMethodDef __pyx_methods_8iscecore_pyInterpolator[] = {

#line 45 "vector.from_py"
  {"bilinear", (PyCFunction)__pyx_pw_8iscecore_14pyInterpolator_5bilinear, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"bicubic", (PyCFunction)__pyx_pw_8iscecore_14pyInterpolator_7bicubic, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"sinc_coef", (PyCFunction)__pyx_pw_8iscecore_14pyInterpolator_9sinc_coef, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"sinc_eval", (PyCFunction)__pyx_pw_8iscecore_14pyInterpolator_11sinc_eval, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"sinc_eval_2d", (PyCFunction)__pyx_pw_8iscecore_14pyInterpolator_13sinc_eval_2d, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"interp_2d_spline", (PyCFunction)__pyx_pw_8iscecore_14pyInterpolator_15interp_2d_spline, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"quadInterpolate", (PyCFunction)__pyx_pw_8iscecore_14pyInterpolator_17quadInterpolate, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"akima", (PyCFunction)__pyx_pw_8iscecore_14pyInterpolator_19akima, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8iscecore_14pyInterpolator_21__reduce_cython__, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8iscecore_14pyInterpolator_23__setstate_cython__, METH_O, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyTypeObject __pyx_type_8iscecore_pyInterpolator = {

#line 45 "vector.from_py"
  PyVarObject_HEAD_INIT(0, 0)

#line 45 "vector.from_py"
  "iscecore.pyInterpolator", /*tp_name*/

#line 45 "vector.from_py"
  sizeof(struct __pyx_obj_8iscecore_pyInterpolator), /*tp_basicsize*/

#line 45 "vector.from_py"
  0, /*tp_itemsize*/

#line 45 "vector.from_py"
  __pyx_tp_dealloc_8iscecore_pyInterpolator, /*tp_dealloc*/

#line 45 "vector.from_py"
  0, /*tp_print*/

#line 45 "vector.from_py"
  0, /*tp_getattr*/

#line 45 "vector.from_py"
  0, /*tp_setattr*/

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION < 3

#line 45 "vector.from_py"
  0, /*tp_compare*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION >= 3

#line 45 "vector.from_py"
  0, /*tp_as_async*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  0, /*tp_repr*/

#line 45 "vector.from_py"
  0, /*tp_as_number*/

#line 45 "vector.from_py"
  0, /*tp_as_sequence*/

#line 45 "vector.from_py"
  0, /*tp_as_mapping*/

#line 45 "vector.from_py"
  0, /*tp_hash*/

#line 45 "vector.from_py"
  0, /*tp_call*/

#line 45 "vector.from_py"
  0, /*tp_str*/

#line 45 "vector.from_py"
  0, /*tp_getattro*/

#line 45 "vector.from_py"
  0, /*tp_setattro*/

#line 45 "vector.from_py"
  0, /*tp_as_buffer*/

#line 45 "vector.from_py"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 45 "vector.from_py"
  0, /*tp_doc*/

#line 45 "vector.from_py"
  0, /*tp_traverse*/

#line 45 "vector.from_py"
  0, /*tp_clear*/

#line 45 "vector.from_py"
  0, /*tp_richcompare*/

#line 45 "vector.from_py"
  0, /*tp_weaklistoffset*/

#line 45 "vector.from_py"
  0, /*tp_iter*/

#line 45 "vector.from_py"
  0, /*tp_iternext*/

#line 45 "vector.from_py"
  __pyx_methods_8iscecore_pyInterpolator, /*tp_methods*/

#line 45 "vector.from_py"
  0, /*tp_members*/

#line 45 "vector.from_py"
  0, /*tp_getset*/

#line 45 "vector.from_py"
  0, /*tp_base*/

#line 45 "vector.from_py"
  0, /*tp_dict*/

#line 45 "vector.from_py"
  0, /*tp_descr_get*/

#line 45 "vector.from_py"
  0, /*tp_descr_set*/

#line 45 "vector.from_py"
  0, /*tp_dictoffset*/

#line 45 "vector.from_py"
  0, /*tp_init*/

#line 45 "vector.from_py"
  0, /*tp_alloc*/

#line 45 "vector.from_py"
  __pyx_tp_new_8iscecore_pyInterpolator, /*tp_new*/

#line 45 "vector.from_py"
  0, /*tp_free*/

#line 45 "vector.from_py"
  0, /*tp_is_gc*/

#line 45 "vector.from_py"
  0, /*tp_bases*/

#line 45 "vector.from_py"
  0, /*tp_mro*/

#line 45 "vector.from_py"
  0, /*tp_cache*/

#line 45 "vector.from_py"
  0, /*tp_subclasses*/

#line 45 "vector.from_py"
  0, /*tp_weaklist*/

#line 45 "vector.from_py"
  0, /*tp_del*/

#line 45 "vector.from_py"
  0, /*tp_version_tag*/

#line 45 "vector.from_py"
  #if PY_VERSION_HEX >= 0x030400a1

#line 45 "vector.from_py"
  0, /*tp_finalize*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_tp_new_8iscecore_pyPeg(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 45 "vector.from_py"
  PyObject *o;

#line 45 "vector.from_py"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 45 "vector.from_py"
    o = (*t->tp_alloc)(t, 0);

#line 45 "vector.from_py"
  } else {

#line 45 "vector.from_py"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  if (unlikely(!o)) return 0;

#line 45 "vector.from_py"
  if (unlikely(__pyx_pw_8iscecore_5pyPeg_1__cinit__(o, a, k) < 0)) goto bad;

#line 45 "vector.from_py"
  return o;

#line 45 "vector.from_py"
  bad:

#line 45 "vector.from_py"
  Py_DECREF(o); o = 0;

#line 45 "vector.from_py"
  return NULL;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static void __pyx_tp_dealloc_8iscecore_pyPeg(PyObject *o) {

#line 45 "vector.from_py"
  #if CYTHON_USE_TP_FINALIZE

#line 45 "vector.from_py"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {

#line 45 "vector.from_py"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  {

#line 45 "vector.from_py"
    PyObject *etype, *eval, *etb;

#line 45 "vector.from_py"
    PyErr_Fetch(&etype, &eval, &etb);

#line 45 "vector.from_py"
    ++Py_REFCNT(o);

#line 45 "vector.from_py"
    __pyx_pw_8iscecore_5pyPeg_3__dealloc__(o);

#line 45 "vector.from_py"
    --Py_REFCNT(o);

#line 45 "vector.from_py"
    PyErr_Restore(etype, eval, etb);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  (*Py_TYPE(o)->tp_free)(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_5pyPeg_lat(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_5pyPeg_3lat_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_5pyPeg_lat(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_5pyPeg_3lat_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_5pyPeg_lon(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_5pyPeg_3lon_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_5pyPeg_lon(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_5pyPeg_3lon_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_5pyPeg_hdg(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_5pyPeg_3hdg_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_5pyPeg_hdg(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_5pyPeg_3hdg_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyMethodDef __pyx_methods_8iscecore_pyPeg[] = {

#line 45 "vector.from_py"
  {"bind", (PyCFunction)__pyx_pw_8iscecore_5pyPeg_5bind, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"dPrint", (PyCFunction)__pyx_pw_8iscecore_5pyPeg_7dPrint, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"copy", (PyCFunction)__pyx_pw_8iscecore_5pyPeg_9copy, METH_O, 0},

#line 45 "vector.from_py"
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8iscecore_5pyPeg_11__reduce_cython__, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8iscecore_5pyPeg_13__setstate_cython__, METH_O, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static struct PyGetSetDef __pyx_getsets_8iscecore_pyPeg[] = {

#line 45 "vector.from_py"
  {(char *)"lat", __pyx_getprop_8iscecore_5pyPeg_lat, __pyx_setprop_8iscecore_5pyPeg_lat, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"lon", __pyx_getprop_8iscecore_5pyPeg_lon, __pyx_setprop_8iscecore_5pyPeg_lon, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"hdg", __pyx_getprop_8iscecore_5pyPeg_hdg, __pyx_setprop_8iscecore_5pyPeg_hdg, (char *)0, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyTypeObject __pyx_type_8iscecore_pyPeg = {

#line 45 "vector.from_py"
  PyVarObject_HEAD_INIT(0, 0)

#line 45 "vector.from_py"
  "iscecore.pyPeg", /*tp_name*/

#line 45 "vector.from_py"
  sizeof(struct __pyx_obj_8iscecore_pyPeg), /*tp_basicsize*/

#line 45 "vector.from_py"
  0, /*tp_itemsize*/

#line 45 "vector.from_py"
  __pyx_tp_dealloc_8iscecore_pyPeg, /*tp_dealloc*/

#line 45 "vector.from_py"
  0, /*tp_print*/

#line 45 "vector.from_py"
  0, /*tp_getattr*/

#line 45 "vector.from_py"
  0, /*tp_setattr*/

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION < 3

#line 45 "vector.from_py"
  0, /*tp_compare*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION >= 3

#line 45 "vector.from_py"
  0, /*tp_as_async*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  0, /*tp_repr*/

#line 45 "vector.from_py"
  0, /*tp_as_number*/

#line 45 "vector.from_py"
  0, /*tp_as_sequence*/

#line 45 "vector.from_py"
  0, /*tp_as_mapping*/

#line 45 "vector.from_py"
  0, /*tp_hash*/

#line 45 "vector.from_py"
  0, /*tp_call*/

#line 45 "vector.from_py"
  0, /*tp_str*/

#line 45 "vector.from_py"
  0, /*tp_getattro*/

#line 45 "vector.from_py"
  0, /*tp_setattro*/

#line 45 "vector.from_py"
  0, /*tp_as_buffer*/

#line 45 "vector.from_py"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 45 "vector.from_py"
  0, /*tp_doc*/

#line 45 "vector.from_py"
  0, /*tp_traverse*/

#line 45 "vector.from_py"
  0, /*tp_clear*/

#line 45 "vector.from_py"
  0, /*tp_richcompare*/

#line 45 "vector.from_py"
  0, /*tp_weaklistoffset*/

#line 45 "vector.from_py"
  0, /*tp_iter*/

#line 45 "vector.from_py"
  0, /*tp_iternext*/

#line 45 "vector.from_py"
  __pyx_methods_8iscecore_pyPeg, /*tp_methods*/

#line 45 "vector.from_py"
  0, /*tp_members*/

#line 45 "vector.from_py"
  __pyx_getsets_8iscecore_pyPeg, /*tp_getset*/

#line 45 "vector.from_py"
  0, /*tp_base*/

#line 45 "vector.from_py"
  0, /*tp_dict*/

#line 45 "vector.from_py"
  0, /*tp_descr_get*/

#line 45 "vector.from_py"
  0, /*tp_descr_set*/

#line 45 "vector.from_py"
  0, /*tp_dictoffset*/

#line 45 "vector.from_py"
  0, /*tp_init*/

#line 45 "vector.from_py"
  0, /*tp_alloc*/

#line 45 "vector.from_py"
  __pyx_tp_new_8iscecore_pyPeg, /*tp_new*/

#line 45 "vector.from_py"
  0, /*tp_free*/

#line 45 "vector.from_py"
  0, /*tp_is_gc*/

#line 45 "vector.from_py"
  0, /*tp_bases*/

#line 45 "vector.from_py"
  0, /*tp_mro*/

#line 45 "vector.from_py"
  0, /*tp_cache*/

#line 45 "vector.from_py"
  0, /*tp_subclasses*/

#line 45 "vector.from_py"
  0, /*tp_weaklist*/

#line 45 "vector.from_py"
  0, /*tp_del*/

#line 45 "vector.from_py"
  0, /*tp_version_tag*/

#line 45 "vector.from_py"
  #if PY_VERSION_HEX >= 0x030400a1

#line 45 "vector.from_py"
  0, /*tp_finalize*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_tp_new_8iscecore_pyPegtrans(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

#line 45 "vector.from_py"
  PyObject *o;

#line 45 "vector.from_py"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 45 "vector.from_py"
    o = (*t->tp_alloc)(t, 0);

#line 45 "vector.from_py"
  } else {

#line 45 "vector.from_py"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  if (unlikely(!o)) return 0;

#line 45 "vector.from_py"
  if (unlikely(__pyx_pw_8iscecore_10pyPegtrans_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;

#line 45 "vector.from_py"
  return o;

#line 45 "vector.from_py"
  bad:

#line 45 "vector.from_py"
  Py_DECREF(o); o = 0;

#line 45 "vector.from_py"
  return NULL;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static void __pyx_tp_dealloc_8iscecore_pyPegtrans(PyObject *o) {

#line 45 "vector.from_py"
  #if CYTHON_USE_TP_FINALIZE

#line 45 "vector.from_py"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {

#line 45 "vector.from_py"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  {

#line 45 "vector.from_py"
    PyObject *etype, *eval, *etb;

#line 45 "vector.from_py"
    PyErr_Fetch(&etype, &eval, &etb);

#line 45 "vector.from_py"
    ++Py_REFCNT(o);

#line 45 "vector.from_py"
    __pyx_pw_8iscecore_10pyPegtrans_3__dealloc__(o);

#line 45 "vector.from_py"
    --Py_REFCNT(o);

#line 45 "vector.from_py"
    PyErr_Restore(etype, eval, etb);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  (*Py_TYPE(o)->tp_free)(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_10pyPegtrans_mat(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_10pyPegtrans_3mat_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_10pyPegtrans_mat(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_10pyPegtrans_3mat_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_10pyPegtrans_matinv(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_10pyPegtrans_6matinv_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_10pyPegtrans_matinv(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_10pyPegtrans_6matinv_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_10pyPegtrans_ov(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_10pyPegtrans_2ov_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_10pyPegtrans_ov(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_10pyPegtrans_2ov_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_10pyPegtrans_radcur(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_10pyPegtrans_6radcur_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_10pyPegtrans_radcur(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_10pyPegtrans_6radcur_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyMethodDef __pyx_methods_8iscecore_pyPegtrans[] = {

#line 45 "vector.from_py"
  {"bind", (PyCFunction)__pyx_pw_8iscecore_10pyPegtrans_5bind, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"dPrint", (PyCFunction)__pyx_pw_8iscecore_10pyPegtrans_7dPrint, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"copy", (PyCFunction)__pyx_pw_8iscecore_10pyPegtrans_9copy, METH_O, 0},

#line 45 "vector.from_py"
  {"radarToXYZ", (PyCFunction)__pyx_pw_8iscecore_10pyPegtrans_11radarToXYZ, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"convertSCHtoXYZ", (PyCFunction)__pyx_pw_8iscecore_10pyPegtrans_13convertSCHtoXYZ, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"convertSCHdotToXYZdot", (PyCFunction)__pyx_pw_8iscecore_10pyPegtrans_15convertSCHdotToXYZdot, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"SCHbasis", (PyCFunction)__pyx_pw_8iscecore_10pyPegtrans_17SCHbasis, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8iscecore_10pyPegtrans_19__reduce_cython__, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8iscecore_10pyPegtrans_21__setstate_cython__, METH_O, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static struct PyGetSetDef __pyx_getsets_8iscecore_pyPegtrans[] = {

#line 45 "vector.from_py"
  {(char *)"mat", __pyx_getprop_8iscecore_10pyPegtrans_mat, __pyx_setprop_8iscecore_10pyPegtrans_mat, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"matinv", __pyx_getprop_8iscecore_10pyPegtrans_matinv, __pyx_setprop_8iscecore_10pyPegtrans_matinv, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"ov", __pyx_getprop_8iscecore_10pyPegtrans_ov, __pyx_setprop_8iscecore_10pyPegtrans_ov, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"radcur", __pyx_getprop_8iscecore_10pyPegtrans_radcur, __pyx_setprop_8iscecore_10pyPegtrans_radcur, (char *)0, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyTypeObject __pyx_type_8iscecore_pyPegtrans = {

#line 45 "vector.from_py"
  PyVarObject_HEAD_INIT(0, 0)

#line 45 "vector.from_py"
  "iscecore.pyPegtrans", /*tp_name*/

#line 45 "vector.from_py"
  sizeof(struct __pyx_obj_8iscecore_pyPegtrans), /*tp_basicsize*/

#line 45 "vector.from_py"
  0, /*tp_itemsize*/

#line 45 "vector.from_py"
  __pyx_tp_dealloc_8iscecore_pyPegtrans, /*tp_dealloc*/

#line 45 "vector.from_py"
  0, /*tp_print*/

#line 45 "vector.from_py"
  0, /*tp_getattr*/

#line 45 "vector.from_py"
  0, /*tp_setattr*/

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION < 3

#line 45 "vector.from_py"
  0, /*tp_compare*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION >= 3

#line 45 "vector.from_py"
  0, /*tp_as_async*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  0, /*tp_repr*/

#line 45 "vector.from_py"
  0, /*tp_as_number*/

#line 45 "vector.from_py"
  0, /*tp_as_sequence*/

#line 45 "vector.from_py"
  0, /*tp_as_mapping*/

#line 45 "vector.from_py"
  0, /*tp_hash*/

#line 45 "vector.from_py"
  0, /*tp_call*/

#line 45 "vector.from_py"
  0, /*tp_str*/

#line 45 "vector.from_py"
  0, /*tp_getattro*/

#line 45 "vector.from_py"
  0, /*tp_setattro*/

#line 45 "vector.from_py"
  0, /*tp_as_buffer*/

#line 45 "vector.from_py"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 45 "vector.from_py"
  0, /*tp_doc*/

#line 45 "vector.from_py"
  0, /*tp_traverse*/

#line 45 "vector.from_py"
  0, /*tp_clear*/

#line 45 "vector.from_py"
  0, /*tp_richcompare*/

#line 45 "vector.from_py"
  0, /*tp_weaklistoffset*/

#line 45 "vector.from_py"
  0, /*tp_iter*/

#line 45 "vector.from_py"
  0, /*tp_iternext*/

#line 45 "vector.from_py"
  __pyx_methods_8iscecore_pyPegtrans, /*tp_methods*/

#line 45 "vector.from_py"
  0, /*tp_members*/

#line 45 "vector.from_py"
  __pyx_getsets_8iscecore_pyPegtrans, /*tp_getset*/

#line 45 "vector.from_py"
  0, /*tp_base*/

#line 45 "vector.from_py"
  0, /*tp_dict*/

#line 45 "vector.from_py"
  0, /*tp_descr_get*/

#line 45 "vector.from_py"
  0, /*tp_descr_set*/

#line 45 "vector.from_py"
  0, /*tp_dictoffset*/

#line 45 "vector.from_py"
  0, /*tp_init*/

#line 45 "vector.from_py"
  0, /*tp_alloc*/

#line 45 "vector.from_py"
  __pyx_tp_new_8iscecore_pyPegtrans, /*tp_new*/

#line 45 "vector.from_py"
  0, /*tp_free*/

#line 45 "vector.from_py"
  0, /*tp_is_gc*/

#line 45 "vector.from_py"
  0, /*tp_bases*/

#line 45 "vector.from_py"
  0, /*tp_mro*/

#line 45 "vector.from_py"
  0, /*tp_cache*/

#line 45 "vector.from_py"
  0, /*tp_subclasses*/

#line 45 "vector.from_py"
  0, /*tp_weaklist*/

#line 45 "vector.from_py"
  0, /*tp_del*/

#line 45 "vector.from_py"
  0, /*tp_version_tag*/

#line 45 "vector.from_py"
  #if PY_VERSION_HEX >= 0x030400a1

#line 45 "vector.from_py"
  0, /*tp_finalize*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_tp_new_8iscecore_pyPosition(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

#line 45 "vector.from_py"
  PyObject *o;

#line 45 "vector.from_py"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 45 "vector.from_py"
    o = (*t->tp_alloc)(t, 0);

#line 45 "vector.from_py"
  } else {

#line 45 "vector.from_py"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  if (unlikely(!o)) return 0;

#line 45 "vector.from_py"
  if (unlikely(__pyx_pw_8iscecore_10pyPosition_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;

#line 45 "vector.from_py"
  return o;

#line 45 "vector.from_py"
  bad:

#line 45 "vector.from_py"
  Py_DECREF(o); o = 0;

#line 45 "vector.from_py"
  return NULL;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static void __pyx_tp_dealloc_8iscecore_pyPosition(PyObject *o) {

#line 45 "vector.from_py"
  #if CYTHON_USE_TP_FINALIZE

#line 45 "vector.from_py"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {

#line 45 "vector.from_py"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  {

#line 45 "vector.from_py"
    PyObject *etype, *eval, *etb;

#line 45 "vector.from_py"
    PyErr_Fetch(&etype, &eval, &etb);

#line 45 "vector.from_py"
    ++Py_REFCNT(o);

#line 45 "vector.from_py"
    __pyx_pw_8iscecore_10pyPosition_3__dealloc__(o);

#line 45 "vector.from_py"
    --Py_REFCNT(o);

#line 45 "vector.from_py"
    PyErr_Restore(etype, eval, etb);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  (*Py_TYPE(o)->tp_free)(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_10pyPosition_j(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_10pyPosition_1j_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_10pyPosition_j(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_10pyPosition_1j_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_10pyPosition_jdot(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_10pyPosition_4jdot_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_10pyPosition_jdot(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_10pyPosition_4jdot_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_10pyPosition_jddt(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_10pyPosition_4jddt_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_10pyPosition_jddt(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_10pyPosition_4jddt_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyMethodDef __pyx_methods_8iscecore_pyPosition[] = {

#line 45 "vector.from_py"
  {"bind", (PyCFunction)__pyx_pw_8iscecore_10pyPosition_5bind, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"dPrint", (PyCFunction)__pyx_pw_8iscecore_10pyPosition_7dPrint, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"copy", (PyCFunction)__pyx_pw_8iscecore_10pyPosition_9copy, METH_O, 0},

#line 45 "vector.from_py"
  {"lookVec", (PyCFunction)__pyx_pw_8iscecore_10pyPosition_11lookVec, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8iscecore_10pyPosition_13__reduce_cython__, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8iscecore_10pyPosition_15__setstate_cython__, METH_O, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static struct PyGetSetDef __pyx_getsets_8iscecore_pyPosition[] = {

#line 45 "vector.from_py"
  {(char *)"j", __pyx_getprop_8iscecore_10pyPosition_j, __pyx_setprop_8iscecore_10pyPosition_j, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"jdot", __pyx_getprop_8iscecore_10pyPosition_jdot, __pyx_setprop_8iscecore_10pyPosition_jdot, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"jddt", __pyx_getprop_8iscecore_10pyPosition_jddt, __pyx_setprop_8iscecore_10pyPosition_jddt, (char *)0, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyTypeObject __pyx_type_8iscecore_pyPosition = {

#line 45 "vector.from_py"
  PyVarObject_HEAD_INIT(0, 0)

#line 45 "vector.from_py"
  "iscecore.pyPosition", /*tp_name*/

#line 45 "vector.from_py"
  sizeof(struct __pyx_obj_8iscecore_pyPosition), /*tp_basicsize*/

#line 45 "vector.from_py"
  0, /*tp_itemsize*/

#line 45 "vector.from_py"
  __pyx_tp_dealloc_8iscecore_pyPosition, /*tp_dealloc*/

#line 45 "vector.from_py"
  0, /*tp_print*/

#line 45 "vector.from_py"
  0, /*tp_getattr*/

#line 45 "vector.from_py"
  0, /*tp_setattr*/

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION < 3

#line 45 "vector.from_py"
  0, /*tp_compare*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION >= 3

#line 45 "vector.from_py"
  0, /*tp_as_async*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  0, /*tp_repr*/

#line 45 "vector.from_py"
  0, /*tp_as_number*/

#line 45 "vector.from_py"
  0, /*tp_as_sequence*/

#line 45 "vector.from_py"
  0, /*tp_as_mapping*/

#line 45 "vector.from_py"
  0, /*tp_hash*/

#line 45 "vector.from_py"
  0, /*tp_call*/

#line 45 "vector.from_py"
  0, /*tp_str*/

#line 45 "vector.from_py"
  0, /*tp_getattro*/

#line 45 "vector.from_py"
  0, /*tp_setattro*/

#line 45 "vector.from_py"
  0, /*tp_as_buffer*/

#line 45 "vector.from_py"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 45 "vector.from_py"
  0, /*tp_doc*/

#line 45 "vector.from_py"
  0, /*tp_traverse*/

#line 45 "vector.from_py"
  0, /*tp_clear*/

#line 45 "vector.from_py"
  0, /*tp_richcompare*/

#line 45 "vector.from_py"
  0, /*tp_weaklistoffset*/

#line 45 "vector.from_py"
  0, /*tp_iter*/

#line 45 "vector.from_py"
  0, /*tp_iternext*/

#line 45 "vector.from_py"
  __pyx_methods_8iscecore_pyPosition, /*tp_methods*/

#line 45 "vector.from_py"
  0, /*tp_members*/

#line 45 "vector.from_py"
  __pyx_getsets_8iscecore_pyPosition, /*tp_getset*/

#line 45 "vector.from_py"
  0, /*tp_base*/

#line 45 "vector.from_py"
  0, /*tp_dict*/

#line 45 "vector.from_py"
  0, /*tp_descr_get*/

#line 45 "vector.from_py"
  0, /*tp_descr_set*/

#line 45 "vector.from_py"
  0, /*tp_dictoffset*/

#line 45 "vector.from_py"
  0, /*tp_init*/

#line 45 "vector.from_py"
  0, /*tp_alloc*/

#line 45 "vector.from_py"
  __pyx_tp_new_8iscecore_pyPosition, /*tp_new*/

#line 45 "vector.from_py"
  0, /*tp_free*/

#line 45 "vector.from_py"
  0, /*tp_is_gc*/

#line 45 "vector.from_py"
  0, /*tp_bases*/

#line 45 "vector.from_py"
  0, /*tp_mro*/

#line 45 "vector.from_py"
  0, /*tp_cache*/

#line 45 "vector.from_py"
  0, /*tp_subclasses*/

#line 45 "vector.from_py"
  0, /*tp_weaklist*/

#line 45 "vector.from_py"
  0, /*tp_del*/

#line 45 "vector.from_py"
  0, /*tp_version_tag*/

#line 45 "vector.from_py"
  #if PY_VERSION_HEX >= 0x030400a1

#line 45 "vector.from_py"
  0, /*tp_finalize*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_tp_new_8iscecore_pyLinAlg(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

#line 45 "vector.from_py"
  PyObject *o;

#line 45 "vector.from_py"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 45 "vector.from_py"
    o = (*t->tp_alloc)(t, 0);

#line 45 "vector.from_py"
  } else {

#line 45 "vector.from_py"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  if (unlikely(!o)) return 0;

#line 45 "vector.from_py"
  if (unlikely(__pyx_pw_8iscecore_8pyLinAlg_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;

#line 45 "vector.from_py"
  return o;

#line 45 "vector.from_py"
  bad:

#line 45 "vector.from_py"
  Py_DECREF(o); o = 0;

#line 45 "vector.from_py"
  return NULL;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static void __pyx_tp_dealloc_8iscecore_pyLinAlg(PyObject *o) {

#line 45 "vector.from_py"
  #if CYTHON_USE_TP_FINALIZE

#line 45 "vector.from_py"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {

#line 45 "vector.from_py"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  {

#line 45 "vector.from_py"
    PyObject *etype, *eval, *etb;

#line 45 "vector.from_py"
    PyErr_Fetch(&etype, &eval, &etb);

#line 45 "vector.from_py"
    ++Py_REFCNT(o);

#line 45 "vector.from_py"
    __pyx_pw_8iscecore_8pyLinAlg_3__dealloc__(o);

#line 45 "vector.from_py"
    --Py_REFCNT(o);

#line 45 "vector.from_py"
    PyErr_Restore(etype, eval, etb);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  (*Py_TYPE(o)->tp_free)(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyMethodDef __pyx_methods_8iscecore_pyLinAlg[] = {

#line 45 "vector.from_py"
  {"cross", (PyCFunction)__pyx_pw_8iscecore_8pyLinAlg_5cross, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"dot", (PyCFunction)__pyx_pw_8iscecore_8pyLinAlg_7dot, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"linComb", (PyCFunction)__pyx_pw_8iscecore_8pyLinAlg_9linComb, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"matMat", (PyCFunction)__pyx_pw_8iscecore_8pyLinAlg_11matMat, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"matVec", (PyCFunction)__pyx_pw_8iscecore_8pyLinAlg_13matVec, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"norm", (PyCFunction)__pyx_pw_8iscecore_8pyLinAlg_15norm, METH_O, 0},

#line 45 "vector.from_py"
  {"tranMat", (PyCFunction)__pyx_pw_8iscecore_8pyLinAlg_17tranMat, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"unitVec", (PyCFunction)__pyx_pw_8iscecore_8pyLinAlg_19unitVec, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"enuBasis", (PyCFunction)__pyx_pw_8iscecore_8pyLinAlg_21enuBasis, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8iscecore_8pyLinAlg_23__reduce_cython__, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8iscecore_8pyLinAlg_25__setstate_cython__, METH_O, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyTypeObject __pyx_type_8iscecore_pyLinAlg = {

#line 45 "vector.from_py"
  PyVarObject_HEAD_INIT(0, 0)

#line 45 "vector.from_py"
  "iscecore.pyLinAlg", /*tp_name*/

#line 45 "vector.from_py"
  sizeof(struct __pyx_obj_8iscecore_pyLinAlg), /*tp_basicsize*/

#line 45 "vector.from_py"
  0, /*tp_itemsize*/

#line 45 "vector.from_py"
  __pyx_tp_dealloc_8iscecore_pyLinAlg, /*tp_dealloc*/

#line 45 "vector.from_py"
  0, /*tp_print*/

#line 45 "vector.from_py"
  0, /*tp_getattr*/

#line 45 "vector.from_py"
  0, /*tp_setattr*/

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION < 3

#line 45 "vector.from_py"
  0, /*tp_compare*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION >= 3

#line 45 "vector.from_py"
  0, /*tp_as_async*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  0, /*tp_repr*/

#line 45 "vector.from_py"
  0, /*tp_as_number*/

#line 45 "vector.from_py"
  0, /*tp_as_sequence*/

#line 45 "vector.from_py"
  0, /*tp_as_mapping*/

#line 45 "vector.from_py"
  0, /*tp_hash*/

#line 45 "vector.from_py"
  0, /*tp_call*/

#line 45 "vector.from_py"
  0, /*tp_str*/

#line 45 "vector.from_py"
  0, /*tp_getattro*/

#line 45 "vector.from_py"
  0, /*tp_setattro*/

#line 45 "vector.from_py"
  0, /*tp_as_buffer*/

#line 45 "vector.from_py"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 45 "vector.from_py"
  0, /*tp_doc*/

#line 45 "vector.from_py"
  0, /*tp_traverse*/

#line 45 "vector.from_py"
  0, /*tp_clear*/

#line 45 "vector.from_py"
  0, /*tp_richcompare*/

#line 45 "vector.from_py"
  0, /*tp_weaklistoffset*/

#line 45 "vector.from_py"
  0, /*tp_iter*/

#line 45 "vector.from_py"
  0, /*tp_iternext*/

#line 45 "vector.from_py"
  __pyx_methods_8iscecore_pyLinAlg, /*tp_methods*/

#line 45 "vector.from_py"
  0, /*tp_members*/

#line 45 "vector.from_py"
  0, /*tp_getset*/

#line 45 "vector.from_py"
  0, /*tp_base*/

#line 45 "vector.from_py"
  0, /*tp_dict*/

#line 45 "vector.from_py"
  0, /*tp_descr_get*/

#line 45 "vector.from_py"
  0, /*tp_descr_set*/

#line 45 "vector.from_py"
  0, /*tp_dictoffset*/

#line 45 "vector.from_py"
  0, /*tp_init*/

#line 45 "vector.from_py"
  0, /*tp_alloc*/

#line 45 "vector.from_py"
  __pyx_tp_new_8iscecore_pyLinAlg, /*tp_new*/

#line 45 "vector.from_py"
  0, /*tp_free*/

#line 45 "vector.from_py"
  0, /*tp_is_gc*/

#line 45 "vector.from_py"
  0, /*tp_bases*/

#line 45 "vector.from_py"
  0, /*tp_mro*/

#line 45 "vector.from_py"
  0, /*tp_cache*/

#line 45 "vector.from_py"
  0, /*tp_subclasses*/

#line 45 "vector.from_py"
  0, /*tp_weaklist*/

#line 45 "vector.from_py"
  0, /*tp_del*/

#line 45 "vector.from_py"
  0, /*tp_version_tag*/

#line 45 "vector.from_py"
  #if PY_VERSION_HEX >= 0x030400a1

#line 45 "vector.from_py"
  0, /*tp_finalize*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_tp_new_8iscecore_pyOrbit(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 45 "vector.from_py"
  PyObject *o;

#line 45 "vector.from_py"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 45 "vector.from_py"
    o = (*t->tp_alloc)(t, 0);

#line 45 "vector.from_py"
  } else {

#line 45 "vector.from_py"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  if (unlikely(!o)) return 0;

#line 45 "vector.from_py"
  if (unlikely(__pyx_pw_8iscecore_7pyOrbit_1__cinit__(o, a, k) < 0)) goto bad;

#line 45 "vector.from_py"
  return o;

#line 45 "vector.from_py"
  bad:

#line 45 "vector.from_py"
  Py_DECREF(o); o = 0;

#line 45 "vector.from_py"
  return NULL;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static void __pyx_tp_dealloc_8iscecore_pyOrbit(PyObject *o) {

#line 45 "vector.from_py"
  #if CYTHON_USE_TP_FINALIZE

#line 45 "vector.from_py"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {

#line 45 "vector.from_py"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  {

#line 45 "vector.from_py"
    PyObject *etype, *eval, *etb;

#line 45 "vector.from_py"
    PyErr_Fetch(&etype, &eval, &etb);

#line 45 "vector.from_py"
    ++Py_REFCNT(o);

#line 45 "vector.from_py"
    __pyx_pw_8iscecore_7pyOrbit_3__dealloc__(o);

#line 45 "vector.from_py"
    --Py_REFCNT(o);

#line 45 "vector.from_py"
    PyErr_Restore(etype, eval, etb);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  (*Py_TYPE(o)->tp_free)(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_7pyOrbit_basis(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_7pyOrbit_5basis_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_7pyOrbit_basis(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_7pyOrbit_5basis_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_7pyOrbit_nVectors(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_7pyOrbit_8nVectors_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_7pyOrbit_nVectors(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_7pyOrbit_8nVectors_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_7pyOrbit_UTCtime(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_7pyOrbit_7UTCtime_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_7pyOrbit_UTCtime(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_7pyOrbit_7UTCtime_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_7pyOrbit_position(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_7pyOrbit_8position_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_7pyOrbit_position(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_7pyOrbit_8position_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_7pyOrbit_velocity(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_7pyOrbit_8velocity_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_7pyOrbit_velocity(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_7pyOrbit_8velocity_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyMethodDef __pyx_methods_8iscecore_pyOrbit[] = {

#line 45 "vector.from_py"
  {"bind", (PyCFunction)__pyx_pw_8iscecore_7pyOrbit_5bind, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"copy", (PyCFunction)__pyx_pw_8iscecore_7pyOrbit_7copy, METH_O, 0},

#line 45 "vector.from_py"
  {"dPrint", (PyCFunction)__pyx_pw_8iscecore_7pyOrbit_9dPrint, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"getPositionVelocity", (PyCFunction)__pyx_pw_8iscecore_7pyOrbit_11getPositionVelocity, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"getStateVector", (PyCFunction)__pyx_pw_8iscecore_7pyOrbit_13getStateVector, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"setStateVector", (PyCFunction)__pyx_pw_8iscecore_7pyOrbit_15setStateVector, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"addStateVector", (PyCFunction)__pyx_pw_8iscecore_7pyOrbit_17addStateVector, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"interpolate", (PyCFunction)__pyx_pw_8iscecore_7pyOrbit_19interpolate, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"interpolateWGS84Orbit", (PyCFunction)__pyx_pw_8iscecore_7pyOrbit_21interpolateWGS84Orbit, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"interpolateLegendreOrbit", (PyCFunction)__pyx_pw_8iscecore_7pyOrbit_23interpolateLegendreOrbit, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"interpolateSCHOrbit", (PyCFunction)__pyx_pw_8iscecore_7pyOrbit_25interpolateSCHOrbit, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"computeAcceleration", (PyCFunction)__pyx_pw_8iscecore_7pyOrbit_27computeAcceleration, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"printOrbit", (PyCFunction)__pyx_pw_8iscecore_7pyOrbit_29printOrbit, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"loadFromHDR", (PyCFunction)__pyx_pw_8iscecore_7pyOrbit_31loadFromHDR, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"dumpToHDR", (PyCFunction)__pyx_pw_8iscecore_7pyOrbit_33dumpToHDR, METH_O, 0},

#line 45 "vector.from_py"
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8iscecore_7pyOrbit_35__reduce_cython__, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8iscecore_7pyOrbit_37__setstate_cython__, METH_O, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static struct PyGetSetDef __pyx_getsets_8iscecore_pyOrbit[] = {

#line 45 "vector.from_py"
  {(char *)"basis", __pyx_getprop_8iscecore_7pyOrbit_basis, __pyx_setprop_8iscecore_7pyOrbit_basis, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"nVectors", __pyx_getprop_8iscecore_7pyOrbit_nVectors, __pyx_setprop_8iscecore_7pyOrbit_nVectors, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"UTCtime", __pyx_getprop_8iscecore_7pyOrbit_UTCtime, __pyx_setprop_8iscecore_7pyOrbit_UTCtime, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"position", __pyx_getprop_8iscecore_7pyOrbit_position, __pyx_setprop_8iscecore_7pyOrbit_position, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"velocity", __pyx_getprop_8iscecore_7pyOrbit_velocity, __pyx_setprop_8iscecore_7pyOrbit_velocity, (char *)0, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyTypeObject __pyx_type_8iscecore_pyOrbit = {

#line 45 "vector.from_py"
  PyVarObject_HEAD_INIT(0, 0)

#line 45 "vector.from_py"
  "iscecore.pyOrbit", /*tp_name*/

#line 45 "vector.from_py"
  sizeof(struct __pyx_obj_8iscecore_pyOrbit), /*tp_basicsize*/

#line 45 "vector.from_py"
  0, /*tp_itemsize*/

#line 45 "vector.from_py"
  __pyx_tp_dealloc_8iscecore_pyOrbit, /*tp_dealloc*/

#line 45 "vector.from_py"
  0, /*tp_print*/

#line 45 "vector.from_py"
  0, /*tp_getattr*/

#line 45 "vector.from_py"
  0, /*tp_setattr*/

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION < 3

#line 45 "vector.from_py"
  0, /*tp_compare*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION >= 3

#line 45 "vector.from_py"
  0, /*tp_as_async*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  0, /*tp_repr*/

#line 45 "vector.from_py"
  0, /*tp_as_number*/

#line 45 "vector.from_py"
  0, /*tp_as_sequence*/

#line 45 "vector.from_py"
  0, /*tp_as_mapping*/

#line 45 "vector.from_py"
  0, /*tp_hash*/

#line 45 "vector.from_py"
  0, /*tp_call*/

#line 45 "vector.from_py"
  0, /*tp_str*/

#line 45 "vector.from_py"
  0, /*tp_getattro*/

#line 45 "vector.from_py"
  0, /*tp_setattro*/

#line 45 "vector.from_py"
  0, /*tp_as_buffer*/

#line 45 "vector.from_py"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 45 "vector.from_py"
  0, /*tp_doc*/

#line 45 "vector.from_py"
  0, /*tp_traverse*/

#line 45 "vector.from_py"
  0, /*tp_clear*/

#line 45 "vector.from_py"
  0, /*tp_richcompare*/

#line 45 "vector.from_py"
  0, /*tp_weaklistoffset*/

#line 45 "vector.from_py"
  0, /*tp_iter*/

#line 45 "vector.from_py"
  0, /*tp_iternext*/

#line 45 "vector.from_py"
  __pyx_methods_8iscecore_pyOrbit, /*tp_methods*/

#line 45 "vector.from_py"
  0, /*tp_members*/

#line 45 "vector.from_py"
  __pyx_getsets_8iscecore_pyOrbit, /*tp_getset*/

#line 45 "vector.from_py"
  0, /*tp_base*/

#line 45 "vector.from_py"
  0, /*tp_dict*/

#line 45 "vector.from_py"
  0, /*tp_descr_get*/

#line 45 "vector.from_py"
  0, /*tp_descr_set*/

#line 45 "vector.from_py"
  0, /*tp_dictoffset*/

#line 45 "vector.from_py"
  0, /*tp_init*/

#line 45 "vector.from_py"
  0, /*tp_alloc*/

#line 45 "vector.from_py"
  __pyx_tp_new_8iscecore_pyOrbit, /*tp_new*/

#line 45 "vector.from_py"
  0, /*tp_free*/

#line 45 "vector.from_py"
  0, /*tp_is_gc*/

#line 45 "vector.from_py"
  0, /*tp_bases*/

#line 45 "vector.from_py"
  0, /*tp_mro*/

#line 45 "vector.from_py"
  0, /*tp_cache*/

#line 45 "vector.from_py"
  0, /*tp_subclasses*/

#line 45 "vector.from_py"
  0, /*tp_weaklist*/

#line 45 "vector.from_py"
  0, /*tp_del*/

#line 45 "vector.from_py"
  0, /*tp_version_tag*/

#line 45 "vector.from_py"
  #if PY_VERSION_HEX >= 0x030400a1

#line 45 "vector.from_py"
  0, /*tp_finalize*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_tp_new_8iscecore_pyPoly1d(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 45 "vector.from_py"
  PyObject *o;

#line 45 "vector.from_py"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 45 "vector.from_py"
    o = (*t->tp_alloc)(t, 0);

#line 45 "vector.from_py"
  } else {

#line 45 "vector.from_py"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  if (unlikely(!o)) return 0;

#line 45 "vector.from_py"
  if (unlikely(__pyx_pw_8iscecore_8pyPoly1d_1__cinit__(o, a, k) < 0)) goto bad;

#line 45 "vector.from_py"
  return o;

#line 45 "vector.from_py"
  bad:

#line 45 "vector.from_py"
  Py_DECREF(o); o = 0;

#line 45 "vector.from_py"
  return NULL;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static void __pyx_tp_dealloc_8iscecore_pyPoly1d(PyObject *o) {

#line 45 "vector.from_py"
  #if CYTHON_USE_TP_FINALIZE

#line 45 "vector.from_py"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {

#line 45 "vector.from_py"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  {

#line 45 "vector.from_py"
    PyObject *etype, *eval, *etb;

#line 45 "vector.from_py"
    PyErr_Fetch(&etype, &eval, &etb);

#line 45 "vector.from_py"
    ++Py_REFCNT(o);

#line 45 "vector.from_py"
    __pyx_pw_8iscecore_8pyPoly1d_3__dealloc__(o);

#line 45 "vector.from_py"
    --Py_REFCNT(o);

#line 45 "vector.from_py"
    PyErr_Restore(etype, eval, etb);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  (*Py_TYPE(o)->tp_free)(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_8pyPoly1d_order(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_8pyPoly1d_5order_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_8pyPoly1d_order(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_8pyPoly1d_5order_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_8pyPoly1d_mean(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_8pyPoly1d_4mean_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_8pyPoly1d_mean(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_8pyPoly1d_4mean_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_8pyPoly1d_norm(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_8pyPoly1d_4norm_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_8pyPoly1d_norm(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_8pyPoly1d_4norm_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_8pyPoly1d_coeffs(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_8pyPoly1d_6coeffs_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_8pyPoly1d_coeffs(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_8pyPoly1d_6coeffs_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyMethodDef __pyx_methods_8iscecore_pyPoly1d[] = {

#line 45 "vector.from_py"
  {"bind", (PyCFunction)__pyx_pw_8iscecore_8pyPoly1d_5bind, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"copy", (PyCFunction)__pyx_pw_8iscecore_8pyPoly1d_7copy, METH_O, 0},

#line 45 "vector.from_py"
  {"dPrint", (PyCFunction)__pyx_pw_8iscecore_8pyPoly1d_9dPrint, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"setCoeff", (PyCFunction)__pyx_pw_8iscecore_8pyPoly1d_11setCoeff, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"getCoeff", (PyCFunction)__pyx_pw_8iscecore_8pyPoly1d_13getCoeff, METH_O, 0},

#line 45 "vector.from_py"
  {"eval", (PyCFunction)__pyx_pw_8iscecore_8pyPoly1d_15eval, METH_O, 0},

#line 45 "vector.from_py"
  {"printPoly", (PyCFunction)__pyx_pw_8iscecore_8pyPoly1d_17printPoly, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8iscecore_8pyPoly1d_19__reduce_cython__, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8iscecore_8pyPoly1d_21__setstate_cython__, METH_O, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static struct PyGetSetDef __pyx_getsets_8iscecore_pyPoly1d[] = {

#line 45 "vector.from_py"
  {(char *)"order", __pyx_getprop_8iscecore_8pyPoly1d_order, __pyx_setprop_8iscecore_8pyPoly1d_order, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"mean", __pyx_getprop_8iscecore_8pyPoly1d_mean, __pyx_setprop_8iscecore_8pyPoly1d_mean, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"norm", __pyx_getprop_8iscecore_8pyPoly1d_norm, __pyx_setprop_8iscecore_8pyPoly1d_norm, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"coeffs", __pyx_getprop_8iscecore_8pyPoly1d_coeffs, __pyx_setprop_8iscecore_8pyPoly1d_coeffs, (char *)0, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyTypeObject __pyx_type_8iscecore_pyPoly1d = {

#line 45 "vector.from_py"
  PyVarObject_HEAD_INIT(0, 0)

#line 45 "vector.from_py"
  "iscecore.pyPoly1d", /*tp_name*/

#line 45 "vector.from_py"
  sizeof(struct __pyx_obj_8iscecore_pyPoly1d), /*tp_basicsize*/

#line 45 "vector.from_py"
  0, /*tp_itemsize*/

#line 45 "vector.from_py"
  __pyx_tp_dealloc_8iscecore_pyPoly1d, /*tp_dealloc*/

#line 45 "vector.from_py"
  0, /*tp_print*/

#line 45 "vector.from_py"
  0, /*tp_getattr*/

#line 45 "vector.from_py"
  0, /*tp_setattr*/

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION < 3

#line 45 "vector.from_py"
  0, /*tp_compare*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION >= 3

#line 45 "vector.from_py"
  0, /*tp_as_async*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  0, /*tp_repr*/

#line 45 "vector.from_py"
  0, /*tp_as_number*/

#line 45 "vector.from_py"
  0, /*tp_as_sequence*/

#line 45 "vector.from_py"
  0, /*tp_as_mapping*/

#line 45 "vector.from_py"
  0, /*tp_hash*/

#line 45 "vector.from_py"
  0, /*tp_call*/

#line 45 "vector.from_py"
  0, /*tp_str*/

#line 45 "vector.from_py"
  0, /*tp_getattro*/

#line 45 "vector.from_py"
  0, /*tp_setattro*/

#line 45 "vector.from_py"
  0, /*tp_as_buffer*/

#line 45 "vector.from_py"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 45 "vector.from_py"
  0, /*tp_doc*/

#line 45 "vector.from_py"
  0, /*tp_traverse*/

#line 45 "vector.from_py"
  0, /*tp_clear*/

#line 45 "vector.from_py"
  0, /*tp_richcompare*/

#line 45 "vector.from_py"
  0, /*tp_weaklistoffset*/

#line 45 "vector.from_py"
  0, /*tp_iter*/

#line 45 "vector.from_py"
  0, /*tp_iternext*/

#line 45 "vector.from_py"
  __pyx_methods_8iscecore_pyPoly1d, /*tp_methods*/

#line 45 "vector.from_py"
  0, /*tp_members*/

#line 45 "vector.from_py"
  __pyx_getsets_8iscecore_pyPoly1d, /*tp_getset*/

#line 45 "vector.from_py"
  0, /*tp_base*/

#line 45 "vector.from_py"
  0, /*tp_dict*/

#line 45 "vector.from_py"
  0, /*tp_descr_get*/

#line 45 "vector.from_py"
  0, /*tp_descr_set*/

#line 45 "vector.from_py"
  0, /*tp_dictoffset*/

#line 45 "vector.from_py"
  0, /*tp_init*/

#line 45 "vector.from_py"
  0, /*tp_alloc*/

#line 45 "vector.from_py"
  __pyx_tp_new_8iscecore_pyPoly1d, /*tp_new*/

#line 45 "vector.from_py"
  0, /*tp_free*/

#line 45 "vector.from_py"
  0, /*tp_is_gc*/

#line 45 "vector.from_py"
  0, /*tp_bases*/

#line 45 "vector.from_py"
  0, /*tp_mro*/

#line 45 "vector.from_py"
  0, /*tp_cache*/

#line 45 "vector.from_py"
  0, /*tp_subclasses*/

#line 45 "vector.from_py"
  0, /*tp_weaklist*/

#line 45 "vector.from_py"
  0, /*tp_del*/

#line 45 "vector.from_py"
  0, /*tp_version_tag*/

#line 45 "vector.from_py"
  #if PY_VERSION_HEX >= 0x030400a1

#line 45 "vector.from_py"
  0, /*tp_finalize*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_tp_new_8iscecore_pyPoly2d(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 45 "vector.from_py"
  PyObject *o;

#line 45 "vector.from_py"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 45 "vector.from_py"
    o = (*t->tp_alloc)(t, 0);

#line 45 "vector.from_py"
  } else {

#line 45 "vector.from_py"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  if (unlikely(!o)) return 0;

#line 45 "vector.from_py"
  if (unlikely(__pyx_pw_8iscecore_8pyPoly2d_1__cinit__(o, a, k) < 0)) goto bad;

#line 45 "vector.from_py"
  return o;

#line 45 "vector.from_py"
  bad:

#line 45 "vector.from_py"
  Py_DECREF(o); o = 0;

#line 45 "vector.from_py"
  return NULL;

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static void __pyx_tp_dealloc_8iscecore_pyPoly2d(PyObject *o) {

#line 45 "vector.from_py"
  #if CYTHON_USE_TP_FINALIZE

#line 45 "vector.from_py"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {

#line 45 "vector.from_py"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  {

#line 45 "vector.from_py"
    PyObject *etype, *eval, *etb;

#line 45 "vector.from_py"
    PyErr_Fetch(&etype, &eval, &etb);

#line 45 "vector.from_py"
    ++Py_REFCNT(o);

#line 45 "vector.from_py"
    __pyx_pw_8iscecore_8pyPoly2d_3__dealloc__(o);

#line 45 "vector.from_py"
    --Py_REFCNT(o);

#line 45 "vector.from_py"
    PyErr_Restore(etype, eval, etb);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  (*Py_TYPE(o)->tp_free)(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_8pyPoly2d_azimuthOrder(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_8pyPoly2d_12azimuthOrder_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_8pyPoly2d_azimuthOrder(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_8pyPoly2d_12azimuthOrder_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_8pyPoly2d_rangeOrder(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_8pyPoly2d_10rangeOrder_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_8pyPoly2d_rangeOrder(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_8pyPoly2d_10rangeOrder_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_8pyPoly2d_azimuthMean(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_8pyPoly2d_11azimuthMean_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_8pyPoly2d_azimuthMean(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_8pyPoly2d_11azimuthMean_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_8pyPoly2d_rangeMean(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_8pyPoly2d_9rangeMean_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_8pyPoly2d_rangeMean(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_8pyPoly2d_9rangeMean_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_8pyPoly2d_azimuthNorm(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_8pyPoly2d_11azimuthNorm_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_8pyPoly2d_azimuthNorm(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_8pyPoly2d_11azimuthNorm_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_8pyPoly2d_rangeNorm(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_8pyPoly2d_9rangeNorm_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_8pyPoly2d_rangeNorm(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_8pyPoly2d_9rangeNorm_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyObject *__pyx_getprop_8iscecore_8pyPoly2d_coeffs(PyObject *o, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  return __pyx_pw_8iscecore_8pyPoly2d_6coeffs_1__get__(o);

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static int __pyx_setprop_8iscecore_8pyPoly2d_coeffs(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {

#line 45 "vector.from_py"
  if (v) {

#line 45 "vector.from_py"
    return __pyx_pw_8iscecore_8pyPoly2d_6coeffs_3__set__(o, v);

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  else {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_NotImplementedError, "__del__");

#line 45 "vector.from_py"
    return -1;

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
}

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyMethodDef __pyx_methods_8iscecore_pyPoly2d[] = {

#line 45 "vector.from_py"
  {"bind", (PyCFunction)__pyx_pw_8iscecore_8pyPoly2d_5bind, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"dPrint", (PyCFunction)__pyx_pw_8iscecore_8pyPoly2d_7dPrint, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"setCoeff", (PyCFunction)__pyx_pw_8iscecore_8pyPoly2d_9setCoeff, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"getCoeff", (PyCFunction)__pyx_pw_8iscecore_8pyPoly2d_11getCoeff, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"eval", (PyCFunction)__pyx_pw_8iscecore_8pyPoly2d_13eval, METH_VARARGS|METH_KEYWORDS, 0},

#line 45 "vector.from_py"
  {"printPoly", (PyCFunction)__pyx_pw_8iscecore_8pyPoly2d_15printPoly, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8iscecore_8pyPoly2d_17__reduce_cython__, METH_NOARGS, 0},

#line 45 "vector.from_py"
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8iscecore_8pyPoly2d_19__setstate_cython__, METH_O, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static struct PyGetSetDef __pyx_getsets_8iscecore_pyPoly2d[] = {

#line 45 "vector.from_py"
  {(char *)"azimuthOrder", __pyx_getprop_8iscecore_8pyPoly2d_azimuthOrder, __pyx_setprop_8iscecore_8pyPoly2d_azimuthOrder, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"rangeOrder", __pyx_getprop_8iscecore_8pyPoly2d_rangeOrder, __pyx_setprop_8iscecore_8pyPoly2d_rangeOrder, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"azimuthMean", __pyx_getprop_8iscecore_8pyPoly2d_azimuthMean, __pyx_setprop_8iscecore_8pyPoly2d_azimuthMean, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"rangeMean", __pyx_getprop_8iscecore_8pyPoly2d_rangeMean, __pyx_setprop_8iscecore_8pyPoly2d_rangeMean, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"azimuthNorm", __pyx_getprop_8iscecore_8pyPoly2d_azimuthNorm, __pyx_setprop_8iscecore_8pyPoly2d_azimuthNorm, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"rangeNorm", __pyx_getprop_8iscecore_8pyPoly2d_rangeNorm, __pyx_setprop_8iscecore_8pyPoly2d_rangeNorm, (char *)0, 0},

#line 45 "vector.from_py"
  {(char *)"coeffs", __pyx_getprop_8iscecore_8pyPoly2d_coeffs, __pyx_setprop_8iscecore_8pyPoly2d_coeffs, (char *)0, 0},

#line 45 "vector.from_py"
  {0, 0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyTypeObject __pyx_type_8iscecore_pyPoly2d = {

#line 45 "vector.from_py"
  PyVarObject_HEAD_INIT(0, 0)

#line 45 "vector.from_py"
  "iscecore.pyPoly2d", /*tp_name*/

#line 45 "vector.from_py"
  sizeof(struct __pyx_obj_8iscecore_pyPoly2d), /*tp_basicsize*/

#line 45 "vector.from_py"
  0, /*tp_itemsize*/

#line 45 "vector.from_py"
  __pyx_tp_dealloc_8iscecore_pyPoly2d, /*tp_dealloc*/

#line 45 "vector.from_py"
  0, /*tp_print*/

#line 45 "vector.from_py"
  0, /*tp_getattr*/

#line 45 "vector.from_py"
  0, /*tp_setattr*/

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION < 3

#line 45 "vector.from_py"
  0, /*tp_compare*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  #if PY_MAJOR_VERSION >= 3

#line 45 "vector.from_py"
  0, /*tp_as_async*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
  0, /*tp_repr*/

#line 45 "vector.from_py"
  0, /*tp_as_number*/

#line 45 "vector.from_py"
  0, /*tp_as_sequence*/

#line 45 "vector.from_py"
  0, /*tp_as_mapping*/

#line 45 "vector.from_py"
  0, /*tp_hash*/

#line 45 "vector.from_py"
  0, /*tp_call*/

#line 45 "vector.from_py"
  0, /*tp_str*/

#line 45 "vector.from_py"
  0, /*tp_getattro*/

#line 45 "vector.from_py"
  0, /*tp_setattro*/

#line 45 "vector.from_py"
  0, /*tp_as_buffer*/

#line 45 "vector.from_py"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 45 "vector.from_py"
  0, /*tp_doc*/

#line 45 "vector.from_py"
  0, /*tp_traverse*/

#line 45 "vector.from_py"
  0, /*tp_clear*/

#line 45 "vector.from_py"
  0, /*tp_richcompare*/

#line 45 "vector.from_py"
  0, /*tp_weaklistoffset*/

#line 45 "vector.from_py"
  0, /*tp_iter*/

#line 45 "vector.from_py"
  0, /*tp_iternext*/

#line 45 "vector.from_py"
  __pyx_methods_8iscecore_pyPoly2d, /*tp_methods*/

#line 45 "vector.from_py"
  0, /*tp_members*/

#line 45 "vector.from_py"
  __pyx_getsets_8iscecore_pyPoly2d, /*tp_getset*/

#line 45 "vector.from_py"
  0, /*tp_base*/

#line 45 "vector.from_py"
  0, /*tp_dict*/

#line 45 "vector.from_py"
  0, /*tp_descr_get*/

#line 45 "vector.from_py"
  0, /*tp_descr_set*/

#line 45 "vector.from_py"
  0, /*tp_dictoffset*/

#line 45 "vector.from_py"
  0, /*tp_init*/

#line 45 "vector.from_py"
  0, /*tp_alloc*/

#line 45 "vector.from_py"
  __pyx_tp_new_8iscecore_pyPoly2d, /*tp_new*/

#line 45 "vector.from_py"
  0, /*tp_free*/

#line 45 "vector.from_py"
  0, /*tp_is_gc*/

#line 45 "vector.from_py"
  0, /*tp_bases*/

#line 45 "vector.from_py"
  0, /*tp_mro*/

#line 45 "vector.from_py"
  0, /*tp_cache*/

#line 45 "vector.from_py"
  0, /*tp_subclasses*/

#line 45 "vector.from_py"
  0, /*tp_weaklist*/

#line 45 "vector.from_py"
  0, /*tp_del*/

#line 45 "vector.from_py"
  0, /*tp_version_tag*/

#line 45 "vector.from_py"
  #if PY_VERSION_HEX >= 0x030400a1

#line 45 "vector.from_py"
  0, /*tp_finalize*/

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static PyMethodDef __pyx_methods[] = {

#line 45 "vector.from_py"
  {0, 0, 0, 0}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"


#line 45 "vector.from_py"
#if PY_MAJOR_VERSION >= 3

#line 45 "vector.from_py"
#if CYTHON_PEP489_MULTI_PHASE_INIT

#line 45 "vector.from_py"
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/

#line 45 "vector.from_py"
static int __pyx_pymod_exec_iscecore(PyObject* module); /*proto*/

#line 45 "vector.from_py"
static PyModuleDef_Slot __pyx_moduledef_slots[] = {

#line 45 "vector.from_py"
  {Py_mod_create, (void*)__pyx_pymod_create},

#line 45 "vector.from_py"
  {Py_mod_exec, (void*)__pyx_pymod_exec_iscecore},

#line 45 "vector.from_py"
  {0, NULL}

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"
#endif

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static struct PyModuleDef __pyx_moduledef = {

#line 45 "vector.from_py"
    PyModuleDef_HEAD_INIT,

#line 45 "vector.from_py"
    "iscecore",

#line 45 "vector.from_py"
    0, /* m_doc */

#line 45 "vector.from_py"
  #if CYTHON_PEP489_MULTI_PHASE_INIT

#line 45 "vector.from_py"
    0, /* m_size */

#line 45 "vector.from_py"
  #else

#line 45 "vector.from_py"
    -1, /* m_size */

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
    __pyx_methods /* m_methods */,

#line 45 "vector.from_py"
  #if CYTHON_PEP489_MULTI_PHASE_INIT

#line 45 "vector.from_py"
    __pyx_moduledef_slots, /* m_slots */

#line 45 "vector.from_py"
  #else

#line 45 "vector.from_py"
    NULL, /* m_reload */

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
    NULL, /* m_traverse */

#line 45 "vector.from_py"
    NULL, /* m_clear */

#line 45 "vector.from_py"
    NULL /* m_free */

#line 45 "vector.from_py"
};

#line 45 "vector.from_py"
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_Cannot_set_satllh, __pyx_k_Cannot_set_satllh, sizeof(__pyx_k_Cannot_set_satllh), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_set_satvel, __pyx_k_Cannot_set_satvel, sizeof(__pyx_k_Cannot_set_satvel), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_set_satxyz, __pyx_k_Cannot_set_satxyz, sizeof(__pyx_k_Cannot_set_satxyz), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_Invalid_input_size, __pyx_k_Error_Invalid_input_size, sizeof(__pyx_k_Error_Invalid_input_size), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_Invalid_input_size_expecte, __pyx_k_Error_Invalid_input_size_expecte, sizeof(__pyx_k_Error_Invalid_input_size_expecte), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_Invalid_input_size_expecte_2, __pyx_k_Error_Invalid_input_size_expecte_2, sizeof(__pyx_k_Error_Invalid_input_size_expecte_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_Object_passed_in_is_incomp, __pyx_k_Error_Object_passed_in_is_incomp, sizeof(__pyx_k_Error_Object_passed_in_is_incomp), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_Object_passed_in_to_copy_i, __pyx_k_Error_Object_passed_in_to_copy_i, sizeof(__pyx_k_Error_Object_passed_in_to_copy_i), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_Object_passed_in_to_copy_i_2, __pyx_k_Error_Object_passed_in_to_copy_i_2, sizeof(__pyx_k_Error_Object_passed_in_to_copy_i_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_Object_passed_in_to_copy_i_3, __pyx_k_Error_Object_passed_in_to_copy_i_3, sizeof(__pyx_k_Error_Object_passed_in_to_copy_i_3), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_Object_passed_in_to_copy_i_4, __pyx_k_Error_Object_passed_in_to_copy_i_4, sizeof(__pyx_k_Error_Object_passed_in_to_copy_i_4), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_Python_cannot_pass_primiti, __pyx_k_Error_Python_cannot_pass_primiti, sizeof(__pyx_k_Error_Python_cannot_pass_primiti), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_Python_does_not_allow_for, __pyx_k_Error_Python_does_not_allow_for, sizeof(__pyx_k_Error_Python_does_not_allow_for), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_Unknown_orbit_conversion_m, __pyx_k_Error_Unknown_orbit_conversion_m, sizeof(__pyx_k_Error_Unknown_orbit_conversion_m), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_Unknown_orbit_interpolatio, __pyx_k_Error_Unknown_orbit_interpolatio, sizeof(__pyx_k_Error_Unknown_orbit_interpolatio), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_u_J, __pyx_k_J, sizeof(__pyx_k_J), 0, 1, 0, 0},
  {&__pyx_kp_u_Mat, __pyx_k_Mat, sizeof(__pyx_k_Mat), 0, 1, 0, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_kp_u_Please_pass_the_pair_of_referen, __pyx_k_Please_pass_the_pair_of_referen, sizeof(__pyx_k_Please_pass_the_pair_of_referen), 0, 1, 0, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_u_To_call_this_function_please_pas, __pyx_k_To_call_this_function_please_pas, sizeof(__pyx_k_To_call_this_function_please_pas), 0, 1, 0, 0},
  {&__pyx_kp_u_To_call_this_function_please_pas_2, __pyx_k_To_call_this_function_please_pas_2, sizeof(__pyx_k_To_call_this_function_please_pas_2), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_UTCtime, __pyx_k_UTCtime, sizeof(__pyx_k_UTCtime), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_b__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 0, 0},
  {&__pyx_kp_u__47, __pyx_k__47, sizeof(__pyx_k__47), 0, 1, 0, 0},
  {&__pyx_kp_u__59, __pyx_k__59, sizeof(__pyx_k__59), 0, 1, 0, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_kp_u_and_the_0th_and_1st_element_of, __pyx_k_and_the_0th_and_1st_element_of, sizeof(__pyx_k_and_the_0th_and_1st_element_of), 0, 1, 0, 0},
  {&__pyx_kp_u_angle_the_second_element_will_be, __pyx_k_angle_the_second_element_will_be, sizeof(__pyx_k_angle_the_second_element_will_be), 0, 1, 0, 0},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_kp_u_argument_no_fifth_argument_The_f, __pyx_k_argument_no_fifth_argument_The_f, sizeof(__pyx_k_argument_no_fifth_argument_The_f), 0, 1, 0, 0},
  {&__pyx_kp_u_as_the_first_and_only_element_in, __pyx_k_as_the_first_and_only_element_in, sizeof(__pyx_k_as_the_first_and_only_element_in), 0, 1, 0, 0},
  {&__pyx_n_s_azimuthMean, __pyx_k_azimuthMean, sizeof(__pyx_k_azimuthMean), 0, 0, 1, 1},
  {&__pyx_n_s_azimuthNorm, __pyx_k_azimuthNorm, sizeof(__pyx_k_azimuthNorm), 0, 0, 1, 1},
  {&__pyx_n_s_azimuthOrder, __pyx_k_azimuthOrder, sizeof(__pyx_k_azimuthOrder), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_basis, __pyx_k_basis, sizeof(__pyx_k_basis), 0, 0, 1, 1},
  {&__pyx_n_s_bind, __pyx_k_bind, sizeof(__pyx_k_bind), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_centroid, __pyx_k_centroid, sizeof(__pyx_k_centroid), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_coeffs, __pyx_k_coeffs, sizeof(__pyx_k_coeffs), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
  {&__pyx_n_s_e2, __pyx_k_e2, sizeof(__pyx_k_e2), 0, 0, 1, 1},
  {&__pyx_n_s_ellipsoid, __pyx_k_ellipsoid, sizeof(__pyx_k_ellipsoid), 0, 0, 1, 1},
  {&__pyx_n_s_elp, __pyx_k_elp, sizeof(__pyx_k_elp), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_epoch, __pyx_k_epoch, sizeof(__pyx_k_epoch), 0, 0, 1, 1},
  {&__pyx_n_s_eulerangles, __pyx_k_eulerangles, sizeof(__pyx_k_eulerangles), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_frame, __pyx_k_frame, sizeof(__pyx_k_frame), 0, 0, 1, 1},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {&__pyx_n_s_hdg, __pyx_k_hdg, sizeof(__pyx_k_hdg), 0, 0, 1, 1},
  {&__pyx_kp_u_hdg_2, __pyx_k_hdg_2, sizeof(__pyx_k_hdg_2), 0, 1, 0, 0},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_u_inertial, __pyx_k_inertial, sizeof(__pyx_k_inertial), 0, 1, 0, 1},
  {&__pyx_n_s_iscecore, __pyx_k_iscecore, sizeof(__pyx_k_iscecore), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_kp_u_jddt, __pyx_k_jddt, sizeof(__pyx_k_jddt), 0, 1, 0, 0},
  {&__pyx_n_s_jddt_2, __pyx_k_jddt_2, sizeof(__pyx_k_jddt_2), 0, 0, 1, 1},
  {&__pyx_kp_u_jdot, __pyx_k_jdot, sizeof(__pyx_k_jdot), 0, 1, 0, 0},
  {&__pyx_n_s_jdot_2, __pyx_k_jdot_2, sizeof(__pyx_k_jdot_2), 0, 0, 1, 1},
  {&__pyx_n_s_lat, __pyx_k_lat, sizeof(__pyx_k_lat), 0, 0, 1, 1},
  {&__pyx_kp_u_lat_2, __pyx_k_lat_2, sizeof(__pyx_k_lat_2), 0, 1, 0, 0},
  {&__pyx_n_s_lon, __pyx_k_lon, sizeof(__pyx_k_lon), 0, 0, 1, 1},
  {&__pyx_kp_u_lon_2, __pyx_k_lon_2, sizeof(__pyx_k_lon_2), 0, 1, 0, 0},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mat, __pyx_k_mat, sizeof(__pyx_k_mat), 0, 0, 1, 1},
  {&__pyx_kp_u_matinv, __pyx_k_matinv, sizeof(__pyx_k_matinv), 0, 1, 0, 0},
  {&__pyx_n_s_matinv_2, __pyx_k_matinv_2, sizeof(__pyx_k_matinv_2), 0, 0, 1, 1},
  {&__pyx_n_s_max_iter, __pyx_k_max_iter, sizeof(__pyx_k_max_iter), 0, 0, 1, 1},
  {&__pyx_n_s_mean, __pyx_k_mean, sizeof(__pyx_k_mean), 0, 0, 1, 1},
  {&__pyx_n_s_nVectors, __pyx_k_nVectors, sizeof(__pyx_k_nVectors), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_new_elp, __pyx_k_new_elp, sizeof(__pyx_k_new_elp), 0, 0, 1, 1},
  {&__pyx_n_s_new_orb, __pyx_k_new_orb, sizeof(__pyx_k_new_orb), 0, 0, 1, 1},
  {&__pyx_n_s_new_peg, __pyx_k_new_peg, sizeof(__pyx_k_new_peg), 0, 0, 1, 1},
  {&__pyx_n_s_new_pgt, __pyx_k_new_pgt, sizeof(__pyx_k_new_pgt), 0, 0, 1, 1},
  {&__pyx_n_s_new_poly, __pyx_k_new_poly, sizeof(__pyx_k_new_poly), 0, 0, 1, 1},
  {&__pyx_n_s_new_pos, __pyx_k_new_pos, sizeof(__pyx_k_new_pos), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_norm, __pyx_k_norm, sizeof(__pyx_k_norm), 0, 0, 1, 1},
  {&__pyx_n_u_normal, __pyx_k_normal, sizeof(__pyx_k_normal), 0, 1, 0, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_orb, __pyx_k_orb, sizeof(__pyx_k_orb), 0, 0, 1, 1},
  {&__pyx_n_s_orbit, __pyx_k_orbit, sizeof(__pyx_k_orbit), 0, 0, 1, 1},
  {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
  {&__pyx_n_s_outDerivs, __pyx_k_outDerivs, sizeof(__pyx_k_outDerivs), 0, 0, 1, 1},
  {&__pyx_kp_u_ov, __pyx_k_ov, sizeof(__pyx_k_ov), 0, 1, 0, 0},
  {&__pyx_n_s_ov_2, __pyx_k_ov_2, sizeof(__pyx_k_ov_2), 0, 0, 1, 1},
  {&__pyx_n_s_peg, __pyx_k_peg, sizeof(__pyx_k_peg), 0, 0, 1, 1},
  {&__pyx_n_s_pgt, __pyx_k_pgt, sizeof(__pyx_k_pgt), 0, 0, 1, 1},
  {&__pyx_n_s_pitch, __pyx_k_pitch, sizeof(__pyx_k_pitch), 0, 0, 1, 1},
  {&__pyx_n_s_poly, __pyx_k_poly, sizeof(__pyx_k_poly), 0, 0, 1, 1},
  {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
  {&__pyx_n_s_position, __pyx_k_position, sizeof(__pyx_k_position), 0, 0, 1, 1},
  {&__pyx_n_s_precession, __pyx_k_precession, sizeof(__pyx_k_precession), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_printOrbit, __pyx_k_printOrbit, sizeof(__pyx_k_printOrbit), 0, 0, 1, 1},
  {&__pyx_n_s_printPoly, __pyx_k_printPoly, sizeof(__pyx_k_printPoly), 0, 0, 1, 1},
  {&__pyx_kp_s_pyEllipsoid_pyx, __pyx_k_pyEllipsoid_pyx, sizeof(__pyx_k_pyEllipsoid_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_pyEllps, __pyx_k_pyEllps, sizeof(__pyx_k_pyEllps), 0, 0, 1, 1},
  {&__pyx_kp_s_pyOrbit_pyx, __pyx_k_pyOrbit_pyx, sizeof(__pyx_k_pyOrbit_pyx), 0, 0, 1, 0},
  {&__pyx_kp_s_pyPeg_pyx, __pyx_k_pyPeg_pyx, sizeof(__pyx_k_pyPeg_pyx), 0, 0, 1, 0},
  {&__pyx_kp_s_pyPegtrans_pyx, __pyx_k_pyPegtrans_pyx, sizeof(__pyx_k_pyPegtrans_pyx), 0, 0, 1, 0},
  {&__pyx_kp_s_pyPoly1d_pyx, __pyx_k_pyPoly1d_pyx, sizeof(__pyx_k_pyPoly1d_pyx), 0, 0, 1, 0},
  {&__pyx_kp_s_pyPoly2d_pyx, __pyx_k_pyPoly2d_pyx, sizeof(__pyx_k_pyPoly2d_pyx), 0, 0, 1, 0},
  {&__pyx_kp_s_pyPosition_pyx, __pyx_k_pyPosition_pyx, sizeof(__pyx_k_pyPosition_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_q, __pyx_k_q, sizeof(__pyx_k_q), 0, 0, 1, 1},
  {&__pyx_n_s_quaternion, __pyx_k_quaternion, sizeof(__pyx_k_quaternion), 0, 0, 1, 1},
  {&__pyx_kp_u_radcur, __pyx_k_radcur, sizeof(__pyx_k_radcur), 0, 1, 0, 0},
  {&__pyx_n_s_radcur_2, __pyx_k_radcur_2, sizeof(__pyx_k_radcur_2), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rangeMean, __pyx_k_rangeMean, sizeof(__pyx_k_rangeMean), 0, 0, 1, 1},
  {&__pyx_n_s_rangeNorm, __pyx_k_rangeNorm, sizeof(__pyx_k_rangeNorm), 0, 0, 1, 1},
  {&__pyx_n_s_rangeOrder, __pyx_k_rangeOrder, sizeof(__pyx_k_rangeOrder), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_roll, __pyx_k_roll, sizeof(__pyx_k_roll), 0, 0, 1, 1},
  {&__pyx_kp_u_second_argument_slot_The_functio, __pyx_k_second_argument_slot_The_functio, sizeof(__pyx_k_second_argument_slot_The_functio), 0, 1, 0, 0},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_side, __pyx_k_side, sizeof(__pyx_k_side), 0, 0, 1, 1},
  {&__pyx_n_s_slantRange, __pyx_k_slantRange, sizeof(__pyx_k_slantRange), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_kp_u_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 1, 0, 0},
  {&__pyx_n_s_velocity, __pyx_k_velocity, sizeof(__pyx_k_velocity), 0, 0, 1, 1},
  {&__pyx_n_s_wvl, __pyx_k_wvl, sizeof(__pyx_k_wvl), 0, 0, 1, 1},
  {&__pyx_n_s_yaw, __pyx_k_yaw, sizeof(__pyx_k_yaw), 0, 0, 1, 1},
  {&__pyx_n_s_yaw_orientation, __pyx_k_yaw_orientation, sizeof(__pyx_k_yaw_orientation), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 21, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 29, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(2, 2, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(3, 58, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 49, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(12, 823, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(12, 1013, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pyAttitude.pyx":19
 *     def __cinit__(self, double yaw, double pitch, double roll, yaw_orientation='normal'):
 *         self.c_eulerangles = new EulerAngles(yaw, pitch, roll,
 *             yaw_orientation.encode('utf-8'))             # <<<<<<<<<<<<<<
 *         self.__owner = True
 * 
 */

#line 19 "pyAttitude.pyx"
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_utf_8); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 19, __pyx_L1_error)

#line 19 "pyAttitude.pyx"
  __Pyx_GOTREF(__pyx_tuple_);

#line 19 "pyAttitude.pyx"
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__2);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__3);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__5);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__6);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "pyDoppler.pyx":58
 *     @satxyz.setter
 *     def satxyz(self, value):
 *         raise ValueError('Cannot set satxyz')             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 58 "pyDoppler.pyx"
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_Cannot_set_satxyz); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(3, 58, __pyx_L1_error)

#line 58 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_tuple__7);

#line 58 "pyDoppler.pyx"
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "pyDoppler.pyx":65
 *     @satvel.setter
 *     def satvel(self, value):
 *         raise ValueError('Cannot set satvel')             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

#line 65 "pyDoppler.pyx"
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_Cannot_set_satvel); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(3, 65, __pyx_L1_error)

#line 65 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_tuple__8);

#line 65 "pyDoppler.pyx"
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "pyDoppler.pyx":72
 *     @satllh.setter
 *     def satllh(self, value):
 *         raise ValueError('Cannot set satllh')             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 72 "pyDoppler.pyx"
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_Cannot_set_satllh); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(3, 72, __pyx_L1_error)

#line 72 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_tuple__9);

#line 72 "pyDoppler.pyx"
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__10);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__11);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "pyDoppler.pyx":88
 *         self.side = side
 *         self.precession = precession
 *         self.frame = frame.encode('utf-8')             # <<<<<<<<<<<<<<
 *         self.__owner = True
 * 
 */

#line 88 "pyDoppler.pyx"
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_utf_8); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(3, 88, __pyx_L1_error)

#line 88 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_tuple__12);

#line 88 "pyDoppler.pyx"
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__13);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__14);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__15);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__16);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "pyEllipsoid.pyx":49
 *         # parameters!
 *         except:
 *             print("Error: Object passed in to copy is incompatible with object of type " +             # <<<<<<<<<<<<<<
 *                   "pyEllipsoid.")
 * 
 */

#line 49 "pyEllipsoid.pyx"
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_u_Error_Object_passed_in_to_copy_i); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 49, __pyx_L1_error)

#line 49 "pyEllipsoid.pyx"
  __Pyx_GOTREF(__pyx_tuple__17);

#line 49 "pyEllipsoid.pyx"
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "pyEllipsoid.pyx":85
 *         cdef double _e
 *         if (e):
 *             print("Error: Python cannot pass primitives by reference.")             # <<<<<<<<<<<<<<
 *             print("To call this function, please pass the function an empty tuple as the fourth")
 *             print("argument (no fifth argument). The first element of the list will be the azimuth")
 */

#line 85 "pyEllipsoid.pyx"
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_Error_Python_cannot_pass_primiti); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 85, __pyx_L1_error)

#line 85 "pyEllipsoid.pyx"
  __Pyx_GOTREF(__pyx_tuple__18);

#line 85 "pyEllipsoid.pyx"
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "pyEllipsoid.pyx":86
 *         if (e):
 *             print("Error: Python cannot pass primitives by reference.")
 *             print("To call this function, please pass the function an empty tuple as the fourth")             # <<<<<<<<<<<<<<
 *             print("argument (no fifth argument). The first element of the list will be the azimuth")
 *             print("angle, the second element will be the look angle.")
 */

#line 86 "pyEllipsoid.pyx"
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_To_call_this_function_please_pas); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 86, __pyx_L1_error)

#line 86 "pyEllipsoid.pyx"
  __Pyx_GOTREF(__pyx_tuple__19);

#line 86 "pyEllipsoid.pyx"
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "pyEllipsoid.pyx":87
 *             print("Error: Python cannot pass primitives by reference.")
 *             print("To call this function, please pass the function an empty tuple as the fourth")
 *             print("argument (no fifth argument). The first element of the list will be the azimuth")             # <<<<<<<<<<<<<<
 *             print("angle, the second element will be the look angle.")
 *             return
 */

#line 87 "pyEllipsoid.pyx"
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_u_argument_no_fifth_argument_The_f); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 87, __pyx_L1_error)

#line 87 "pyEllipsoid.pyx"
  __Pyx_GOTREF(__pyx_tuple__20);

#line 87 "pyEllipsoid.pyx"
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "pyEllipsoid.pyx":88
 *             print("To call this function, please pass the function an empty tuple as the fourth")
 *             print("argument (no fifth argument). The first element of the list will be the azimuth")
 *             print("angle, the second element will be the look angle.")             # <<<<<<<<<<<<<<
 *             return
 *         else:
 */

#line 88 "pyEllipsoid.pyx"
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_angle_the_second_element_will_be); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 88, __pyx_L1_error)

#line 88 "pyEllipsoid.pyx"
  __Pyx_GOTREF(__pyx_tuple__21);

#line 88 "pyEllipsoid.pyx"
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__22);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__23);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "pyInterpolator.pyx":51
 *         cdef vector[double] _h
 *         if (h):
 *             print("Error: Python does not allow for pass-by-reference, therefore the function " +             # <<<<<<<<<<<<<<
 *                   "call is modified.")
 *             print("       Please pass the pair of reference arguments (sixth and seventh " +
 */

#line 51 "pyInterpolator.pyx"
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_u_Error_Python_does_not_allow_for); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(4, 51, __pyx_L1_error)

#line 51 "pyInterpolator.pyx"
  __Pyx_GOTREF(__pyx_tuple__24);

#line 51 "pyInterpolator.pyx"
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "pyInterpolator.pyx":53
 *             print("Error: Python does not allow for pass-by-reference, therefore the function " +
 *                   "call is modified.")
 *             print("       Please pass the pair of reference arguments (sixth and seventh " +             # <<<<<<<<<<<<<<
 *                   "position) as a tuple,")
 *             print("       and the 0th and 1st element of the tuple will contain the modified " +
 */

#line 53 "pyInterpolator.pyx"
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_u_Please_pass_the_pair_of_referen); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(4, 53, __pyx_L1_error)

#line 53 "pyInterpolator.pyx"
  __Pyx_GOTREF(__pyx_tuple__25);

#line 53 "pyInterpolator.pyx"
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "pyInterpolator.pyx":55
 *             print("       Please pass the pair of reference arguments (sixth and seventh " +
 *                   "position) as a tuple,")
 *             print("       and the 0th and 1st element of the tuple will contain the modified " +             # <<<<<<<<<<<<<<
 *                   "return value.")
 *             return
 */

#line 55 "pyInterpolator.pyx"
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_u_and_the_0th_and_1st_element_of); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(4, 55, __pyx_L1_error)

#line 55 "pyInterpolator.pyx"
  __Pyx_GOTREF(__pyx_tuple__26);

#line 55 "pyInterpolator.pyx"
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__27);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__28);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "pyPeg.pyx":56
 *         # as parameters!
 *         except:
 *             print("Error: Object passed in to copy is incompatible with object of type pyPeg.")             # <<<<<<<<<<<<<<
 */

#line 56 "pyPeg.pyx"
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_Error_Object_passed_in_to_copy_i_2); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(5, 56, __pyx_L1_error)

#line 56 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_tuple__29);

#line 56 "pyPeg.pyx"
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__30);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__31);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "pyPegtrans.pyx":39
 *     def mat(self, a):
 *         if ((len(a) != 3) or (len(a[0]) != 3)):
 *             print("Error: Invalid input size.")             # <<<<<<<<<<<<<<
 *             return
 *         for i in range(3):
 */

#line 39 "pyPegtrans.pyx"
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_u_Error_Invalid_input_size); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(6, 39, __pyx_L1_error)

#line 39 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_tuple__32);

#line 39 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "pyPegtrans.pyx":54
 *     def matinv(self, a):
 *         if ((len(a) != 3) or (len(a[0]) != 3)):
 *             print("Error: Invalid input size.")             # <<<<<<<<<<<<<<
 *             return
 *         for i in range(3):
 */

#line 54 "pyPegtrans.pyx"
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_u_Error_Invalid_input_size); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(6, 54, __pyx_L1_error)

#line 54 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_tuple__33);

#line 54 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "pyPegtrans.pyx":68
 *     def ov(self, a):
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")             # <<<<<<<<<<<<<<
 *             return
 *         for i in range(3):
 */

#line 68 "pyPegtrans.pyx"
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_u_Error_Invalid_input_size); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(6, 68, __pyx_L1_error)

#line 68 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_tuple__34);

#line 68 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "pyPegtrans.pyx":88
 *             self.radcur = pt.radcur
 *         except:
 *             print("Error: Object passed in is incompatible with object of type pyPegtrans.")             # <<<<<<<<<<<<<<
 * 
 *     def radarToXYZ(self, pyEllipsoid a, pyPeg b):
 */

#line 88 "pyPegtrans.pyx"
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_u_Error_Object_passed_in_is_incomp); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(6, 88, __pyx_L1_error)

#line 88 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_tuple__35);

#line 88 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "pyPegtrans.pyx":104
 *             _c = orbitConvMethod.XYZ_2_SCH
 *         else:
 *             print("Error: Unknown orbit conversion method.")             # <<<<<<<<<<<<<<
 *             return
 *         self.c_pegtrans.convertSCHtoXYZ(_a,_b,_c)
 */

#line 104 "pyPegtrans.pyx"
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_u_Error_Unknown_orbit_conversion_m); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(6, 104, __pyx_L1_error)

#line 104 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_tuple__36);

#line 104 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "pyPegtrans.pyx":126
 *             _e = orbitConvMethod.XYZ_2_SCH
 *         else:
 *             print("Error: Unknown orbit conversion method.")             # <<<<<<<<<<<<<<
 *             return
 *         self.c_pegtrans.convertSCHdotToXYZdot(_a,_b,_c,_d,_e)
 */

#line 126 "pyPegtrans.pyx"
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_u_Error_Unknown_orbit_conversion_m); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(6, 126, __pyx_L1_error)

#line 126 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_tuple__37);

#line 126 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__38);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__39);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "pyPosition.pyx":38
 *     def j(self, a):
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")             # <<<<<<<<<<<<<<
 *             return
 *         for i in range(3):
 */

#line 38 "pyPosition.pyx"
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_u_Error_Invalid_input_size); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(7, 38, __pyx_L1_error)

#line 38 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_tuple__40);

#line 38 "pyPosition.pyx"
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "pyPosition.pyx":51
 *     def jdot(self, a):
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")             # <<<<<<<<<<<<<<
 *             return
 *         for i in range(3):
 */

#line 51 "pyPosition.pyx"
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_u_Error_Invalid_input_size); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(7, 51, __pyx_L1_error)

#line 51 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_tuple__41);

#line 51 "pyPosition.pyx"
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "pyPosition.pyx":64
 *     def jddt(self, a):
 *         if (len(a) != 3):
 *             print("Error: Invalid input size.")             # <<<<<<<<<<<<<<
 *             return
 *         for i in range(3):
 */

#line 64 "pyPosition.pyx"
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_u_Error_Invalid_input_size); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(7, 64, __pyx_L1_error)

#line 64 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_tuple__42);

#line 64 "pyPosition.pyx"
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__43);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__44);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__45);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__46);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "pyOrbit.pyx":93
 *             self.velocity = orb.velocity
 *         except:
 *             print("Error: Object passed in to copy is incompatible with object of type pyOrbit.")             # <<<<<<<<<<<<<<
 *     def dPrint(self):
 *         self.printOrbit()
 */

#line 93 "pyOrbit.pyx"
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_u_Error_Object_passed_in_to_copy_i_3); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(9, 93, __pyx_L1_error)

#line 93 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_tuple__48);

#line 93 "pyOrbit.pyx"
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "pyOrbit.pyx":112
 *         cdef double _b
 *         if (type(b) != type([])):
 *             print("Error: Python cannot pass primitives by reference.")             # <<<<<<<<<<<<<<
 *             print("To call this function, please pass the function an empty 1-tuple in the")
 *             print("second argument slot. The function will store the resulting time value")
 */

#line 112 "pyOrbit.pyx"
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_u_Error_Python_cannot_pass_primiti); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(9, 112, __pyx_L1_error)

#line 112 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_tuple__49);

#line 112 "pyOrbit.pyx"
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "pyOrbit.pyx":113
 *         if (type(b) != type([])):
 *             print("Error: Python cannot pass primitives by reference.")
 *             print("To call this function, please pass the function an empty 1-tuple in the")             # <<<<<<<<<<<<<<
 *             print("second argument slot. The function will store the resulting time value")
 *             print("as the first (and only) element in the 1-tuple.")
 */

#line 113 "pyOrbit.pyx"
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_u_To_call_this_function_please_pas_2); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(9, 113, __pyx_L1_error)

#line 113 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_tuple__50);

#line 113 "pyOrbit.pyx"
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "pyOrbit.pyx":114
 *             print("Error: Python cannot pass primitives by reference.")
 *             print("To call this function, please pass the function an empty 1-tuple in the")
 *             print("second argument slot. The function will store the resulting time value")             # <<<<<<<<<<<<<<
 *             print("as the first (and only) element in the 1-tuple.")
 *         else:
 */

#line 114 "pyOrbit.pyx"
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_u_second_argument_slot_The_functio); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(9, 114, __pyx_L1_error)

#line 114 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_tuple__51);

#line 114 "pyOrbit.pyx"
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "pyOrbit.pyx":115
 *             print("To call this function, please pass the function an empty 1-tuple in the")
 *             print("second argument slot. The function will store the resulting time value")
 *             print("as the first (and only) element in the 1-tuple.")             # <<<<<<<<<<<<<<
 *         else:
 *             _b = 0.
 */

#line 115 "pyOrbit.pyx"
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_u_as_the_first_and_only_element_in); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(9, 115, __pyx_L1_error)

#line 115 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_tuple__52);

#line 115 "pyOrbit.pyx"
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "pyOrbit.pyx":158
 *             _d = orbitInterpMethod.LEGENDRE_METHOD
 *         else:
 *             print("Error: Unknown orbit interpolation method")             # <<<<<<<<<<<<<<
 *             return
 *         ret = self.c_orbit.interpolate(a,_b,_c,_d)
 */

#line 158 "pyOrbit.pyx"
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_u_Error_Unknown_orbit_interpolatio); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(9, 158, __pyx_L1_error)

#line 158 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_tuple__53);

#line 158 "pyOrbit.pyx"
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__54);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__55);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "pyPoly1d.pyx":69
 *             self.coeffs = poly.coeffs
 *         except:
 *             print("Error: Object passed in to copy is incompatible with object of type pyPoly1d.")             # <<<<<<<<<<<<<<
 *     def dPrint(self):
 *         self.printPoly()
 */

#line 69 "pyPoly1d.pyx"
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_u_Error_Object_passed_in_to_copy_i_4); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(10, 69, __pyx_L1_error)

#line 69 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_tuple__56);

#line 69 "pyPoly1d.pyx"
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__57);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__58);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(2, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__60);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(2, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__61);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */

#line 235 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(12, 235, __pyx_L1_error)

#line 235 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__62);

#line 235 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":239
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */

#line 239 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(12, 239, __pyx_L1_error)

#line 239 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__63);

#line 239 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */

#line 276 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(12, 276, __pyx_L1_error)

#line 276 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__64);

#line 276 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":823
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */

#line 823 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(12, 823, __pyx_L1_error)

#line 823 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__65);

#line 823 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */

#line 827 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(12, 827, __pyx_L1_error)

#line 827 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__66);

#line 827 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":847
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */

#line 847 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(12, 847, __pyx_L1_error)

#line 847 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__67);

#line 847 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1013
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */

#line 1013 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(12, 1013, __pyx_L1_error)

#line 1013 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__68);

#line 1013 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1019
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */

#line 1019 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(12, 1019, __pyx_L1_error)

#line 1019 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__69);

#line 1019 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1025
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */

#line 1025 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(12, 1025, __pyx_L1_error)

#line 1025 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__70);

#line 1025 "../../../../../../../../../opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "pyEllipsoid.pyx":22
 *             del self.c_ellipsoid
 *     @staticmethod
 *     def bind(pyEllipsoid elp):             # <<<<<<<<<<<<<<
 *         new_elp = pyEllipsoid()
 *         del new_elp.c_ellipsoid
 */

#line 22 "pyEllipsoid.pyx"
  __pyx_tuple__71 = PyTuple_Pack(2, __pyx_n_s_elp, __pyx_n_s_new_elp); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(0, 22, __pyx_L1_error)

#line 22 "pyEllipsoid.pyx"
  __Pyx_GOTREF(__pyx_tuple__71);

#line 22 "pyEllipsoid.pyx"
  __Pyx_GIVEREF(__pyx_tuple__71);

#line 22 "pyEllipsoid.pyx"
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyEllipsoid_pyx, __pyx_n_s_bind, 22, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(0, 22, __pyx_L1_error)

  /* "pyPeg.pyx":21
 *             del self.c_peg
 *     @staticmethod
 *     def bind(pyPeg peg):             # <<<<<<<<<<<<<<
 *         new_peg = pyPeg()
 *         del new_peg.c_peg
 */

#line 21 "pyPeg.pyx"
  __pyx_tuple__73 = PyTuple_Pack(2, __pyx_n_s_peg, __pyx_n_s_new_peg); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(5, 21, __pyx_L1_error)

#line 21 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_tuple__73);

#line 21 "pyPeg.pyx"
  __Pyx_GIVEREF(__pyx_tuple__73);

#line 21 "pyPeg.pyx"
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyPeg_pyx, __pyx_n_s_bind, 21, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(5, 21, __pyx_L1_error)

  /* "pyPegtrans.pyx":22
 *             del self.c_pegtrans
 *     @staticmethod
 *     def bind(pyPegtrans pgt):             # <<<<<<<<<<<<<<
 *         new_pgt = pyPegtrans()
 *         del new_pgt.c_pegtrans
 */

#line 22 "pyPegtrans.pyx"
  __pyx_tuple__75 = PyTuple_Pack(2, __pyx_n_s_pgt, __pyx_n_s_new_pgt); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(6, 22, __pyx_L1_error)

#line 22 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_tuple__75);

#line 22 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_tuple__75);

#line 22 "pyPegtrans.pyx"
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyPegtrans_pyx, __pyx_n_s_bind, 22, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(6, 22, __pyx_L1_error)

  /* "pyPosition.pyx":22
 *             del self.c_position
 *     @staticmethod
 *     def bind(pyPosition pos):             # <<<<<<<<<<<<<<
 *         new_pos = pyPosition()
 *         del new_pos.c_position
 */

#line 22 "pyPosition.pyx"
  __pyx_tuple__77 = PyTuple_Pack(2, __pyx_n_s_pos, __pyx_n_s_new_pos); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(7, 22, __pyx_L1_error)

#line 22 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_tuple__77);

#line 22 "pyPosition.pyx"
  __Pyx_GIVEREF(__pyx_tuple__77);

#line 22 "pyPosition.pyx"
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyPosition_pyx, __pyx_n_s_bind, 22, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(7, 22, __pyx_L1_error)

  /* "pyOrbit.pyx":22
 *             del self.c_orbit
 *     @staticmethod
 *     def bind(pyOrbit orb):             # <<<<<<<<<<<<<<
 *         new_orb = pyOrbit()
 *         del new_orb.c_orbit
 */

#line 22 "pyOrbit.pyx"
  __pyx_tuple__79 = PyTuple_Pack(2, __pyx_n_s_orb, __pyx_n_s_new_orb); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(9, 22, __pyx_L1_error)

#line 22 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_tuple__79);

#line 22 "pyOrbit.pyx"
  __Pyx_GIVEREF(__pyx_tuple__79);

#line 22 "pyOrbit.pyx"
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__79, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyOrbit_pyx, __pyx_n_s_bind, 22, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(9, 22, __pyx_L1_error)

  /* "pyPoly1d.pyx":21
 *             del self.c_poly1d
 *     @staticmethod
 *     def bind(pyPoly1d poly):             # <<<<<<<<<<<<<<
 *         new_poly = pyPoly1d()
 *         del new_poly.c_poly1d
 */

#line 21 "pyPoly1d.pyx"
  __pyx_tuple__81 = PyTuple_Pack(2, __pyx_n_s_poly, __pyx_n_s_new_poly); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(10, 21, __pyx_L1_error)

#line 21 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_tuple__81);

#line 21 "pyPoly1d.pyx"
  __Pyx_GIVEREF(__pyx_tuple__81);

#line 21 "pyPoly1d.pyx"
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyPoly1d_pyx, __pyx_n_s_bind, 21, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(10, 21, __pyx_L1_error)

  /* "pyPoly2d.pyx":23
 *             del self.c_poly2d
 *     @staticmethod
 *     def bind(pyPoly2d poly):             # <<<<<<<<<<<<<<
 *         new_poly = pyPoly2d()
 *         del new_poly.c_poly2d
 */

#line 23 "pyPoly2d.pyx"
  __pyx_tuple__83 = PyTuple_Pack(2, __pyx_n_s_poly, __pyx_n_s_new_poly); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(11, 23, __pyx_L1_error)

#line 23 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_tuple__83);

#line 23 "pyPoly2d.pyx"
  __Pyx_GIVEREF(__pyx_tuple__83);

#line 23 "pyPoly2d.pyx"
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyPoly2d_pyx, __pyx_n_s_bind, 23, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(11, 23, __pyx_L1_error)

#line 23 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 23 "pyPoly2d.pyx"
  return 0;

#line 23 "pyPoly2d.pyx"
  __pyx_L1_error:;

#line 23 "pyPoly2d.pyx"
  __Pyx_RefNannyFinishContext();

#line 23 "pyPoly2d.pyx"
  return -1;

#line 23 "pyPoly2d.pyx"
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(13, 1, __pyx_L1_error);
  __pyx_float_0_ = PyFloat_FromDouble(0.); if (unlikely(!__pyx_float_0_)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_float_1_ = PyFloat_FromDouble(1.); if (unlikely(!__pyx_float_1_)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(13, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initiscecore(void); /*proto*/
PyMODINIT_FUNC initiscecore(void)
#else
PyMODINIT_FUNC PyInit_iscecore(void); /*proto*/
PyMODINIT_FUNC PyInit_iscecore(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_iscecore(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #endif
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_iscecore(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(13, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("iscecore", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(13, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(13, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(13, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(13, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(13, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_iscecore) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(13, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "iscecore")) {
      if (unlikely(PyDict_SetItemString(modules, "iscecore", __pyx_m) < 0)) __PYX_ERR(13, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_8iscecore_pyEulerAngles) < 0) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_type_8iscecore_pyEulerAngles.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "pyEulerAngles", (PyObject *)&__pyx_type_8iscecore_pyEulerAngles) < 0) __PYX_ERR(1, 13, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8iscecore_pyEulerAngles) < 0) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_ptype_8iscecore_pyEulerAngles = &__pyx_type_8iscecore_pyEulerAngles;
  if (PyType_Ready(&__pyx_type_8iscecore_pyQuaternion) < 0) __PYX_ERR(1, 69, __pyx_L1_error)
  __pyx_type_8iscecore_pyQuaternion.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "pyQuaternion", (PyObject *)&__pyx_type_8iscecore_pyQuaternion) < 0) __PYX_ERR(1, 69, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8iscecore_pyQuaternion) < 0) __PYX_ERR(1, 69, __pyx_L1_error)
  __pyx_ptype_8iscecore_pyQuaternion = &__pyx_type_8iscecore_pyQuaternion;
  if (PyType_Ready(&__pyx_type_8iscecore_pyDoppler) < 0) __PYX_ERR(3, 17, __pyx_L1_error)
  __pyx_type_8iscecore_pyDoppler.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "pyDoppler", (PyObject *)&__pyx_type_8iscecore_pyDoppler) < 0) __PYX_ERR(3, 17, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8iscecore_pyDoppler) < 0) __PYX_ERR(3, 17, __pyx_L1_error)
  __pyx_ptype_8iscecore_pyDoppler = &__pyx_type_8iscecore_pyDoppler;
  __pyx_type_8iscecore_pyDopplerEuler.tp_base = __pyx_ptype_8iscecore_pyDoppler;
  if (PyType_Ready(&__pyx_type_8iscecore_pyDopplerEuler) < 0) __PYX_ERR(3, 75, __pyx_L1_error)
  __pyx_type_8iscecore_pyDopplerEuler.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "pyDopplerEuler", (PyObject *)&__pyx_type_8iscecore_pyDopplerEuler) < 0) __PYX_ERR(3, 75, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8iscecore_pyDopplerEuler) < 0) __PYX_ERR(3, 75, __pyx_L1_error)
  __pyx_ptype_8iscecore_pyDopplerEuler = &__pyx_type_8iscecore_pyDopplerEuler;
  __pyx_type_8iscecore_pyDopplerQuaternion.tp_base = __pyx_ptype_8iscecore_pyDoppler;
  if (PyType_Ready(&__pyx_type_8iscecore_pyDopplerQuaternion) < 0) __PYX_ERR(3, 141, __pyx_L1_error)
  __pyx_type_8iscecore_pyDopplerQuaternion.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "pyDopplerQuaternion", (PyObject *)&__pyx_type_8iscecore_pyDopplerQuaternion) < 0) __PYX_ERR(3, 141, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8iscecore_pyDopplerQuaternion) < 0) __PYX_ERR(3, 141, __pyx_L1_error)
  __pyx_ptype_8iscecore_pyDopplerQuaternion = &__pyx_type_8iscecore_pyDopplerQuaternion;
  if (PyType_Ready(&__pyx_type_8iscecore_pyEllipsoid) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __pyx_type_8iscecore_pyEllipsoid.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "pyEllipsoid", (PyObject *)&__pyx_type_8iscecore_pyEllipsoid) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8iscecore_pyEllipsoid) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __pyx_ptype_8iscecore_pyEllipsoid = &__pyx_type_8iscecore_pyEllipsoid;
  if (PyType_Ready(&__pyx_type_8iscecore_pyInterpolator) < 0) __PYX_ERR(4, 12, __pyx_L1_error)
  __pyx_type_8iscecore_pyInterpolator.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "pyInterpolator", (PyObject *)&__pyx_type_8iscecore_pyInterpolator) < 0) __PYX_ERR(4, 12, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8iscecore_pyInterpolator) < 0) __PYX_ERR(4, 12, __pyx_L1_error)
  __pyx_ptype_8iscecore_pyInterpolator = &__pyx_type_8iscecore_pyInterpolator;
  if (PyType_Ready(&__pyx_type_8iscecore_pyPeg) < 0) __PYX_ERR(5, 10, __pyx_L1_error)
  __pyx_type_8iscecore_pyPeg.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "pyPeg", (PyObject *)&__pyx_type_8iscecore_pyPeg) < 0) __PYX_ERR(5, 10, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8iscecore_pyPeg) < 0) __PYX_ERR(5, 10, __pyx_L1_error)
  __pyx_ptype_8iscecore_pyPeg = &__pyx_type_8iscecore_pyPeg;
  if (PyType_Ready(&__pyx_type_8iscecore_pyPegtrans) < 0) __PYX_ERR(6, 11, __pyx_L1_error)
  __pyx_type_8iscecore_pyPegtrans.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "pyPegtrans", (PyObject *)&__pyx_type_8iscecore_pyPegtrans) < 0) __PYX_ERR(6, 11, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8iscecore_pyPegtrans) < 0) __PYX_ERR(6, 11, __pyx_L1_error)
  __pyx_ptype_8iscecore_pyPegtrans = &__pyx_type_8iscecore_pyPegtrans;
  if (PyType_Ready(&__pyx_type_8iscecore_pyPosition) < 0) __PYX_ERR(7, 11, __pyx_L1_error)
  __pyx_type_8iscecore_pyPosition.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "pyPosition", (PyObject *)&__pyx_type_8iscecore_pyPosition) < 0) __PYX_ERR(7, 11, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8iscecore_pyPosition) < 0) __PYX_ERR(7, 11, __pyx_L1_error)
  __pyx_ptype_8iscecore_pyPosition = &__pyx_type_8iscecore_pyPosition;
  if (PyType_Ready(&__pyx_type_8iscecore_pyLinAlg) < 0) __PYX_ERR(8, 11, __pyx_L1_error)
  __pyx_type_8iscecore_pyLinAlg.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "pyLinAlg", (PyObject *)&__pyx_type_8iscecore_pyLinAlg) < 0) __PYX_ERR(8, 11, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8iscecore_pyLinAlg) < 0) __PYX_ERR(8, 11, __pyx_L1_error)
  __pyx_ptype_8iscecore_pyLinAlg = &__pyx_type_8iscecore_pyLinAlg;
  if (PyType_Ready(&__pyx_type_8iscecore_pyOrbit) < 0) __PYX_ERR(9, 11, __pyx_L1_error)
  __pyx_type_8iscecore_pyOrbit.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "pyOrbit", (PyObject *)&__pyx_type_8iscecore_pyOrbit) < 0) __PYX_ERR(9, 11, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8iscecore_pyOrbit) < 0) __PYX_ERR(9, 11, __pyx_L1_error)
  __pyx_ptype_8iscecore_pyOrbit = &__pyx_type_8iscecore_pyOrbit;
  if (PyType_Ready(&__pyx_type_8iscecore_pyPoly1d) < 0) __PYX_ERR(10, 10, __pyx_L1_error)
  __pyx_type_8iscecore_pyPoly1d.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "pyPoly1d", (PyObject *)&__pyx_type_8iscecore_pyPoly1d) < 0) __PYX_ERR(10, 10, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8iscecore_pyPoly1d) < 0) __PYX_ERR(10, 10, __pyx_L1_error)
  __pyx_ptype_8iscecore_pyPoly1d = &__pyx_type_8iscecore_pyPoly1d;
  if (PyType_Ready(&__pyx_type_8iscecore_pyPoly2d) < 0) __PYX_ERR(11, 10, __pyx_L1_error)
  __pyx_type_8iscecore_pyPoly2d.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "pyPoly2d", (PyObject *)&__pyx_type_8iscecore_pyPoly2d) < 0) __PYX_ERR(11, 10, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8iscecore_pyPoly2d) < 0) __PYX_ERR(11, 10, __pyx_L1_error)
  __pyx_ptype_8iscecore_pyPoly2d = &__pyx_type_8iscecore_pyPoly2d;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(14, 9, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(12, 163, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(12, 185, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(12, 189, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(12, 198, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(12, 885, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(13, 1, __pyx_L1_error)
  #endif

  /* "pyDoppler.pyx":8
 * 
 * cimport cython
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * from cython.operator cimport dereference as deref
 */

#line 8 "pyDoppler.pyx"
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 8, __pyx_L1_error)

#line 8 "pyDoppler.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 8 "pyDoppler.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(3, 8, __pyx_L1_error)

#line 8 "pyDoppler.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyEllipsoid.pyx":22
 *             del self.c_ellipsoid
 *     @staticmethod
 *     def bind(pyEllipsoid elp):             # <<<<<<<<<<<<<<
 *         new_elp = pyEllipsoid()
 *         del new_elp.c_ellipsoid
 */

#line 22 "pyEllipsoid.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8iscecore_11pyEllipsoid_5bind, NULL, __pyx_n_s_iscecore); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)

#line 22 "pyEllipsoid.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 22 "pyEllipsoid.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8iscecore_pyEllipsoid->tp_dict, __pyx_n_s_bind, __pyx_t_1) < 0) __PYX_ERR(0, 22, __pyx_L1_error)

#line 22 "pyEllipsoid.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 22 "pyEllipsoid.pyx"
  PyType_Modified(__pyx_ptype_8iscecore_pyEllipsoid);

  /* "pyEllipsoid.pyx":21
 *         if self.__owner:
 *             del self.c_ellipsoid
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def bind(pyEllipsoid elp):
 *         new_elp = pyEllipsoid()
 */

#line 21 "pyEllipsoid.pyx"
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8iscecore_pyEllipsoid, __pyx_n_s_bind); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)

#line 21 "pyEllipsoid.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 21 "pyEllipsoid.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)

#line 21 "pyEllipsoid.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 21 "pyEllipsoid.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 21 "pyEllipsoid.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 21 "pyEllipsoid.pyx"
  __pyx_t_1 = 0;

#line 21 "pyEllipsoid.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)

#line 21 "pyEllipsoid.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 21 "pyEllipsoid.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 21 "pyEllipsoid.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8iscecore_pyEllipsoid->tp_dict, __pyx_n_s_bind, __pyx_t_1) < 0) __PYX_ERR(0, 22, __pyx_L1_error)

#line 21 "pyEllipsoid.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 21 "pyEllipsoid.pyx"
  PyType_Modified(__pyx_ptype_8iscecore_pyEllipsoid);

  /* "pyPeg.pyx":21
 *             del self.c_peg
 *     @staticmethod
 *     def bind(pyPeg peg):             # <<<<<<<<<<<<<<
 *         new_peg = pyPeg()
 *         del new_peg.c_peg
 */

#line 21 "pyPeg.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8iscecore_5pyPeg_5bind, NULL, __pyx_n_s_iscecore); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 21, __pyx_L1_error)

#line 21 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 21 "pyPeg.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8iscecore_pyPeg->tp_dict, __pyx_n_s_bind, __pyx_t_1) < 0) __PYX_ERR(5, 21, __pyx_L1_error)

#line 21 "pyPeg.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 21 "pyPeg.pyx"
  PyType_Modified(__pyx_ptype_8iscecore_pyPeg);

  /* "pyPeg.pyx":20
 *         if self.__owner:
 *             del self.c_peg
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def bind(pyPeg peg):
 *         new_peg = pyPeg()
 */

#line 20 "pyPeg.pyx"
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8iscecore_pyPeg, __pyx_n_s_bind); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 21, __pyx_L1_error)

#line 20 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 20 "pyPeg.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 20, __pyx_L1_error)

#line 20 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 20 "pyPeg.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 20 "pyPeg.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 20 "pyPeg.pyx"
  __pyx_t_1 = 0;

#line 20 "pyPeg.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 20, __pyx_L1_error)

#line 20 "pyPeg.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 20 "pyPeg.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 20 "pyPeg.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8iscecore_pyPeg->tp_dict, __pyx_n_s_bind, __pyx_t_1) < 0) __PYX_ERR(5, 21, __pyx_L1_error)

#line 20 "pyPeg.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 20 "pyPeg.pyx"
  PyType_Modified(__pyx_ptype_8iscecore_pyPeg);

  /* "pyPegtrans.pyx":22
 *             del self.c_pegtrans
 *     @staticmethod
 *     def bind(pyPegtrans pgt):             # <<<<<<<<<<<<<<
 *         new_pgt = pyPegtrans()
 *         del new_pgt.c_pegtrans
 */

#line 22 "pyPegtrans.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8iscecore_10pyPegtrans_5bind, NULL, __pyx_n_s_iscecore); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 22, __pyx_L1_error)

#line 22 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 22 "pyPegtrans.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8iscecore_pyPegtrans->tp_dict, __pyx_n_s_bind, __pyx_t_1) < 0) __PYX_ERR(6, 22, __pyx_L1_error)

#line 22 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 22 "pyPegtrans.pyx"
  PyType_Modified(__pyx_ptype_8iscecore_pyPegtrans);

  /* "pyPegtrans.pyx":21
 *         if self.__owner:
 *             del self.c_pegtrans
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def bind(pyPegtrans pgt):
 *         new_pgt = pyPegtrans()
 */

#line 21 "pyPegtrans.pyx"
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8iscecore_pyPegtrans, __pyx_n_s_bind); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 22, __pyx_L1_error)

#line 21 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 21 "pyPegtrans.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 21, __pyx_L1_error)

#line 21 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 21 "pyPegtrans.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 21 "pyPegtrans.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 21 "pyPegtrans.pyx"
  __pyx_t_1 = 0;

#line 21 "pyPegtrans.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 21, __pyx_L1_error)

#line 21 "pyPegtrans.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 21 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 21 "pyPegtrans.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8iscecore_pyPegtrans->tp_dict, __pyx_n_s_bind, __pyx_t_1) < 0) __PYX_ERR(6, 22, __pyx_L1_error)

#line 21 "pyPegtrans.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 21 "pyPegtrans.pyx"
  PyType_Modified(__pyx_ptype_8iscecore_pyPegtrans);

  /* "pyPosition.pyx":22
 *             del self.c_position
 *     @staticmethod
 *     def bind(pyPosition pos):             # <<<<<<<<<<<<<<
 *         new_pos = pyPosition()
 *         del new_pos.c_position
 */

#line 22 "pyPosition.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8iscecore_10pyPosition_5bind, NULL, __pyx_n_s_iscecore); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 22, __pyx_L1_error)

#line 22 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 22 "pyPosition.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8iscecore_pyPosition->tp_dict, __pyx_n_s_bind, __pyx_t_1) < 0) __PYX_ERR(7, 22, __pyx_L1_error)

#line 22 "pyPosition.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 22 "pyPosition.pyx"
  PyType_Modified(__pyx_ptype_8iscecore_pyPosition);

  /* "pyPosition.pyx":21
 *         if self.__owner:
 *             del self.c_position
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def bind(pyPosition pos):
 *         new_pos = pyPosition()
 */

#line 21 "pyPosition.pyx"
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8iscecore_pyPosition, __pyx_n_s_bind); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 22, __pyx_L1_error)

#line 21 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 21 "pyPosition.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 21, __pyx_L1_error)

#line 21 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 21 "pyPosition.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 21 "pyPosition.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 21 "pyPosition.pyx"
  __pyx_t_1 = 0;

#line 21 "pyPosition.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 21, __pyx_L1_error)

#line 21 "pyPosition.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 21 "pyPosition.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 21 "pyPosition.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8iscecore_pyPosition->tp_dict, __pyx_n_s_bind, __pyx_t_1) < 0) __PYX_ERR(7, 22, __pyx_L1_error)

#line 21 "pyPosition.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 21 "pyPosition.pyx"
  PyType_Modified(__pyx_ptype_8iscecore_pyPosition);

  /* "pyOrbit.pyx":22
 *             del self.c_orbit
 *     @staticmethod
 *     def bind(pyOrbit orb):             # <<<<<<<<<<<<<<
 *         new_orb = pyOrbit()
 *         del new_orb.c_orbit
 */

#line 22 "pyOrbit.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8iscecore_7pyOrbit_5bind, NULL, __pyx_n_s_iscecore); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 22, __pyx_L1_error)

#line 22 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 22 "pyOrbit.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8iscecore_pyOrbit->tp_dict, __pyx_n_s_bind, __pyx_t_1) < 0) __PYX_ERR(9, 22, __pyx_L1_error)

#line 22 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 22 "pyOrbit.pyx"
  PyType_Modified(__pyx_ptype_8iscecore_pyOrbit);

  /* "pyOrbit.pyx":21
 *         if self.__owner:
 *             del self.c_orbit
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def bind(pyOrbit orb):
 *         new_orb = pyOrbit()
 */

#line 21 "pyOrbit.pyx"
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8iscecore_pyOrbit, __pyx_n_s_bind); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 22, __pyx_L1_error)

#line 21 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 21 "pyOrbit.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 21, __pyx_L1_error)

#line 21 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 21 "pyOrbit.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 21 "pyOrbit.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 21 "pyOrbit.pyx"
  __pyx_t_1 = 0;

#line 21 "pyOrbit.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 21, __pyx_L1_error)

#line 21 "pyOrbit.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 21 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 21 "pyOrbit.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8iscecore_pyOrbit->tp_dict, __pyx_n_s_bind, __pyx_t_1) < 0) __PYX_ERR(9, 22, __pyx_L1_error)

#line 21 "pyOrbit.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 21 "pyOrbit.pyx"
  PyType_Modified(__pyx_ptype_8iscecore_pyOrbit);

  /* "pyPoly1d.pyx":21
 *             del self.c_poly1d
 *     @staticmethod
 *     def bind(pyPoly1d poly):             # <<<<<<<<<<<<<<
 *         new_poly = pyPoly1d()
 *         del new_poly.c_poly1d
 */

#line 21 "pyPoly1d.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8iscecore_8pyPoly1d_5bind, NULL, __pyx_n_s_iscecore); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 21, __pyx_L1_error)

#line 21 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 21 "pyPoly1d.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8iscecore_pyPoly1d->tp_dict, __pyx_n_s_bind, __pyx_t_1) < 0) __PYX_ERR(10, 21, __pyx_L1_error)

#line 21 "pyPoly1d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 21 "pyPoly1d.pyx"
  PyType_Modified(__pyx_ptype_8iscecore_pyPoly1d);

  /* "pyPoly1d.pyx":20
 *         if self.__owner:
 *             del self.c_poly1d
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def bind(pyPoly1d poly):
 *         new_poly = pyPoly1d()
 */

#line 20 "pyPoly1d.pyx"
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8iscecore_pyPoly1d, __pyx_n_s_bind); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 21, __pyx_L1_error)

#line 20 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 20 "pyPoly1d.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 20, __pyx_L1_error)

#line 20 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 20 "pyPoly1d.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 20 "pyPoly1d.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 20 "pyPoly1d.pyx"
  __pyx_t_1 = 0;

#line 20 "pyPoly1d.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 20, __pyx_L1_error)

#line 20 "pyPoly1d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 20 "pyPoly1d.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 20 "pyPoly1d.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8iscecore_pyPoly1d->tp_dict, __pyx_n_s_bind, __pyx_t_1) < 0) __PYX_ERR(10, 21, __pyx_L1_error)

#line 20 "pyPoly1d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 20 "pyPoly1d.pyx"
  PyType_Modified(__pyx_ptype_8iscecore_pyPoly1d);

  /* "pyPoly2d.pyx":23
 *             del self.c_poly2d
 *     @staticmethod
 *     def bind(pyPoly2d poly):             # <<<<<<<<<<<<<<
 *         new_poly = pyPoly2d()
 *         del new_poly.c_poly2d
 */

#line 23 "pyPoly2d.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8iscecore_8pyPoly2d_5bind, NULL, __pyx_n_s_iscecore); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 23, __pyx_L1_error)

#line 23 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 23 "pyPoly2d.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8iscecore_pyPoly2d->tp_dict, __pyx_n_s_bind, __pyx_t_1) < 0) __PYX_ERR(11, 23, __pyx_L1_error)

#line 23 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 23 "pyPoly2d.pyx"
  PyType_Modified(__pyx_ptype_8iscecore_pyPoly2d);

  /* "pyPoly2d.pyx":22
 *         if self.__owner:
 *             del self.c_poly2d
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def bind(pyPoly2d poly):
 *         new_poly = pyPoly2d()
 */

#line 22 "pyPoly2d.pyx"
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8iscecore_pyPoly2d, __pyx_n_s_bind); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 23, __pyx_L1_error)

#line 22 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 22 "pyPoly2d.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 22, __pyx_L1_error)

#line 22 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 22 "pyPoly2d.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 22 "pyPoly2d.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 22 "pyPoly2d.pyx"
  __pyx_t_1 = 0;

#line 22 "pyPoly2d.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 22, __pyx_L1_error)

#line 22 "pyPoly2d.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 22 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 22 "pyPoly2d.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8iscecore_pyPoly2d->tp_dict, __pyx_n_s_bind, __pyx_t_1) < 0) __PYX_ERR(11, 23, __pyx_L1_error)

#line 22 "pyPoly2d.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 22 "pyPoly2d.pyx"
  PyType_Modified(__pyx_ptype_8iscecore_pyPoly2d);

  /* "iscecore.pyx":1
 * #cython: language_level=3             # <<<<<<<<<<<<<<
 * #
 * # Author: Joshua Cohen
 */

#line 1 "iscecore.pyx"
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(13, 1, __pyx_L1_error)

#line 1 "iscecore.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1 "iscecore.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(13, 1, __pyx_L1_error)

#line 1 "iscecore.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_float_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_float_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

#line 45 "vector.from_py"


#line 45 "vector.from_py"
  /*--- Wrapped vars code ---*/

#line 45 "vector.from_py"


#line 45 "vector.from_py"
  goto __pyx_L0;

#line 45 "vector.from_py"
  __pyx_L1_error:;

#line 45 "vector.from_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 45 "vector.from_py"
  __Pyx_XDECREF(__pyx_t_2);

#line 45 "vector.from_py"
  if (__pyx_m) {

#line 45 "vector.from_py"
    if (__pyx_d) {

#line 45 "vector.from_py"
      __Pyx_AddTraceback("init iscecore", 0, __pyx_lineno, __pyx_filename);

#line 45 "vector.from_py"
    }

#line 45 "vector.from_py"
    Py_DECREF(__pyx_m); __pyx_m = 0;

#line 45 "vector.from_py"
  } else if (!PyErr_Occurred()) {

#line 45 "vector.from_py"
    PyErr_SetString(PyExc_ImportError, "init iscecore");

#line 45 "vector.from_py"
  }

#line 45 "vector.from_py"
  __pyx_L0:;

#line 45 "vector.from_py"
  __Pyx_RefNannyFinishContext();

#line 45 "vector.from_py"
  #if CYTHON_PEP489_MULTI_PHASE_INIT

#line 45 "vector.from_py"
  return (__pyx_m != NULL) ? 0 : -1;

#line 45 "vector.from_py"
  #elif PY_MAJOR_VERSION >= 3

#line 45 "vector.from_py"
  return __pyx_m;

#line 45 "vector.from_py"
  #else

#line 45 "vector.from_py"
  return;

#line 45 "vector.from_py"
  #endif

#line 45 "vector.from_py"
}

#line 1 "cython_utility"

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((unsigned)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* GetModuleGlobalName */
  static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* ExtTypeTest */
    static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* BufferIndexError */
    static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* PyFunctionFastCall */
    #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyCFunctionFastCall */
    #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* SaveResetException */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if PY_VERSION_HEX >= 0x030700A2
    *type = tstate->exc_state.exc_type;
    *value = tstate->exc_state.exc_value;
    *tb = tstate->exc_state.exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A2
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = type;
    tstate->exc_state.exc_value = value;
    tstate->exc_state.exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
    #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if PY_VERSION_HEX >= 0x030700A2
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = local_type;
    tstate->exc_state.exc_value = local_value;
    tstate->exc_state.exc_traceback = local_tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SetItemInt */
      static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyObjectCallMethO */
        #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
        #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
        #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyIntBinop */
          #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyObjectCallMethod1 */
          static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = NULL;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
    goto done;
done:
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
    result = __Pyx__PyObject_CallMethod1(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* append */
          static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* RaiseTooManyValuesToUnpack */
          static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
          static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
          static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* PyErrExceptionMatches */
          #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* CallNextTpTraverse */
          static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
          static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* SetupReduce */
          static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* Import */
          static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* GetNameInClass */
          static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    return __Pyx_GetModuleGlobalName(name);
}
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
          #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
          static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
          #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
        else if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view);
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


          /* CIntFromPyVerify */
          #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* Declarations */
          #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
          #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0, -1);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
          #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
          #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0, -1);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
          static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
          static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* FastTypeChecks */
          #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
          static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
          #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
          #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
          static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            PyErr_Clear();
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
