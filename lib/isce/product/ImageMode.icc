//-*- C++ -*-
//-*- coding: utf-8 -*-

#if !defined(ISCE_PRODUCT_IMAGEMODE_ICC)
#error "ImageMode.icc is an implementation detail of class ImageMode."
#endif

/** @param[in]              Mode type. */
isce::product::ImageMode::
ImageMode(const std::string & inputModeType) {
    // Verify and set mode type
    modeType(inputModeType);
}

/** @param[in]              isce::product::ImageMode */
isce::product::ImageMode &
isce::product::ImageMode::
operator=(const isce::product::ImageMode & mode) {
    // Simply assign data members to self
    _modeType = mode.modeType();
    _prf = mode.prf();
    _rangeBandwidth = mode.rangeBandwidth();
    _wavelength = mode.wavelength();
    _pulseDuration = mode.pulseDuration();
    _startingRange = mode.startingRange();
    _rangePixelSpacing = mode.rangePixelSpacing();
    _startAzTime = mode.startAzTime():
    _endAzTime = mode.endAzTime();
}

/** @param[out]             Mode type. */
std::string
isce::product::ImageMode::
modeType() const {
    return _modeType;
}

/** @param[in]              Mode type. */
void
isce::product::ImageMode::
modeType(const std::string & mtype) {
    // Verify
    if (mtype.compare("aux") != 0 && mtype.compare("primary") != 0) {
        pyre::journal::error_t error("isce.product.ImageMode.modeType");
        error
            << pyre::journal::at(__HERE__)
            << "Trying to set an unsupported mode type " << mtype
            << pyre::journal::endl;
    }
    // Now set
    _modeType = mtype;
} 

/** @param[in]              polarization */
std::string
isce::product::ImageMode::
dataPath(const std::string & pol) {
    // Construct HDF5 path using the stored mode type
    std::string path = "/science/complex_imagery/" + _modeType + "_mode/" + pol;
    // Make sure everything is lowercase (does not work for unicode!)
    std::transform(path.begin(), path.end(), path.begin(), std::tolower);
    // Done
    return path;
}
            
// end of file
