//-*- C++ -*-
//-*- coding: utf-8 -*-
//
// Author: Brian Hawkins
// Copyright 2019
//

#if !defined(ISCE_CORE_INTERP1D_ICC)
#error "Interp1d.icc is an implementation detail of class Interp1d"
#endif


template <typename TK, typename TD>
inline
TD
isce::core::interp1d(isce::core::Kernel<TK> &kernel,
                     const std::valarray<TD> &x, double t)
{
    int _width = int(ceil(kernel.width()));
    long i0 = 0;
    if (_width % 2 == 0) {
        i0 = (long) ceil(t);
    } else {
        i0 = (long) round(t);
    }
    long low = i0 - _width/2;  // integer division implicit floor()
    long high = low + _width;
    typename std::common_type<TD,TK>::type sum = 0;
    if ((low < 0) || (high >= x.size())) {
        // XXX log/throw error?
        return sum;
    }
    for (long i=low; i<high; i++) {
        double ti = i - t;
        TK w = kernel(ti);
        sum += w * x[i];
    }
    return sum;
}
