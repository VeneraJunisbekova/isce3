//-*- C++ -*-
//-*- coding: utf-8 -*-
//
// Author: ml
// Original code: Joshua Cohen
// Copyright 2018
//

#if !defined(ISCE_CORE_RASTER_ICC)
#error "Raster.icc is an implementation detail of class Raster"
#endif


// Copy constructor
inline isce::core::Raster& isce::core::Raster::operator=(const Raster &rhs) {
  _dataset = rhs._dataset; // weak-copy pointer
  _access  = rhs._access;
  _dataset->Reference();   // increment GDALDataset reference counter
  return *this;
}


// Construct a Raster object referring to new file assuming default driver, float type and one band.
template<typename T>
isce::core::Raster::Raster(const std::string & fname,       // filename of new file to be created
			   const std::vector<T> & buffer,   // buffer used to infer width and type
			   size_t length) :                 // length of raster
  isce::core::Raster(fname, buffer.size(), length, 1, _gdts.at(typeid(T))) {}

/* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
 *                                          PIXEL OPERATIONS
 * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
 */
// Get or set the value from/to buffer given x/y pixel location in band.
template<typename T>
void isce::core::Raster::getSetValue(T & buffer,           // i/o buffer of type T
				     size_t xidx,          // line location within band (1-indexed)
				     size_t yidx,          // column location within band (1-indexed)
				     size_t band,          // band number (1-indexed)
				     GDALRWFlag iodir) {   // i/o direction (GF_Read or GF_Write) 

  if (_gdts.count(typeid(T))) { // buffer type is supported by GDAL
    auto iostat = _dataset->GetRasterBand(band)->RasterIO(iodir, xidx, yidx, 1, 1, &buffer,
							  1, 1, _gdts.at(typeid(T)), 0, 0);

    if (iostat != CPLE_None) // RasterIO returned error
      std::cout << "In isce::core::Raster::getSetValue() - error in RasterIO." << std::endl;
  }
  else 
    std::cout << "In isce::core::Raster::get/setValue() - Buffer datatype " << typeid(T).name() <<
      " is not mappable to a GDALDataType." << std::endl;
}


// Get value from given x/y positions in given band 
template<typename T>
void isce::core::Raster::getValue(T &buffer, size_t xidx, size_t yidx, size_t band) {
  getSetValue(buffer, xidx, yidx, band, GF_Read);
}


// Get value from given x/y positions in band 1 
template<typename T>
void isce::core::Raster::getValue(T &buffer, size_t xidx, size_t yidx) {
  getValue(buffer, xidx, yidx, 1, GF_Read);
}


// Set value at given x/y positions in given band
template<typename T>
void isce::core::Raster::setValue(T &buffer, size_t xidx, size_t yidx, size_t band) {
  getSetValue(buffer, xidx, yidx, band, GF_Write);
}


// Set value at given x/y positions in band 1
template<typename T>
void isce::core::Raster::setValue(T &buffer, size_t xidx, size_t yidx) {
  setValue(buffer, xidx, yidx, 1, GF_Write);
}



/* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
 *                                          LINE OPERATIONS
 * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
 */
// Get or set a line of data for given line position in band. 
template<typename T>
void isce::core::Raster::getSetLine(T *buffer,          // i/o buffer of type T
				    size_t xidx,        // line location within band (1-indexed)
				    size_t iowidth,     // width of i/o buffer 
				    size_t band,        // band number (1-indexed)
				    GDALRWFlag iodir) { // i/o direction (GF_Read or GF_Write)

  if (_gdts.count(typeid(T))) { // buffer type is supported by GDAL
    size_t rdwidth = std::min(iowidth, width()); // read the requested iowidth up to width()
    auto iostat = _dataset->GetRasterBand(band)->RasterIO(iodir, 0, xidx, rdwidth, 1, buffer,
							  rdwidth, 1, _gdts.at(typeid(T)), 0, 0);
    
    if (iostat != CPLE_None) // RasterIO returned errors
      std::cout << "In isce::core::Raster::get/setLine() - error in RasterIO." << std::endl;
  }
  else
    std::cout << "In isce::core::Raster::get/setLine() - Buffer datatype " << typeid(T).name() <<
      " is not mappable to a GDALDataType." << std::endl;
}


// Get a line of data for given line position and band to a buffer of width iowidth. 
template<typename T>
void isce::core::Raster::getLine(T *buffer, size_t xidx, size_t iowidth, size_t band) {
  getSetLine(buffer, xidx, iowidth, band, GF_Read);
}


// Get a line of data for given line position in band 1 to a buffer of width iowidth. 
template<typename T>
void isce::core::Raster::getLine(T *buffer, size_t xidx, size_t iowidth) {
  getLine(buffer, xidx, iowidth, 1);
}


// Get a line of data for given line position and band to std::vector. 
template<typename T>
void isce::core::Raster::getLine(std::vector<T> &buffer, size_t xidx, size_t band) {
  getLine(buffer.data(), xidx, buffer.size(), band);
}


// Get a line of data for given line position in band 1 to std::vector. 
template<typename T>
void isce::core::Raster::getLine(std::vector<T> &buffer, size_t xidx) {
  getLine(buffer.data(), xidx, buffer.size(), 1);
}


// Set a line of data for given line position and band from a std::valarray. 
template<typename T>
void isce::core::Raster::getLine(std::valarray<T> &buffer, size_t xidx, size_t band) {
  getLine(&buffer[0], xidx, buffer.size(), band);
}


// Set a line of data for given line position in band 1 from a std::valarray. 
template<typename T>
void isce::core::Raster::getLine(std::valarray<T> &buffer, size_t xidx) {
  getLine(&buffer[0], xidx, buffer.size(), 1);
}

// Set a line of data for given line position and band from a buffer of width iowidth. 
template<typename T>
void isce::core::Raster::setLine(T* buffer, size_t xidx, size_t iowidth, size_t band) {
  getSetLine(buffer, xidx, iowidth, band, GF_Write);
}


// Set a line of data for given line position in band 1 from a buffer of width iowidth. 
template<typename T>
void isce::core::Raster::setLine(T* buffer, size_t xidx, size_t iowidth) {
  setLine(buffer, xidx, iowidth, 1);
}


// Set a line of data for given line position and band from a std::vector. 
template<typename T>
void isce::core::Raster::setLine(std::vector<T> &buffer, size_t xidx, size_t band) {
  setLine(buffer.data(), xidx, buffer.size(), band);
}


// Set a line of data for given line position in band 1 from a std::vector. 
template<typename T>
void isce::core::Raster::setLine(std::vector<T> &buffer, size_t xidx) {
  setLine(buffer.data(), xidx, buffer.size(), 1);
}


// Set a line of data for given line position and band from a std::valarray. 
template<typename T>
void isce::core::Raster::setLine(std::valarray<T> &buffer, size_t xidx, size_t band) {
  setLine(&buffer[0], xidx, buffer.size(), band);
}


// Set a line of data for given line position in band 1 from a std::valarray. 
template<typename T>
void isce::core::Raster::setLine(std::valarray<T> &buffer, size_t xidx) {
  setLine(&buffer[0], xidx, buffer.size(), 1);
}


/* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
 *                                      BLOCK OPERATIONS
 * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
 */
// Get or set a 2D data block of width iowidth and length iolength given xidx/yidx positions in band
// and to/from 1D contigous buffer of width iowidth*iolength. 
template<typename T>
void isce::core::Raster::getSetBlock(T *buffer,            // i/o buffer of size iowidth*iolength
				     size_t xidx,          // line location within band (1-indexed)
				     size_t yidx,          // column location within band (1-indexed)
				     size_t iowidth,       // requested width of block of data
				     size_t iolength,      // requested length of block of data
				     size_t band,          // band number (1-indexed)
				     GDALRWFlag iodir) {   // i/o direction (GF_Read or GF_Write)
  
  if (_gdts.count(typeid(T))) { // buffer type is supported by GDAL
    auto iostat = _dataset->GetRasterBand(band)->RasterIO(iodir, xidx, yidx, iowidth,
							  iolength, buffer, iowidth,
							  iolength, _gdts.at(typeid(T)),
							  0, 0);
    
    if (iostat != CPLE_None) // RasterIO returned errors
      std::cout << "In isce::core::Raster::get/setValue() - error in RasterIO." << std::endl;
  }
  else
    std::cout << "In isce::core::Raster::get/setBlock() - Buffer datatype " << typeid(T).name() <<
      " is not mappable to a GDALDataType." << std::endl;
}


// Get a block of data for given x/y position and size in band to a buffer. 
template<typename T>
void isce::core::Raster::getBlock(T *buffer, size_t xidx, size_t yidx,
				  size_t iowidth, size_t iolength, size_t band) {
  getSetBlock(buffer, xidx, yidx, iolength, iowidth, band, GF_Read);
}


// Get a block of data starting from given x/y position and size in band 1 to a buffer. 
template<typename T>
void isce::core::Raster::getBlock(T *buffer, size_t xidx, size_t yidx,
				  size_t iowidth, size_t iolength) {
  getSetBlock(buffer, xidx, yidx, iolength, iowidth, 1, GF_Read);
}


// Get a block of data starting from given x/y position and size in band to std::vector. 
template<typename T>
void isce::core::Raster::getBlock(std::vector<T> &buffer, size_t xidx, size_t yidx,
				  size_t iowidth, size_t iolength, size_t band) {
  
  if ((iolength * iowidth) <= buffer.size()) { // buffer is larger or equal than requested block
    getBlock(buffer.data(), xidx, yidx, iolength, iowidth, band);
    
    if ((iolength * iowidth) < buffer.size())  // buffer is larger than requested block
      std::cout << "WARNING: In isce::core::Raster::getBlock() - Requested fewer elements than buffer size. " << std::endl;
    
  } else  // buffer is smaller than requested block
    throw std::length_error("In isce::core::Raster::getBlock() - Requested more elements than buffer size.");
}


// Get a block of data starting from given x/y position and size in band 1 to std::vector. 
template<typename T>
void isce::core::Raster::getBlock(std::vector<T> &buffer, size_t xidx, size_t yidx,
				  size_t iowidth, size_t iolength) {
  getBlock(buffer, xidx, yidx, iolength, iowidth, 1);
}

// Get a block of data starting from given x/y position and size in band to std::valarray. 
template<typename T>
void isce::core::Raster::getBlock(std::valarray<T> &buffer, size_t xidx, size_t yidx,
				  size_t iowidth, size_t iolength, size_t band) {
  
  if ((iolength * iowidth) <= buffer.size()) { // buffer is larger or equal than requested block
    getBlock(&buffer[0], xidx, yidx, iolength, iowidth, band);
    
    if ((iolength * iowidth) < buffer.size())  // buffer is larger than requested block
      std::cout << "WARNING: In isce::core::Raster::getBlock() - Requested fewer elements than buffer size. " << std::endl;
    
  } else  // buffer is smaller than requested block
    throw std::length_error("In isce::core::Raster::getBlock() - Requested more elements than buffer size.");
}


// Get a block of data starting from given x/y position and size in band 1 to std::valarray. 
template<typename T>
void isce::core::Raster::getBlock(std::valarray<T> &buffer, size_t xidx, size_t yidx,
				  size_t iowidth, size_t iolength) {
  getBlock(buffer, xidx, yidx, iolength, iowidth, 1);
}


// Set a block of data for given x/y position and size in band from a buffer. 
template<typename T>
void isce::core::Raster::setBlock(T *buffer, size_t xidx, size_t yidx,
				  size_t iowidth, size_t iolength, size_t band) {
  getSetBlock(buffer, xidx, yidx, iolength, iowidth, band, GF_Write);
}


// Set a block of data for given x/y position and size in band 1 from a buffer. 
template<typename T>
void isce::core::Raster::setBlock(T *buffer, size_t xidx, size_t yidx,
				  size_t iowidth, size_t iolength) {
  getSetBlock(buffer, xidx, yidx, iolength, iowidth, 1, GF_Write);
}


// Set a block of data for given x/y position and size in band from a std::vector. 
template<typename T>
void isce::core::Raster::setBlock(std::vector<T> &buffer, size_t xidx, size_t yidx,
				  size_t iowidth, size_t iolength, size_t band) {
  
  if ((iolength * iowidth) <= buffer.size()) { // buffer is larger or equal than requested block
    setBlock(buffer.data(), xidx, yidx, iolength, iowidth, band);
    
    if ((iolength * iowidth) < buffer.size())  // buffer is larger than requested block
      std::cout << "WARNING: In isce::core::Raster::getBlock() - Requested fewer elements than buffer size. " << std::endl;
    
  } else  // buffer is smaller than requested block
    throw std::length_error("In isce::core::Raster::getBlock() - Requested more elements than buffer size.");
}


// Set a block of data for given x/y position and size in band 1 from a std::vector. 
template<typename T>
void isce::core::Raster::setBlock(std::vector<T> &buffer, size_t xidx, size_t yidx,
				  size_t iowidth, size_t iolength) {
  setBlock(buffer, xidx, yidx, iolength, iowidth, 1);
}


// Set a block of data for given x/y position and size in band from a std::vector. 
template<typename T>
void isce::core::Raster::setBlock(std::valarray<T> &buffer, size_t xidx, size_t yidx,
				  size_t iowidth, size_t iolength, size_t band) {
  
  if ((iolength * iowidth) <= buffer.size()) { // buffer is larger or equal than requested block
    setBlock(&buffer[0], xidx, yidx, iolength, iowidth, band);
    
    if ((iolength * iowidth) < buffer.size())  // buffer is larger than requested block
      std::cout << "WARNING: In isce::core::Raster::getBlock() - Requested fewer elements than buffer size. " << std::endl;
    
  } else  // buffer is smaller than requested block
    throw std::length_error("In isce::core::Raster::getBlock() - Requested more elements than buffer size.");
}


// Set a block of data for given x/y position and size in band 1 from a std::vector. 
template<typename T>
void isce::core::Raster::setBlock(std::valarray<T> &buffer, size_t xidx, size_t yidx,
				  size_t iowidth, size_t iolength) {
  setBlock(buffer, xidx, yidx, iolength, iowidth, 1);
}
