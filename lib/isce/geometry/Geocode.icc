//-*- C++ -*-
//-*- coding: utf-8 -*-
//
// Author: Heresh Fattahi
// Copyright 2019-

#if !defined(ISCE_GEOMETRY_GEOCODE_ICC)
#error "Geocode.icc is an implementation detail of class Geocode"
#endif

void isce::geometry::Geocode::
geoGrid(double geoGridStartX, double geoGridStartY,
        double geoGridSpacingX, double geoGridSpacingY,
        double geoGridEndX, double geoGridEndY,
        int epsgcode) {
   
    int length = 1 + (geoGridEndY - geoGridStartY) /
                    geoGridSpacingY;

    int width = 1 + (geoGridEndX - geoGridStartX) /
                    geoGridSpacingX;

    geoGrid(geoGridStartX, geoGridStartY,
        geoGridSpacingX, geoGridSpacingY,
        length, width, epsgcode);

}

void isce::geometry::Geocode::
geoGrid(double geoGridStartX, double geoGridStartY,
        double geoGridSpacingX, double geoGridSpacingY,
        int length, int width, int epsgcode) {

    // the starting coordinate of the output geocoded grid in X direction 
    _geoGridStartX = geoGridStartX;

    // the starting coordinate of the output geocoded grid in Y direction
    _geoGridStartY = geoGridStartY;

    // spacing of the output geocoded grid in X
    _geoGridSpacingX = geoGridSpacingX;

    // spacing of the output geocoded grid in Y
    _geoGridSpacingY = geoGridSpacingY;

    // number of lines (rows) in the geocoded grid (Y direction)
    _geoGridLength = length;

    // number of columns in the geocoded grid (Y direction)
    _geoGridWidth = width;

    // Save the EPSG code
    _epsgOut = epsgcode;

    // Initialize the projection
    _proj = isce::core::createProj(epsgcode);

}


void isce::geometry::Geocode::
radarGrid(isce::core::LUT1d<double> doppler,
            isce::core::DateTime azimuthStartTime,
            double azimuthTimeInterval,
            int radarGridLength,
            double startingRange,
            double rangeSpacing,
            int radarGridWidth){

    _doppler = doppler;

    _azimuthStartTime = azimuthStartTime;

    _azimuthTimeInterval = azimuthTimeInterval;

    _radarGridLength = radarGridLength;

    _startingRange = startingRange;

    _rangeSpacing = rangeSpacing;

    _radarGridWidth = radarGridWidth;

}



void isce::geometry::Geocode::
interpolator(isce::core::dataInterpMethod method) {

      _interp = isce::core::createInterpolator<float>(method);

}

void isce::geometry::Geocode::
orbit(isce::core::Orbit& orbit, isce::core::DateTime refEpoch) {

    _orbit = orbit;

    _orbit.updateUTCTimes(_refEpoch);

}

void isce::geometry::Geocode::
orbitInterploationMethod(isce::core::orbitInterpMethod orbitMethod) {

    _orbitMethod = orbitMethod;

}

void isce::geometry::Geocode::
ellipsoid(isce::core::Ellipsoid& ellipsoid) {

    _ellipsoid = ellipsoid;

}

void isce::geometry::Geocode::
mode(isce::product::ImageMode& mode) {

    _mode = mode;

}

void isce::geometry::Geocode::
projection(isce::core::ProjectionBase * proj) {

    _proj = proj;

}

void isce::geometry::Geocode::
thersholdGeo2rdr(double threshold) {

    _threshold = threshold;

}

void isce::geometry::Geocode::
numiterGeo2rdr(int numiter) {

    _numiter = numiter;

}

void isce::geometry::Geocode::
linesPerBlock(size_t linesPerBlock) {

    _linesPerBlock = linesPerBlock;

}

void isce::geometry::Geocode::
demBlockMargin(double demBlockMargin) {

    _demBlockMargin = demBlockMargin;

}

void isce::geometry::Geocode::
radarBlockMargin(int radarBlockMargin) {

    _radarBlockMargin = radarBlockMargin;

}
//interpolator
//void isce::geometry::Geocode::
//interpolator(isce::core::Interpolator<float> * interp) {

//    _interp = interp;

//}
